// Generated from /Users/xuxiaoqi/Documents/work/daishu-code/dt-sql-parser/src/grammar/pgsql/PostgreSQLParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { PostgreSQLParserListener } from "./PostgreSQLParserListener";
import { PostgreSQLParserVisitor } from "./PostgreSQLParserVisitor";


export class PostgreSQLParser extends Parser {
	public static readonly Dollar = 1;
	public static readonly OPEN_PAREN = 2;
	public static readonly CLOSE_PAREN = 3;
	public static readonly OPEN_BRACKET = 4;
	public static readonly CLOSE_BRACKET = 5;
	public static readonly COMMA = 6;
	public static readonly SEMI = 7;
	public static readonly COLON = 8;
	public static readonly STAR = 9;
	public static readonly EQUAL = 10;
	public static readonly DOT = 11;
	public static readonly PLUS = 12;
	public static readonly MINUS = 13;
	public static readonly SLASH = 14;
	public static readonly CARET = 15;
	public static readonly LT = 16;
	public static readonly GT = 17;
	public static readonly LESS_LESS = 18;
	public static readonly GREATER_GREATER = 19;
	public static readonly COLON_EQUALS = 20;
	public static readonly LESS_EQUALS = 21;
	public static readonly EQUALS_GREATER = 22;
	public static readonly GREATER_EQUALS = 23;
	public static readonly DOT_DOT = 24;
	public static readonly NOT_EQUALS = 25;
	public static readonly TYPECAST = 26;
	public static readonly PERCENT = 27;
	public static readonly PARAM = 28;
	public static readonly Operator = 29;
	public static readonly KW_ALL = 30;
	public static readonly KW_ANALYSE = 31;
	public static readonly KW_ANALYZE = 32;
	public static readonly KW_AND = 33;
	public static readonly KW_ANY = 34;
	public static readonly KW_ARRAY = 35;
	public static readonly KW_AS = 36;
	public static readonly KW_ASC = 37;
	public static readonly KW_ASYMMETRIC = 38;
	public static readonly KW_BOTH = 39;
	public static readonly KW_CASE = 40;
	public static readonly KW_CAST = 41;
	public static readonly KW_CHECK = 42;
	public static readonly KW_COLLATE = 43;
	public static readonly KW_COLUMN = 44;
	public static readonly KW_CONSTRAINT = 45;
	public static readonly KW_CREATE = 46;
	public static readonly KW_CURRENT_CATALOG = 47;
	public static readonly KW_CURRENT_DATE = 48;
	public static readonly KW_CURRENT_ROLE = 49;
	public static readonly KW_CURRENT_TIME = 50;
	public static readonly KW_CURRENT_TIMESTAMP = 51;
	public static readonly KW_CURRENT_USER = 52;
	public static readonly KW_DEFAULT = 53;
	public static readonly KW_DEFERRABLE = 54;
	public static readonly KW_DESC = 55;
	public static readonly KW_DISTINCT = 56;
	public static readonly KW_DO = 57;
	public static readonly KW_ELSE = 58;
	public static readonly KW_EXCEPT = 59;
	public static readonly KW_FALSE = 60;
	public static readonly KW_FETCH = 61;
	public static readonly KW_FOR = 62;
	public static readonly KW_FOREIGN = 63;
	public static readonly KW_FROM = 64;
	public static readonly KW_GRANT = 65;
	public static readonly KW_GROUP = 66;
	public static readonly KW_HAVING = 67;
	public static readonly KW_IN = 68;
	public static readonly KW_INITIALLY = 69;
	public static readonly KW_INTERSECT = 70;
	public static readonly KW_INTO = 71;
	public static readonly KW_LATERAL = 72;
	public static readonly KW_LEADING = 73;
	public static readonly KW_LIMIT = 74;
	public static readonly KW_LOCALTIME = 75;
	public static readonly KW_LOCALTIMESTAMP = 76;
	public static readonly KW_NOT = 77;
	public static readonly KW_NULL = 78;
	public static readonly KW_OFFSET = 79;
	public static readonly KW_ON = 80;
	public static readonly KW_ONLY = 81;
	public static readonly KW_OR = 82;
	public static readonly KW_ORDER = 83;
	public static readonly KW_PLACING = 84;
	public static readonly KW_PRIMARY = 85;
	public static readonly KW_REFERENCES = 86;
	public static readonly KW_RETURNING = 87;
	public static readonly KW_SELECT = 88;
	public static readonly KW_SESSION_USER = 89;
	public static readonly KW_SOME = 90;
	public static readonly KW_SYMMETRIC = 91;
	public static readonly KW_TABLE = 92;
	public static readonly KW_THEN = 93;
	public static readonly KW_TO = 94;
	public static readonly KW_TRAILING = 95;
	public static readonly KW_TRUE = 96;
	public static readonly KW_UNION = 97;
	public static readonly KW_UNIQUE = 98;
	public static readonly KW_USER = 99;
	public static readonly KW_USING = 100;
	public static readonly KW_VARIADIC = 101;
	public static readonly KW_WHEN = 102;
	public static readonly KW_WHERE = 103;
	public static readonly KW_WINDOW = 104;
	public static readonly KW_WITH = 105;
	public static readonly KW_AUTHORIZATION = 106;
	public static readonly KW_BINARY = 107;
	public static readonly KW_COLLATION = 108;
	public static readonly KW_CONCURRENTLY = 109;
	public static readonly KW_CROSS = 110;
	public static readonly KW_CURRENT_SCHEMA = 111;
	public static readonly KW_FREEZE = 112;
	public static readonly KW_FULL = 113;
	public static readonly KW_ILIKE = 114;
	public static readonly KW_INNER = 115;
	public static readonly KW_IS = 116;
	public static readonly KW_ISNULL = 117;
	public static readonly KW_JOIN = 118;
	public static readonly KW_LEFT = 119;
	public static readonly KW_LIKE = 120;
	public static readonly KW_NATURAL = 121;
	public static readonly KW_NOTNULL = 122;
	public static readonly KW_OUTER = 123;
	public static readonly KW_OVER = 124;
	public static readonly KW_OVERLAPS = 125;
	public static readonly KW_RIGHT = 126;
	public static readonly KW_SIMILAR = 127;
	public static readonly KW_VERBOSE = 128;
	public static readonly KW_ABORT = 129;
	public static readonly KW_ABSOLUTE = 130;
	public static readonly KW_ACCESS = 131;
	public static readonly KW_ACTION = 132;
	public static readonly KW_ADD = 133;
	public static readonly KW_ADMIN = 134;
	public static readonly KW_AFTER = 135;
	public static readonly KW_AGGREGATE = 136;
	public static readonly KW_ALSO = 137;
	public static readonly KW_ALTER = 138;
	public static readonly KW_ALWAYS = 139;
	public static readonly KW_ASSERTION = 140;
	public static readonly KW_ASSIGNMENT = 141;
	public static readonly KW_AT = 142;
	public static readonly KW_ATTRIBUTE = 143;
	public static readonly KW_BACKWARD = 144;
	public static readonly KW_BEFORE = 145;
	public static readonly KW_BEGIN = 146;
	public static readonly KW_BY = 147;
	public static readonly KW_CACHE = 148;
	public static readonly KW_CALLED = 149;
	public static readonly KW_CASCADE = 150;
	public static readonly KW_CASCADED = 151;
	public static readonly KW_CATALOG = 152;
	public static readonly KW_CHAIN = 153;
	public static readonly KW_CHARACTERISTICS = 154;
	public static readonly KW_CHECKPOINT = 155;
	public static readonly KW_CLASS = 156;
	public static readonly KW_CLOSE = 157;
	public static readonly KW_CLUSTER = 158;
	public static readonly KW_COMMENT = 159;
	public static readonly KW_COMMENTS = 160;
	public static readonly KW_COMMIT = 161;
	public static readonly KW_COMMITTED = 162;
	public static readonly KW_CONFIGURATION = 163;
	public static readonly KW_CONNECTION = 164;
	public static readonly KW_CONSTRAINTS = 165;
	public static readonly KW_CONTENT = 166;
	public static readonly KW_CONTINUE = 167;
	public static readonly KW_CONVERSION = 168;
	public static readonly KW_COPY = 169;
	public static readonly KW_COST = 170;
	public static readonly KW_CSV = 171;
	public static readonly KW_CURSOR = 172;
	public static readonly KW_CYCLE = 173;
	public static readonly KW_DATA = 174;
	public static readonly KW_DATABASE = 175;
	public static readonly KW_DAY = 176;
	public static readonly KW_DEALLOCATE = 177;
	public static readonly KW_DECLARE = 178;
	public static readonly KW_DEFAULTS = 179;
	public static readonly KW_DEFERRED = 180;
	public static readonly KW_DEFINER = 181;
	public static readonly KW_DELETE = 182;
	public static readonly KW_DELIMITER = 183;
	public static readonly KW_DELIMITERS = 184;
	public static readonly KW_DICTIONARY = 185;
	public static readonly KW_DISABLE = 186;
	public static readonly KW_DISCARD = 187;
	public static readonly KW_DOCUMENT = 188;
	public static readonly KW_DOMAIN = 189;
	public static readonly KW_DOUBLE = 190;
	public static readonly KW_DROP = 191;
	public static readonly KW_EACH = 192;
	public static readonly KW_ENABLE = 193;
	public static readonly KW_ENCODING = 194;
	public static readonly KW_ENCRYPTED = 195;
	public static readonly KW_ENUM = 196;
	public static readonly KW_ESCAPE = 197;
	public static readonly KW_EVENT = 198;
	public static readonly KW_EXCLUDE = 199;
	public static readonly KW_EXCLUDING = 200;
	public static readonly KW_EXCLUSIVE = 201;
	public static readonly KW_EXECUTE = 202;
	public static readonly KW_EXPLAIN = 203;
	public static readonly KW_EXTENSION = 204;
	public static readonly KW_EXTERNAL = 205;
	public static readonly KW_FAMILY = 206;
	public static readonly KW_FIRST = 207;
	public static readonly KW_FOLLOWING = 208;
	public static readonly KW_FORCE = 209;
	public static readonly KW_FORWARD = 210;
	public static readonly KW_FUNCTION = 211;
	public static readonly KW_FUNCTIONS = 212;
	public static readonly KW_GLOBAL = 213;
	public static readonly KW_GRANTED = 214;
	public static readonly KW_HANDLER = 215;
	public static readonly KW_HEADER = 216;
	public static readonly KW_HOLD = 217;
	public static readonly KW_HOUR = 218;
	public static readonly KW_IDENTITY = 219;
	public static readonly KW_IF = 220;
	public static readonly KW_IMMEDIATE = 221;
	public static readonly KW_IMMUTABLE = 222;
	public static readonly KW_IMPLICIT = 223;
	public static readonly KW_INCLUDING = 224;
	public static readonly KW_INCREMENT = 225;
	public static readonly KW_INDEX = 226;
	public static readonly KW_INDEXES = 227;
	public static readonly KW_INHERIT = 228;
	public static readonly KW_NOINHERIT = 229;
	public static readonly KW_SUPERUSER = 230;
	public static readonly KW_NOSUPERUSER = 231;
	public static readonly KW_CREATEDB = 232;
	public static readonly KW_NOCREATEDB = 233;
	public static readonly KW_CREATEROLE = 234;
	public static readonly KW_NOCREATEROLE = 235;
	public static readonly KW_CREATEUSER = 236;
	public static readonly KW_NOCREATEUSER = 237;
	public static readonly KW_INHERITS = 238;
	public static readonly KW_INLINE = 239;
	public static readonly KW_INSENSITIVE = 240;
	public static readonly KW_INSERT = 241;
	public static readonly KW_INSTEAD = 242;
	public static readonly KW_INVOKER = 243;
	public static readonly KW_ISOLATION = 244;
	public static readonly KW_KEY = 245;
	public static readonly KW_LABEL = 246;
	public static readonly KW_LANGUAGE = 247;
	public static readonly KW_LARGE = 248;
	public static readonly KW_LAST = 249;
	public static readonly KW_LEAKPROOF = 250;
	public static readonly KW_LEVEL = 251;
	public static readonly KW_LISTEN = 252;
	public static readonly KW_LOAD = 253;
	public static readonly KW_LOCAL = 254;
	public static readonly KW_LOCATION = 255;
	public static readonly KW_LOCK = 256;
	public static readonly KW_MAPPING = 257;
	public static readonly KW_MATCH = 258;
	public static readonly KW_MATERIALIZED = 259;
	public static readonly KW_MAXVALUE = 260;
	public static readonly KW_MINUTE = 261;
	public static readonly KW_MINVALUE = 262;
	public static readonly KW_MODE = 263;
	public static readonly KW_MONTH = 264;
	public static readonly KW_MOVE = 265;
	public static readonly KW_NAME = 266;
	public static readonly KW_NAMES = 267;
	public static readonly KW_NEXT = 268;
	public static readonly KW_NO = 269;
	public static readonly KW_NOTHING = 270;
	public static readonly KW_NOTIFY = 271;
	public static readonly KW_NOWAIT = 272;
	public static readonly KW_NULLS = 273;
	public static readonly KW_OBJECT = 274;
	public static readonly KW_OF = 275;
	public static readonly KW_OFF = 276;
	public static readonly KW_OIDS = 277;
	public static readonly KW_OPERATOR = 278;
	public static readonly KW_OPTION = 279;
	public static readonly KW_OPTIONS = 280;
	public static readonly KW_OWNED = 281;
	public static readonly KW_OWNER = 282;
	public static readonly KW_PARSER = 283;
	public static readonly KW_PARTIAL = 284;
	public static readonly KW_PARTITION = 285;
	public static readonly KW_PASSING = 286;
	public static readonly KW_PASSWORD = 287;
	public static readonly KW_PLANS = 288;
	public static readonly KW_PRECEDING = 289;
	public static readonly KW_PREPARE = 290;
	public static readonly KW_PREPARED = 291;
	public static readonly KW_PRESERVE = 292;
	public static readonly KW_PRIOR = 293;
	public static readonly KW_PRIVILEGES = 294;
	public static readonly KW_PROCEDURAL = 295;
	public static readonly KW_PROCEDURE = 296;
	public static readonly KW_PROGRAM = 297;
	public static readonly KW_QUOTE = 298;
	public static readonly KW_RANGE = 299;
	public static readonly KW_READ = 300;
	public static readonly KW_REASSIGN = 301;
	public static readonly KW_RECHECK = 302;
	public static readonly KW_RECURSIVE = 303;
	public static readonly KW_REF = 304;
	public static readonly KW_REFRESH = 305;
	public static readonly KW_REINDEX = 306;
	public static readonly KW_RELATIVE = 307;
	public static readonly KW_RELEASE = 308;
	public static readonly KW_RENAME = 309;
	public static readonly KW_REPEATABLE = 310;
	public static readonly KW_REPLACE = 311;
	public static readonly KW_REPLICA = 312;
	public static readonly KW_RESET = 313;
	public static readonly KW_RESTART = 314;
	public static readonly KW_RESTRICT = 315;
	public static readonly KW_RETURNS = 316;
	public static readonly KW_REVOKE = 317;
	public static readonly KW_ROLE = 318;
	public static readonly KW_ROLLBACK = 319;
	public static readonly KW_ROWS = 320;
	public static readonly KW_RULE = 321;
	public static readonly KW_SAVEPOINT = 322;
	public static readonly KW_SCHEMA = 323;
	public static readonly KW_SCROLL = 324;
	public static readonly KW_SEARCH = 325;
	public static readonly KW_SECOND = 326;
	public static readonly KW_SECURITY = 327;
	public static readonly KW_SEQUENCE = 328;
	public static readonly KW_SEQUENCES = 329;
	public static readonly KW_SERIALIZABLE = 330;
	public static readonly KW_SERVER = 331;
	public static readonly KW_SESSION = 332;
	public static readonly KW_SET = 333;
	public static readonly KW_SHARE = 334;
	public static readonly KW_SHOW = 335;
	public static readonly KW_SIMPLE = 336;
	public static readonly KW_SNAPSHOT = 337;
	public static readonly KW_STABLE = 338;
	public static readonly KW_STANDALONE = 339;
	public static readonly KW_START = 340;
	public static readonly KW_STATEMENT = 341;
	public static readonly KW_STATISTICS = 342;
	public static readonly KW_STDIN = 343;
	public static readonly KW_STDOUT = 344;
	public static readonly KW_STORAGE = 345;
	public static readonly KW_STRICT = 346;
	public static readonly KW_STRIP = 347;
	public static readonly KW_SYSID = 348;
	public static readonly KW_SYSTEM = 349;
	public static readonly KW_TABLES = 350;
	public static readonly KW_TABLESPACE = 351;
	public static readonly KW_TEMP = 352;
	public static readonly KW_TEMPLATE = 353;
	public static readonly KW_TEMPORARY = 354;
	public static readonly KW_TEXT = 355;
	public static readonly KW_TRANSACTION = 356;
	public static readonly KW_TRIGGER = 357;
	public static readonly KW_TRUNCATE = 358;
	public static readonly KW_TRUSTED = 359;
	public static readonly KW_TYPE = 360;
	public static readonly KW_TYPES = 361;
	public static readonly KW_UNBOUNDED = 362;
	public static readonly KW_UNCOMMITTED = 363;
	public static readonly KW_UNENCRYPTED = 364;
	public static readonly KW_UNKNOWN = 365;
	public static readonly KW_UNLISTEN = 366;
	public static readonly KW_UNLOGGED = 367;
	public static readonly KW_UNTIL = 368;
	public static readonly KW_UPDATE = 369;
	public static readonly KW_VACUUM = 370;
	public static readonly KW_VALID = 371;
	public static readonly KW_VALIDATE = 372;
	public static readonly KW_VALIDATOR = 373;
	public static readonly KW_VARYING = 374;
	public static readonly KW_VERSION = 375;
	public static readonly KW_VIEW = 376;
	public static readonly KW_VOLATILE = 377;
	public static readonly KW_WHITESPACE = 378;
	public static readonly KW_WITHOUT = 379;
	public static readonly KW_WORK = 380;
	public static readonly KW_WRAPPER = 381;
	public static readonly KW_WRITE = 382;
	public static readonly KW_XML = 383;
	public static readonly KW_YEAR = 384;
	public static readonly KW_YES = 385;
	public static readonly KW_ZONE = 386;
	public static readonly KW_BETWEEN = 387;
	public static readonly KW_BIGINT = 388;
	public static readonly KW_BIT = 389;
	public static readonly KW_BOOLEAN = 390;
	public static readonly KW_CHAR = 391;
	public static readonly KW_CHARACTER = 392;
	public static readonly KW_COALESCE = 393;
	public static readonly KW_DEC = 394;
	public static readonly KW_DECIMAL = 395;
	public static readonly KW_EXISTS = 396;
	public static readonly KW_EXTRACT = 397;
	public static readonly KW_FLOAT = 398;
	public static readonly KW_GREATEST = 399;
	public static readonly KW_INOUT = 400;
	public static readonly KW_INT = 401;
	public static readonly KW_INTEGER = 402;
	public static readonly KW_INTERVAL = 403;
	public static readonly KW_LEAST = 404;
	public static readonly KW_NATIONAL = 405;
	public static readonly KW_NCHAR = 406;
	public static readonly KW_NONE = 407;
	public static readonly KW_NULLIF = 408;
	public static readonly KW_NUMERIC = 409;
	public static readonly KW_OVERLAY = 410;
	public static readonly KW_POSITION = 411;
	public static readonly KW_PRECISION = 412;
	public static readonly KW_REAL = 413;
	public static readonly KW_ROW = 414;
	public static readonly KW_SETOF = 415;
	public static readonly KW_SMALLINT = 416;
	public static readonly KW_SUBSTRING = 417;
	public static readonly KW_TIME = 418;
	public static readonly KW_TIMESTAMP = 419;
	public static readonly KW_TREAT = 420;
	public static readonly KW_TRIM = 421;
	public static readonly KW_VALUES = 422;
	public static readonly KW_VARCHAR = 423;
	public static readonly KW_XMLATTRIBUTES = 424;
	public static readonly KW_XMLCONCAT = 425;
	public static readonly KW_XMLELEMENT = 426;
	public static readonly KW_XMLEXISTS = 427;
	public static readonly KW_XMLFOREST = 428;
	public static readonly KW_XMLPARSE = 429;
	public static readonly KW_XMLPI = 430;
	public static readonly KW_XMLROOT = 431;
	public static readonly KW_XMLSERIALIZE = 432;
	public static readonly KW_CALL = 433;
	public static readonly KW_CURRENT = 434;
	public static readonly KW_ATTACH = 435;
	public static readonly KW_DETACH = 436;
	public static readonly KW_EXPRESSION = 437;
	public static readonly KW_GENERATED = 438;
	public static readonly KW_LOGGED = 439;
	public static readonly KW_STORED = 440;
	public static readonly KW_INCLUDE = 441;
	public static readonly KW_ROUTINE = 442;
	public static readonly KW_TRANSFORM = 443;
	public static readonly KW_IMPORT = 444;
	public static readonly KW_POLICY = 445;
	public static readonly KW_METHOD = 446;
	public static readonly KW_REFERENCING = 447;
	public static readonly KW_NEW = 448;
	public static readonly KW_OLD = 449;
	public static readonly KW_VALUE = 450;
	public static readonly KW_SUBSCRIPTION = 451;
	public static readonly KW_PUBLICATION = 452;
	public static readonly KW_OUT = 453;
	public static readonly KW_END = 454;
	public static readonly KW_ROUTINES = 455;
	public static readonly KW_SCHEMAS = 456;
	public static readonly KW_PROCEDURES = 457;
	public static readonly KW_INPUT = 458;
	public static readonly KW_SUPPORT = 459;
	public static readonly KW_PARALLEL = 460;
	public static readonly KW_SQL = 461;
	public static readonly KW_DEPENDS = 462;
	public static readonly KW_OVERRIDING = 463;
	public static readonly KW_CONFLICT = 464;
	public static readonly KW_SKIP = 465;
	public static readonly KW_LOCKED = 466;
	public static readonly KW_TIES = 467;
	public static readonly KW_ROLLUP = 468;
	public static readonly KW_CUBE = 469;
	public static readonly KW_GROUPING = 470;
	public static readonly KW_SETS = 471;
	public static readonly KW_TABLESAMPLE = 472;
	public static readonly KW_ORDINALITY = 473;
	public static readonly KW_XMLTABLE = 474;
	public static readonly KW_COLUMNS = 475;
	public static readonly KW_XMLNAMESPACES = 476;
	public static readonly KW_ROWTYPE = 477;
	public static readonly KW_NORMALIZED = 478;
	public static readonly KW_WITHIN = 479;
	public static readonly KW_FILTER = 480;
	public static readonly KW_GROUPS = 481;
	public static readonly KW_OTHERS = 482;
	public static readonly KW_NFC = 483;
	public static readonly KW_NFD = 484;
	public static readonly KW_NFKC = 485;
	public static readonly KW_NFKD = 486;
	public static readonly KW_UESCAPE = 487;
	public static readonly KW_VIEWS = 488;
	public static readonly KW_NORMALIZE = 489;
	public static readonly KW_DUMP = 490;
	public static readonly KW_PRINT_STRICT_PARAMS = 491;
	public static readonly KW_VARIABLE_CONFLICT = 492;
	public static readonly KW_ERROR = 493;
	public static readonly KW_USE_VARIABLE = 494;
	public static readonly KW_USE_COLUMN = 495;
	public static readonly KW_ALIAS = 496;
	public static readonly KW_CONSTANT = 497;
	public static readonly KW_PERFORM = 498;
	public static readonly KW_GET = 499;
	public static readonly KW_DIAGNOSTICS = 500;
	public static readonly KW_STACKED = 501;
	public static readonly KW_ELSIF = 502;
	public static readonly KW_WHILE = 503;
	public static readonly KW_REVERSE = 504;
	public static readonly KW_FOREACH = 505;
	public static readonly KW_SLICE = 506;
	public static readonly KW_EXIT = 507;
	public static readonly KW_RETURN = 508;
	public static readonly KW_QUERY = 509;
	public static readonly KW_RAISE = 510;
	public static readonly KW_SQLSTATE = 511;
	public static readonly KW_DEBUG = 512;
	public static readonly KW_LOG = 513;
	public static readonly KW_INFO = 514;
	public static readonly KW_NOTICE = 515;
	public static readonly KW_WARNING = 516;
	public static readonly KW_EXCEPTION = 517;
	public static readonly KW_ASSERT = 518;
	public static readonly KW_LOOP = 519;
	public static readonly KW_OPEN = 520;
	public static readonly KW_PEFERENCES = 521;
	public static readonly KW_USAGE = 522;
	public static readonly KW_CONNECT = 523;
	public static readonly KW_PUBLIC = 524;
	public static readonly Identifier = 525;
	public static readonly QuotedIdentifier = 526;
	public static readonly UnterminatedQuotedIdentifier = 527;
	public static readonly InvalidQuotedIdentifier = 528;
	public static readonly InvalidUnterminatedQuotedIdentifier = 529;
	public static readonly UnicodeQuotedIdentifier = 530;
	public static readonly UnterminatedUnicodeQuotedIdentifier = 531;
	public static readonly InvalidUnicodeQuotedIdentifier = 532;
	public static readonly InvalidUnterminatedUnicodeQuotedIdentifier = 533;
	public static readonly StringConstant = 534;
	public static readonly UnterminatedStringConstant = 535;
	public static readonly UnicodeEscapeStringConstant = 536;
	public static readonly UnterminatedUnicodeEscapeStringConstant = 537;
	public static readonly BeginDollarStringConstant = 538;
	public static readonly BinaryStringConstant = 539;
	public static readonly UnterminatedBinaryStringConstant = 540;
	public static readonly InvalidBinaryStringConstant = 541;
	public static readonly InvalidUnterminatedBinaryStringConstant = 542;
	public static readonly HexadecimalStringConstant = 543;
	public static readonly UnterminatedHexadecimalStringConstant = 544;
	public static readonly InvalidHexadecimalStringConstant = 545;
	public static readonly InvalidUnterminatedHexadecimalStringConstant = 546;
	public static readonly Integral = 547;
	public static readonly NumericFail = 548;
	public static readonly Numeric = 549;
	public static readonly PLSQLVARIABLENAME = 550;
	public static readonly PLSQLIDENTIFIER = 551;
	public static readonly Whitespace = 552;
	public static readonly Newline = 553;
	public static readonly LineComment = 554;
	public static readonly BlockComment = 555;
	public static readonly UnterminatedBlockComment = 556;
	public static readonly MetaCommand = 557;
	public static readonly EndMetaCommand = 558;
	public static readonly ErrorCharacter = 559;
	public static readonly EscapeStringConstant = 560;
	public static readonly UnterminatedEscapeStringConstant = 561;
	public static readonly InvalidEscapeStringConstant = 562;
	public static readonly InvalidUnterminatedEscapeStringConstant = 563;
	public static readonly DollarText = 564;
	public static readonly EndDollarStringConstant = 565;
	public static readonly AfterEscapeStringConstantWithNewlineMode_Continued = 566;
	public static readonly RULE_program = 0;
	public static readonly RULE_plsqlroot = 1;
	public static readonly RULE_stmtmulti = 2;
	public static readonly RULE_stmt = 3;
	public static readonly RULE_plsqlconsolecommand = 4;
	public static readonly RULE_callstmt = 5;
	public static readonly RULE_createrolestmt = 6;
	public static readonly RULE_opt_with = 7;
	public static readonly RULE_optrolelist = 8;
	public static readonly RULE_alteroptrolelist = 9;
	public static readonly RULE_alteroptroleelem = 10;
	public static readonly RULE_createoptroleelem = 11;
	public static readonly RULE_createuserstmt = 12;
	public static readonly RULE_alterrolestmt = 13;
	public static readonly RULE_opt_in_database = 14;
	public static readonly RULE_alterrolesetstmt = 15;
	public static readonly RULE_droprolestmt = 16;
	public static readonly RULE_creategroupstmt = 17;
	public static readonly RULE_altergroupstmt = 18;
	public static readonly RULE_add_drop = 19;
	public static readonly RULE_createschemastmt = 20;
	public static readonly RULE_optschemaname = 21;
	public static readonly RULE_optschemaeltlist = 22;
	public static readonly RULE_schema_stmt = 23;
	public static readonly RULE_variablesetstmt = 24;
	public static readonly RULE_set_rest = 25;
	public static readonly RULE_generic_set = 26;
	public static readonly RULE_set_rest_more = 27;
	public static readonly RULE_var_name = 28;
	public static readonly RULE_var_list = 29;
	public static readonly RULE_var_value = 30;
	public static readonly RULE_iso_level = 31;
	public static readonly RULE_opt_boolean_or_string = 32;
	public static readonly RULE_zone_value = 33;
	public static readonly RULE_opt_encoding = 34;
	public static readonly RULE_nonreservedword_or_sconst = 35;
	public static readonly RULE_variableresetstmt = 36;
	public static readonly RULE_reset_rest = 37;
	public static readonly RULE_generic_reset = 38;
	public static readonly RULE_setresetclause = 39;
	public static readonly RULE_functionsetresetclause = 40;
	public static readonly RULE_variableshowstmt = 41;
	public static readonly RULE_constraintssetstmt = 42;
	public static readonly RULE_constraints_set_list = 43;
	public static readonly RULE_constraints_set_mode = 44;
	public static readonly RULE_checkpointstmt = 45;
	public static readonly RULE_discardstmt = 46;
	public static readonly RULE_altertablestmt = 47;
	public static readonly RULE_alter_table_cmds = 48;
	public static readonly RULE_partition_cmd = 49;
	public static readonly RULE_index_partition_cmd = 50;
	public static readonly RULE_alter_table_cmd = 51;
	public static readonly RULE_alter_column_default = 52;
	public static readonly RULE_opt_drop_behavior = 53;
	public static readonly RULE_opt_collate_clause = 54;
	public static readonly RULE_alter_using = 55;
	public static readonly RULE_replica_identity = 56;
	public static readonly RULE_reloptions = 57;
	public static readonly RULE_opt_reloptions = 58;
	public static readonly RULE_reloption_list = 59;
	public static readonly RULE_reloption_elem = 60;
	public static readonly RULE_alter_identity_column_option_list = 61;
	public static readonly RULE_alter_identity_column_option = 62;
	public static readonly RULE_partitionboundspec = 63;
	public static readonly RULE_hash_partbound_elem = 64;
	public static readonly RULE_hash_partbound = 65;
	public static readonly RULE_altercompositetypestmt = 66;
	public static readonly RULE_alter_type_cmds = 67;
	public static readonly RULE_alter_type_cmd = 68;
	public static readonly RULE_closeportalstmt = 69;
	public static readonly RULE_copystmt = 70;
	public static readonly RULE_copy_from = 71;
	public static readonly RULE_opt_program = 72;
	public static readonly RULE_copy_file_name = 73;
	public static readonly RULE_copy_options = 74;
	public static readonly RULE_copy_opt_list = 75;
	public static readonly RULE_copy_opt_item = 76;
	public static readonly RULE_opt_binary = 77;
	public static readonly RULE_copy_delimiter = 78;
	public static readonly RULE_opt_using = 79;
	public static readonly RULE_copy_generic_opt_list = 80;
	public static readonly RULE_copy_generic_opt_elem = 81;
	public static readonly RULE_copy_generic_opt_arg = 82;
	public static readonly RULE_copy_generic_opt_arg_list = 83;
	public static readonly RULE_copy_generic_opt_arg_list_item = 84;
	public static readonly RULE_createstmt = 85;
	public static readonly RULE_opttemp = 86;
	public static readonly RULE_table_column_list = 87;
	public static readonly RULE_opttableelementlist = 88;
	public static readonly RULE_opttypedtableelementlist = 89;
	public static readonly RULE_tableelementlist = 90;
	public static readonly RULE_typedtableelementlist = 91;
	public static readonly RULE_tableelement = 92;
	public static readonly RULE_typedtableelement = 93;
	public static readonly RULE_columnDef = 94;
	public static readonly RULE_columnOptions = 95;
	public static readonly RULE_colquallist = 96;
	public static readonly RULE_colconstraint = 97;
	public static readonly RULE_colconstraintelem = 98;
	public static readonly RULE_generated_when = 99;
	public static readonly RULE_deferrable_trigger = 100;
	public static readonly RULE_initially_trigger = 101;
	public static readonly RULE_tablelikeclause = 102;
	public static readonly RULE_tablelikeoptionlist = 103;
	public static readonly RULE_tablelikeoption = 104;
	public static readonly RULE_tableconstraint = 105;
	public static readonly RULE_constraintelem = 106;
	public static readonly RULE_opt_no_inherit = 107;
	public static readonly RULE_opt_column_list = 108;
	public static readonly RULE_columnlist = 109;
	public static readonly RULE_columnElem = 110;
	public static readonly RULE_opt_c_include = 111;
	public static readonly RULE_key_match = 112;
	public static readonly RULE_exclusionconstraintlist = 113;
	public static readonly RULE_exclusionconstraintelem = 114;
	public static readonly RULE_exclusionwhereclause = 115;
	public static readonly RULE_key_actions = 116;
	public static readonly RULE_key_update = 117;
	public static readonly RULE_key_delete = 118;
	public static readonly RULE_key_action = 119;
	public static readonly RULE_optinherit = 120;
	public static readonly RULE_optpartitionspec = 121;
	public static readonly RULE_partitionspec = 122;
	public static readonly RULE_part_params = 123;
	public static readonly RULE_part_elem = 124;
	public static readonly RULE_table_access_method_clause = 125;
	public static readonly RULE_optwith = 126;
	public static readonly RULE_oncommitoption = 127;
	public static readonly RULE_opttablespace = 128;
	public static readonly RULE_optconstablespace = 129;
	public static readonly RULE_existingindex = 130;
	public static readonly RULE_createstatsstmt = 131;
	public static readonly RULE_alterstatsstmt = 132;
	public static readonly RULE_createasstmt = 133;
	public static readonly RULE_create_as_target = 134;
	public static readonly RULE_opt_with_data = 135;
	public static readonly RULE_creatematviewstmt = 136;
	public static readonly RULE_create_mv_target = 137;
	public static readonly RULE_optnolog = 138;
	public static readonly RULE_refreshmatviewstmt = 139;
	public static readonly RULE_createseqstmt = 140;
	public static readonly RULE_alterseqstmt = 141;
	public static readonly RULE_optseqoptlist = 142;
	public static readonly RULE_optparenthesizedseqoptlist = 143;
	public static readonly RULE_seqoptlist = 144;
	public static readonly RULE_seqoptelem = 145;
	public static readonly RULE_opt_by = 146;
	public static readonly RULE_numericonly = 147;
	public static readonly RULE_numericonly_list = 148;
	public static readonly RULE_createplangstmt = 149;
	public static readonly RULE_opt_trusted = 150;
	public static readonly RULE_handler_name = 151;
	public static readonly RULE_opt_inline_handler = 152;
	public static readonly RULE_validator_clause = 153;
	public static readonly RULE_opt_validator = 154;
	public static readonly RULE_opt_procedural = 155;
	public static readonly RULE_createtablespacestmt = 156;
	public static readonly RULE_opttablespaceowner = 157;
	public static readonly RULE_droptablespacestmt = 158;
	public static readonly RULE_createextensionstmt = 159;
	public static readonly RULE_create_extension_opt_list = 160;
	public static readonly RULE_create_extension_opt_item = 161;
	public static readonly RULE_alterextensionstmt = 162;
	public static readonly RULE_alter_extension_opt_list = 163;
	public static readonly RULE_alter_extension_opt_item = 164;
	public static readonly RULE_alterextensioncontentsstmt = 165;
	public static readonly RULE_createfdwstmt = 166;
	public static readonly RULE_fdw_option = 167;
	public static readonly RULE_fdw_options = 168;
	public static readonly RULE_opt_fdw_options = 169;
	public static readonly RULE_alterfdwstmt = 170;
	public static readonly RULE_create_generic_options = 171;
	public static readonly RULE_generic_option_list = 172;
	public static readonly RULE_alter_generic_options = 173;
	public static readonly RULE_alter_generic_option_list = 174;
	public static readonly RULE_alter_generic_option_elem = 175;
	public static readonly RULE_generic_option_elem = 176;
	public static readonly RULE_generic_option_name = 177;
	public static readonly RULE_generic_option_arg = 178;
	public static readonly RULE_createforeignserverstmt = 179;
	public static readonly RULE_opt_type = 180;
	public static readonly RULE_foreign_server_version = 181;
	public static readonly RULE_opt_foreign_server_version = 182;
	public static readonly RULE_alterforeignserverstmt = 183;
	public static readonly RULE_createforeigntablestmt = 184;
	public static readonly RULE_importforeignschemastmt = 185;
	public static readonly RULE_import_qualification_type = 186;
	public static readonly RULE_import_qualification = 187;
	public static readonly RULE_createusermappingstmt = 188;
	public static readonly RULE_auth_ident = 189;
	public static readonly RULE_dropusermappingstmt = 190;
	public static readonly RULE_alterusermappingstmt = 191;
	public static readonly RULE_createpolicystmt = 192;
	public static readonly RULE_alterpolicystmt = 193;
	public static readonly RULE_rowsecurityoptionalexpr = 194;
	public static readonly RULE_rowsecurityoptionalwithcheck = 195;
	public static readonly RULE_rowsecuritydefaulttorole = 196;
	public static readonly RULE_rowsecurityoptionaltorole = 197;
	public static readonly RULE_rowsecuritydefaultpermissive = 198;
	public static readonly RULE_rowsecuritydefaultforcmd = 199;
	public static readonly RULE_row_security_cmd = 200;
	public static readonly RULE_createamstmt = 201;
	public static readonly RULE_am_type = 202;
	public static readonly RULE_createtrigstmt = 203;
	public static readonly RULE_triggeractiontime = 204;
	public static readonly RULE_foreachrow = 205;
	public static readonly RULE_roworstatment = 206;
	public static readonly RULE_triggerevents = 207;
	public static readonly RULE_triggeroneevent = 208;
	public static readonly RULE_triggerreferencing = 209;
	public static readonly RULE_triggertransitions = 210;
	public static readonly RULE_triggertransition = 211;
	public static readonly RULE_transitionoldornew = 212;
	public static readonly RULE_transitionrowortable = 213;
	public static readonly RULE_transitionrelname = 214;
	public static readonly RULE_triggerforspec = 215;
	public static readonly RULE_triggerforopteach = 216;
	public static readonly RULE_triggerfortype = 217;
	public static readonly RULE_triggerwhen = 218;
	public static readonly RULE_function_or_procedure = 219;
	public static readonly RULE_triggerfuncargs = 220;
	public static readonly RULE_triggerfuncarg = 221;
	public static readonly RULE_optconstrfromtable = 222;
	public static readonly RULE_constraintattributespec = 223;
	public static readonly RULE_constraintattributeElem = 224;
	public static readonly RULE_createeventtrigstmt = 225;
	public static readonly RULE_event_trigger_when_list = 226;
	public static readonly RULE_event_trigger_when_item = 227;
	public static readonly RULE_event_trigger_value_list = 228;
	public static readonly RULE_altereventtrigstmt = 229;
	public static readonly RULE_enable_trigger = 230;
	public static readonly RULE_createassertionstmt = 231;
	public static readonly RULE_definestmt = 232;
	public static readonly RULE_definition = 233;
	public static readonly RULE_def_list = 234;
	public static readonly RULE_def_elem = 235;
	public static readonly RULE_def_arg = 236;
	public static readonly RULE_old_aggr_definition = 237;
	public static readonly RULE_old_aggr_list = 238;
	public static readonly RULE_old_aggr_elem = 239;
	public static readonly RULE_opt_enum_val_list = 240;
	public static readonly RULE_enum_val_list = 241;
	public static readonly RULE_alterenumstmt = 242;
	public static readonly RULE_opt_if_not_exists = 243;
	public static readonly RULE_createopclassstmt = 244;
	public static readonly RULE_opclass_item_list = 245;
	public static readonly RULE_opclass_item = 246;
	public static readonly RULE_opt_default = 247;
	public static readonly RULE_opt_opfamily = 248;
	public static readonly RULE_opclass_purpose = 249;
	public static readonly RULE_opt_recheck = 250;
	public static readonly RULE_createopfamilystmt = 251;
	public static readonly RULE_alteropfamilystmt = 252;
	public static readonly RULE_opclass_drop_list = 253;
	public static readonly RULE_opclass_drop = 254;
	public static readonly RULE_dropopclassstmt = 255;
	public static readonly RULE_dropopfamilystmt = 256;
	public static readonly RULE_dropownedstmt = 257;
	public static readonly RULE_reassignownedstmt = 258;
	public static readonly RULE_dropstmt = 259;
	public static readonly RULE_object_type_any_name = 260;
	public static readonly RULE_object_type_name = 261;
	public static readonly RULE_drop_type_name = 262;
	public static readonly RULE_object_type_name_on_any_name = 263;
	public static readonly RULE_any_name_list = 264;
	public static readonly RULE_any_name = 265;
	public static readonly RULE_attrs = 266;
	public static readonly RULE_type_name_list = 267;
	public static readonly RULE_truncatestmt = 268;
	public static readonly RULE_opt_restart_seqs = 269;
	public static readonly RULE_commentstmt = 270;
	public static readonly RULE_comment_text = 271;
	public static readonly RULE_seclabelstmt = 272;
	public static readonly RULE_opt_provider = 273;
	public static readonly RULE_security_label = 274;
	public static readonly RULE_fetchstmt = 275;
	public static readonly RULE_fetch_args = 276;
	public static readonly RULE_from_in = 277;
	public static readonly RULE_opt_from_in = 278;
	public static readonly RULE_grantstmt = 279;
	public static readonly RULE_revokestmt = 280;
	public static readonly RULE_privileges = 281;
	public static readonly RULE_beforeprivilegeselectlist = 282;
	public static readonly RULE_beforeprivilegeselect = 283;
	public static readonly RULE_privilege_list = 284;
	public static readonly RULE_privilege = 285;
	public static readonly RULE_privilege_target = 286;
	public static readonly RULE_grantee_list = 287;
	public static readonly RULE_grantee = 288;
	public static readonly RULE_opt_grant_grant_option = 289;
	public static readonly RULE_grantrolestmt = 290;
	public static readonly RULE_revokerolestmt = 291;
	public static readonly RULE_opt_grant_admin_option = 292;
	public static readonly RULE_opt_granted_by = 293;
	public static readonly RULE_alterdefaultprivilegesstmt = 294;
	public static readonly RULE_defacloptionlist = 295;
	public static readonly RULE_defacloption = 296;
	public static readonly RULE_defaclaction = 297;
	public static readonly RULE_defacl_privilege_target = 298;
	public static readonly RULE_indexstmt = 299;
	public static readonly RULE_opt_unique = 300;
	public static readonly RULE_opt_concurrently = 301;
	public static readonly RULE_opt_index_name = 302;
	public static readonly RULE_access_method_clause = 303;
	public static readonly RULE_index_params = 304;
	public static readonly RULE_index_elem_options = 305;
	public static readonly RULE_index_elem = 306;
	public static readonly RULE_opt_include = 307;
	public static readonly RULE_index_including_params = 308;
	public static readonly RULE_opt_collate = 309;
	public static readonly RULE_opt_class = 310;
	public static readonly RULE_opt_asc_desc = 311;
	public static readonly RULE_opt_nulls_order = 312;
	public static readonly RULE_createfunctionstmt = 313;
	public static readonly RULE_attrilist = 314;
	public static readonly RULE_opt_or_replace = 315;
	public static readonly RULE_func_args = 316;
	public static readonly RULE_func_args_list = 317;
	public static readonly RULE_function_with_argtypes_list = 318;
	public static readonly RULE_function_with_argtypes = 319;
	public static readonly RULE_func_args_with_defaults = 320;
	public static readonly RULE_func_args_with_defaults_list = 321;
	public static readonly RULE_func_arg = 322;
	public static readonly RULE_arg_class = 323;
	public static readonly RULE_param_name = 324;
	public static readonly RULE_func_return = 325;
	public static readonly RULE_func_type = 326;
	public static readonly RULE_func_arg_with_default = 327;
	public static readonly RULE_aggr_arg = 328;
	public static readonly RULE_aggr_args = 329;
	public static readonly RULE_aggr_args_list = 330;
	public static readonly RULE_aggregate_with_argtypes = 331;
	public static readonly RULE_aggregate_with_argtypes_list = 332;
	public static readonly RULE_createfunc_opt_list = 333;
	public static readonly RULE_common_func_opt_item = 334;
	public static readonly RULE_createfunc_opt_item = 335;
	public static readonly RULE_func_as = 336;
	public static readonly RULE_transform_type_list = 337;
	public static readonly RULE_opt_definition = 338;
	public static readonly RULE_table_func_column = 339;
	public static readonly RULE_table_func_column_list = 340;
	public static readonly RULE_alterfunctionstmt = 341;
	public static readonly RULE_alterfunc_opt_list = 342;
	public static readonly RULE_opt_restrict = 343;
	public static readonly RULE_removefuncstmt = 344;
	public static readonly RULE_removeaggrstmt = 345;
	public static readonly RULE_removeoperstmt = 346;
	public static readonly RULE_oper_argtypes = 347;
	public static readonly RULE_any_operator = 348;
	public static readonly RULE_operator_with_argtypes_list = 349;
	public static readonly RULE_operator_with_argtypes = 350;
	public static readonly RULE_dostmt = 351;
	public static readonly RULE_dostmt_opt_list = 352;
	public static readonly RULE_dostmt_opt_item = 353;
	public static readonly RULE_createcaststmt = 354;
	public static readonly RULE_cast_context = 355;
	public static readonly RULE_dropcaststmt = 356;
	public static readonly RULE_opt_if_exists = 357;
	public static readonly RULE_createtransformstmt = 358;
	public static readonly RULE_transform_element_list = 359;
	public static readonly RULE_droptransformstmt = 360;
	public static readonly RULE_reindexstmt = 361;
	public static readonly RULE_reindex_target_type = 362;
	public static readonly RULE_reindex_target_multitable = 363;
	public static readonly RULE_reindex_option_list = 364;
	public static readonly RULE_reindex_option_elem = 365;
	public static readonly RULE_altertblspcstmt = 366;
	public static readonly RULE_renamestmt = 367;
	public static readonly RULE_opt_column = 368;
	public static readonly RULE_opt_set_data = 369;
	public static readonly RULE_alterobjectdependsstmt = 370;
	public static readonly RULE_opt_no = 371;
	public static readonly RULE_alterobjectschemastmt = 372;
	public static readonly RULE_alteroperatorstmt = 373;
	public static readonly RULE_operator_def_list = 374;
	public static readonly RULE_operator_def_elem = 375;
	public static readonly RULE_operator_def_arg = 376;
	public static readonly RULE_altertypestmt = 377;
	public static readonly RULE_alterownerstmt = 378;
	public static readonly RULE_createpublicationstmt = 379;
	public static readonly RULE_opt_publication_for_tables = 380;
	public static readonly RULE_publication_for_tables = 381;
	public static readonly RULE_alterpublicationstmt = 382;
	public static readonly RULE_createsubscriptionstmt = 383;
	public static readonly RULE_publication_name_list = 384;
	public static readonly RULE_publication_name_item = 385;
	public static readonly RULE_altersubscriptionstmt = 386;
	public static readonly RULE_dropsubscriptionstmt = 387;
	public static readonly RULE_rulestmt = 388;
	public static readonly RULE_ruleactionlist = 389;
	public static readonly RULE_ruleactionmulti = 390;
	public static readonly RULE_ruleactionstmt = 391;
	public static readonly RULE_ruleactionstmtOrEmpty = 392;
	public static readonly RULE_event = 393;
	public static readonly RULE_opt_instead = 394;
	public static readonly RULE_notifystmt = 395;
	public static readonly RULE_notify_payload = 396;
	public static readonly RULE_listenstmt = 397;
	public static readonly RULE_unlistenstmt = 398;
	public static readonly RULE_transactionstmt = 399;
	public static readonly RULE_opt_transaction = 400;
	public static readonly RULE_transaction_mode_item = 401;
	public static readonly RULE_transaction_mode_list = 402;
	public static readonly RULE_transaction_mode_list_or_empty = 403;
	public static readonly RULE_opt_transaction_chain = 404;
	public static readonly RULE_viewstmt = 405;
	public static readonly RULE_opt_check_option = 406;
	public static readonly RULE_loadstmt = 407;
	public static readonly RULE_createdbstmt = 408;
	public static readonly RULE_createdb_opt_list = 409;
	public static readonly RULE_createdb_opt_items = 410;
	public static readonly RULE_createdb_opt_item = 411;
	public static readonly RULE_createdb_opt_name = 412;
	public static readonly RULE_opt_equal = 413;
	public static readonly RULE_alterdatabasestmt = 414;
	public static readonly RULE_alterdatabasesetstmt = 415;
	public static readonly RULE_dropdbstmt = 416;
	public static readonly RULE_drop_option_list = 417;
	public static readonly RULE_drop_option = 418;
	public static readonly RULE_altercollationstmt = 419;
	public static readonly RULE_altersystemstmt = 420;
	public static readonly RULE_createdomainstmt = 421;
	public static readonly RULE_alterdomainstmt = 422;
	public static readonly RULE_opt_as = 423;
	public static readonly RULE_altertsdictionarystmt = 424;
	public static readonly RULE_altertsconfigurationstmt = 425;
	public static readonly RULE_any_with = 426;
	public static readonly RULE_createconversionstmt = 427;
	public static readonly RULE_clusterstmt = 428;
	public static readonly RULE_cluster_index_specification = 429;
	public static readonly RULE_vacuumstmt = 430;
	public static readonly RULE_analyzestmt = 431;
	public static readonly RULE_vac_analyze_option_list = 432;
	public static readonly RULE_analyze_keyword = 433;
	public static readonly RULE_vac_analyze_option_elem = 434;
	public static readonly RULE_vac_analyze_option_name = 435;
	public static readonly RULE_vac_analyze_option_arg = 436;
	public static readonly RULE_opt_analyze = 437;
	public static readonly RULE_opt_verbose = 438;
	public static readonly RULE_opt_full = 439;
	public static readonly RULE_opt_freeze = 440;
	public static readonly RULE_opt_name_list = 441;
	public static readonly RULE_vacuum_relation = 442;
	public static readonly RULE_vacuum_relation_list = 443;
	public static readonly RULE_opt_vacuum_relation_list = 444;
	public static readonly RULE_explainstmt = 445;
	public static readonly RULE_explainablestmt = 446;
	public static readonly RULE_explain_option_list = 447;
	public static readonly RULE_explain_option_elem = 448;
	public static readonly RULE_explain_option_name = 449;
	public static readonly RULE_explain_option_arg = 450;
	public static readonly RULE_preparestmt = 451;
	public static readonly RULE_prep_type_clause = 452;
	public static readonly RULE_preparablestmt = 453;
	public static readonly RULE_executestmt = 454;
	public static readonly RULE_execute_param_clause = 455;
	public static readonly RULE_deallocatestmt = 456;
	public static readonly RULE_insertstmt = 457;
	public static readonly RULE_insert_target = 458;
	public static readonly RULE_insert_rest = 459;
	public static readonly RULE_override_kind = 460;
	public static readonly RULE_insert_column_list = 461;
	public static readonly RULE_insert_column_item = 462;
	public static readonly RULE_opt_on_conflict = 463;
	public static readonly RULE_opt_conf_expr = 464;
	public static readonly RULE_returning_clause = 465;
	public static readonly RULE_deletestmt = 466;
	public static readonly RULE_using_clause = 467;
	public static readonly RULE_lockstmt = 468;
	public static readonly RULE_opt_lock = 469;
	public static readonly RULE_lock_type = 470;
	public static readonly RULE_opt_nowait = 471;
	public static readonly RULE_opt_nowait_or_skip = 472;
	public static readonly RULE_updatestmt = 473;
	public static readonly RULE_set_clause_list = 474;
	public static readonly RULE_set_clause = 475;
	public static readonly RULE_set_target = 476;
	public static readonly RULE_set_target_list = 477;
	public static readonly RULE_declarecursorstmt = 478;
	public static readonly RULE_cursor_name = 479;
	public static readonly RULE_cursor_options = 480;
	public static readonly RULE_opt_hold = 481;
	public static readonly RULE_selectstmt = 482;
	public static readonly RULE_select_with_parens = 483;
	public static readonly RULE_select_no_parens = 484;
	public static readonly RULE_select_clause = 485;
	public static readonly RULE_simple_select = 486;
	public static readonly RULE_set_operator = 487;
	public static readonly RULE_set_operator_with_all_or_distinct = 488;
	public static readonly RULE_with_clause = 489;
	public static readonly RULE_cte_list = 490;
	public static readonly RULE_common_table_expr = 491;
	public static readonly RULE_opt_materialized = 492;
	public static readonly RULE_opt_with_clause = 493;
	public static readonly RULE_into_clause = 494;
	public static readonly RULE_opt_strict = 495;
	public static readonly RULE_opttempTableName = 496;
	public static readonly RULE_opt_table = 497;
	public static readonly RULE_all_or_distinct = 498;
	public static readonly RULE_distinct_clause = 499;
	public static readonly RULE_opt_all_clause = 500;
	public static readonly RULE_opt_sort_clause = 501;
	public static readonly RULE_sort_clause = 502;
	public static readonly RULE_sortby_list = 503;
	public static readonly RULE_sortby = 504;
	public static readonly RULE_select_limit = 505;
	public static readonly RULE_opt_select_limit = 506;
	public static readonly RULE_limit_clause = 507;
	public static readonly RULE_offset_clause = 508;
	public static readonly RULE_select_limit_value = 509;
	public static readonly RULE_select_offset_value = 510;
	public static readonly RULE_select_fetch_first_value = 511;
	public static readonly RULE_i_or_f_const = 512;
	public static readonly RULE_row_or_rows = 513;
	public static readonly RULE_first_or_next = 514;
	public static readonly RULE_group_clause = 515;
	public static readonly RULE_group_by_list = 516;
	public static readonly RULE_group_by_item = 517;
	public static readonly RULE_empty_grouping_set = 518;
	public static readonly RULE_rollup_clause = 519;
	public static readonly RULE_cube_clause = 520;
	public static readonly RULE_grouping_sets_clause = 521;
	public static readonly RULE_having_clause = 522;
	public static readonly RULE_for_locking_clause = 523;
	public static readonly RULE_opt_for_locking_clause = 524;
	public static readonly RULE_for_locking_items = 525;
	public static readonly RULE_for_locking_item = 526;
	public static readonly RULE_for_locking_strength = 527;
	public static readonly RULE_locked_rels_list = 528;
	public static readonly RULE_values_clause = 529;
	public static readonly RULE_from_clause = 530;
	public static readonly RULE_from_list = 531;
	public static readonly RULE_table_ref = 532;
	public static readonly RULE_alias_clause = 533;
	public static readonly RULE_opt_alias_clause = 534;
	public static readonly RULE_func_alias_clause = 535;
	public static readonly RULE_join_type = 536;
	public static readonly RULE_join_qual = 537;
	public static readonly RULE_relation_expr = 538;
	public static readonly RULE_relation_expr_list = 539;
	public static readonly RULE_relation_expr_opt_alias = 540;
	public static readonly RULE_tablesample_clause = 541;
	public static readonly RULE_opt_repeatable_clause = 542;
	public static readonly RULE_func_table = 543;
	public static readonly RULE_rowsfrom_item = 544;
	public static readonly RULE_rowsfrom_list = 545;
	public static readonly RULE_opt_col_def_list = 546;
	public static readonly RULE_opt_ordinality = 547;
	public static readonly RULE_where_clause = 548;
	public static readonly RULE_where_or_current_clause = 549;
	public static readonly RULE_opttablefuncelementlist = 550;
	public static readonly RULE_tablefuncelementlist = 551;
	public static readonly RULE_tablefuncelement = 552;
	public static readonly RULE_xmltable = 553;
	public static readonly RULE_xmltable_column_list = 554;
	public static readonly RULE_xmltable_column_el = 555;
	public static readonly RULE_xmltable_column_option_list = 556;
	public static readonly RULE_xmltable_column_option_el = 557;
	public static readonly RULE_xml_namespace_list = 558;
	public static readonly RULE_xml_namespace_el = 559;
	public static readonly RULE_typename = 560;
	public static readonly RULE_opt_array_bounds = 561;
	public static readonly RULE_simpletypename = 562;
	public static readonly RULE_consttypename = 563;
	public static readonly RULE_generictype = 564;
	public static readonly RULE_opt_type_modifiers = 565;
	public static readonly RULE_numeric = 566;
	public static readonly RULE_opt_float = 567;
	public static readonly RULE_bit = 568;
	public static readonly RULE_constbit = 569;
	public static readonly RULE_bitwithlength = 570;
	public static readonly RULE_bitwithoutlength = 571;
	public static readonly RULE_character = 572;
	public static readonly RULE_constcharacter = 573;
	public static readonly RULE_character_c = 574;
	public static readonly RULE_opt_varying = 575;
	public static readonly RULE_constdatetime = 576;
	public static readonly RULE_constinterval = 577;
	public static readonly RULE_opt_timezone = 578;
	public static readonly RULE_opt_interval = 579;
	public static readonly RULE_interval_second = 580;
	public static readonly RULE_opt_escape = 581;
	public static readonly RULE_a_expr = 582;
	public static readonly RULE_a_expr_qual = 583;
	public static readonly RULE_a_expr_lessless = 584;
	public static readonly RULE_a_expr_or = 585;
	public static readonly RULE_a_expr_and = 586;
	public static readonly RULE_a_expr_in = 587;
	public static readonly RULE_a_expr_unary_not = 588;
	public static readonly RULE_a_expr_isnull = 589;
	public static readonly RULE_a_expr_is_not = 590;
	public static readonly RULE_a_expr_compare = 591;
	public static readonly RULE_a_expr_like = 592;
	public static readonly RULE_a_expr_qual_op = 593;
	public static readonly RULE_a_expr_unary_qualop = 594;
	public static readonly RULE_a_expr_add = 595;
	public static readonly RULE_a_expr_mul = 596;
	public static readonly RULE_a_expr_caret = 597;
	public static readonly RULE_a_expr_unary_sign = 598;
	public static readonly RULE_a_expr_at_time_zone = 599;
	public static readonly RULE_a_expr_collate = 600;
	public static readonly RULE_a_expr_typecast = 601;
	public static readonly RULE_b_expr = 602;
	public static readonly RULE_c_expr = 603;
	public static readonly RULE_plsqlvariablename = 604;
	public static readonly RULE_func_application = 605;
	public static readonly RULE_func_expr = 606;
	public static readonly RULE_func_expr_windowless = 607;
	public static readonly RULE_func_expr_common_subexpr = 608;
	public static readonly RULE_xml_root_version = 609;
	public static readonly RULE_opt_xml_root_standalone = 610;
	public static readonly RULE_xml_attributes = 611;
	public static readonly RULE_xml_attribute_list = 612;
	public static readonly RULE_xml_attribute_el = 613;
	public static readonly RULE_document_or_content = 614;
	public static readonly RULE_xml_whitespace_option = 615;
	public static readonly RULE_xmlexists_argument = 616;
	public static readonly RULE_xml_passing_mech = 617;
	public static readonly RULE_within_group_clause = 618;
	public static readonly RULE_filter_clause = 619;
	public static readonly RULE_window_clause = 620;
	public static readonly RULE_window_definition_list = 621;
	public static readonly RULE_window_definition = 622;
	public static readonly RULE_over_clause = 623;
	public static readonly RULE_window_specification = 624;
	public static readonly RULE_opt_existing_window_name = 625;
	public static readonly RULE_opt_partition_clause = 626;
	public static readonly RULE_opt_frame_clause = 627;
	public static readonly RULE_frame_extent = 628;
	public static readonly RULE_frame_bound = 629;
	public static readonly RULE_opt_window_exclusion_clause = 630;
	public static readonly RULE_row = 631;
	public static readonly RULE_explicit_row = 632;
	public static readonly RULE_implicit_row = 633;
	public static readonly RULE_sub_type = 634;
	public static readonly RULE_all_op = 635;
	public static readonly RULE_mathop = 636;
	public static readonly RULE_qual_op = 637;
	public static readonly RULE_qual_all_op = 638;
	public static readonly RULE_subquery_Op = 639;
	public static readonly RULE_expr_list = 640;
	public static readonly RULE_func_arg_list = 641;
	public static readonly RULE_func_arg_expr = 642;
	public static readonly RULE_type_list = 643;
	public static readonly RULE_array_expr = 644;
	public static readonly RULE_array_expr_list = 645;
	public static readonly RULE_extract_list = 646;
	public static readonly RULE_extract_arg = 647;
	public static readonly RULE_unicode_normal_form = 648;
	public static readonly RULE_overlay_list = 649;
	public static readonly RULE_position_list = 650;
	public static readonly RULE_substr_list = 651;
	public static readonly RULE_trim_list = 652;
	public static readonly RULE_in_expr = 653;
	public static readonly RULE_case_expr = 654;
	public static readonly RULE_when_clause_list = 655;
	public static readonly RULE_when_clause = 656;
	public static readonly RULE_case_default = 657;
	public static readonly RULE_case_arg = 658;
	public static readonly RULE_columnref = 659;
	public static readonly RULE_indirection_el = 660;
	public static readonly RULE_opt_slice_bound = 661;
	public static readonly RULE_indirection = 662;
	public static readonly RULE_opt_indirection = 663;
	public static readonly RULE_opt_target_list = 664;
	public static readonly RULE_target_list = 665;
	public static readonly RULE_target_el = 666;
	public static readonly RULE_qualified_name_list = 667;
	public static readonly RULE_table_qualified_name = 668;
	public static readonly RULE_qualified_name = 669;
	public static readonly RULE_name_list = 670;
	public static readonly RULE_name = 671;
	public static readonly RULE_attr_name = 672;
	public static readonly RULE_file_name = 673;
	public static readonly RULE_func_name = 674;
	public static readonly RULE_aexprconst = 675;
	public static readonly RULE_xconst = 676;
	public static readonly RULE_bconst = 677;
	public static readonly RULE_fconst = 678;
	public static readonly RULE_iconst = 679;
	public static readonly RULE_sconst = 680;
	public static readonly RULE_anysconst = 681;
	public static readonly RULE_opt_uescape = 682;
	public static readonly RULE_signediconst = 683;
	public static readonly RULE_groupname = 684;
	public static readonly RULE_roleid = 685;
	public static readonly RULE_rolespec = 686;
	public static readonly RULE_role_list = 687;
	public static readonly RULE_colid = 688;
	public static readonly RULE_index_method_choices = 689;
	public static readonly RULE_exclude_element = 690;
	public static readonly RULE_index_paramenters = 691;
	public static readonly RULE_wherePredicate = 692;
	public static readonly RULE_type_function_name = 693;
	public static readonly RULE_nonreservedword = 694;
	public static readonly RULE_collabel = 695;
	public static readonly RULE_identifier = 696;
	public static readonly RULE_plsqlidentifier = 697;
	public static readonly RULE_unreserved_keyword = 698;
	public static readonly RULE_col_name_keyword = 699;
	public static readonly RULE_type_func_name_keyword = 700;
	public static readonly RULE_reserved_keyword = 701;
	public static readonly RULE_pl_function = 702;
	public static readonly RULE_comp_options = 703;
	public static readonly RULE_comp_option = 704;
	public static readonly RULE_sharp = 705;
	public static readonly RULE_option_value = 706;
	public static readonly RULE_opt_semi = 707;
	public static readonly RULE_pl_block = 708;
	public static readonly RULE_decl_sect = 709;
	public static readonly RULE_decl_start = 710;
	public static readonly RULE_decl_stmts = 711;
	public static readonly RULE_label_decl = 712;
	public static readonly RULE_decl_stmt = 713;
	public static readonly RULE_decl_statement = 714;
	public static readonly RULE_opt_scrollable = 715;
	public static readonly RULE_decl_cursor_query = 716;
	public static readonly RULE_decl_cursor_args = 717;
	public static readonly RULE_decl_cursor_arglist = 718;
	public static readonly RULE_decl_cursor_arg = 719;
	public static readonly RULE_decl_is_for = 720;
	public static readonly RULE_decl_aliasitem = 721;
	public static readonly RULE_decl_varname = 722;
	public static readonly RULE_decl_const = 723;
	public static readonly RULE_decl_datatype = 724;
	public static readonly RULE_decl_collate = 725;
	public static readonly RULE_decl_notnull = 726;
	public static readonly RULE_decl_defval = 727;
	public static readonly RULE_decl_defkey = 728;
	public static readonly RULE_assign_operator = 729;
	public static readonly RULE_proc_sect = 730;
	public static readonly RULE_proc_stmt = 731;
	public static readonly RULE_stmt_perform = 732;
	public static readonly RULE_stmt_call = 733;
	public static readonly RULE_opt_expr_list = 734;
	public static readonly RULE_stmt_assign = 735;
	public static readonly RULE_stmt_getdiag = 736;
	public static readonly RULE_getdiag_area_opt = 737;
	public static readonly RULE_getdiag_list = 738;
	public static readonly RULE_getdiag_list_item = 739;
	public static readonly RULE_getdiag_item = 740;
	public static readonly RULE_getdiag_target = 741;
	public static readonly RULE_assign_var = 742;
	public static readonly RULE_stmt_if = 743;
	public static readonly RULE_stmt_elsifs = 744;
	public static readonly RULE_stmt_else = 745;
	public static readonly RULE_stmt_case = 746;
	public static readonly RULE_opt_expr_until_when = 747;
	public static readonly RULE_case_when_list = 748;
	public static readonly RULE_case_when = 749;
	public static readonly RULE_opt_case_else = 750;
	public static readonly RULE_stmt_loop = 751;
	public static readonly RULE_stmt_while = 752;
	public static readonly RULE_stmt_for = 753;
	public static readonly RULE_for_control = 754;
	public static readonly RULE_opt_for_using_expression = 755;
	public static readonly RULE_opt_cursor_parameters = 756;
	public static readonly RULE_opt_reverse = 757;
	public static readonly RULE_opt_by_expression = 758;
	public static readonly RULE_for_variable = 759;
	public static readonly RULE_stmt_foreach_a = 760;
	public static readonly RULE_foreach_slice = 761;
	public static readonly RULE_stmt_exit = 762;
	public static readonly RULE_exit_type = 763;
	public static readonly RULE_stmt_return = 764;
	public static readonly RULE_opt_return_result = 765;
	public static readonly RULE_stmt_raise = 766;
	public static readonly RULE_opt_stmt_raise_level = 767;
	public static readonly RULE_opt_raise_list = 768;
	public static readonly RULE_opt_raise_using = 769;
	public static readonly RULE_opt_raise_using_elem = 770;
	public static readonly RULE_opt_raise_using_elem_list = 771;
	public static readonly RULE_stmt_assert = 772;
	public static readonly RULE_opt_stmt_assert_message = 773;
	public static readonly RULE_loop_body = 774;
	public static readonly RULE_stmt_execsql = 775;
	public static readonly RULE_stmt_dynexecute = 776;
	public static readonly RULE_opt_execute_using = 777;
	public static readonly RULE_opt_execute_using_list = 778;
	public static readonly RULE_opt_execute_into = 779;
	public static readonly RULE_stmt_open = 780;
	public static readonly RULE_opt_open_bound_list_item = 781;
	public static readonly RULE_opt_open_bound_list = 782;
	public static readonly RULE_opt_open_using = 783;
	public static readonly RULE_opt_scroll_option = 784;
	public static readonly RULE_opt_scroll_option_no = 785;
	public static readonly RULE_stmt_fetch = 786;
	public static readonly RULE_into_target = 787;
	public static readonly RULE_opt_cursor_from = 788;
	public static readonly RULE_opt_fetch_direction = 789;
	public static readonly RULE_stmt_move = 790;
	public static readonly RULE_stmt_close = 791;
	public static readonly RULE_stmt_null = 792;
	public static readonly RULE_stmt_commit = 793;
	public static readonly RULE_stmt_rollback = 794;
	public static readonly RULE_plsql_opt_transaction_chain = 795;
	public static readonly RULE_stmt_set = 796;
	public static readonly RULE_cursor_variable = 797;
	public static readonly RULE_exception_sect = 798;
	public static readonly RULE_proc_exceptions = 799;
	public static readonly RULE_proc_exception = 800;
	public static readonly RULE_proc_conditions = 801;
	public static readonly RULE_proc_condition = 802;
	public static readonly RULE_opt_block_label = 803;
	public static readonly RULE_opt_loop_label = 804;
	public static readonly RULE_opt_label = 805;
	public static readonly RULE_opt_exitcond = 806;
	public static readonly RULE_any_identifier = 807;
	public static readonly RULE_plsql_unreserved_keyword = 808;
	public static readonly RULE_sql_expression = 809;
	public static readonly RULE_expr_until_then = 810;
	public static readonly RULE_expr_until_semi = 811;
	public static readonly RULE_expr_until_rightbracket = 812;
	public static readonly RULE_expr_until_loop = 813;
	public static readonly RULE_make_execsql_stmt = 814;
	public static readonly RULE_opt_returning_clause_into = 815;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"program", "plsqlroot", "stmtmulti", "stmt", "plsqlconsolecommand", "callstmt", 
		"createrolestmt", "opt_with", "optrolelist", "alteroptrolelist", "alteroptroleelem", 
		"createoptroleelem", "createuserstmt", "alterrolestmt", "opt_in_database", 
		"alterrolesetstmt", "droprolestmt", "creategroupstmt", "altergroupstmt", 
		"add_drop", "createschemastmt", "optschemaname", "optschemaeltlist", "schema_stmt", 
		"variablesetstmt", "set_rest", "generic_set", "set_rest_more", "var_name", 
		"var_list", "var_value", "iso_level", "opt_boolean_or_string", "zone_value", 
		"opt_encoding", "nonreservedword_or_sconst", "variableresetstmt", "reset_rest", 
		"generic_reset", "setresetclause", "functionsetresetclause", "variableshowstmt", 
		"constraintssetstmt", "constraints_set_list", "constraints_set_mode", 
		"checkpointstmt", "discardstmt", "altertablestmt", "alter_table_cmds", 
		"partition_cmd", "index_partition_cmd", "alter_table_cmd", "alter_column_default", 
		"opt_drop_behavior", "opt_collate_clause", "alter_using", "replica_identity", 
		"reloptions", "opt_reloptions", "reloption_list", "reloption_elem", "alter_identity_column_option_list", 
		"alter_identity_column_option", "partitionboundspec", "hash_partbound_elem", 
		"hash_partbound", "altercompositetypestmt", "alter_type_cmds", "alter_type_cmd", 
		"closeportalstmt", "copystmt", "copy_from", "opt_program", "copy_file_name", 
		"copy_options", "copy_opt_list", "copy_opt_item", "opt_binary", "copy_delimiter", 
		"opt_using", "copy_generic_opt_list", "copy_generic_opt_elem", "copy_generic_opt_arg", 
		"copy_generic_opt_arg_list", "copy_generic_opt_arg_list_item", "createstmt", 
		"opttemp", "table_column_list", "opttableelementlist", "opttypedtableelementlist", 
		"tableelementlist", "typedtableelementlist", "tableelement", "typedtableelement", 
		"columnDef", "columnOptions", "colquallist", "colconstraint", "colconstraintelem", 
		"generated_when", "deferrable_trigger", "initially_trigger", "tablelikeclause", 
		"tablelikeoptionlist", "tablelikeoption", "tableconstraint", "constraintelem", 
		"opt_no_inherit", "opt_column_list", "columnlist", "columnElem", "opt_c_include", 
		"key_match", "exclusionconstraintlist", "exclusionconstraintelem", "exclusionwhereclause", 
		"key_actions", "key_update", "key_delete", "key_action", "optinherit", 
		"optpartitionspec", "partitionspec", "part_params", "part_elem", "table_access_method_clause", 
		"optwith", "oncommitoption", "opttablespace", "optconstablespace", "existingindex", 
		"createstatsstmt", "alterstatsstmt", "createasstmt", "create_as_target", 
		"opt_with_data", "creatematviewstmt", "create_mv_target", "optnolog", 
		"refreshmatviewstmt", "createseqstmt", "alterseqstmt", "optseqoptlist", 
		"optparenthesizedseqoptlist", "seqoptlist", "seqoptelem", "opt_by", "numericonly", 
		"numericonly_list", "createplangstmt", "opt_trusted", "handler_name", 
		"opt_inline_handler", "validator_clause", "opt_validator", "opt_procedural", 
		"createtablespacestmt", "opttablespaceowner", "droptablespacestmt", "createextensionstmt", 
		"create_extension_opt_list", "create_extension_opt_item", "alterextensionstmt", 
		"alter_extension_opt_list", "alter_extension_opt_item", "alterextensioncontentsstmt", 
		"createfdwstmt", "fdw_option", "fdw_options", "opt_fdw_options", "alterfdwstmt", 
		"create_generic_options", "generic_option_list", "alter_generic_options", 
		"alter_generic_option_list", "alter_generic_option_elem", "generic_option_elem", 
		"generic_option_name", "generic_option_arg", "createforeignserverstmt", 
		"opt_type", "foreign_server_version", "opt_foreign_server_version", "alterforeignserverstmt", 
		"createforeigntablestmt", "importforeignschemastmt", "import_qualification_type", 
		"import_qualification", "createusermappingstmt", "auth_ident", "dropusermappingstmt", 
		"alterusermappingstmt", "createpolicystmt", "alterpolicystmt", "rowsecurityoptionalexpr", 
		"rowsecurityoptionalwithcheck", "rowsecuritydefaulttorole", "rowsecurityoptionaltorole", 
		"rowsecuritydefaultpermissive", "rowsecuritydefaultforcmd", "row_security_cmd", 
		"createamstmt", "am_type", "createtrigstmt", "triggeractiontime", "foreachrow", 
		"roworstatment", "triggerevents", "triggeroneevent", "triggerreferencing", 
		"triggertransitions", "triggertransition", "transitionoldornew", "transitionrowortable", 
		"transitionrelname", "triggerforspec", "triggerforopteach", "triggerfortype", 
		"triggerwhen", "function_or_procedure", "triggerfuncargs", "triggerfuncarg", 
		"optconstrfromtable", "constraintattributespec", "constraintattributeElem", 
		"createeventtrigstmt", "event_trigger_when_list", "event_trigger_when_item", 
		"event_trigger_value_list", "altereventtrigstmt", "enable_trigger", "createassertionstmt", 
		"definestmt", "definition", "def_list", "def_elem", "def_arg", "old_aggr_definition", 
		"old_aggr_list", "old_aggr_elem", "opt_enum_val_list", "enum_val_list", 
		"alterenumstmt", "opt_if_not_exists", "createopclassstmt", "opclass_item_list", 
		"opclass_item", "opt_default", "opt_opfamily", "opclass_purpose", "opt_recheck", 
		"createopfamilystmt", "alteropfamilystmt", "opclass_drop_list", "opclass_drop", 
		"dropopclassstmt", "dropopfamilystmt", "dropownedstmt", "reassignownedstmt", 
		"dropstmt", "object_type_any_name", "object_type_name", "drop_type_name", 
		"object_type_name_on_any_name", "any_name_list", "any_name", "attrs", 
		"type_name_list", "truncatestmt", "opt_restart_seqs", "commentstmt", "comment_text", 
		"seclabelstmt", "opt_provider", "security_label", "fetchstmt", "fetch_args", 
		"from_in", "opt_from_in", "grantstmt", "revokestmt", "privileges", "beforeprivilegeselectlist", 
		"beforeprivilegeselect", "privilege_list", "privilege", "privilege_target", 
		"grantee_list", "grantee", "opt_grant_grant_option", "grantrolestmt", 
		"revokerolestmt", "opt_grant_admin_option", "opt_granted_by", "alterdefaultprivilegesstmt", 
		"defacloptionlist", "defacloption", "defaclaction", "defacl_privilege_target", 
		"indexstmt", "opt_unique", "opt_concurrently", "opt_index_name", "access_method_clause", 
		"index_params", "index_elem_options", "index_elem", "opt_include", "index_including_params", 
		"opt_collate", "opt_class", "opt_asc_desc", "opt_nulls_order", "createfunctionstmt", 
		"attrilist", "opt_or_replace", "func_args", "func_args_list", "function_with_argtypes_list", 
		"function_with_argtypes", "func_args_with_defaults", "func_args_with_defaults_list", 
		"func_arg", "arg_class", "param_name", "func_return", "func_type", "func_arg_with_default", 
		"aggr_arg", "aggr_args", "aggr_args_list", "aggregate_with_argtypes", 
		"aggregate_with_argtypes_list", "createfunc_opt_list", "common_func_opt_item", 
		"createfunc_opt_item", "func_as", "transform_type_list", "opt_definition", 
		"table_func_column", "table_func_column_list", "alterfunctionstmt", "alterfunc_opt_list", 
		"opt_restrict", "removefuncstmt", "removeaggrstmt", "removeoperstmt", 
		"oper_argtypes", "any_operator", "operator_with_argtypes_list", "operator_with_argtypes", 
		"dostmt", "dostmt_opt_list", "dostmt_opt_item", "createcaststmt", "cast_context", 
		"dropcaststmt", "opt_if_exists", "createtransformstmt", "transform_element_list", 
		"droptransformstmt", "reindexstmt", "reindex_target_type", "reindex_target_multitable", 
		"reindex_option_list", "reindex_option_elem", "altertblspcstmt", "renamestmt", 
		"opt_column", "opt_set_data", "alterobjectdependsstmt", "opt_no", "alterobjectschemastmt", 
		"alteroperatorstmt", "operator_def_list", "operator_def_elem", "operator_def_arg", 
		"altertypestmt", "alterownerstmt", "createpublicationstmt", "opt_publication_for_tables", 
		"publication_for_tables", "alterpublicationstmt", "createsubscriptionstmt", 
		"publication_name_list", "publication_name_item", "altersubscriptionstmt", 
		"dropsubscriptionstmt", "rulestmt", "ruleactionlist", "ruleactionmulti", 
		"ruleactionstmt", "ruleactionstmtOrEmpty", "event", "opt_instead", "notifystmt", 
		"notify_payload", "listenstmt", "unlistenstmt", "transactionstmt", "opt_transaction", 
		"transaction_mode_item", "transaction_mode_list", "transaction_mode_list_or_empty", 
		"opt_transaction_chain", "viewstmt", "opt_check_option", "loadstmt", "createdbstmt", 
		"createdb_opt_list", "createdb_opt_items", "createdb_opt_item", "createdb_opt_name", 
		"opt_equal", "alterdatabasestmt", "alterdatabasesetstmt", "dropdbstmt", 
		"drop_option_list", "drop_option", "altercollationstmt", "altersystemstmt", 
		"createdomainstmt", "alterdomainstmt", "opt_as", "altertsdictionarystmt", 
		"altertsconfigurationstmt", "any_with", "createconversionstmt", "clusterstmt", 
		"cluster_index_specification", "vacuumstmt", "analyzestmt", "vac_analyze_option_list", 
		"analyze_keyword", "vac_analyze_option_elem", "vac_analyze_option_name", 
		"vac_analyze_option_arg", "opt_analyze", "opt_verbose", "opt_full", "opt_freeze", 
		"opt_name_list", "vacuum_relation", "vacuum_relation_list", "opt_vacuum_relation_list", 
		"explainstmt", "explainablestmt", "explain_option_list", "explain_option_elem", 
		"explain_option_name", "explain_option_arg", "preparestmt", "prep_type_clause", 
		"preparablestmt", "executestmt", "execute_param_clause", "deallocatestmt", 
		"insertstmt", "insert_target", "insert_rest", "override_kind", "insert_column_list", 
		"insert_column_item", "opt_on_conflict", "opt_conf_expr", "returning_clause", 
		"deletestmt", "using_clause", "lockstmt", "opt_lock", "lock_type", "opt_nowait", 
		"opt_nowait_or_skip", "updatestmt", "set_clause_list", "set_clause", "set_target", 
		"set_target_list", "declarecursorstmt", "cursor_name", "cursor_options", 
		"opt_hold", "selectstmt", "select_with_parens", "select_no_parens", "select_clause", 
		"simple_select", "set_operator", "set_operator_with_all_or_distinct", 
		"with_clause", "cte_list", "common_table_expr", "opt_materialized", "opt_with_clause", 
		"into_clause", "opt_strict", "opttempTableName", "opt_table", "all_or_distinct", 
		"distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause", 
		"sortby_list", "sortby", "select_limit", "opt_select_limit", "limit_clause", 
		"offset_clause", "select_limit_value", "select_offset_value", "select_fetch_first_value", 
		"i_or_f_const", "row_or_rows", "first_or_next", "group_clause", "group_by_list", 
		"group_by_item", "empty_grouping_set", "rollup_clause", "cube_clause", 
		"grouping_sets_clause", "having_clause", "for_locking_clause", "opt_for_locking_clause", 
		"for_locking_items", "for_locking_item", "for_locking_strength", "locked_rels_list", 
		"values_clause", "from_clause", "from_list", "table_ref", "alias_clause", 
		"opt_alias_clause", "func_alias_clause", "join_type", "join_qual", "relation_expr", 
		"relation_expr_list", "relation_expr_opt_alias", "tablesample_clause", 
		"opt_repeatable_clause", "func_table", "rowsfrom_item", "rowsfrom_list", 
		"opt_col_def_list", "opt_ordinality", "where_clause", "where_or_current_clause", 
		"opttablefuncelementlist", "tablefuncelementlist", "tablefuncelement", 
		"xmltable", "xmltable_column_list", "xmltable_column_el", "xmltable_column_option_list", 
		"xmltable_column_option_el", "xml_namespace_list", "xml_namespace_el", 
		"typename", "opt_array_bounds", "simpletypename", "consttypename", "generictype", 
		"opt_type_modifiers", "numeric", "opt_float", "bit", "constbit", "bitwithlength", 
		"bitwithoutlength", "character", "constcharacter", "character_c", "opt_varying", 
		"constdatetime", "constinterval", "opt_timezone", "opt_interval", "interval_second", 
		"opt_escape", "a_expr", "a_expr_qual", "a_expr_lessless", "a_expr_or", 
		"a_expr_and", "a_expr_in", "a_expr_unary_not", "a_expr_isnull", "a_expr_is_not", 
		"a_expr_compare", "a_expr_like", "a_expr_qual_op", "a_expr_unary_qualop", 
		"a_expr_add", "a_expr_mul", "a_expr_caret", "a_expr_unary_sign", "a_expr_at_time_zone", 
		"a_expr_collate", "a_expr_typecast", "b_expr", "c_expr", "plsqlvariablename", 
		"func_application", "func_expr", "func_expr_windowless", "func_expr_common_subexpr", 
		"xml_root_version", "opt_xml_root_standalone", "xml_attributes", "xml_attribute_list", 
		"xml_attribute_el", "document_or_content", "xml_whitespace_option", "xmlexists_argument", 
		"xml_passing_mech", "within_group_clause", "filter_clause", "window_clause", 
		"window_definition_list", "window_definition", "over_clause", "window_specification", 
		"opt_existing_window_name", "opt_partition_clause", "opt_frame_clause", 
		"frame_extent", "frame_bound", "opt_window_exclusion_clause", "row", "explicit_row", 
		"implicit_row", "sub_type", "all_op", "mathop", "qual_op", "qual_all_op", 
		"subquery_Op", "expr_list", "func_arg_list", "func_arg_expr", "type_list", 
		"array_expr", "array_expr_list", "extract_list", "extract_arg", "unicode_normal_form", 
		"overlay_list", "position_list", "substr_list", "trim_list", "in_expr", 
		"case_expr", "when_clause_list", "when_clause", "case_default", "case_arg", 
		"columnref", "indirection_el", "opt_slice_bound", "indirection", "opt_indirection", 
		"opt_target_list", "target_list", "target_el", "qualified_name_list", 
		"table_qualified_name", "qualified_name", "name_list", "name", "attr_name", 
		"file_name", "func_name", "aexprconst", "xconst", "bconst", "fconst", 
		"iconst", "sconst", "anysconst", "opt_uescape", "signediconst", "groupname", 
		"roleid", "rolespec", "role_list", "colid", "index_method_choices", "exclude_element", 
		"index_paramenters", "wherePredicate", "type_function_name", "nonreservedword", 
		"collabel", "identifier", "plsqlidentifier", "unreserved_keyword", "col_name_keyword", 
		"type_func_name_keyword", "reserved_keyword", "pl_function", "comp_options", 
		"comp_option", "sharp", "option_value", "opt_semi", "pl_block", "decl_sect", 
		"decl_start", "decl_stmts", "label_decl", "decl_stmt", "decl_statement", 
		"opt_scrollable", "decl_cursor_query", "decl_cursor_args", "decl_cursor_arglist", 
		"decl_cursor_arg", "decl_is_for", "decl_aliasitem", "decl_varname", "decl_const", 
		"decl_datatype", "decl_collate", "decl_notnull", "decl_defval", "decl_defkey", 
		"assign_operator", "proc_sect", "proc_stmt", "stmt_perform", "stmt_call", 
		"opt_expr_list", "stmt_assign", "stmt_getdiag", "getdiag_area_opt", "getdiag_list", 
		"getdiag_list_item", "getdiag_item", "getdiag_target", "assign_var", "stmt_if", 
		"stmt_elsifs", "stmt_else", "stmt_case", "opt_expr_until_when", "case_when_list", 
		"case_when", "opt_case_else", "stmt_loop", "stmt_while", "stmt_for", "for_control", 
		"opt_for_using_expression", "opt_cursor_parameters", "opt_reverse", "opt_by_expression", 
		"for_variable", "stmt_foreach_a", "foreach_slice", "stmt_exit", "exit_type", 
		"stmt_return", "opt_return_result", "stmt_raise", "opt_stmt_raise_level", 
		"opt_raise_list", "opt_raise_using", "opt_raise_using_elem", "opt_raise_using_elem_list", 
		"stmt_assert", "opt_stmt_assert_message", "loop_body", "stmt_execsql", 
		"stmt_dynexecute", "opt_execute_using", "opt_execute_using_list", "opt_execute_into", 
		"stmt_open", "opt_open_bound_list_item", "opt_open_bound_list", "opt_open_using", 
		"opt_scroll_option", "opt_scroll_option_no", "stmt_fetch", "into_target", 
		"opt_cursor_from", "opt_fetch_direction", "stmt_move", "stmt_close", "stmt_null", 
		"stmt_commit", "stmt_rollback", "plsql_opt_transaction_chain", "stmt_set", 
		"cursor_variable", "exception_sect", "proc_exceptions", "proc_exception", 
		"proc_conditions", "proc_condition", "opt_block_label", "opt_loop_label", 
		"opt_label", "opt_exitcond", "any_identifier", "plsql_unreserved_keyword", 
		"sql_expression", "expr_until_then", "expr_until_semi", "expr_until_rightbracket", 
		"expr_until_loop", "make_execsql_stmt", "opt_returning_clause_into",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'$'", "'('", "')'", "'['", "']'", "','", "';'", "':'", "'*'", 
		"'='", "'.'", "'+'", "'-'", "'/'", "'^'", "'<'", "'>'", "'<<'", "'>>'", 
		"':='", "'<='", "'=>'", "'>='", "'..'", "'<>'", "'::'", "'%'", undefined, 
		undefined, "'ALL'", "'ANALYSE'", "'ANALYZE'", "'AND'", "'ANY'", "'ARRAY'", 
		"'AS'", "'ASC'", "'ASYMMETRIC'", "'BOTH'", "'CASE'", "'CAST'", "'CHECK'", 
		"'COLLATE'", "'COLUMN'", "'CONSTRAINT'", "'CREATE'", "'CURRENT_CATALOG'", 
		"'CURRENT_DATE'", "'CURRENT_ROLE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
		"'CURRENT_USER'", "'DEFAULT'", "'DEFERRABLE'", "'DESC'", "'DISTINCT'", 
		"'DO'", "'ELSE'", "'EXCEPT'", "'FALSE'", "'FETCH'", "'FOR'", "'FOREIGN'", 
		"'FROM'", "'GRANT'", "'GROUP'", "'HAVING'", "'IN'", "'INITIALLY'", "'INTERSECT'", 
		"'INTO'", "'LATERAL'", "'LEADING'", "'LIMIT'", "'LOCALTIME'", "'LOCALTIMESTAMP'", 
		"'NOT'", "'NULL'", "'OFFSET'", "'ON'", "'ONLY'", "'OR'", "'ORDER'", "'PLACING'", 
		"'PRIMARY'", "'REFERENCES'", "'RETURNING'", "'SELECT'", "'SESSION_USER'", 
		"'SOME'", "'SYMMETRIC'", "'TABLE'", "'THEN'", "'TO'", "'TRAILING'", "'TRUE'", 
		"'UNION'", "'UNIQUE'", "'USER'", "'USING'", "'VARIADIC'", "'WHEN'", "'WHERE'", 
		"'WINDOW'", "'WITH'", "'AUTHORIZATION'", "'BINARY'", "'COLLATION'", "'CONCURRENTLY'", 
		"'CROSS'", "'CURRENT_SCHEMA'", "'FREEZE'", "'FULL'", "'ILIKE'", "'INNER'", 
		"'IS'", "'ISNULL'", "'JOIN'", "'LEFT'", "'LIKE'", "'NATURAL'", "'NOTNULL'", 
		"'OUTER'", "'OVER'", "'OVERLAPS'", "'RIGHT'", "'SIMILAR'", "'VERBOSE'", 
		"'ABORT'", "'ABSOLUTE'", "'ACCESS'", "'ACTION'", "'ADD'", "'ADMIN'", "'AFTER'", 
		"'AGGREGATE'", "'ALSO'", "'ALTER'", "'ALWAYS'", "'ASSERTION'", "'ASSIGNMENT'", 
		"'AT'", "'ATTRIBUTE'", "'BACKWARD'", "'BEFORE'", "'BEGIN'", "'BY'", "'CACHE'", 
		"'CALLED'", "'CASCADE'", "'CASCADED'", "'CATALOG'", "'CHAIN'", "'CHARACTERISTICS'", 
		"'CHECKPOINT'", "'CLASS'", "'CLOSE'", "'CLUSTER'", "'COMMENT'", "'COMMENTS'", 
		"'COMMIT'", "'COMMITTED'", "'CONFIGURATION'", "'CONNECTION'", "'CONSTRAINTS'", 
		"'CONTENT'", "'CONTINUE'", "'CONVERSION'", "'COPY'", "'COST'", "'CSV'", 
		"'CURSOR'", "'CYCLE'", "'DATA'", "'DATABASE'", "'DAY'", "'DEALLOCATE'", 
		"'DECLARE'", "'DEFAULTS'", "'DEFERRED'", "'DEFINER'", "'DELETE'", "'DELIMITER'", 
		"'DELIMITERS'", "'DICTIONARY'", "'DISABLE'", "'DISCARD'", "'DOCUMENT'", 
		"'DOMAIN'", "'DOUBLE'", "'DROP'", "'EACH'", "'ENABLE'", "'ENCODING'", 
		"'ENCRYPTED'", "'ENUM'", "'ESCAPE'", "'EVENT'", "'EXCLUDE'", "'EXCLUDING'", 
		"'EXCLUSIVE'", "'EXECUTE'", "'EXPLAIN'", "'EXTENSION'", "'EXTERNAL'", 
		"'FAMILY'", "'FIRST'", "'FOLLOWING'", "'FORCE'", "'FORWARD'", "'FUNCTION'", 
		"'FUNCTIONS'", "'GLOBAL'", "'GRANTED'", "'HANDLER'", "'HEADER'", "'HOLD'", 
		"'HOUR'", "'IDENTITY'", "'IF'", "'IMMEDIATE'", "'IMMUTABLE'", "'IMPLICIT'", 
		"'INCLUDING'", "'INCREMENT'", "'INDEX'", "'INDEXES'", "'INHERIT'", "'NOINHERIT'", 
		"'SUPERUSER'", "'NOSUPERUSER'", "'CREATEDB'", "'NOCREATEDB'", "'CREATEROLE'", 
		"'NOCREATEROLE'", "'CREATEUSER'", "'NOCREATEUSER'", "'INHERITS'", "'INLINE'", 
		"'INSENSITIVE'", "'INSERT'", "'INSTEAD'", "'INVOKER'", "'ISOLATION'", 
		"'KEY'", "'LABEL'", "'LANGUAGE'", "'LARGE'", "'LAST'", "'LEAKPROOF'", 
		"'LEVEL'", "'LISTEN'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'MAPPING'", 
		"'MATCH'", "'MATERIALIZED'", "'MAXVALUE'", "'MINUTE'", "'MINVALUE'", "'MODE'", 
		"'MONTH'", "'MOVE'", "'NAME'", "'NAMES'", "'NEXT'", "'NO'", "'NOTHING'", 
		"'NOTIFY'", "'NOWAIT'", "'NULLS'", "'OBJECT'", "'OF'", "'OFF'", "'OIDS'", 
		"'OPERATOR'", "'OPTION'", "'OPTIONS'", "'OWNED'", "'OWNER'", "'PARSER'", 
		"'PARTIAL'", "'PARTITION'", "'PASSING'", "'PASSWORD'", "'PLANS'", "'PRECEDING'", 
		"'PREPARE'", "'PREPARED'", "'PRESERVE'", "'PRIOR'", "'PRIVILEGES'", "'PROCEDURAL'", 
		"'PROCEDURE'", "'PROGRAM'", "'QUOTE'", "'RANGE'", "'READ'", "'REASSIGN'", 
		"'RECHECK'", "'RECURSIVE'", "'REF'", "'REFRESH'", "'REINDEX'", "'RELATIVE'", 
		"'RELEASE'", "'RENAME'", "'REPEATABLE'", "'REPLACE'", "'REPLICA'", "'RESET'", 
		"'RESTART'", "'RESTRICT'", "'RETURNS'", "'REVOKE'", "'ROLE'", "'ROLLBACK'", 
		"'ROWS'", "'RULE'", "'SAVEPOINT'", "'SCHEMA'", "'SCROLL'", "'SEARCH'", 
		"'SECOND'", "'SECURITY'", "'SEQUENCE'", "'SEQUENCES'", "'SERIALIZABLE'", 
		"'SERVER'", "'SESSION'", "'SET'", "'SHARE'", "'SHOW'", "'SIMPLE'", "'SNAPSHOT'", 
		"'STABLE'", "'STANDALONE'", "'START'", "'STATEMENT'", "'STATISTICS'", 
		"'STDIN'", "'STDOUT'", "'STORAGE'", "'STRICT'", "'STRIP'", "'SYSID'", 
		"'SYSTEM'", "'TABLES'", "'TABLESPACE'", "'TEMP'", "'TEMPLATE'", "'TEMPORARY'", 
		"'TEXT'", "'TRANSACTION'", "'TRIGGER'", "'TRUNCATE'", "'TRUSTED'", "'TYPE'", 
		"'TYPES'", "'UNBOUNDED'", "'UNCOMMITTED'", "'UNENCRYPTED'", "'UNKNOWN'", 
		"'UNLISTEN'", "'UNLOGGED'", "'UNTIL'", "'UPDATE'", "'VACUUM'", "'VALID'", 
		"'VALIDATE'", "'VALIDATOR'", "'VARYING'", "'VERSION'", "'VIEW'", "'VOLATILE'", 
		"'WHITESPACE'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'WRITE'", "'XML'", 
		"'YEAR'", "'YES'", "'ZONE'", "'BETWEEN'", "'BIGINT'", "'BIT'", "'BOOLEAN'", 
		"'CHAR'", "'CHARACTER'", "'COALESCE'", "'DEC'", "'DECIMAL'", "'EXISTS'", 
		"'EXTRACT'", "'FLOAT'", "'GREATEST'", "'INOUT'", "'INT'", "'INTEGER'", 
		"'INTERVAL'", "'LEAST'", "'NATIONAL'", "'NCHAR'", "'NONE'", "'NULLIF'", 
		"'NUMERIC'", "'OVERLAY'", "'POSITION'", "'PRECISION'", "'REAL'", "'ROW'", 
		"'SETOF'", "'SMALLINT'", "'SUBSTRING'", "'TIME'", "'TIMESTAMP'", "'TREAT'", 
		"'TRIM'", "'VALUES'", "'VARCHAR'", "'XMLATTRIBUTES'", "'XMLCONCAT'", "'XMLELEMENT'", 
		"'XMLEXISTS'", "'XMLFOREST'", "'XMLPARSE'", "'XMLPI'", "'XMLROOT'", "'XMLSERIALIZE'", 
		"'CALL'", "'CURRENT'", "'ATTACH'", "'DETACH'", "'EXPRESSION'", "'GENERATED'", 
		"'LOGGED'", "'STORED'", "'INCLUDE'", "'ROUTINE'", "'TRANSFORM'", "'IMPORT'", 
		"'POLICY'", "'METHOD'", "'REFERENCING'", "'NEW'", "'OLD'", "'VALUE'", 
		"'SUBSCRIPTION'", "'PUBLICATION'", "'OUT'", "'END'", "'ROUTINES'", "'SCHEMAS'", 
		"'PROCEDURES'", "'INPUT'", "'SUPPORT'", "'PARALLEL'", "'SQL'", "'DEPENDS'", 
		"'OVERRIDING'", "'CONFLICT'", "'SKIP'", "'LOCKED'", "'TIES'", "'ROLLUP'", 
		"'CUBE'", "'GROUPING'", "'SETS'", "'TABLESAMPLE'", "'ORDINALITY'", "'XMLTABLE'", 
		"'COLUMNS'", "'XMLNAMESPACES'", "'ROWTYPE'", "'NORMALIZED'", "'WITHIN'", 
		"'FILTER'", "'GROUPS'", "'OTHERS'", "'NFC'", "'NFD'", "'NFKC'", "'NFKD'", 
		"'UESCAPE'", "'VIEWS'", "'NORMALIZE'", "'DUMP'", "'PRINT_STRICT_PARAMS'", 
		"'VARIABLE_CONFLICT'", "'ERROR'", "'USE_VARIABLE'", "'USE_COLUMN'", "'ALIAS'", 
		"'CONSTANT'", "'PERFORM'", "'GET'", "'DIAGNOSTICS'", "'STACKED'", "'ELSIF'", 
		"'WHILE'", "'REVERSE'", "'FOREACH'", "'SLICE'", "'EXIT'", "'RETURN'", 
		"'QUERY'", "'RAISE'", "'SQLSTATE'", "'DEBUG'", "'LOG'", "'INFO'", "'NOTICE'", 
		"'WARNING'", "'EXCEPTION'", "'ASSERT'", "'LOOP'", "'OPEN'", "'PEFERENCES'", 
		"'USAGE'", "'CONNECT'", "'PUBLIC'", undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "'\\''", undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "'''",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "Dollar", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"COMMA", "SEMI", "COLON", "STAR", "EQUAL", "DOT", "PLUS", "MINUS", "SLASH", 
		"CARET", "LT", "GT", "LESS_LESS", "GREATER_GREATER", "COLON_EQUALS", "LESS_EQUALS", 
		"EQUALS_GREATER", "GREATER_EQUALS", "DOT_DOT", "NOT_EQUALS", "TYPECAST", 
		"PERCENT", "PARAM", "Operator", "KW_ALL", "KW_ANALYSE", "KW_ANALYZE", 
		"KW_AND", "KW_ANY", "KW_ARRAY", "KW_AS", "KW_ASC", "KW_ASYMMETRIC", "KW_BOTH", 
		"KW_CASE", "KW_CAST", "KW_CHECK", "KW_COLLATE", "KW_COLUMN", "KW_CONSTRAINT", 
		"KW_CREATE", "KW_CURRENT_CATALOG", "KW_CURRENT_DATE", "KW_CURRENT_ROLE", 
		"KW_CURRENT_TIME", "KW_CURRENT_TIMESTAMP", "KW_CURRENT_USER", "KW_DEFAULT", 
		"KW_DEFERRABLE", "KW_DESC", "KW_DISTINCT", "KW_DO", "KW_ELSE", "KW_EXCEPT", 
		"KW_FALSE", "KW_FETCH", "KW_FOR", "KW_FOREIGN", "KW_FROM", "KW_GRANT", 
		"KW_GROUP", "KW_HAVING", "KW_IN", "KW_INITIALLY", "KW_INTERSECT", "KW_INTO", 
		"KW_LATERAL", "KW_LEADING", "KW_LIMIT", "KW_LOCALTIME", "KW_LOCALTIMESTAMP", 
		"KW_NOT", "KW_NULL", "KW_OFFSET", "KW_ON", "KW_ONLY", "KW_OR", "KW_ORDER", 
		"KW_PLACING", "KW_PRIMARY", "KW_REFERENCES", "KW_RETURNING", "KW_SELECT", 
		"KW_SESSION_USER", "KW_SOME", "KW_SYMMETRIC", "KW_TABLE", "KW_THEN", "KW_TO", 
		"KW_TRAILING", "KW_TRUE", "KW_UNION", "KW_UNIQUE", "KW_USER", "KW_USING", 
		"KW_VARIADIC", "KW_WHEN", "KW_WHERE", "KW_WINDOW", "KW_WITH", "KW_AUTHORIZATION", 
		"KW_BINARY", "KW_COLLATION", "KW_CONCURRENTLY", "KW_CROSS", "KW_CURRENT_SCHEMA", 
		"KW_FREEZE", "KW_FULL", "KW_ILIKE", "KW_INNER", "KW_IS", "KW_ISNULL", 
		"KW_JOIN", "KW_LEFT", "KW_LIKE", "KW_NATURAL", "KW_NOTNULL", "KW_OUTER", 
		"KW_OVER", "KW_OVERLAPS", "KW_RIGHT", "KW_SIMILAR", "KW_VERBOSE", "KW_ABORT", 
		"KW_ABSOLUTE", "KW_ACCESS", "KW_ACTION", "KW_ADD", "KW_ADMIN", "KW_AFTER", 
		"KW_AGGREGATE", "KW_ALSO", "KW_ALTER", "KW_ALWAYS", "KW_ASSERTION", "KW_ASSIGNMENT", 
		"KW_AT", "KW_ATTRIBUTE", "KW_BACKWARD", "KW_BEFORE", "KW_BEGIN", "KW_BY", 
		"KW_CACHE", "KW_CALLED", "KW_CASCADE", "KW_CASCADED", "KW_CATALOG", "KW_CHAIN", 
		"KW_CHARACTERISTICS", "KW_CHECKPOINT", "KW_CLASS", "KW_CLOSE", "KW_CLUSTER", 
		"KW_COMMENT", "KW_COMMENTS", "KW_COMMIT", "KW_COMMITTED", "KW_CONFIGURATION", 
		"KW_CONNECTION", "KW_CONSTRAINTS", "KW_CONTENT", "KW_CONTINUE", "KW_CONVERSION", 
		"KW_COPY", "KW_COST", "KW_CSV", "KW_CURSOR", "KW_CYCLE", "KW_DATA", "KW_DATABASE", 
		"KW_DAY", "KW_DEALLOCATE", "KW_DECLARE", "KW_DEFAULTS", "KW_DEFERRED", 
		"KW_DEFINER", "KW_DELETE", "KW_DELIMITER", "KW_DELIMITERS", "KW_DICTIONARY", 
		"KW_DISABLE", "KW_DISCARD", "KW_DOCUMENT", "KW_DOMAIN", "KW_DOUBLE", "KW_DROP", 
		"KW_EACH", "KW_ENABLE", "KW_ENCODING", "KW_ENCRYPTED", "KW_ENUM", "KW_ESCAPE", 
		"KW_EVENT", "KW_EXCLUDE", "KW_EXCLUDING", "KW_EXCLUSIVE", "KW_EXECUTE", 
		"KW_EXPLAIN", "KW_EXTENSION", "KW_EXTERNAL", "KW_FAMILY", "KW_FIRST", 
		"KW_FOLLOWING", "KW_FORCE", "KW_FORWARD", "KW_FUNCTION", "KW_FUNCTIONS", 
		"KW_GLOBAL", "KW_GRANTED", "KW_HANDLER", "KW_HEADER", "KW_HOLD", "KW_HOUR", 
		"KW_IDENTITY", "KW_IF", "KW_IMMEDIATE", "KW_IMMUTABLE", "KW_IMPLICIT", 
		"KW_INCLUDING", "KW_INCREMENT", "KW_INDEX", "KW_INDEXES", "KW_INHERIT", 
		"KW_NOINHERIT", "KW_SUPERUSER", "KW_NOSUPERUSER", "KW_CREATEDB", "KW_NOCREATEDB", 
		"KW_CREATEROLE", "KW_NOCREATEROLE", "KW_CREATEUSER", "KW_NOCREATEUSER", 
		"KW_INHERITS", "KW_INLINE", "KW_INSENSITIVE", "KW_INSERT", "KW_INSTEAD", 
		"KW_INVOKER", "KW_ISOLATION", "KW_KEY", "KW_LABEL", "KW_LANGUAGE", "KW_LARGE", 
		"KW_LAST", "KW_LEAKPROOF", "KW_LEVEL", "KW_LISTEN", "KW_LOAD", "KW_LOCAL", 
		"KW_LOCATION", "KW_LOCK", "KW_MAPPING", "KW_MATCH", "KW_MATERIALIZED", 
		"KW_MAXVALUE", "KW_MINUTE", "KW_MINVALUE", "KW_MODE", "KW_MONTH", "KW_MOVE", 
		"KW_NAME", "KW_NAMES", "KW_NEXT", "KW_NO", "KW_NOTHING", "KW_NOTIFY", 
		"KW_NOWAIT", "KW_NULLS", "KW_OBJECT", "KW_OF", "KW_OFF", "KW_OIDS", "KW_OPERATOR", 
		"KW_OPTION", "KW_OPTIONS", "KW_OWNED", "KW_OWNER", "KW_PARSER", "KW_PARTIAL", 
		"KW_PARTITION", "KW_PASSING", "KW_PASSWORD", "KW_PLANS", "KW_PRECEDING", 
		"KW_PREPARE", "KW_PREPARED", "KW_PRESERVE", "KW_PRIOR", "KW_PRIVILEGES", 
		"KW_PROCEDURAL", "KW_PROCEDURE", "KW_PROGRAM", "KW_QUOTE", "KW_RANGE", 
		"KW_READ", "KW_REASSIGN", "KW_RECHECK", "KW_RECURSIVE", "KW_REF", "KW_REFRESH", 
		"KW_REINDEX", "KW_RELATIVE", "KW_RELEASE", "KW_RENAME", "KW_REPEATABLE", 
		"KW_REPLACE", "KW_REPLICA", "KW_RESET", "KW_RESTART", "KW_RESTRICT", "KW_RETURNS", 
		"KW_REVOKE", "KW_ROLE", "KW_ROLLBACK", "KW_ROWS", "KW_RULE", "KW_SAVEPOINT", 
		"KW_SCHEMA", "KW_SCROLL", "KW_SEARCH", "KW_SECOND", "KW_SECURITY", "KW_SEQUENCE", 
		"KW_SEQUENCES", "KW_SERIALIZABLE", "KW_SERVER", "KW_SESSION", "KW_SET", 
		"KW_SHARE", "KW_SHOW", "KW_SIMPLE", "KW_SNAPSHOT", "KW_STABLE", "KW_STANDALONE", 
		"KW_START", "KW_STATEMENT", "KW_STATISTICS", "KW_STDIN", "KW_STDOUT", 
		"KW_STORAGE", "KW_STRICT", "KW_STRIP", "KW_SYSID", "KW_SYSTEM", "KW_TABLES", 
		"KW_TABLESPACE", "KW_TEMP", "KW_TEMPLATE", "KW_TEMPORARY", "KW_TEXT", 
		"KW_TRANSACTION", "KW_TRIGGER", "KW_TRUNCATE", "KW_TRUSTED", "KW_TYPE", 
		"KW_TYPES", "KW_UNBOUNDED", "KW_UNCOMMITTED", "KW_UNENCRYPTED", "KW_UNKNOWN", 
		"KW_UNLISTEN", "KW_UNLOGGED", "KW_UNTIL", "KW_UPDATE", "KW_VACUUM", "KW_VALID", 
		"KW_VALIDATE", "KW_VALIDATOR", "KW_VARYING", "KW_VERSION", "KW_VIEW", 
		"KW_VOLATILE", "KW_WHITESPACE", "KW_WITHOUT", "KW_WORK", "KW_WRAPPER", 
		"KW_WRITE", "KW_XML", "KW_YEAR", "KW_YES", "KW_ZONE", "KW_BETWEEN", "KW_BIGINT", 
		"KW_BIT", "KW_BOOLEAN", "KW_CHAR", "KW_CHARACTER", "KW_COALESCE", "KW_DEC", 
		"KW_DECIMAL", "KW_EXISTS", "KW_EXTRACT", "KW_FLOAT", "KW_GREATEST", "KW_INOUT", 
		"KW_INT", "KW_INTEGER", "KW_INTERVAL", "KW_LEAST", "KW_NATIONAL", "KW_NCHAR", 
		"KW_NONE", "KW_NULLIF", "KW_NUMERIC", "KW_OVERLAY", "KW_POSITION", "KW_PRECISION", 
		"KW_REAL", "KW_ROW", "KW_SETOF", "KW_SMALLINT", "KW_SUBSTRING", "KW_TIME", 
		"KW_TIMESTAMP", "KW_TREAT", "KW_TRIM", "KW_VALUES", "KW_VARCHAR", "KW_XMLATTRIBUTES", 
		"KW_XMLCONCAT", "KW_XMLELEMENT", "KW_XMLEXISTS", "KW_XMLFOREST", "KW_XMLPARSE", 
		"KW_XMLPI", "KW_XMLROOT", "KW_XMLSERIALIZE", "KW_CALL", "KW_CURRENT", 
		"KW_ATTACH", "KW_DETACH", "KW_EXPRESSION", "KW_GENERATED", "KW_LOGGED", 
		"KW_STORED", "KW_INCLUDE", "KW_ROUTINE", "KW_TRANSFORM", "KW_IMPORT", 
		"KW_POLICY", "KW_METHOD", "KW_REFERENCING", "KW_NEW", "KW_OLD", "KW_VALUE", 
		"KW_SUBSCRIPTION", "KW_PUBLICATION", "KW_OUT", "KW_END", "KW_ROUTINES", 
		"KW_SCHEMAS", "KW_PROCEDURES", "KW_INPUT", "KW_SUPPORT", "KW_PARALLEL", 
		"KW_SQL", "KW_DEPENDS", "KW_OVERRIDING", "KW_CONFLICT", "KW_SKIP", "KW_LOCKED", 
		"KW_TIES", "KW_ROLLUP", "KW_CUBE", "KW_GROUPING", "KW_SETS", "KW_TABLESAMPLE", 
		"KW_ORDINALITY", "KW_XMLTABLE", "KW_COLUMNS", "KW_XMLNAMESPACES", "KW_ROWTYPE", 
		"KW_NORMALIZED", "KW_WITHIN", "KW_FILTER", "KW_GROUPS", "KW_OTHERS", "KW_NFC", 
		"KW_NFD", "KW_NFKC", "KW_NFKD", "KW_UESCAPE", "KW_VIEWS", "KW_NORMALIZE", 
		"KW_DUMP", "KW_PRINT_STRICT_PARAMS", "KW_VARIABLE_CONFLICT", "KW_ERROR", 
		"KW_USE_VARIABLE", "KW_USE_COLUMN", "KW_ALIAS", "KW_CONSTANT", "KW_PERFORM", 
		"KW_GET", "KW_DIAGNOSTICS", "KW_STACKED", "KW_ELSIF", "KW_WHILE", "KW_REVERSE", 
		"KW_FOREACH", "KW_SLICE", "KW_EXIT", "KW_RETURN", "KW_QUERY", "KW_RAISE", 
		"KW_SQLSTATE", "KW_DEBUG", "KW_LOG", "KW_INFO", "KW_NOTICE", "KW_WARNING", 
		"KW_EXCEPTION", "KW_ASSERT", "KW_LOOP", "KW_OPEN", "KW_PEFERENCES", "KW_USAGE", 
		"KW_CONNECT", "KW_PUBLIC", "Identifier", "QuotedIdentifier", "UnterminatedQuotedIdentifier", 
		"InvalidQuotedIdentifier", "InvalidUnterminatedQuotedIdentifier", "UnicodeQuotedIdentifier", 
		"UnterminatedUnicodeQuotedIdentifier", "InvalidUnicodeQuotedIdentifier", 
		"InvalidUnterminatedUnicodeQuotedIdentifier", "StringConstant", "UnterminatedStringConstant", 
		"UnicodeEscapeStringConstant", "UnterminatedUnicodeEscapeStringConstant", 
		"BeginDollarStringConstant", "BinaryStringConstant", "UnterminatedBinaryStringConstant", 
		"InvalidBinaryStringConstant", "InvalidUnterminatedBinaryStringConstant", 
		"HexadecimalStringConstant", "UnterminatedHexadecimalStringConstant", 
		"InvalidHexadecimalStringConstant", "InvalidUnterminatedHexadecimalStringConstant", 
		"Integral", "NumericFail", "Numeric", "PLSQLVARIABLENAME", "PLSQLIDENTIFIER", 
		"Whitespace", "Newline", "LineComment", "BlockComment", "UnterminatedBlockComment", 
		"MetaCommand", "EndMetaCommand", "ErrorCharacter", "EscapeStringConstant", 
		"UnterminatedEscapeStringConstant", "InvalidEscapeStringConstant", "InvalidUnterminatedEscapeStringConstant", 
		"DollarText", "EndDollarStringConstant", "AfterEscapeStringConstantWithNewlineMode_Continued",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(PostgreSQLParser._LITERAL_NAMES, PostgreSQLParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return PostgreSQLParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "PostgreSQLParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return PostgreSQLParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return PostgreSQLParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(PostgreSQLParser._ATN, this);
	}
	// @RuleVersion(0)
	public program(): ProgramContext {
		let _localctx: ProgramContext = new ProgramContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, PostgreSQLParser.RULE_program);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1632;
			this.stmtmulti();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public plsqlroot(): PlsqlrootContext {
		let _localctx: PlsqlrootContext = new PlsqlrootContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, PostgreSQLParser.RULE_plsqlroot);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1634;
			this.pl_function();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmtmulti(): StmtmultiContext {
		let _localctx: StmtmultiContext = new StmtmultiContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, PostgreSQLParser.RULE_stmtmulti);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1642;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.OPEN_PAREN || _la === PostgreSQLParser.KW_ANALYSE || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (PostgreSQLParser.KW_ANALYZE - 32)) | (1 << (PostgreSQLParser.KW_CREATE - 32)) | (1 << (PostgreSQLParser.KW_DO - 32)) | (1 << (PostgreSQLParser.KW_FETCH - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (PostgreSQLParser.KW_GRANT - 65)) | (1 << (PostgreSQLParser.KW_SELECT - 65)) | (1 << (PostgreSQLParser.KW_TABLE - 65)))) !== 0) || _la === PostgreSQLParser.KW_WITH || _la === PostgreSQLParser.KW_ABORT || ((((_la - 138)) & ~0x1F) === 0 && ((1 << (_la - 138)) & ((1 << (PostgreSQLParser.KW_ALTER - 138)) | (1 << (PostgreSQLParser.KW_BEGIN - 138)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 138)) | (1 << (PostgreSQLParser.KW_CLOSE - 138)) | (1 << (PostgreSQLParser.KW_CLUSTER - 138)) | (1 << (PostgreSQLParser.KW_COMMENT - 138)) | (1 << (PostgreSQLParser.KW_COMMIT - 138)) | (1 << (PostgreSQLParser.KW_COPY - 138)))) !== 0) || ((((_la - 177)) & ~0x1F) === 0 && ((1 << (_la - 177)) & ((1 << (PostgreSQLParser.KW_DEALLOCATE - 177)) | (1 << (PostgreSQLParser.KW_DECLARE - 177)) | (1 << (PostgreSQLParser.KW_DELETE - 177)) | (1 << (PostgreSQLParser.KW_DISCARD - 177)) | (1 << (PostgreSQLParser.KW_DROP - 177)) | (1 << (PostgreSQLParser.KW_EXECUTE - 177)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 177)))) !== 0) || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & ((1 << (PostgreSQLParser.KW_INSERT - 241)) | (1 << (PostgreSQLParser.KW_LISTEN - 241)) | (1 << (PostgreSQLParser.KW_LOAD - 241)) | (1 << (PostgreSQLParser.KW_LOCK - 241)) | (1 << (PostgreSQLParser.KW_MOVE - 241)) | (1 << (PostgreSQLParser.KW_NOTIFY - 241)))) !== 0) || ((((_la - 290)) & ~0x1F) === 0 && ((1 << (_la - 290)) & ((1 << (PostgreSQLParser.KW_PREPARE - 290)) | (1 << (PostgreSQLParser.KW_REASSIGN - 290)) | (1 << (PostgreSQLParser.KW_REFRESH - 290)) | (1 << (PostgreSQLParser.KW_REINDEX - 290)) | (1 << (PostgreSQLParser.KW_RELEASE - 290)) | (1 << (PostgreSQLParser.KW_RESET - 290)) | (1 << (PostgreSQLParser.KW_REVOKE - 290)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 290)))) !== 0) || ((((_la - 322)) & ~0x1F) === 0 && ((1 << (_la - 322)) & ((1 << (PostgreSQLParser.KW_SAVEPOINT - 322)) | (1 << (PostgreSQLParser.KW_SECURITY - 322)) | (1 << (PostgreSQLParser.KW_SET - 322)) | (1 << (PostgreSQLParser.KW_SHOW - 322)) | (1 << (PostgreSQLParser.KW_START - 322)))) !== 0) || ((((_la - 358)) & ~0x1F) === 0 && ((1 << (_la - 358)) & ((1 << (PostgreSQLParser.KW_TRUNCATE - 358)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 358)) | (1 << (PostgreSQLParser.KW_UPDATE - 358)) | (1 << (PostgreSQLParser.KW_VACUUM - 358)))) !== 0) || ((((_la - 422)) & ~0x1F) === 0 && ((1 << (_la - 422)) & ((1 << (PostgreSQLParser.KW_VALUES - 422)) | (1 << (PostgreSQLParser.KW_CALL - 422)) | (1 << (PostgreSQLParser.KW_IMPORT - 422)))) !== 0) || _la === PostgreSQLParser.KW_END || _la === PostgreSQLParser.MetaCommand) {
				{
				{
				this.state = 1636;
				this.stmt();
				this.state = 1638;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.SEMI) {
					{
					this.state = 1637;
					this.match(PostgreSQLParser.SEMI);
					}
				}

				}
				}
				this.state = 1644;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt(): StmtContext {
		let _localctx: StmtContext = new StmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, PostgreSQLParser.RULE_stmt);
		try {
			this.state = 1769;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 2, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1645;
				this.altereventtrigstmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1646;
				this.altercollationstmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1647;
				this.alterdatabasestmt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1648;
				this.alterdatabasesetstmt();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1649;
				this.alterdefaultprivilegesstmt();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1650;
				this.alterdomainstmt();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1651;
				this.alterenumstmt();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1652;
				this.alterextensionstmt();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1653;
				this.alterextensioncontentsstmt();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1654;
				this.alterfdwstmt();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1655;
				this.alterforeignserverstmt();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1656;
				this.alterfunctionstmt();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1657;
				this.altergroupstmt();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1658;
				this.alterobjectdependsstmt();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1659;
				this.alterobjectschemastmt();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1660;
				this.alterownerstmt();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1661;
				this.alteroperatorstmt();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1662;
				this.altertypestmt();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1663;
				this.alterpolicystmt();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 1664;
				this.alterseqstmt();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 1665;
				this.altersystemstmt();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 1666;
				this.altertablestmt();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 1667;
				this.altertblspcstmt();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 1668;
				this.altercompositetypestmt();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 1669;
				this.alterpublicationstmt();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 1670;
				this.alterrolesetstmt();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 1671;
				this.alterrolestmt();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 1672;
				this.altersubscriptionstmt();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 1673;
				this.alterstatsstmt();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 1674;
				this.altertsconfigurationstmt();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 1675;
				this.altertsdictionarystmt();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 1676;
				this.alterusermappingstmt();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 1677;
				this.analyzestmt();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 1678;
				this.callstmt();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 1679;
				this.checkpointstmt();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 1680;
				this.closeportalstmt();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 1681;
				this.clusterstmt();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 1682;
				this.commentstmt();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 1683;
				this.constraintssetstmt();
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 1684;
				this.copystmt();
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 1685;
				this.createamstmt();
				}
				break;

			case 42:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 1686;
				this.createasstmt();
				}
				break;

			case 43:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 1687;
				this.createassertionstmt();
				}
				break;

			case 44:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 1688;
				this.createcaststmt();
				}
				break;

			case 45:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 1689;
				this.createconversionstmt();
				}
				break;

			case 46:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 1690;
				this.createdomainstmt();
				}
				break;

			case 47:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 1691;
				this.createextensionstmt();
				}
				break;

			case 48:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 1692;
				this.createfdwstmt();
				}
				break;

			case 49:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 1693;
				this.createforeignserverstmt();
				}
				break;

			case 50:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 1694;
				this.createforeigntablestmt();
				}
				break;

			case 51:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 1695;
				this.createfunctionstmt();
				}
				break;

			case 52:
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 1696;
				this.creategroupstmt();
				}
				break;

			case 53:
				this.enterOuterAlt(_localctx, 53);
				{
				this.state = 1697;
				this.creatematviewstmt();
				}
				break;

			case 54:
				this.enterOuterAlt(_localctx, 54);
				{
				this.state = 1698;
				this.createopclassstmt();
				}
				break;

			case 55:
				this.enterOuterAlt(_localctx, 55);
				{
				this.state = 1699;
				this.createopfamilystmt();
				}
				break;

			case 56:
				this.enterOuterAlt(_localctx, 56);
				{
				this.state = 1700;
				this.createpublicationstmt();
				}
				break;

			case 57:
				this.enterOuterAlt(_localctx, 57);
				{
				this.state = 1701;
				this.alteropfamilystmt();
				}
				break;

			case 58:
				this.enterOuterAlt(_localctx, 58);
				{
				this.state = 1702;
				this.createpolicystmt();
				}
				break;

			case 59:
				this.enterOuterAlt(_localctx, 59);
				{
				this.state = 1703;
				this.createplangstmt();
				}
				break;

			case 60:
				this.enterOuterAlt(_localctx, 60);
				{
				this.state = 1704;
				this.createschemastmt();
				}
				break;

			case 61:
				this.enterOuterAlt(_localctx, 61);
				{
				this.state = 1705;
				this.createseqstmt();
				}
				break;

			case 62:
				this.enterOuterAlt(_localctx, 62);
				{
				this.state = 1706;
				this.createstmt();
				}
				break;

			case 63:
				this.enterOuterAlt(_localctx, 63);
				{
				this.state = 1707;
				this.createsubscriptionstmt();
				}
				break;

			case 64:
				this.enterOuterAlt(_localctx, 64);
				{
				this.state = 1708;
				this.createstatsstmt();
				}
				break;

			case 65:
				this.enterOuterAlt(_localctx, 65);
				{
				this.state = 1709;
				this.createtablespacestmt();
				}
				break;

			case 66:
				this.enterOuterAlt(_localctx, 66);
				{
				this.state = 1710;
				this.createtransformstmt();
				}
				break;

			case 67:
				this.enterOuterAlt(_localctx, 67);
				{
				this.state = 1711;
				this.createtrigstmt();
				}
				break;

			case 68:
				this.enterOuterAlt(_localctx, 68);
				{
				this.state = 1712;
				this.createeventtrigstmt();
				}
				break;

			case 69:
				this.enterOuterAlt(_localctx, 69);
				{
				this.state = 1713;
				this.createrolestmt();
				}
				break;

			case 70:
				this.enterOuterAlt(_localctx, 70);
				{
				this.state = 1714;
				this.createuserstmt();
				}
				break;

			case 71:
				this.enterOuterAlt(_localctx, 71);
				{
				this.state = 1715;
				this.createusermappingstmt();
				}
				break;

			case 72:
				this.enterOuterAlt(_localctx, 72);
				{
				this.state = 1716;
				this.createdbstmt();
				}
				break;

			case 73:
				this.enterOuterAlt(_localctx, 73);
				{
				this.state = 1717;
				this.deallocatestmt();
				}
				break;

			case 74:
				this.enterOuterAlt(_localctx, 74);
				{
				this.state = 1718;
				this.declarecursorstmt();
				}
				break;

			case 75:
				this.enterOuterAlt(_localctx, 75);
				{
				this.state = 1719;
				this.definestmt();
				}
				break;

			case 76:
				this.enterOuterAlt(_localctx, 76);
				{
				this.state = 1720;
				this.deletestmt();
				}
				break;

			case 77:
				this.enterOuterAlt(_localctx, 77);
				{
				this.state = 1721;
				this.discardstmt();
				}
				break;

			case 78:
				this.enterOuterAlt(_localctx, 78);
				{
				this.state = 1722;
				this.dostmt();
				}
				break;

			case 79:
				this.enterOuterAlt(_localctx, 79);
				{
				this.state = 1723;
				this.dropcaststmt();
				}
				break;

			case 80:
				this.enterOuterAlt(_localctx, 80);
				{
				this.state = 1724;
				this.dropopclassstmt();
				}
				break;

			case 81:
				this.enterOuterAlt(_localctx, 81);
				{
				this.state = 1725;
				this.dropopfamilystmt();
				}
				break;

			case 82:
				this.enterOuterAlt(_localctx, 82);
				{
				this.state = 1726;
				this.dropownedstmt();
				}
				break;

			case 83:
				this.enterOuterAlt(_localctx, 83);
				{
				this.state = 1727;
				this.dropstmt();
				}
				break;

			case 84:
				this.enterOuterAlt(_localctx, 84);
				{
				this.state = 1728;
				this.dropsubscriptionstmt();
				}
				break;

			case 85:
				this.enterOuterAlt(_localctx, 85);
				{
				this.state = 1729;
				this.droptablespacestmt();
				}
				break;

			case 86:
				this.enterOuterAlt(_localctx, 86);
				{
				this.state = 1730;
				this.droptransformstmt();
				}
				break;

			case 87:
				this.enterOuterAlt(_localctx, 87);
				{
				this.state = 1731;
				this.droprolestmt();
				}
				break;

			case 88:
				this.enterOuterAlt(_localctx, 88);
				{
				this.state = 1732;
				this.dropusermappingstmt();
				}
				break;

			case 89:
				this.enterOuterAlt(_localctx, 89);
				{
				this.state = 1733;
				this.dropdbstmt();
				}
				break;

			case 90:
				this.enterOuterAlt(_localctx, 90);
				{
				this.state = 1734;
				this.executestmt();
				}
				break;

			case 91:
				this.enterOuterAlt(_localctx, 91);
				{
				this.state = 1735;
				this.explainstmt();
				}
				break;

			case 92:
				this.enterOuterAlt(_localctx, 92);
				{
				this.state = 1736;
				this.fetchstmt();
				}
				break;

			case 93:
				this.enterOuterAlt(_localctx, 93);
				{
				this.state = 1737;
				this.grantstmt();
				}
				break;

			case 94:
				this.enterOuterAlt(_localctx, 94);
				{
				this.state = 1738;
				this.grantrolestmt();
				}
				break;

			case 95:
				this.enterOuterAlt(_localctx, 95);
				{
				this.state = 1739;
				this.importforeignschemastmt();
				}
				break;

			case 96:
				this.enterOuterAlt(_localctx, 96);
				{
				this.state = 1740;
				this.indexstmt();
				}
				break;

			case 97:
				this.enterOuterAlt(_localctx, 97);
				{
				this.state = 1741;
				this.insertstmt();
				}
				break;

			case 98:
				this.enterOuterAlt(_localctx, 98);
				{
				this.state = 1742;
				this.listenstmt();
				}
				break;

			case 99:
				this.enterOuterAlt(_localctx, 99);
				{
				this.state = 1743;
				this.refreshmatviewstmt();
				}
				break;

			case 100:
				this.enterOuterAlt(_localctx, 100);
				{
				this.state = 1744;
				this.loadstmt();
				}
				break;

			case 101:
				this.enterOuterAlt(_localctx, 101);
				{
				this.state = 1745;
				this.lockstmt();
				}
				break;

			case 102:
				this.enterOuterAlt(_localctx, 102);
				{
				this.state = 1746;
				this.notifystmt();
				}
				break;

			case 103:
				this.enterOuterAlt(_localctx, 103);
				{
				this.state = 1747;
				this.preparestmt();
				}
				break;

			case 104:
				this.enterOuterAlt(_localctx, 104);
				{
				this.state = 1748;
				this.reassignownedstmt();
				}
				break;

			case 105:
				this.enterOuterAlt(_localctx, 105);
				{
				this.state = 1749;
				this.reindexstmt();
				}
				break;

			case 106:
				this.enterOuterAlt(_localctx, 106);
				{
				this.state = 1750;
				this.removeaggrstmt();
				}
				break;

			case 107:
				this.enterOuterAlt(_localctx, 107);
				{
				this.state = 1751;
				this.removefuncstmt();
				}
				break;

			case 108:
				this.enterOuterAlt(_localctx, 108);
				{
				this.state = 1752;
				this.removeoperstmt();
				}
				break;

			case 109:
				this.enterOuterAlt(_localctx, 109);
				{
				this.state = 1753;
				this.renamestmt();
				}
				break;

			case 110:
				this.enterOuterAlt(_localctx, 110);
				{
				this.state = 1754;
				this.revokestmt();
				}
				break;

			case 111:
				this.enterOuterAlt(_localctx, 111);
				{
				this.state = 1755;
				this.revokerolestmt();
				}
				break;

			case 112:
				this.enterOuterAlt(_localctx, 112);
				{
				this.state = 1756;
				this.rulestmt();
				}
				break;

			case 113:
				this.enterOuterAlt(_localctx, 113);
				{
				this.state = 1757;
				this.seclabelstmt();
				}
				break;

			case 114:
				this.enterOuterAlt(_localctx, 114);
				{
				this.state = 1758;
				this.selectstmt();
				}
				break;

			case 115:
				this.enterOuterAlt(_localctx, 115);
				{
				this.state = 1759;
				this.transactionstmt();
				}
				break;

			case 116:
				this.enterOuterAlt(_localctx, 116);
				{
				this.state = 1760;
				this.truncatestmt();
				}
				break;

			case 117:
				this.enterOuterAlt(_localctx, 117);
				{
				this.state = 1761;
				this.unlistenstmt();
				}
				break;

			case 118:
				this.enterOuterAlt(_localctx, 118);
				{
				this.state = 1762;
				this.updatestmt();
				}
				break;

			case 119:
				this.enterOuterAlt(_localctx, 119);
				{
				this.state = 1763;
				this.vacuumstmt();
				}
				break;

			case 120:
				this.enterOuterAlt(_localctx, 120);
				{
				this.state = 1764;
				this.variableresetstmt();
				}
				break;

			case 121:
				this.enterOuterAlt(_localctx, 121);
				{
				this.state = 1765;
				this.variablesetstmt();
				}
				break;

			case 122:
				this.enterOuterAlt(_localctx, 122);
				{
				this.state = 1766;
				this.variableshowstmt();
				}
				break;

			case 123:
				this.enterOuterAlt(_localctx, 123);
				{
				this.state = 1767;
				this.viewstmt();
				}
				break;

			case 124:
				this.enterOuterAlt(_localctx, 124);
				{
				this.state = 1768;
				this.plsqlconsolecommand();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public plsqlconsolecommand(): PlsqlconsolecommandContext {
		let _localctx: PlsqlconsolecommandContext = new PlsqlconsolecommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, PostgreSQLParser.RULE_plsqlconsolecommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1771;
			this.match(PostgreSQLParser.MetaCommand);
			this.state = 1773;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.EndMetaCommand) {
				{
				this.state = 1772;
				this.match(PostgreSQLParser.EndMetaCommand);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callstmt(): CallstmtContext {
		let _localctx: CallstmtContext = new CallstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, PostgreSQLParser.RULE_callstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1775;
			this.match(PostgreSQLParser.KW_CALL);
			this.state = 1776;
			this.func_application();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createrolestmt(): CreaterolestmtContext {
		let _localctx: CreaterolestmtContext = new CreaterolestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, PostgreSQLParser.RULE_createrolestmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1778;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 1779;
			this.match(PostgreSQLParser.KW_ROLE);
			this.state = 1780;
			this.roleid();
			this.state = 1782;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 4, this._ctx) ) {
			case 1:
				{
				this.state = 1781;
				this.opt_with();
				}
				break;
			}
			this.state = 1784;
			this.optrolelist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_with(): Opt_withContext {
		let _localctx: Opt_withContext = new Opt_withContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, PostgreSQLParser.RULE_opt_with);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1786;
			this.match(PostgreSQLParser.KW_WITH);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optrolelist(): OptrolelistContext {
		let _localctx: OptrolelistContext = new OptrolelistContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, PostgreSQLParser.RULE_optrolelist);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1791;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1788;
					this.createoptroleelem();
					}
					}
				}
				this.state = 1793;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 5, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alteroptrolelist(): AlteroptrolelistContext {
		let _localctx: AlteroptrolelistContext = new AlteroptrolelistContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, PostgreSQLParser.RULE_alteroptrolelist);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1797;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 6, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1794;
					this.alteroptroleelem();
					}
					}
				}
				this.state = 1799;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 6, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alteroptroleelem(): AlteroptroleelemContext {
		let _localctx: AlteroptroleelemContext = new AlteroptroleelemContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, PostgreSQLParser.RULE_alteroptroleelem);
		let _la: number;
		try {
			this.state = 1822;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_PASSWORD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1800;
				this.match(PostgreSQLParser.KW_PASSWORD);
				this.state = 1803;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.StringConstant:
				case PostgreSQLParser.UnicodeEscapeStringConstant:
				case PostgreSQLParser.BeginDollarStringConstant:
				case PostgreSQLParser.EscapeStringConstant:
					{
					this.state = 1801;
					this.sconst();
					}
					break;
				case PostgreSQLParser.KW_NULL:
					{
					this.state = 1802;
					this.match(PostgreSQLParser.KW_NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1805;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_ENCRYPTED || _la === PostgreSQLParser.KW_UNENCRYPTED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1806;
				this.match(PostgreSQLParser.KW_PASSWORD);
				this.state = 1807;
				this.sconst();
				}
				break;
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_NOINHERIT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1808;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_INHERIT || _la === PostgreSQLParser.KW_NOINHERIT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParser.KW_CREATEUSER:
			case PostgreSQLParser.KW_NOCREATEUSER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1809;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_CREATEUSER || _la === PostgreSQLParser.KW_NOCREATEUSER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParser.KW_CREATEROLE:
			case PostgreSQLParser.KW_NOCREATEROLE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1810;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_CREATEROLE || _la === PostgreSQLParser.KW_NOCREATEROLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParser.KW_CREATEDB:
			case PostgreSQLParser.KW_NOCREATEDB:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1811;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_CREATEDB || _la === PostgreSQLParser.KW_NOCREATEDB)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParser.KW_SUPERUSER:
			case PostgreSQLParser.KW_NOSUPERUSER:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1812;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_SUPERUSER || _la === PostgreSQLParser.KW_NOSUPERUSER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParser.KW_CONNECTION:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1813;
				this.match(PostgreSQLParser.KW_CONNECTION);
				this.state = 1814;
				this.match(PostgreSQLParser.KW_LIMIT);
				this.state = 1815;
				this.signediconst();
				}
				break;
			case PostgreSQLParser.KW_VALID:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1816;
				this.match(PostgreSQLParser.KW_VALID);
				this.state = 1817;
				this.match(PostgreSQLParser.KW_UNTIL);
				this.state = 1818;
				this.sconst();
				}
				break;
			case PostgreSQLParser.KW_USER:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1819;
				this.match(PostgreSQLParser.KW_USER);
				this.state = 1820;
				this.role_list();
				}
				break;
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1821;
				this.identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createoptroleelem(): CreateoptroleelemContext {
		let _localctx: CreateoptroleelemContext = new CreateoptroleelemContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, PostgreSQLParser.RULE_createoptroleelem);
		let _la: number;
		try {
			this.state = 1834;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_USER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_NOINHERIT:
			case PostgreSQLParser.KW_SUPERUSER:
			case PostgreSQLParser.KW_NOSUPERUSER:
			case PostgreSQLParser.KW_CREATEDB:
			case PostgreSQLParser.KW_NOCREATEDB:
			case PostgreSQLParser.KW_CREATEROLE:
			case PostgreSQLParser.KW_NOCREATEROLE:
			case PostgreSQLParser.KW_CREATEUSER:
			case PostgreSQLParser.KW_NOCREATEUSER:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1824;
				this.alteroptroleelem();
				}
				break;
			case PostgreSQLParser.KW_SYSID:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1825;
				this.match(PostgreSQLParser.KW_SYSID);
				this.state = 1826;
				this.iconst();
				}
				break;
			case PostgreSQLParser.KW_ADMIN:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1827;
				this.match(PostgreSQLParser.KW_ADMIN);
				this.state = 1828;
				this.role_list();
				}
				break;
			case PostgreSQLParser.KW_ROLE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1829;
				this.match(PostgreSQLParser.KW_ROLE);
				this.state = 1830;
				this.role_list();
				}
				break;
			case PostgreSQLParser.KW_IN:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1831;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 1832;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_GROUP || _la === PostgreSQLParser.KW_ROLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1833;
				this.role_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createuserstmt(): CreateuserstmtContext {
		let _localctx: CreateuserstmtContext = new CreateuserstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, PostgreSQLParser.RULE_createuserstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1836;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 1837;
			this.match(PostgreSQLParser.KW_USER);
			this.state = 1838;
			this.roleid();
			this.state = 1840;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 10, this._ctx) ) {
			case 1:
				{
				this.state = 1839;
				this.opt_with();
				}
				break;
			}
			this.state = 1842;
			this.optrolelist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterrolestmt(): AlterrolestmtContext {
		let _localctx: AlterrolestmtContext = new AlterrolestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, PostgreSQLParser.RULE_alterrolestmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1844;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 1845;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_USER || _la === PostgreSQLParser.KW_ROLE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1846;
			this.rolespec();
			this.state = 1848;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 11, this._ctx) ) {
			case 1:
				{
				this.state = 1847;
				this.opt_with();
				}
				break;
			}
			this.state = 1850;
			this.alteroptrolelist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_in_database(): Opt_in_databaseContext {
		let _localctx: Opt_in_databaseContext = new Opt_in_databaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, PostgreSQLParser.RULE_opt_in_database);
		try {
			this.state = 1856;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_SET:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_IN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1853;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 1854;
				this.match(PostgreSQLParser.KW_DATABASE);
				this.state = 1855;
				this.name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterrolesetstmt(): AlterrolesetstmtContext {
		let _localctx: AlterrolesetstmtContext = new AlterrolesetstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, PostgreSQLParser.RULE_alterrolesetstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1858;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 1859;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_USER || _la === PostgreSQLParser.KW_ROLE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1862;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_ALL:
				{
				this.state = 1860;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_CURRENT_USER:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_SESSION_USER:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.KW_PUBLIC:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				{
				this.state = 1861;
				this.rolespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1864;
			this.opt_in_database();
			this.state = 1865;
			this.setresetclause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public droprolestmt(): DroprolestmtContext {
		let _localctx: DroprolestmtContext = new DroprolestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, PostgreSQLParser.RULE_droprolestmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1867;
			this.match(PostgreSQLParser.KW_DROP);
			this.state = 1868;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_GROUP || _la === PostgreSQLParser.KW_USER || _la === PostgreSQLParser.KW_ROLE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1871;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 14, this._ctx) ) {
			case 1:
				{
				this.state = 1869;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 1870;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 1873;
			this.role_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public creategroupstmt(): CreategroupstmtContext {
		let _localctx: CreategroupstmtContext = new CreategroupstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, PostgreSQLParser.RULE_creategroupstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1875;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 1876;
			this.match(PostgreSQLParser.KW_GROUP);
			this.state = 1877;
			this.groupname();
			this.state = 1879;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 15, this._ctx) ) {
			case 1:
				{
				this.state = 1878;
				this.opt_with();
				}
				break;
			}
			this.state = 1881;
			this.optrolelist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public altergroupstmt(): AltergroupstmtContext {
		let _localctx: AltergroupstmtContext = new AltergroupstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, PostgreSQLParser.RULE_altergroupstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1883;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 1884;
			this.match(PostgreSQLParser.KW_GROUP);
			this.state = 1885;
			this.rolespec();
			this.state = 1886;
			this.add_drop();
			this.state = 1887;
			this.match(PostgreSQLParser.KW_USER);
			this.state = 1888;
			this.role_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public add_drop(): Add_dropContext {
		let _localctx: Add_dropContext = new Add_dropContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, PostgreSQLParser.RULE_add_drop);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1890;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_ADD || _la === PostgreSQLParser.KW_DROP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createschemastmt(): CreateschemastmtContext {
		let _localctx: CreateschemastmtContext = new CreateschemastmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, PostgreSQLParser.RULE_createschemastmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1892;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 1893;
			this.match(PostgreSQLParser.KW_SCHEMA);
			this.state = 1897;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 16, this._ctx) ) {
			case 1:
				{
				this.state = 1894;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 1895;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 1896;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 1905;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 18, this._ctx) ) {
			case 1:
				{
				this.state = 1900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 92)) & ~0x1F) === 0 && ((1 << (_la - 92)) & ((1 << (PostgreSQLParser.KW_TABLE - 92)) | (1 << (PostgreSQLParser.KW_IS - 92)) | (1 << (PostgreSQLParser.KW_OUTER - 92)))) !== 0) || ((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (PostgreSQLParser.KW_OVER - 124)) | (1 << (PostgreSQLParser.KW_ABORT - 124)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 124)) | (1 << (PostgreSQLParser.KW_ACCESS - 124)) | (1 << (PostgreSQLParser.KW_ACTION - 124)) | (1 << (PostgreSQLParser.KW_ADD - 124)) | (1 << (PostgreSQLParser.KW_ADMIN - 124)) | (1 << (PostgreSQLParser.KW_AFTER - 124)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 124)) | (1 << (PostgreSQLParser.KW_ALSO - 124)) | (1 << (PostgreSQLParser.KW_ALTER - 124)) | (1 << (PostgreSQLParser.KW_ALWAYS - 124)) | (1 << (PostgreSQLParser.KW_ASSERTION - 124)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 124)) | (1 << (PostgreSQLParser.KW_AT - 124)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 124)) | (1 << (PostgreSQLParser.KW_BACKWARD - 124)) | (1 << (PostgreSQLParser.KW_BEFORE - 124)) | (1 << (PostgreSQLParser.KW_BEGIN - 124)) | (1 << (PostgreSQLParser.KW_BY - 124)) | (1 << (PostgreSQLParser.KW_CACHE - 124)) | (1 << (PostgreSQLParser.KW_CALLED - 124)) | (1 << (PostgreSQLParser.KW_CASCADE - 124)) | (1 << (PostgreSQLParser.KW_CASCADED - 124)) | (1 << (PostgreSQLParser.KW_CATALOG - 124)) | (1 << (PostgreSQLParser.KW_CHAIN - 124)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 124)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 124)))) !== 0) || ((((_la - 156)) & ~0x1F) === 0 && ((1 << (_la - 156)) & ((1 << (PostgreSQLParser.KW_CLASS - 156)) | (1 << (PostgreSQLParser.KW_CLOSE - 156)) | (1 << (PostgreSQLParser.KW_CLUSTER - 156)) | (1 << (PostgreSQLParser.KW_COMMENT - 156)) | (1 << (PostgreSQLParser.KW_COMMENTS - 156)) | (1 << (PostgreSQLParser.KW_COMMIT - 156)) | (1 << (PostgreSQLParser.KW_COMMITTED - 156)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 156)) | (1 << (PostgreSQLParser.KW_CONNECTION - 156)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 156)) | (1 << (PostgreSQLParser.KW_CONTENT - 156)) | (1 << (PostgreSQLParser.KW_CONTINUE - 156)) | (1 << (PostgreSQLParser.KW_CONVERSION - 156)) | (1 << (PostgreSQLParser.KW_COPY - 156)) | (1 << (PostgreSQLParser.KW_COST - 156)) | (1 << (PostgreSQLParser.KW_CSV - 156)) | (1 << (PostgreSQLParser.KW_CURSOR - 156)) | (1 << (PostgreSQLParser.KW_CYCLE - 156)) | (1 << (PostgreSQLParser.KW_DATA - 156)) | (1 << (PostgreSQLParser.KW_DATABASE - 156)) | (1 << (PostgreSQLParser.KW_DAY - 156)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 156)) | (1 << (PostgreSQLParser.KW_DECLARE - 156)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 156)) | (1 << (PostgreSQLParser.KW_DEFERRED - 156)) | (1 << (PostgreSQLParser.KW_DEFINER - 156)) | (1 << (PostgreSQLParser.KW_DELETE - 156)) | (1 << (PostgreSQLParser.KW_DELIMITER - 156)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 156)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 156)) | (1 << (PostgreSQLParser.KW_DISABLE - 156)) | (1 << (PostgreSQLParser.KW_DISCARD - 156)))) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (PostgreSQLParser.KW_DOCUMENT - 188)) | (1 << (PostgreSQLParser.KW_DOMAIN - 188)) | (1 << (PostgreSQLParser.KW_DOUBLE - 188)) | (1 << (PostgreSQLParser.KW_DROP - 188)) | (1 << (PostgreSQLParser.KW_EACH - 188)) | (1 << (PostgreSQLParser.KW_ENABLE - 188)) | (1 << (PostgreSQLParser.KW_ENCODING - 188)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 188)) | (1 << (PostgreSQLParser.KW_ENUM - 188)) | (1 << (PostgreSQLParser.KW_ESCAPE - 188)) | (1 << (PostgreSQLParser.KW_EVENT - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 188)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 188)) | (1 << (PostgreSQLParser.KW_EXECUTE - 188)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 188)) | (1 << (PostgreSQLParser.KW_EXTENSION - 188)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 188)) | (1 << (PostgreSQLParser.KW_FAMILY - 188)) | (1 << (PostgreSQLParser.KW_FIRST - 188)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 188)) | (1 << (PostgreSQLParser.KW_FORCE - 188)) | (1 << (PostgreSQLParser.KW_FORWARD - 188)) | (1 << (PostgreSQLParser.KW_FUNCTION - 188)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 188)) | (1 << (PostgreSQLParser.KW_GLOBAL - 188)) | (1 << (PostgreSQLParser.KW_GRANTED - 188)) | (1 << (PostgreSQLParser.KW_HANDLER - 188)) | (1 << (PostgreSQLParser.KW_HEADER - 188)) | (1 << (PostgreSQLParser.KW_HOLD - 188)) | (1 << (PostgreSQLParser.KW_HOUR - 188)) | (1 << (PostgreSQLParser.KW_IDENTITY - 188)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (PostgreSQLParser.KW_IF - 220)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 220)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 220)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 220)) | (1 << (PostgreSQLParser.KW_INCLUDING - 220)) | (1 << (PostgreSQLParser.KW_INCREMENT - 220)) | (1 << (PostgreSQLParser.KW_INDEX - 220)) | (1 << (PostgreSQLParser.KW_INDEXES - 220)) | (1 << (PostgreSQLParser.KW_INHERIT - 220)) | (1 << (PostgreSQLParser.KW_INHERITS - 220)) | (1 << (PostgreSQLParser.KW_INLINE - 220)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 220)) | (1 << (PostgreSQLParser.KW_INSERT - 220)) | (1 << (PostgreSQLParser.KW_INSTEAD - 220)) | (1 << (PostgreSQLParser.KW_INVOKER - 220)) | (1 << (PostgreSQLParser.KW_ISOLATION - 220)) | (1 << (PostgreSQLParser.KW_KEY - 220)) | (1 << (PostgreSQLParser.KW_LABEL - 220)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 220)) | (1 << (PostgreSQLParser.KW_LARGE - 220)) | (1 << (PostgreSQLParser.KW_LAST - 220)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 220)) | (1 << (PostgreSQLParser.KW_LEVEL - 220)))) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & ((1 << (PostgreSQLParser.KW_LISTEN - 252)) | (1 << (PostgreSQLParser.KW_LOAD - 252)) | (1 << (PostgreSQLParser.KW_LOCAL - 252)) | (1 << (PostgreSQLParser.KW_LOCATION - 252)) | (1 << (PostgreSQLParser.KW_LOCK - 252)) | (1 << (PostgreSQLParser.KW_MAPPING - 252)) | (1 << (PostgreSQLParser.KW_MATCH - 252)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 252)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 252)) | (1 << (PostgreSQLParser.KW_MINUTE - 252)) | (1 << (PostgreSQLParser.KW_MINVALUE - 252)) | (1 << (PostgreSQLParser.KW_MODE - 252)) | (1 << (PostgreSQLParser.KW_MONTH - 252)) | (1 << (PostgreSQLParser.KW_MOVE - 252)) | (1 << (PostgreSQLParser.KW_NAME - 252)) | (1 << (PostgreSQLParser.KW_NAMES - 252)) | (1 << (PostgreSQLParser.KW_NEXT - 252)) | (1 << (PostgreSQLParser.KW_NO - 252)) | (1 << (PostgreSQLParser.KW_NOTHING - 252)) | (1 << (PostgreSQLParser.KW_NOTIFY - 252)) | (1 << (PostgreSQLParser.KW_NOWAIT - 252)) | (1 << (PostgreSQLParser.KW_NULLS - 252)) | (1 << (PostgreSQLParser.KW_OBJECT - 252)) | (1 << (PostgreSQLParser.KW_OF - 252)) | (1 << (PostgreSQLParser.KW_OFF - 252)) | (1 << (PostgreSQLParser.KW_OIDS - 252)) | (1 << (PostgreSQLParser.KW_OPERATOR - 252)) | (1 << (PostgreSQLParser.KW_OPTION - 252)) | (1 << (PostgreSQLParser.KW_OPTIONS - 252)) | (1 << (PostgreSQLParser.KW_OWNED - 252)) | (1 << (PostgreSQLParser.KW_OWNER - 252)) | (1 << (PostgreSQLParser.KW_PARSER - 252)))) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & ((1 << (PostgreSQLParser.KW_PARTIAL - 284)) | (1 << (PostgreSQLParser.KW_PARTITION - 284)) | (1 << (PostgreSQLParser.KW_PASSING - 284)) | (1 << (PostgreSQLParser.KW_PASSWORD - 284)) | (1 << (PostgreSQLParser.KW_PLANS - 284)) | (1 << (PostgreSQLParser.KW_PRECEDING - 284)) | (1 << (PostgreSQLParser.KW_PREPARE - 284)) | (1 << (PostgreSQLParser.KW_PREPARED - 284)) | (1 << (PostgreSQLParser.KW_PRESERVE - 284)) | (1 << (PostgreSQLParser.KW_PRIOR - 284)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 284)) | (1 << (PostgreSQLParser.KW_PROGRAM - 284)) | (1 << (PostgreSQLParser.KW_QUOTE - 284)) | (1 << (PostgreSQLParser.KW_RANGE - 284)) | (1 << (PostgreSQLParser.KW_READ - 284)) | (1 << (PostgreSQLParser.KW_REASSIGN - 284)) | (1 << (PostgreSQLParser.KW_RECHECK - 284)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 284)) | (1 << (PostgreSQLParser.KW_REF - 284)) | (1 << (PostgreSQLParser.KW_REFRESH - 284)) | (1 << (PostgreSQLParser.KW_REINDEX - 284)) | (1 << (PostgreSQLParser.KW_RELATIVE - 284)) | (1 << (PostgreSQLParser.KW_RELEASE - 284)) | (1 << (PostgreSQLParser.KW_RENAME - 284)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 284)) | (1 << (PostgreSQLParser.KW_REPLACE - 284)) | (1 << (PostgreSQLParser.KW_REPLICA - 284)) | (1 << (PostgreSQLParser.KW_RESET - 284)) | (1 << (PostgreSQLParser.KW_RESTART - 284)) | (1 << (PostgreSQLParser.KW_RESTRICT - 284)))) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & ((1 << (PostgreSQLParser.KW_RETURNS - 316)) | (1 << (PostgreSQLParser.KW_REVOKE - 316)) | (1 << (PostgreSQLParser.KW_ROLE - 316)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 316)) | (1 << (PostgreSQLParser.KW_ROWS - 316)) | (1 << (PostgreSQLParser.KW_RULE - 316)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 316)) | (1 << (PostgreSQLParser.KW_SCHEMA - 316)) | (1 << (PostgreSQLParser.KW_SCROLL - 316)) | (1 << (PostgreSQLParser.KW_SEARCH - 316)) | (1 << (PostgreSQLParser.KW_SECOND - 316)) | (1 << (PostgreSQLParser.KW_SECURITY - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 316)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 316)) | (1 << (PostgreSQLParser.KW_SERVER - 316)) | (1 << (PostgreSQLParser.KW_SESSION - 316)) | (1 << (PostgreSQLParser.KW_SET - 316)) | (1 << (PostgreSQLParser.KW_SHARE - 316)) | (1 << (PostgreSQLParser.KW_SHOW - 316)) | (1 << (PostgreSQLParser.KW_SIMPLE - 316)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 316)) | (1 << (PostgreSQLParser.KW_STABLE - 316)) | (1 << (PostgreSQLParser.KW_STANDALONE - 316)) | (1 << (PostgreSQLParser.KW_START - 316)) | (1 << (PostgreSQLParser.KW_STATEMENT - 316)) | (1 << (PostgreSQLParser.KW_STATISTICS - 316)) | (1 << (PostgreSQLParser.KW_STDIN - 316)) | (1 << (PostgreSQLParser.KW_STDOUT - 316)) | (1 << (PostgreSQLParser.KW_STORAGE - 316)) | (1 << (PostgreSQLParser.KW_STRICT - 316)) | (1 << (PostgreSQLParser.KW_STRIP - 316)))) !== 0) || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (PostgreSQLParser.KW_SYSID - 348)) | (1 << (PostgreSQLParser.KW_SYSTEM - 348)) | (1 << (PostgreSQLParser.KW_TABLES - 348)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 348)) | (1 << (PostgreSQLParser.KW_TEMP - 348)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 348)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 348)) | (1 << (PostgreSQLParser.KW_TEXT - 348)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 348)) | (1 << (PostgreSQLParser.KW_TRIGGER - 348)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 348)) | (1 << (PostgreSQLParser.KW_TRUSTED - 348)) | (1 << (PostgreSQLParser.KW_TYPE - 348)) | (1 << (PostgreSQLParser.KW_TYPES - 348)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 348)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 348)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 348)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 348)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 348)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 348)) | (1 << (PostgreSQLParser.KW_UNTIL - 348)) | (1 << (PostgreSQLParser.KW_UPDATE - 348)) | (1 << (PostgreSQLParser.KW_VACUUM - 348)) | (1 << (PostgreSQLParser.KW_VALID - 348)) | (1 << (PostgreSQLParser.KW_VALIDATE - 348)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 348)) | (1 << (PostgreSQLParser.KW_VARYING - 348)) | (1 << (PostgreSQLParser.KW_VERSION - 348)) | (1 << (PostgreSQLParser.KW_VIEW - 348)) | (1 << (PostgreSQLParser.KW_VOLATILE - 348)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 348)) | (1 << (PostgreSQLParser.KW_WITHOUT - 348)))) !== 0) || ((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (PostgreSQLParser.KW_WORK - 380)) | (1 << (PostgreSQLParser.KW_WRAPPER - 380)) | (1 << (PostgreSQLParser.KW_WRITE - 380)) | (1 << (PostgreSQLParser.KW_XML - 380)) | (1 << (PostgreSQLParser.KW_YEAR - 380)) | (1 << (PostgreSQLParser.KW_YES - 380)) | (1 << (PostgreSQLParser.KW_ZONE - 380)) | (1 << (PostgreSQLParser.KW_BETWEEN - 380)) | (1 << (PostgreSQLParser.KW_BIGINT - 380)) | (1 << (PostgreSQLParser.KW_BIT - 380)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 380)) | (1 << (PostgreSQLParser.KW_CHAR - 380)) | (1 << (PostgreSQLParser.KW_CHARACTER - 380)) | (1 << (PostgreSQLParser.KW_COALESCE - 380)) | (1 << (PostgreSQLParser.KW_DEC - 380)) | (1 << (PostgreSQLParser.KW_DECIMAL - 380)) | (1 << (PostgreSQLParser.KW_EXISTS - 380)) | (1 << (PostgreSQLParser.KW_EXTRACT - 380)) | (1 << (PostgreSQLParser.KW_FLOAT - 380)) | (1 << (PostgreSQLParser.KW_GREATEST - 380)) | (1 << (PostgreSQLParser.KW_INOUT - 380)) | (1 << (PostgreSQLParser.KW_INT - 380)) | (1 << (PostgreSQLParser.KW_INTEGER - 380)) | (1 << (PostgreSQLParser.KW_INTERVAL - 380)) | (1 << (PostgreSQLParser.KW_LEAST - 380)) | (1 << (PostgreSQLParser.KW_NATIONAL - 380)) | (1 << (PostgreSQLParser.KW_NCHAR - 380)) | (1 << (PostgreSQLParser.KW_NONE - 380)) | (1 << (PostgreSQLParser.KW_NULLIF - 380)) | (1 << (PostgreSQLParser.KW_NUMERIC - 380)) | (1 << (PostgreSQLParser.KW_OVERLAY - 380)) | (1 << (PostgreSQLParser.KW_POSITION - 380)))) !== 0) || ((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & ((1 << (PostgreSQLParser.KW_PRECISION - 412)) | (1 << (PostgreSQLParser.KW_REAL - 412)) | (1 << (PostgreSQLParser.KW_ROW - 412)) | (1 << (PostgreSQLParser.KW_SETOF - 412)) | (1 << (PostgreSQLParser.KW_SMALLINT - 412)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 412)) | (1 << (PostgreSQLParser.KW_TIME - 412)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 412)) | (1 << (PostgreSQLParser.KW_TREAT - 412)) | (1 << (PostgreSQLParser.KW_TRIM - 412)) | (1 << (PostgreSQLParser.KW_VALUES - 412)) | (1 << (PostgreSQLParser.KW_VARCHAR - 412)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 412)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 412)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 412)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 412)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 412)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 412)) | (1 << (PostgreSQLParser.KW_XMLPI - 412)) | (1 << (PostgreSQLParser.KW_XMLROOT - 412)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 412)) | (1 << (PostgreSQLParser.KW_CALL - 412)) | (1 << (PostgreSQLParser.KW_CURRENT - 412)) | (1 << (PostgreSQLParser.KW_ATTACH - 412)) | (1 << (PostgreSQLParser.KW_DETACH - 412)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 412)) | (1 << (PostgreSQLParser.KW_GENERATED - 412)) | (1 << (PostgreSQLParser.KW_LOGGED - 412)) | (1 << (PostgreSQLParser.KW_STORED - 412)) | (1 << (PostgreSQLParser.KW_INCLUDE - 412)) | (1 << (PostgreSQLParser.KW_ROUTINE - 412)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 412)))) !== 0) || ((((_la - 444)) & ~0x1F) === 0 && ((1 << (_la - 444)) & ((1 << (PostgreSQLParser.KW_IMPORT - 444)) | (1 << (PostgreSQLParser.KW_POLICY - 444)) | (1 << (PostgreSQLParser.KW_METHOD - 444)) | (1 << (PostgreSQLParser.KW_REFERENCING - 444)) | (1 << (PostgreSQLParser.KW_NEW - 444)) | (1 << (PostgreSQLParser.KW_OLD - 444)) | (1 << (PostgreSQLParser.KW_VALUE - 444)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 444)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 444)) | (1 << (PostgreSQLParser.KW_OUT - 444)) | (1 << (PostgreSQLParser.KW_ROUTINES - 444)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 444)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 444)) | (1 << (PostgreSQLParser.KW_INPUT - 444)) | (1 << (PostgreSQLParser.KW_SUPPORT - 444)) | (1 << (PostgreSQLParser.KW_PARALLEL - 444)) | (1 << (PostgreSQLParser.KW_SQL - 444)) | (1 << (PostgreSQLParser.KW_DEPENDS - 444)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 444)) | (1 << (PostgreSQLParser.KW_CONFLICT - 444)) | (1 << (PostgreSQLParser.KW_SKIP - 444)) | (1 << (PostgreSQLParser.KW_LOCKED - 444)) | (1 << (PostgreSQLParser.KW_TIES - 444)) | (1 << (PostgreSQLParser.KW_ROLLUP - 444)) | (1 << (PostgreSQLParser.KW_CUBE - 444)) | (1 << (PostgreSQLParser.KW_GROUPING - 444)) | (1 << (PostgreSQLParser.KW_SETS - 444)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 444)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 444)) | (1 << (PostgreSQLParser.KW_COLUMNS - 444)))) !== 0) || ((((_la - 476)) & ~0x1F) === 0 && ((1 << (_la - 476)) & ((1 << (PostgreSQLParser.KW_XMLNAMESPACES - 476)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 476)) | (1 << (PostgreSQLParser.KW_WITHIN - 476)) | (1 << (PostgreSQLParser.KW_FILTER - 476)) | (1 << (PostgreSQLParser.KW_GROUPS - 476)) | (1 << (PostgreSQLParser.KW_OTHERS - 476)) | (1 << (PostgreSQLParser.KW_NFC - 476)) | (1 << (PostgreSQLParser.KW_NFD - 476)) | (1 << (PostgreSQLParser.KW_NFKC - 476)) | (1 << (PostgreSQLParser.KW_NFKD - 476)) | (1 << (PostgreSQLParser.KW_UESCAPE - 476)) | (1 << (PostgreSQLParser.KW_VIEWS - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 476)) | (1 << (PostgreSQLParser.KW_DUMP - 476)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 476)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 476)) | (1 << (PostgreSQLParser.KW_ERROR - 476)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 476)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 476)) | (1 << (PostgreSQLParser.KW_ALIAS - 476)) | (1 << (PostgreSQLParser.KW_CONSTANT - 476)) | (1 << (PostgreSQLParser.KW_PERFORM - 476)) | (1 << (PostgreSQLParser.KW_GET - 476)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 476)) | (1 << (PostgreSQLParser.KW_STACKED - 476)) | (1 << (PostgreSQLParser.KW_ELSIF - 476)) | (1 << (PostgreSQLParser.KW_REVERSE - 476)) | (1 << (PostgreSQLParser.KW_SLICE - 476)) | (1 << (PostgreSQLParser.KW_EXIT - 476)))) !== 0) || ((((_la - 508)) & ~0x1F) === 0 && ((1 << (_la - 508)) & ((1 << (PostgreSQLParser.KW_RETURN - 508)) | (1 << (PostgreSQLParser.KW_QUERY - 508)) | (1 << (PostgreSQLParser.KW_RAISE - 508)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 508)) | (1 << (PostgreSQLParser.KW_DEBUG - 508)) | (1 << (PostgreSQLParser.KW_LOG - 508)) | (1 << (PostgreSQLParser.KW_INFO - 508)) | (1 << (PostgreSQLParser.KW_NOTICE - 508)) | (1 << (PostgreSQLParser.KW_WARNING - 508)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 508)) | (1 << (PostgreSQLParser.KW_ASSERT - 508)) | (1 << (PostgreSQLParser.KW_OPEN - 508)) | (1 << (PostgreSQLParser.Identifier - 508)) | (1 << (PostgreSQLParser.QuotedIdentifier - 508)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 508)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
					{
					this.state = 1899;
					this.optschemaname();
					}
				}

				this.state = 1902;
				this.match(PostgreSQLParser.KW_AUTHORIZATION);
				this.state = 1903;
				this.rolespec();
				}
				break;

			case 2:
				{
				this.state = 1904;
				this.colid();
				}
				break;
			}
			this.state = 1907;
			this.optschemaeltlist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optschemaname(): OptschemanameContext {
		let _localctx: OptschemanameContext = new OptschemanameContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, PostgreSQLParser.RULE_optschemaname);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1909;
			this.colid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optschemaeltlist(): OptschemaeltlistContext {
		let _localctx: OptschemaeltlistContext = new OptschemaeltlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, PostgreSQLParser.RULE_optschemaeltlist);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1914;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1911;
					this.schema_stmt();
					}
					}
				}
				this.state = 1916;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 19, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public schema_stmt(): Schema_stmtContext {
		let _localctx: Schema_stmtContext = new Schema_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, PostgreSQLParser.RULE_schema_stmt);
		try {
			this.state = 1923;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 20, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1917;
				this.createstmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1918;
				this.indexstmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1919;
				this.createseqstmt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1920;
				this.createtrigstmt();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1921;
				this.grantstmt();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1922;
				this.viewstmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variablesetstmt(): VariablesetstmtContext {
		let _localctx: VariablesetstmtContext = new VariablesetstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, PostgreSQLParser.RULE_variablesetstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1925;
			this.match(PostgreSQLParser.KW_SET);
			this.state = 1927;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 21, this._ctx) ) {
			case 1:
				{
				this.state = 1926;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_LOCAL || _la === PostgreSQLParser.KW_SESSION)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 1929;
			this.set_rest();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_rest(): Set_restContext {
		let _localctx: Set_restContext = new Set_restContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, PostgreSQLParser.RULE_set_rest);
		try {
			this.state = 1939;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 22, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1931;
				this.match(PostgreSQLParser.KW_TRANSACTION);
				this.state = 1932;
				this.transaction_mode_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1933;
				this.match(PostgreSQLParser.KW_SESSION);
				this.state = 1934;
				this.match(PostgreSQLParser.KW_CHARACTERISTICS);
				this.state = 1935;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 1936;
				this.match(PostgreSQLParser.KW_TRANSACTION);
				this.state = 1937;
				this.transaction_mode_list();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1938;
				this.set_rest_more();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generic_set(): Generic_setContext {
		let _localctx: Generic_setContext = new Generic_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, PostgreSQLParser.RULE_generic_set);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1941;
			this.var_name();
			this.state = 1942;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.EQUAL || _la === PostgreSQLParser.KW_TO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1943;
			this.var_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_rest_more(): Set_rest_moreContext {
		let _localctx: Set_rest_moreContext = new Set_rest_moreContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, PostgreSQLParser.RULE_set_rest_more);
		let _la: number;
		try {
			this.state = 1972;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 24, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1945;
				this.generic_set();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1946;
				this.var_name();
				this.state = 1947;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 1948;
				this.match(PostgreSQLParser.KW_CURRENT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1950;
				this.match(PostgreSQLParser.KW_TIME);
				this.state = 1951;
				this.match(PostgreSQLParser.KW_ZONE);
				this.state = 1952;
				this.zone_value();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1953;
				this.match(PostgreSQLParser.KW_CATALOG);
				this.state = 1954;
				this.sconst();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1955;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 1956;
				this.sconst();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1957;
				this.match(PostgreSQLParser.KW_NAMES);
				this.state = 1959;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_DEFAULT || ((((_la - 534)) & ~0x1F) === 0 && ((1 << (_la - 534)) & ((1 << (PostgreSQLParser.StringConstant - 534)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 534)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 534)) | (1 << (PostgreSQLParser.EscapeStringConstant - 534)))) !== 0)) {
					{
					this.state = 1958;
					this.opt_encoding();
					}
				}

				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1961;
				this.match(PostgreSQLParser.KW_ROLE);
				this.state = 1962;
				this.nonreservedword_or_sconst();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1963;
				this.match(PostgreSQLParser.KW_SESSION);
				this.state = 1964;
				this.match(PostgreSQLParser.KW_AUTHORIZATION);
				this.state = 1965;
				this.nonreservedword_or_sconst();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1966;
				this.match(PostgreSQLParser.KW_XML);
				this.state = 1967;
				this.match(PostgreSQLParser.KW_OPTION);
				this.state = 1968;
				this.document_or_content();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1969;
				this.match(PostgreSQLParser.KW_TRANSACTION);
				this.state = 1970;
				this.match(PostgreSQLParser.KW_SNAPSHOT);
				this.state = 1971;
				this.sconst();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public var_name(): Var_nameContext {
		let _localctx: Var_nameContext = new Var_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, PostgreSQLParser.RULE_var_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1974;
			this.colid();
			this.state = 1979;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.DOT) {
				{
				{
				this.state = 1975;
				this.match(PostgreSQLParser.DOT);
				this.state = 1976;
				this.colid();
				}
				}
				this.state = 1981;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public var_list(): Var_listContext {
		let _localctx: Var_listContext = new Var_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, PostgreSQLParser.RULE_var_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1982;
			this.var_value();
			this.state = 1987;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 1983;
				this.match(PostgreSQLParser.COMMA);
				this.state = 1984;
				this.var_value();
				}
				}
				this.state = 1989;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public var_value(): Var_valueContext {
		let _localctx: Var_valueContext = new Var_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, PostgreSQLParser.RULE_var_value);
		try {
			this.state = 1992;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_ON:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1990;
				this.opt_boolean_or_string();
				}
				break;
			case PostgreSQLParser.PLUS:
			case PostgreSQLParser.MINUS:
			case PostgreSQLParser.Integral:
			case PostgreSQLParser.Numeric:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1991;
				this.numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public iso_level(): Iso_levelContext {
		let _localctx: Iso_levelContext = new Iso_levelContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, PostgreSQLParser.RULE_iso_level);
		let _la: number;
		try {
			this.state = 1999;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_READ:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1994;
				this.match(PostgreSQLParser.KW_READ);
				this.state = 1995;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_COMMITTED || _la === PostgreSQLParser.KW_UNCOMMITTED)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParser.KW_REPEATABLE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1996;
				this.match(PostgreSQLParser.KW_REPEATABLE);
				this.state = 1997;
				this.match(PostgreSQLParser.KW_READ);
				}
				break;
			case PostgreSQLParser.KW_SERIALIZABLE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1998;
				this.match(PostgreSQLParser.KW_SERIALIZABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_boolean_or_string(): Opt_boolean_or_stringContext {
		let _localctx: Opt_boolean_or_stringContext = new Opt_boolean_or_stringContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, PostgreSQLParser.RULE_opt_boolean_or_string);
		try {
			this.state = 2005;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_TRUE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2001;
				this.match(PostgreSQLParser.KW_TRUE);
				}
				break;
			case PostgreSQLParser.KW_FALSE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2002;
				this.match(PostgreSQLParser.KW_FALSE);
				}
				break;
			case PostgreSQLParser.KW_ON:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2003;
				this.match(PostgreSQLParser.KW_ON);
				}
				break;
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2004;
				this.nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public zone_value(): Zone_valueContext {
		let _localctx: Zone_valueContext = new Zone_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, PostgreSQLParser.RULE_zone_value);
		let _la: number;
		try {
			this.state = 2023;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 31, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2007;
				this.sconst();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2008;
				this.identifier();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2009;
				this.constinterval();
				this.state = 2010;
				this.sconst();
				this.state = 2012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_DAY || _la === PostgreSQLParser.KW_HOUR || _la === PostgreSQLParser.KW_MINUTE || _la === PostgreSQLParser.KW_MONTH || _la === PostgreSQLParser.KW_SECOND || _la === PostgreSQLParser.KW_YEAR) {
					{
					this.state = 2011;
					this.opt_interval();
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2014;
				this.constinterval();
				this.state = 2015;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 2016;
				this.iconst();
				this.state = 2017;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 2018;
				this.sconst();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2020;
				this.numericonly();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2021;
				this.match(PostgreSQLParser.KW_DEFAULT);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2022;
				this.match(PostgreSQLParser.KW_LOCAL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_encoding(): Opt_encodingContext {
		let _localctx: Opt_encodingContext = new Opt_encodingContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, PostgreSQLParser.RULE_opt_encoding);
		try {
			this.state = 2027;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2025;
				this.sconst();
				}
				break;
			case PostgreSQLParser.KW_DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2026;
				this.match(PostgreSQLParser.KW_DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext {
		let _localctx: Nonreservedword_or_sconstContext = new Nonreservedword_or_sconstContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, PostgreSQLParser.RULE_nonreservedword_or_sconst);
		try {
			this.state = 2031;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2029;
				this.nonreservedword();
				}
				break;
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2030;
				this.sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variableresetstmt(): VariableresetstmtContext {
		let _localctx: VariableresetstmtContext = new VariableresetstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, PostgreSQLParser.RULE_variableresetstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2033;
			this.match(PostgreSQLParser.KW_RESET);
			this.state = 2034;
			this.reset_rest();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reset_rest(): Reset_restContext {
		let _localctx: Reset_restContext = new Reset_restContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, PostgreSQLParser.RULE_reset_rest);
		try {
			this.state = 2044;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 34, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2036;
				this.generic_reset();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2037;
				this.match(PostgreSQLParser.KW_TIME);
				this.state = 2038;
				this.match(PostgreSQLParser.KW_ZONE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2039;
				this.match(PostgreSQLParser.KW_TRANSACTION);
				this.state = 2040;
				this.match(PostgreSQLParser.KW_ISOLATION);
				this.state = 2041;
				this.match(PostgreSQLParser.KW_LEVEL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2042;
				this.match(PostgreSQLParser.KW_SESSION);
				this.state = 2043;
				this.match(PostgreSQLParser.KW_AUTHORIZATION);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generic_reset(): Generic_resetContext {
		let _localctx: Generic_resetContext = new Generic_resetContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, PostgreSQLParser.RULE_generic_reset);
		try {
			this.state = 2048;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2046;
				this.var_name();
				}
				break;
			case PostgreSQLParser.KW_ALL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2047;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setresetclause(): SetresetclauseContext {
		let _localctx: SetresetclauseContext = new SetresetclauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, PostgreSQLParser.RULE_setresetclause);
		try {
			this.state = 2053;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_SET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2050;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2051;
				this.set_rest();
				}
				break;
			case PostgreSQLParser.KW_RESET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2052;
				this.variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionsetresetclause(): FunctionsetresetclauseContext {
		let _localctx: FunctionsetresetclauseContext = new FunctionsetresetclauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, PostgreSQLParser.RULE_functionsetresetclause);
		try {
			this.state = 2058;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_SET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2055;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2056;
				this.set_rest_more();
				}
				break;
			case PostgreSQLParser.KW_RESET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2057;
				this.variableresetstmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variableshowstmt(): VariableshowstmtContext {
		let _localctx: VariableshowstmtContext = new VariableshowstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, PostgreSQLParser.RULE_variableshowstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2060;
			this.match(PostgreSQLParser.KW_SHOW);
			this.state = 2070;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 38, this._ctx) ) {
			case 1:
				{
				this.state = 2061;
				this.var_name();
				}
				break;

			case 2:
				{
				this.state = 2062;
				this.match(PostgreSQLParser.KW_TIME);
				this.state = 2063;
				this.match(PostgreSQLParser.KW_ZONE);
				}
				break;

			case 3:
				{
				this.state = 2064;
				this.match(PostgreSQLParser.KW_TRANSACTION);
				this.state = 2065;
				this.match(PostgreSQLParser.KW_ISOLATION);
				this.state = 2066;
				this.match(PostgreSQLParser.KW_LEVEL);
				}
				break;

			case 4:
				{
				this.state = 2067;
				this.match(PostgreSQLParser.KW_SESSION);
				this.state = 2068;
				this.match(PostgreSQLParser.KW_AUTHORIZATION);
				}
				break;

			case 5:
				{
				this.state = 2069;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraintssetstmt(): ConstraintssetstmtContext {
		let _localctx: ConstraintssetstmtContext = new ConstraintssetstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, PostgreSQLParser.RULE_constraintssetstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2072;
			this.match(PostgreSQLParser.KW_SET);
			this.state = 2073;
			this.match(PostgreSQLParser.KW_CONSTRAINTS);
			this.state = 2074;
			this.constraints_set_list();
			this.state = 2075;
			this.constraints_set_mode();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraints_set_list(): Constraints_set_listContext {
		let _localctx: Constraints_set_listContext = new Constraints_set_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, PostgreSQLParser.RULE_constraints_set_list);
		try {
			this.state = 2079;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_ALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2077;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2078;
				this.qualified_name_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraints_set_mode(): Constraints_set_modeContext {
		let _localctx: Constraints_set_modeContext = new Constraints_set_modeContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, PostgreSQLParser.RULE_constraints_set_mode);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2081;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_DEFERRED || _la === PostgreSQLParser.KW_IMMEDIATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public checkpointstmt(): CheckpointstmtContext {
		let _localctx: CheckpointstmtContext = new CheckpointstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, PostgreSQLParser.RULE_checkpointstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2083;
			this.match(PostgreSQLParser.KW_CHECKPOINT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public discardstmt(): DiscardstmtContext {
		let _localctx: DiscardstmtContext = new DiscardstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, PostgreSQLParser.RULE_discardstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2085;
			this.match(PostgreSQLParser.KW_DISCARD);
			this.state = 2086;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_ALL || _la === PostgreSQLParser.KW_PLANS || ((((_la - 329)) & ~0x1F) === 0 && ((1 << (_la - 329)) & ((1 << (PostgreSQLParser.KW_SEQUENCES - 329)) | (1 << (PostgreSQLParser.KW_TEMP - 329)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 329)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public altertablestmt(): AltertablestmtContext {
		let _localctx: AltertablestmtContext = new AltertablestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, PostgreSQLParser.RULE_altertablestmt);
		let _la: number;
		try {
			this.state = 2200;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 54, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2088;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2089;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 2092;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 40, this._ctx) ) {
				case 1:
					{
					this.state = 2090;
					this.match(PostgreSQLParser.KW_IF);
					this.state = 2091;
					this.match(PostgreSQLParser.KW_EXISTS);
					}
					break;
				}
				this.state = 2094;
				this.relation_expr();
				this.state = 2097;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_NOT:
				case PostgreSQLParser.KW_ADD:
				case PostgreSQLParser.KW_ALTER:
				case PostgreSQLParser.KW_CLUSTER:
				case PostgreSQLParser.KW_DISABLE:
				case PostgreSQLParser.KW_DROP:
				case PostgreSQLParser.KW_ENABLE:
				case PostgreSQLParser.KW_FORCE:
				case PostgreSQLParser.KW_INHERIT:
				case PostgreSQLParser.KW_NO:
				case PostgreSQLParser.KW_OF:
				case PostgreSQLParser.KW_OPTIONS:
				case PostgreSQLParser.KW_OWNER:
				case PostgreSQLParser.KW_REPLICA:
				case PostgreSQLParser.KW_RESET:
				case PostgreSQLParser.KW_SET:
				case PostgreSQLParser.KW_VALIDATE:
					{
					this.state = 2095;
					this.alter_table_cmds();
					}
					break;
				case PostgreSQLParser.KW_ATTACH:
				case PostgreSQLParser.KW_DETACH:
					{
					this.state = 2096;
					this.partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2099;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2100;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 2101;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 2102;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 2103;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 2104;
				this.name();
				this.state = 2108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OWNED) {
					{
					this.state = 2105;
					this.match(PostgreSQLParser.KW_OWNED);
					this.state = 2106;
					this.match(PostgreSQLParser.KW_BY);
					this.state = 2107;
					this.role_list();
					}
				}

				this.state = 2110;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2111;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 2112;
				this.name();
				this.state = 2114;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NOWAIT) {
					{
					this.state = 2113;
					this.opt_nowait();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2116;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2117;
				this.match(PostgreSQLParser.KW_INDEX);
				this.state = 2120;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 44, this._ctx) ) {
				case 1:
					{
					this.state = 2118;
					this.match(PostgreSQLParser.KW_IF);
					this.state = 2119;
					this.match(PostgreSQLParser.KW_EXISTS);
					}
					break;
				}
				this.state = 2122;
				this.qualified_name();
				this.state = 2125;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_NOT:
				case PostgreSQLParser.KW_ADD:
				case PostgreSQLParser.KW_ALTER:
				case PostgreSQLParser.KW_CLUSTER:
				case PostgreSQLParser.KW_DISABLE:
				case PostgreSQLParser.KW_DROP:
				case PostgreSQLParser.KW_ENABLE:
				case PostgreSQLParser.KW_FORCE:
				case PostgreSQLParser.KW_INHERIT:
				case PostgreSQLParser.KW_NO:
				case PostgreSQLParser.KW_OF:
				case PostgreSQLParser.KW_OPTIONS:
				case PostgreSQLParser.KW_OWNER:
				case PostgreSQLParser.KW_REPLICA:
				case PostgreSQLParser.KW_RESET:
				case PostgreSQLParser.KW_SET:
				case PostgreSQLParser.KW_VALIDATE:
					{
					this.state = 2123;
					this.alter_table_cmds();
					}
					break;
				case PostgreSQLParser.KW_ATTACH:
					{
					this.state = 2124;
					this.index_partition_cmd();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2127;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2128;
				this.match(PostgreSQLParser.KW_INDEX);
				this.state = 2129;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 2130;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 2131;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 2132;
				this.name();
				this.state = 2136;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OWNED) {
					{
					this.state = 2133;
					this.match(PostgreSQLParser.KW_OWNED);
					this.state = 2134;
					this.match(PostgreSQLParser.KW_BY);
					this.state = 2135;
					this.role_list();
					}
				}

				this.state = 2138;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2139;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 2140;
				this.name();
				this.state = 2142;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NOWAIT) {
					{
					this.state = 2141;
					this.opt_nowait();
					}
				}

				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2144;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2145;
				this.match(PostgreSQLParser.KW_SEQUENCE);
				this.state = 2148;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 48, this._ctx) ) {
				case 1:
					{
					this.state = 2146;
					this.match(PostgreSQLParser.KW_IF);
					this.state = 2147;
					this.match(PostgreSQLParser.KW_EXISTS);
					}
					break;
				}
				this.state = 2150;
				this.qualified_name();
				this.state = 2151;
				this.alter_table_cmds();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2153;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2154;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 2157;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 49, this._ctx) ) {
				case 1:
					{
					this.state = 2155;
					this.match(PostgreSQLParser.KW_IF);
					this.state = 2156;
					this.match(PostgreSQLParser.KW_EXISTS);
					}
					break;
				}
				this.state = 2159;
				this.qualified_name();
				this.state = 2160;
				this.alter_table_cmds();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2162;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2163;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				this.state = 2164;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 2167;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 50, this._ctx) ) {
				case 1:
					{
					this.state = 2165;
					this.match(PostgreSQLParser.KW_IF);
					this.state = 2166;
					this.match(PostgreSQLParser.KW_EXISTS);
					}
					break;
				}
				this.state = 2169;
				this.qualified_name();
				this.state = 2170;
				this.alter_table_cmds();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2172;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2173;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				this.state = 2174;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 2175;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 2176;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 2177;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 2178;
				this.name();
				this.state = 2182;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OWNED) {
					{
					this.state = 2179;
					this.match(PostgreSQLParser.KW_OWNED);
					this.state = 2180;
					this.match(PostgreSQLParser.KW_BY);
					this.state = 2181;
					this.role_list();
					}
				}

				this.state = 2184;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2185;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 2186;
				this.name();
				this.state = 2188;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NOWAIT) {
					{
					this.state = 2187;
					this.opt_nowait();
					}
				}

				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2190;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2191;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 2192;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 2195;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 53, this._ctx) ) {
				case 1:
					{
					this.state = 2193;
					this.match(PostgreSQLParser.KW_IF);
					this.state = 2194;
					this.match(PostgreSQLParser.KW_EXISTS);
					}
					break;
				}
				this.state = 2197;
				this.relation_expr();
				this.state = 2198;
				this.alter_table_cmds();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_table_cmds(): Alter_table_cmdsContext {
		let _localctx: Alter_table_cmdsContext = new Alter_table_cmdsContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, PostgreSQLParser.RULE_alter_table_cmds);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2202;
			this.alter_table_cmd();
			this.state = 2207;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 2203;
				this.match(PostgreSQLParser.COMMA);
				this.state = 2204;
				this.alter_table_cmd();
				}
				}
				this.state = 2209;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partition_cmd(): Partition_cmdContext {
		let _localctx: Partition_cmdContext = new Partition_cmdContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, PostgreSQLParser.RULE_partition_cmd);
		try {
			this.state = 2218;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_ATTACH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2210;
				this.match(PostgreSQLParser.KW_ATTACH);
				this.state = 2211;
				this.match(PostgreSQLParser.KW_PARTITION);
				this.state = 2212;
				this.qualified_name();
				this.state = 2213;
				this.partitionboundspec();
				}
				break;
			case PostgreSQLParser.KW_DETACH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2215;
				this.match(PostgreSQLParser.KW_DETACH);
				this.state = 2216;
				this.match(PostgreSQLParser.KW_PARTITION);
				this.state = 2217;
				this.qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_partition_cmd(): Index_partition_cmdContext {
		let _localctx: Index_partition_cmdContext = new Index_partition_cmdContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, PostgreSQLParser.RULE_index_partition_cmd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2220;
			this.match(PostgreSQLParser.KW_ATTACH);
			this.state = 2221;
			this.match(PostgreSQLParser.KW_PARTITION);
			this.state = 2222;
			this.qualified_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_table_cmd(): Alter_table_cmdContext {
		let _localctx: Alter_table_cmdContext = new Alter_table_cmdContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, PostgreSQLParser.RULE_alter_table_cmd);
		let _la: number;
		try {
			this.state = 2522;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 83, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2224;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 2225;
				this.columnDef();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2226;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 2227;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 2228;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 2229;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 2230;
				this.columnDef();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2231;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 2232;
				this.match(PostgreSQLParser.KW_COLUMN);
				this.state = 2233;
				this.columnDef();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2234;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 2235;
				this.match(PostgreSQLParser.KW_COLUMN);
				this.state = 2236;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 2237;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 2238;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 2239;
				this.columnDef();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2240;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2242;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 57, this._ctx) ) {
				case 1:
					{
					this.state = 2241;
					this.opt_column();
					}
					break;
				}
				this.state = 2244;
				this.colid();
				this.state = 2245;
				this.alter_column_default();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2247;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2249;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 58, this._ctx) ) {
				case 1:
					{
					this.state = 2248;
					this.opt_column();
					}
					break;
				}
				this.state = 2251;
				this.colid();
				this.state = 2252;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 2253;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 2254;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2256;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2258;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 59, this._ctx) ) {
				case 1:
					{
					this.state = 2257;
					this.opt_column();
					}
					break;
				}
				this.state = 2260;
				this.colid();
				this.state = 2261;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2262;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 2263;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2265;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2267;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 60, this._ctx) ) {
				case 1:
					{
					this.state = 2266;
					this.opt_column();
					}
					break;
				}
				this.state = 2269;
				this.colid();
				this.state = 2270;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 2271;
				this.match(PostgreSQLParser.KW_EXPRESSION);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2273;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2275;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 61, this._ctx) ) {
				case 1:
					{
					this.state = 2274;
					this.opt_column();
					}
					break;
				}
				this.state = 2277;
				this.colid();
				this.state = 2278;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 2279;
				this.match(PostgreSQLParser.KW_EXPRESSION);
				this.state = 2280;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 2281;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2283;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2285;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 62, this._ctx) ) {
				case 1:
					{
					this.state = 2284;
					this.opt_column();
					}
					break;
				}
				this.state = 2287;
				this.colid();
				this.state = 2288;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2289;
				this.match(PostgreSQLParser.KW_STATISTICS);
				this.state = 2290;
				this.signediconst();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2292;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2294;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_COLUMN) {
					{
					this.state = 2293;
					this.opt_column();
					}
				}

				this.state = 2296;
				this.iconst();
				this.state = 2297;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2298;
				this.match(PostgreSQLParser.KW_STATISTICS);
				this.state = 2299;
				this.signediconst();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2301;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2303;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 64, this._ctx) ) {
				case 1:
					{
					this.state = 2302;
					this.opt_column();
					}
					break;
				}
				this.state = 2305;
				this.colid();
				this.state = 2306;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2307;
				this.reloptions();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2309;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2311;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 65, this._ctx) ) {
				case 1:
					{
					this.state = 2310;
					this.opt_column();
					}
					break;
				}
				this.state = 2313;
				this.colid();
				this.state = 2314;
				this.match(PostgreSQLParser.KW_RESET);
				this.state = 2315;
				this.reloptions();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 2317;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2319;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 66, this._ctx) ) {
				case 1:
					{
					this.state = 2318;
					this.opt_column();
					}
					break;
				}
				this.state = 2321;
				this.colid();
				this.state = 2322;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2323;
				this.match(PostgreSQLParser.KW_STORAGE);
				this.state = 2324;
				this.colid();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 2326;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2328;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 67, this._ctx) ) {
				case 1:
					{
					this.state = 2327;
					this.opt_column();
					}
					break;
				}
				this.state = 2330;
				this.colid();
				this.state = 2331;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 2332;
				this.match(PostgreSQLParser.KW_GENERATED);
				this.state = 2333;
				this.generated_when();
				this.state = 2334;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 2335;
				this.match(PostgreSQLParser.KW_IDENTITY);
				this.state = 2337;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 68, this._ctx) ) {
				case 1:
					{
					this.state = 2336;
					this.optparenthesizedseqoptlist();
					}
					break;
				}
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 2339;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2341;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 69, this._ctx) ) {
				case 1:
					{
					this.state = 2340;
					this.opt_column();
					}
					break;
				}
				this.state = 2343;
				this.colid();
				this.state = 2344;
				this.alter_identity_column_option_list();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 2346;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2348;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 70, this._ctx) ) {
				case 1:
					{
					this.state = 2347;
					this.opt_column();
					}
					break;
				}
				this.state = 2350;
				this.colid();
				this.state = 2351;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 2352;
				this.match(PostgreSQLParser.KW_IDENTITY);
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 2354;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2356;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 71, this._ctx) ) {
				case 1:
					{
					this.state = 2355;
					this.opt_column();
					}
					break;
				}
				this.state = 2358;
				this.colid();
				this.state = 2359;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 2360;
				this.match(PostgreSQLParser.KW_IDENTITY);
				this.state = 2361;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 2362;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 2364;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 2366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_COLUMN) {
					{
					this.state = 2365;
					this.opt_column();
					}
				}

				this.state = 2368;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 2369;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 2370;
				this.colid();
				this.state = 2372;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 2371;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 2374;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 2376;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 74, this._ctx) ) {
				case 1:
					{
					this.state = 2375;
					this.opt_column();
					}
					break;
				}
				this.state = 2378;
				this.colid();
				this.state = 2380;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 2379;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 2382;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2384;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 76, this._ctx) ) {
				case 1:
					{
					this.state = 2383;
					this.opt_column();
					}
					break;
				}
				this.state = 2386;
				this.colid();
				this.state = 2388;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_SET) {
					{
					this.state = 2387;
					this.opt_set_data();
					}
				}

				this.state = 2390;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 2391;
				this.typename();
				this.state = 2393;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_COLLATE) {
					{
					this.state = 2392;
					this.opt_collate_clause();
					}
				}

				this.state = 2396;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING) {
					{
					this.state = 2395;
					this.alter_using();
					}
				}

				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 2398;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2400;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 80, this._ctx) ) {
				case 1:
					{
					this.state = 2399;
					this.opt_column();
					}
					break;
				}
				this.state = 2402;
				this.colid();
				this.state = 2403;
				this.alter_generic_options();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 2405;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 2406;
				this.tableconstraint();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 2407;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2408;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 2409;
				this.name();
				this.state = 2410;
				this.constraintattributespec();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 2412;
				this.match(PostgreSQLParser.KW_VALIDATE);
				this.state = 2413;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 2414;
				this.name();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 2415;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 2416;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 2417;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 2418;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 2419;
				this.name();
				this.state = 2421;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 2420;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 2423;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 2424;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 2425;
				this.name();
				this.state = 2427;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 2426;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 2429;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2430;
				this.match(PostgreSQLParser.KW_WITHOUT);
				this.state = 2431;
				this.match(PostgreSQLParser.KW_OIDS);
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 2432;
				this.match(PostgreSQLParser.KW_CLUSTER);
				this.state = 2433;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 2434;
				this.name();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 2435;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2436;
				this.match(PostgreSQLParser.KW_WITHOUT);
				this.state = 2437;
				this.match(PostgreSQLParser.KW_CLUSTER);
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 2438;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2439;
				this.match(PostgreSQLParser.KW_LOGGED);
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 2440;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2441;
				this.match(PostgreSQLParser.KW_UNLOGGED);
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 2442;
				this.match(PostgreSQLParser.KW_ENABLE);
				this.state = 2443;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 2444;
				this.name();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 2445;
				this.match(PostgreSQLParser.KW_ENABLE);
				this.state = 2446;
				this.match(PostgreSQLParser.KW_ALWAYS);
				this.state = 2447;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 2448;
				this.name();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 2449;
				this.match(PostgreSQLParser.KW_ENABLE);
				this.state = 2450;
				this.match(PostgreSQLParser.KW_REPLICA);
				this.state = 2451;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 2452;
				this.name();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 2453;
				this.match(PostgreSQLParser.KW_ENABLE);
				this.state = 2454;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 2455;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 2456;
				this.match(PostgreSQLParser.KW_ENABLE);
				this.state = 2457;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 2458;
				this.match(PostgreSQLParser.KW_USER);
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 2459;
				this.match(PostgreSQLParser.KW_DISABLE);
				this.state = 2460;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 2461;
				this.name();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 2462;
				this.match(PostgreSQLParser.KW_DISABLE);
				this.state = 2463;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 2464;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 2465;
				this.match(PostgreSQLParser.KW_DISABLE);
				this.state = 2466;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 2467;
				this.match(PostgreSQLParser.KW_USER);
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 2468;
				this.match(PostgreSQLParser.KW_ENABLE);
				this.state = 2469;
				this.match(PostgreSQLParser.KW_RULE);
				this.state = 2470;
				this.name();
				}
				break;

			case 42:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 2471;
				this.match(PostgreSQLParser.KW_ENABLE);
				this.state = 2472;
				this.match(PostgreSQLParser.KW_ALWAYS);
				this.state = 2473;
				this.match(PostgreSQLParser.KW_RULE);
				this.state = 2474;
				this.name();
				}
				break;

			case 43:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 2475;
				this.match(PostgreSQLParser.KW_ENABLE);
				this.state = 2476;
				this.match(PostgreSQLParser.KW_REPLICA);
				this.state = 2477;
				this.match(PostgreSQLParser.KW_RULE);
				this.state = 2478;
				this.name();
				}
				break;

			case 44:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 2479;
				this.match(PostgreSQLParser.KW_DISABLE);
				this.state = 2480;
				this.match(PostgreSQLParser.KW_RULE);
				this.state = 2481;
				this.name();
				}
				break;

			case 45:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 2482;
				this.match(PostgreSQLParser.KW_INHERIT);
				this.state = 2483;
				this.qualified_name();
				}
				break;

			case 46:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 2484;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 2485;
				this.match(PostgreSQLParser.KW_INHERIT);
				this.state = 2486;
				this.qualified_name();
				}
				break;

			case 47:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 2487;
				this.match(PostgreSQLParser.KW_OF);
				this.state = 2488;
				this.any_name();
				}
				break;

			case 48:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 2489;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 2490;
				this.match(PostgreSQLParser.KW_OF);
				}
				break;

			case 49:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 2491;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 2492;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 2493;
				this.rolespec();
				}
				break;

			case 50:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 2494;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2495;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 2496;
				this.name();
				}
				break;

			case 51:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 2497;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2498;
				this.reloptions();
				}
				break;

			case 52:
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 2499;
				this.match(PostgreSQLParser.KW_RESET);
				this.state = 2500;
				this.reloptions();
				}
				break;

			case 53:
				this.enterOuterAlt(_localctx, 53);
				{
				this.state = 2501;
				this.match(PostgreSQLParser.KW_REPLICA);
				this.state = 2502;
				this.match(PostgreSQLParser.KW_IDENTITY);
				this.state = 2503;
				this.replica_identity();
				}
				break;

			case 54:
				this.enterOuterAlt(_localctx, 54);
				{
				this.state = 2504;
				this.match(PostgreSQLParser.KW_ENABLE);
				this.state = 2505;
				this.match(PostgreSQLParser.KW_ROW);
				this.state = 2506;
				this.match(PostgreSQLParser.KW_LEVEL);
				this.state = 2507;
				this.match(PostgreSQLParser.KW_SECURITY);
				}
				break;

			case 55:
				this.enterOuterAlt(_localctx, 55);
				{
				this.state = 2508;
				this.match(PostgreSQLParser.KW_DISABLE);
				this.state = 2509;
				this.match(PostgreSQLParser.KW_ROW);
				this.state = 2510;
				this.match(PostgreSQLParser.KW_LEVEL);
				this.state = 2511;
				this.match(PostgreSQLParser.KW_SECURITY);
				}
				break;

			case 56:
				this.enterOuterAlt(_localctx, 56);
				{
				this.state = 2512;
				this.match(PostgreSQLParser.KW_FORCE);
				this.state = 2513;
				this.match(PostgreSQLParser.KW_ROW);
				this.state = 2514;
				this.match(PostgreSQLParser.KW_LEVEL);
				this.state = 2515;
				this.match(PostgreSQLParser.KW_SECURITY);
				}
				break;

			case 57:
				this.enterOuterAlt(_localctx, 57);
				{
				this.state = 2516;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 2517;
				this.match(PostgreSQLParser.KW_FORCE);
				this.state = 2518;
				this.match(PostgreSQLParser.KW_ROW);
				this.state = 2519;
				this.match(PostgreSQLParser.KW_LEVEL);
				this.state = 2520;
				this.match(PostgreSQLParser.KW_SECURITY);
				}
				break;

			case 58:
				this.enterOuterAlt(_localctx, 58);
				{
				this.state = 2521;
				this.alter_generic_options();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_column_default(): Alter_column_defaultContext {
		let _localctx: Alter_column_defaultContext = new Alter_column_defaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, PostgreSQLParser.RULE_alter_column_default);
		try {
			this.state = 2529;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_SET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2524;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2525;
				this.match(PostgreSQLParser.KW_DEFAULT);
				this.state = 2526;
				this.a_expr();
				}
				break;
			case PostgreSQLParser.KW_DROP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2527;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 2528;
				this.match(PostgreSQLParser.KW_DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_drop_behavior(): Opt_drop_behaviorContext {
		let _localctx: Opt_drop_behaviorContext = new Opt_drop_behaviorContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, PostgreSQLParser.RULE_opt_drop_behavior);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2531;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_collate_clause(): Opt_collate_clauseContext {
		let _localctx: Opt_collate_clauseContext = new Opt_collate_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, PostgreSQLParser.RULE_opt_collate_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2533;
			this.match(PostgreSQLParser.KW_COLLATE);
			this.state = 2534;
			this.any_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_using(): Alter_usingContext {
		let _localctx: Alter_usingContext = new Alter_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, PostgreSQLParser.RULE_alter_using);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2536;
			this.match(PostgreSQLParser.KW_USING);
			this.state = 2537;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public replica_identity(): Replica_identityContext {
		let _localctx: Replica_identityContext = new Replica_identityContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, PostgreSQLParser.RULE_replica_identity);
		try {
			this.state = 2545;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_NOTHING:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2539;
				this.match(PostgreSQLParser.KW_NOTHING);
				}
				break;
			case PostgreSQLParser.KW_FULL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2540;
				this.match(PostgreSQLParser.KW_FULL);
				}
				break;
			case PostgreSQLParser.KW_DEFAULT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2541;
				this.match(PostgreSQLParser.KW_DEFAULT);
				}
				break;
			case PostgreSQLParser.KW_USING:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2542;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 2543;
				this.match(PostgreSQLParser.KW_INDEX);
				this.state = 2544;
				this.name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reloptions(): ReloptionsContext {
		let _localctx: ReloptionsContext = new ReloptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, PostgreSQLParser.RULE_reloptions);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2547;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 2548;
			this.reloption_list();
			this.state = 2549;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_reloptions(): Opt_reloptionsContext {
		let _localctx: Opt_reloptionsContext = new Opt_reloptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, PostgreSQLParser.RULE_opt_reloptions);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2551;
			this.match(PostgreSQLParser.KW_WITH);
			this.state = 2552;
			this.reloptions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reloption_list(): Reloption_listContext {
		let _localctx: Reloption_listContext = new Reloption_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, PostgreSQLParser.RULE_reloption_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2554;
			this.reloption_elem();
			this.state = 2559;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 2555;
				this.match(PostgreSQLParser.COMMA);
				this.state = 2556;
				this.reloption_elem();
				}
				}
				this.state = 2561;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reloption_elem(): Reloption_elemContext {
		let _localctx: Reloption_elemContext = new Reloption_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, PostgreSQLParser.RULE_reloption_elem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2562;
			this.collabel();
			this.state = 2571;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.EQUAL:
				{
				this.state = 2563;
				this.match(PostgreSQLParser.EQUAL);
				this.state = 2564;
				this.def_arg();
				}
				break;
			case PostgreSQLParser.DOT:
				{
				this.state = 2565;
				this.match(PostgreSQLParser.DOT);
				this.state = 2566;
				this.collabel();
				this.state = 2569;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.EQUAL) {
					{
					this.state = 2567;
					this.match(PostgreSQLParser.EQUAL);
					this.state = 2568;
					this.def_arg();
					}
				}

				}
				break;
			case PostgreSQLParser.CLOSE_PAREN:
			case PostgreSQLParser.COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_identity_column_option_list(): Alter_identity_column_option_listContext {
		let _localctx: Alter_identity_column_option_listContext = new Alter_identity_column_option_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, PostgreSQLParser.RULE_alter_identity_column_option_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2574;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2573;
					this.alter_identity_column_option();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2576;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 89, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_identity_column_option(): Alter_identity_column_optionContext {
		let _localctx: Alter_identity_column_optionContext = new Alter_identity_column_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, PostgreSQLParser.RULE_alter_identity_column_option);
		let _la: number;
		try {
			this.state = 2591;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_RESTART:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2578;
				this.match(PostgreSQLParser.KW_RESTART);
				this.state = 2583;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 91, this._ctx) ) {
				case 1:
					{
					this.state = 2580;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.KW_WITH) {
						{
						this.state = 2579;
						this.opt_with();
						}
					}

					this.state = 2582;
					this.numericonly();
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_SET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2585;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 2589;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_AS:
				case PostgreSQLParser.KW_CACHE:
				case PostgreSQLParser.KW_CYCLE:
				case PostgreSQLParser.KW_INCREMENT:
				case PostgreSQLParser.KW_MAXVALUE:
				case PostgreSQLParser.KW_MINVALUE:
				case PostgreSQLParser.KW_NO:
				case PostgreSQLParser.KW_OWNED:
				case PostgreSQLParser.KW_RESTART:
				case PostgreSQLParser.KW_SEQUENCE:
				case PostgreSQLParser.KW_START:
					{
					this.state = 2586;
					this.seqoptelem();
					}
					break;
				case PostgreSQLParser.KW_GENERATED:
					{
					this.state = 2587;
					this.match(PostgreSQLParser.KW_GENERATED);
					this.state = 2588;
					this.generated_when();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionboundspec(): PartitionboundspecContext {
		let _localctx: PartitionboundspecContext = new PartitionboundspecContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, PostgreSQLParser.RULE_partitionboundspec);
		try {
			this.state = 2619;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 94, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2593;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 2594;
				this.match(PostgreSQLParser.KW_VALUES);
				this.state = 2595;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 2596;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 2597;
				this.hash_partbound();
				this.state = 2598;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2600;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 2601;
				this.match(PostgreSQLParser.KW_VALUES);
				this.state = 2602;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 2603;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 2604;
				this.expr_list();
				this.state = 2605;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2607;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 2608;
				this.match(PostgreSQLParser.KW_VALUES);
				this.state = 2609;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 2610;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 2611;
				this.expr_list();
				this.state = 2612;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 2613;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 2614;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 2615;
				this.expr_list();
				this.state = 2616;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2618;
				this.match(PostgreSQLParser.KW_DEFAULT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hash_partbound_elem(): Hash_partbound_elemContext {
		let _localctx: Hash_partbound_elemContext = new Hash_partbound_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, PostgreSQLParser.RULE_hash_partbound_elem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2621;
			this.nonreservedword();
			this.state = 2622;
			this.iconst();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hash_partbound(): Hash_partboundContext {
		let _localctx: Hash_partboundContext = new Hash_partboundContext(this._ctx, this.state);
		this.enterRule(_localctx, 130, PostgreSQLParser.RULE_hash_partbound);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2624;
			this.hash_partbound_elem();
			this.state = 2629;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 2625;
				this.match(PostgreSQLParser.COMMA);
				this.state = 2626;
				this.hash_partbound_elem();
				}
				}
				this.state = 2631;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public altercompositetypestmt(): AltercompositetypestmtContext {
		let _localctx: AltercompositetypestmtContext = new AltercompositetypestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, PostgreSQLParser.RULE_altercompositetypestmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2632;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 2633;
			this.match(PostgreSQLParser.KW_TYPE);
			this.state = 2634;
			this.any_name();
			this.state = 2635;
			this.alter_type_cmds();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_type_cmds(): Alter_type_cmdsContext {
		let _localctx: Alter_type_cmdsContext = new Alter_type_cmdsContext(this._ctx, this.state);
		this.enterRule(_localctx, 134, PostgreSQLParser.RULE_alter_type_cmds);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2637;
			this.alter_type_cmd();
			this.state = 2642;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 2638;
				this.match(PostgreSQLParser.COMMA);
				this.state = 2639;
				this.alter_type_cmd();
				}
				}
				this.state = 2644;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_type_cmd(): Alter_type_cmdContext {
		let _localctx: Alter_type_cmdContext = new Alter_type_cmdContext(this._ctx, this.state);
		this.enterRule(_localctx, 136, PostgreSQLParser.RULE_alter_type_cmd);
		let _la: number;
		try {
			this.state = 2675;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_ADD:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2645;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 2646;
				this.match(PostgreSQLParser.KW_ATTRIBUTE);
				this.state = 2647;
				this.tablefuncelement();
				this.state = 2649;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 2648;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_DROP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2651;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 2652;
				this.match(PostgreSQLParser.KW_ATTRIBUTE);
				this.state = 2655;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 98, this._ctx) ) {
				case 1:
					{
					this.state = 2653;
					this.match(PostgreSQLParser.KW_IF);
					this.state = 2654;
					this.match(PostgreSQLParser.KW_EXISTS);
					}
					break;
				}
				this.state = 2657;
				this.colid();
				this.state = 2659;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 2658;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_ALTER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2661;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 2662;
				this.match(PostgreSQLParser.KW_ATTRIBUTE);
				this.state = 2663;
				this.colid();
				this.state = 2665;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_SET) {
					{
					this.state = 2664;
					this.opt_set_data();
					}
				}

				this.state = 2667;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 2668;
				this.typename();
				this.state = 2670;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_COLLATE) {
					{
					this.state = 2669;
					this.opt_collate_clause();
					}
				}

				this.state = 2673;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 2672;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public closeportalstmt(): CloseportalstmtContext {
		let _localctx: CloseportalstmtContext = new CloseportalstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 138, PostgreSQLParser.RULE_closeportalstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2677;
			this.match(PostgreSQLParser.KW_CLOSE);
			this.state = 2680;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				{
				this.state = 2678;
				this.cursor_name();
				}
				break;
			case PostgreSQLParser.KW_ALL:
				{
				this.state = 2679;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copystmt(): CopystmtContext {
		let _localctx: CopystmtContext = new CopystmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, PostgreSQLParser.RULE_copystmt);
		let _la: number;
		try {
			this.state = 2719;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 113, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2682;
				this.match(PostgreSQLParser.KW_COPY);
				this.state = 2684;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_BINARY) {
					{
					this.state = 2683;
					this.opt_binary();
					}
				}

				this.state = 2686;
				this.qualified_name();
				this.state = 2688;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_PAREN) {
					{
					this.state = 2687;
					this.opt_column_list();
					}
				}

				this.state = 2690;
				this.copy_from();
				this.state = 2692;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_PROGRAM) {
					{
					this.state = 2691;
					this.opt_program();
					}
				}

				this.state = 2694;
				this.copy_file_name();
				this.state = 2696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING || _la === PostgreSQLParser.KW_DELIMITERS) {
					{
					this.state = 2695;
					this.copy_delimiter();
					}
				}

				this.state = 2699;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 109, this._ctx) ) {
				case 1:
					{
					this.state = 2698;
					this.opt_with();
					}
					break;
				}
				this.state = 2701;
				this.copy_options();
				this.state = 2703;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WHERE) {
					{
					this.state = 2702;
					this.where_clause();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2705;
				this.match(PostgreSQLParser.KW_COPY);
				this.state = 2706;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 2707;
				this.preparablestmt();
				this.state = 2708;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 2709;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 2711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_PROGRAM) {
					{
					this.state = 2710;
					this.opt_program();
					}
				}

				this.state = 2713;
				this.copy_file_name();
				this.state = 2715;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 112, this._ctx) ) {
				case 1:
					{
					this.state = 2714;
					this.opt_with();
					}
					break;
				}
				this.state = 2717;
				this.copy_options();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_from(): Copy_fromContext {
		let _localctx: Copy_fromContext = new Copy_fromContext(this._ctx, this.state);
		this.enterRule(_localctx, 142, PostgreSQLParser.RULE_copy_from);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2721;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_TO)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_program(): Opt_programContext {
		let _localctx: Opt_programContext = new Opt_programContext(this._ctx, this.state);
		this.enterRule(_localctx, 144, PostgreSQLParser.RULE_opt_program);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2723;
			this.match(PostgreSQLParser.KW_PROGRAM);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_file_name(): Copy_file_nameContext {
		let _localctx: Copy_file_nameContext = new Copy_file_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 146, PostgreSQLParser.RULE_copy_file_name);
		try {
			this.state = 2728;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2725;
				this.sconst();
				}
				break;
			case PostgreSQLParser.KW_STDIN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2726;
				this.match(PostgreSQLParser.KW_STDIN);
				}
				break;
			case PostgreSQLParser.KW_STDOUT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2727;
				this.match(PostgreSQLParser.KW_STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_options(): Copy_optionsContext {
		let _localctx: Copy_optionsContext = new Copy_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 148, PostgreSQLParser.RULE_copy_options);
		try {
			this.state = 2735;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 115, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2730;
				this.copy_opt_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2731;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 2732;
				this.copy_generic_opt_list();
				this.state = 2733;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_opt_list(): Copy_opt_listContext {
		let _localctx: Copy_opt_listContext = new Copy_opt_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 150, PostgreSQLParser.RULE_copy_opt_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2740;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.KW_NULL || _la === PostgreSQLParser.KW_BINARY || _la === PostgreSQLParser.KW_FREEZE || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (PostgreSQLParser.KW_CSV - 171)) | (1 << (PostgreSQLParser.KW_DELIMITER - 171)) | (1 << (PostgreSQLParser.KW_ENCODING - 171)) | (1 << (PostgreSQLParser.KW_ESCAPE - 171)))) !== 0) || _la === PostgreSQLParser.KW_FORCE || _la === PostgreSQLParser.KW_HEADER || _la === PostgreSQLParser.KW_QUOTE) {
				{
				{
				this.state = 2737;
				this.copy_opt_item();
				}
				}
				this.state = 2742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_opt_item(): Copy_opt_itemContext {
		let _localctx: Copy_opt_itemContext = new Copy_opt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 152, PostgreSQLParser.RULE_copy_opt_item);
		let _la: number;
		try {
			this.state = 2782;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 121, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2743;
				this.match(PostgreSQLParser.KW_BINARY);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2744;
				this.match(PostgreSQLParser.KW_FREEZE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2745;
				this.match(PostgreSQLParser.KW_DELIMITER);
				this.state = 2747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AS) {
					{
					this.state = 2746;
					this.opt_as();
					}
				}

				this.state = 2749;
				this.sconst();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2750;
				this.match(PostgreSQLParser.KW_NULL);
				this.state = 2752;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AS) {
					{
					this.state = 2751;
					this.opt_as();
					}
				}

				this.state = 2754;
				this.sconst();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2755;
				this.match(PostgreSQLParser.KW_CSV);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 2756;
				this.match(PostgreSQLParser.KW_HEADER);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 2757;
				this.match(PostgreSQLParser.KW_QUOTE);
				this.state = 2759;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AS) {
					{
					this.state = 2758;
					this.opt_as();
					}
				}

				this.state = 2761;
				this.sconst();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 2762;
				this.match(PostgreSQLParser.KW_ESCAPE);
				this.state = 2764;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AS) {
					{
					this.state = 2763;
					this.opt_as();
					}
				}

				this.state = 2766;
				this.sconst();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 2767;
				this.match(PostgreSQLParser.KW_FORCE);
				this.state = 2768;
				this.match(PostgreSQLParser.KW_QUOTE);
				this.state = 2769;
				this.columnlist();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 2770;
				this.match(PostgreSQLParser.KW_FORCE);
				this.state = 2771;
				this.match(PostgreSQLParser.KW_QUOTE);
				this.state = 2772;
				this.match(PostgreSQLParser.STAR);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 2773;
				this.match(PostgreSQLParser.KW_FORCE);
				this.state = 2774;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 2775;
				this.match(PostgreSQLParser.KW_NULL);
				this.state = 2776;
				this.columnlist();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 2777;
				this.match(PostgreSQLParser.KW_FORCE);
				this.state = 2778;
				this.match(PostgreSQLParser.KW_NULL);
				this.state = 2779;
				this.columnlist();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 2780;
				this.match(PostgreSQLParser.KW_ENCODING);
				this.state = 2781;
				this.sconst();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_binary(): Opt_binaryContext {
		let _localctx: Opt_binaryContext = new Opt_binaryContext(this._ctx, this.state);
		this.enterRule(_localctx, 154, PostgreSQLParser.RULE_opt_binary);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2784;
			this.match(PostgreSQLParser.KW_BINARY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_delimiter(): Copy_delimiterContext {
		let _localctx: Copy_delimiterContext = new Copy_delimiterContext(this._ctx, this.state);
		this.enterRule(_localctx, 156, PostgreSQLParser.RULE_copy_delimiter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2787;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_USING) {
				{
				this.state = 2786;
				this.opt_using();
				}
			}

			this.state = 2789;
			this.match(PostgreSQLParser.KW_DELIMITERS);
			this.state = 2790;
			this.sconst();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_using(): Opt_usingContext {
		let _localctx: Opt_usingContext = new Opt_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 158, PostgreSQLParser.RULE_opt_using);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2792;
			this.match(PostgreSQLParser.KW_USING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_generic_opt_list(): Copy_generic_opt_listContext {
		let _localctx: Copy_generic_opt_listContext = new Copy_generic_opt_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 160, PostgreSQLParser.RULE_copy_generic_opt_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2794;
			this.copy_generic_opt_elem();
			this.state = 2799;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 2795;
				this.match(PostgreSQLParser.COMMA);
				this.state = 2796;
				this.copy_generic_opt_elem();
				}
				}
				this.state = 2801;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_generic_opt_elem(): Copy_generic_opt_elemContext {
		let _localctx: Copy_generic_opt_elemContext = new Copy_generic_opt_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 162, PostgreSQLParser.RULE_copy_generic_opt_elem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2802;
			this.collabel();
			this.state = 2804;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.STAR) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FALSE - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 80)) & ~0x1F) === 0 && ((1 << (_la - 80)) & ((1 << (PostgreSQLParser.KW_ON - 80)) | (1 << (PostgreSQLParser.KW_TABLE - 80)) | (1 << (PostgreSQLParser.KW_TRUE - 80)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 80)) | (1 << (PostgreSQLParser.KW_BINARY - 80)) | (1 << (PostgreSQLParser.KW_COLLATION - 80)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 80)) | (1 << (PostgreSQLParser.KW_CROSS - 80)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 80)))) !== 0) || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & ((1 << (PostgreSQLParser.KW_FREEZE - 112)) | (1 << (PostgreSQLParser.KW_FULL - 112)) | (1 << (PostgreSQLParser.KW_ILIKE - 112)) | (1 << (PostgreSQLParser.KW_INNER - 112)) | (1 << (PostgreSQLParser.KW_IS - 112)) | (1 << (PostgreSQLParser.KW_ISNULL - 112)) | (1 << (PostgreSQLParser.KW_JOIN - 112)) | (1 << (PostgreSQLParser.KW_LEFT - 112)) | (1 << (PostgreSQLParser.KW_LIKE - 112)) | (1 << (PostgreSQLParser.KW_NATURAL - 112)) | (1 << (PostgreSQLParser.KW_NOTNULL - 112)) | (1 << (PostgreSQLParser.KW_OUTER - 112)) | (1 << (PostgreSQLParser.KW_OVER - 112)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 112)) | (1 << (PostgreSQLParser.KW_RIGHT - 112)) | (1 << (PostgreSQLParser.KW_SIMILAR - 112)) | (1 << (PostgreSQLParser.KW_VERBOSE - 112)) | (1 << (PostgreSQLParser.KW_ABORT - 112)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 112)) | (1 << (PostgreSQLParser.KW_ACCESS - 112)) | (1 << (PostgreSQLParser.KW_ACTION - 112)) | (1 << (PostgreSQLParser.KW_ADD - 112)) | (1 << (PostgreSQLParser.KW_ADMIN - 112)) | (1 << (PostgreSQLParser.KW_AFTER - 112)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 112)) | (1 << (PostgreSQLParser.KW_ALSO - 112)) | (1 << (PostgreSQLParser.KW_ALTER - 112)) | (1 << (PostgreSQLParser.KW_ALWAYS - 112)) | (1 << (PostgreSQLParser.KW_ASSERTION - 112)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 112)) | (1 << (PostgreSQLParser.KW_AT - 112)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 112)))) !== 0) || ((((_la - 144)) & ~0x1F) === 0 && ((1 << (_la - 144)) & ((1 << (PostgreSQLParser.KW_BACKWARD - 144)) | (1 << (PostgreSQLParser.KW_BEFORE - 144)) | (1 << (PostgreSQLParser.KW_BEGIN - 144)) | (1 << (PostgreSQLParser.KW_BY - 144)) | (1 << (PostgreSQLParser.KW_CACHE - 144)) | (1 << (PostgreSQLParser.KW_CALLED - 144)) | (1 << (PostgreSQLParser.KW_CASCADE - 144)) | (1 << (PostgreSQLParser.KW_CASCADED - 144)) | (1 << (PostgreSQLParser.KW_CATALOG - 144)) | (1 << (PostgreSQLParser.KW_CHAIN - 144)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 144)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 144)) | (1 << (PostgreSQLParser.KW_CLASS - 144)) | (1 << (PostgreSQLParser.KW_CLOSE - 144)) | (1 << (PostgreSQLParser.KW_CLUSTER - 144)) | (1 << (PostgreSQLParser.KW_COMMENT - 144)) | (1 << (PostgreSQLParser.KW_COMMENTS - 144)) | (1 << (PostgreSQLParser.KW_COMMIT - 144)) | (1 << (PostgreSQLParser.KW_COMMITTED - 144)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 144)) | (1 << (PostgreSQLParser.KW_CONNECTION - 144)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 144)) | (1 << (PostgreSQLParser.KW_CONTENT - 144)) | (1 << (PostgreSQLParser.KW_CONTINUE - 144)) | (1 << (PostgreSQLParser.KW_CONVERSION - 144)) | (1 << (PostgreSQLParser.KW_COPY - 144)) | (1 << (PostgreSQLParser.KW_COST - 144)) | (1 << (PostgreSQLParser.KW_CSV - 144)) | (1 << (PostgreSQLParser.KW_CURSOR - 144)) | (1 << (PostgreSQLParser.KW_CYCLE - 144)) | (1 << (PostgreSQLParser.KW_DATA - 144)) | (1 << (PostgreSQLParser.KW_DATABASE - 144)))) !== 0) || ((((_la - 176)) & ~0x1F) === 0 && ((1 << (_la - 176)) & ((1 << (PostgreSQLParser.KW_DAY - 176)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 176)) | (1 << (PostgreSQLParser.KW_DECLARE - 176)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 176)) | (1 << (PostgreSQLParser.KW_DEFERRED - 176)) | (1 << (PostgreSQLParser.KW_DEFINER - 176)) | (1 << (PostgreSQLParser.KW_DELETE - 176)) | (1 << (PostgreSQLParser.KW_DELIMITER - 176)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 176)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 176)) | (1 << (PostgreSQLParser.KW_DISABLE - 176)) | (1 << (PostgreSQLParser.KW_DISCARD - 176)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 176)) | (1 << (PostgreSQLParser.KW_DOMAIN - 176)) | (1 << (PostgreSQLParser.KW_DOUBLE - 176)) | (1 << (PostgreSQLParser.KW_DROP - 176)) | (1 << (PostgreSQLParser.KW_EACH - 176)) | (1 << (PostgreSQLParser.KW_ENABLE - 176)) | (1 << (PostgreSQLParser.KW_ENCODING - 176)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 176)) | (1 << (PostgreSQLParser.KW_ENUM - 176)) | (1 << (PostgreSQLParser.KW_ESCAPE - 176)) | (1 << (PostgreSQLParser.KW_EVENT - 176)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 176)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 176)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 176)) | (1 << (PostgreSQLParser.KW_EXECUTE - 176)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 176)) | (1 << (PostgreSQLParser.KW_EXTENSION - 176)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 176)) | (1 << (PostgreSQLParser.KW_FAMILY - 176)) | (1 << (PostgreSQLParser.KW_FIRST - 176)))) !== 0) || ((((_la - 208)) & ~0x1F) === 0 && ((1 << (_la - 208)) & ((1 << (PostgreSQLParser.KW_FOLLOWING - 208)) | (1 << (PostgreSQLParser.KW_FORCE - 208)) | (1 << (PostgreSQLParser.KW_FORWARD - 208)) | (1 << (PostgreSQLParser.KW_FUNCTION - 208)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 208)) | (1 << (PostgreSQLParser.KW_GLOBAL - 208)) | (1 << (PostgreSQLParser.KW_GRANTED - 208)) | (1 << (PostgreSQLParser.KW_HANDLER - 208)) | (1 << (PostgreSQLParser.KW_HEADER - 208)) | (1 << (PostgreSQLParser.KW_HOLD - 208)) | (1 << (PostgreSQLParser.KW_HOUR - 208)) | (1 << (PostgreSQLParser.KW_IDENTITY - 208)) | (1 << (PostgreSQLParser.KW_IF - 208)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 208)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 208)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 208)) | (1 << (PostgreSQLParser.KW_INCLUDING - 208)) | (1 << (PostgreSQLParser.KW_INCREMENT - 208)) | (1 << (PostgreSQLParser.KW_INDEX - 208)) | (1 << (PostgreSQLParser.KW_INDEXES - 208)) | (1 << (PostgreSQLParser.KW_INHERIT - 208)) | (1 << (PostgreSQLParser.KW_INHERITS - 208)) | (1 << (PostgreSQLParser.KW_INLINE - 208)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (PostgreSQLParser.KW_INSENSITIVE - 240)) | (1 << (PostgreSQLParser.KW_INSERT - 240)) | (1 << (PostgreSQLParser.KW_INSTEAD - 240)) | (1 << (PostgreSQLParser.KW_INVOKER - 240)) | (1 << (PostgreSQLParser.KW_ISOLATION - 240)) | (1 << (PostgreSQLParser.KW_KEY - 240)) | (1 << (PostgreSQLParser.KW_LABEL - 240)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 240)) | (1 << (PostgreSQLParser.KW_LARGE - 240)) | (1 << (PostgreSQLParser.KW_LAST - 240)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 240)) | (1 << (PostgreSQLParser.KW_LEVEL - 240)) | (1 << (PostgreSQLParser.KW_LISTEN - 240)) | (1 << (PostgreSQLParser.KW_LOAD - 240)) | (1 << (PostgreSQLParser.KW_LOCAL - 240)) | (1 << (PostgreSQLParser.KW_LOCATION - 240)) | (1 << (PostgreSQLParser.KW_LOCK - 240)) | (1 << (PostgreSQLParser.KW_MAPPING - 240)) | (1 << (PostgreSQLParser.KW_MATCH - 240)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 240)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 240)) | (1 << (PostgreSQLParser.KW_MINUTE - 240)) | (1 << (PostgreSQLParser.KW_MINVALUE - 240)) | (1 << (PostgreSQLParser.KW_MODE - 240)) | (1 << (PostgreSQLParser.KW_MONTH - 240)) | (1 << (PostgreSQLParser.KW_MOVE - 240)) | (1 << (PostgreSQLParser.KW_NAME - 240)) | (1 << (PostgreSQLParser.KW_NAMES - 240)) | (1 << (PostgreSQLParser.KW_NEXT - 240)) | (1 << (PostgreSQLParser.KW_NO - 240)) | (1 << (PostgreSQLParser.KW_NOTHING - 240)) | (1 << (PostgreSQLParser.KW_NOTIFY - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (PostgreSQLParser.KW_NOWAIT - 272)) | (1 << (PostgreSQLParser.KW_NULLS - 272)) | (1 << (PostgreSQLParser.KW_OBJECT - 272)) | (1 << (PostgreSQLParser.KW_OF - 272)) | (1 << (PostgreSQLParser.KW_OFF - 272)) | (1 << (PostgreSQLParser.KW_OIDS - 272)) | (1 << (PostgreSQLParser.KW_OPERATOR - 272)) | (1 << (PostgreSQLParser.KW_OPTION - 272)) | (1 << (PostgreSQLParser.KW_OPTIONS - 272)) | (1 << (PostgreSQLParser.KW_OWNED - 272)) | (1 << (PostgreSQLParser.KW_OWNER - 272)) | (1 << (PostgreSQLParser.KW_PARSER - 272)) | (1 << (PostgreSQLParser.KW_PARTIAL - 272)) | (1 << (PostgreSQLParser.KW_PARTITION - 272)) | (1 << (PostgreSQLParser.KW_PASSING - 272)) | (1 << (PostgreSQLParser.KW_PASSWORD - 272)) | (1 << (PostgreSQLParser.KW_PLANS - 272)) | (1 << (PostgreSQLParser.KW_PRECEDING - 272)) | (1 << (PostgreSQLParser.KW_PREPARE - 272)) | (1 << (PostgreSQLParser.KW_PREPARED - 272)) | (1 << (PostgreSQLParser.KW_PRESERVE - 272)) | (1 << (PostgreSQLParser.KW_PRIOR - 272)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 272)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 272)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 272)) | (1 << (PostgreSQLParser.KW_PROGRAM - 272)) | (1 << (PostgreSQLParser.KW_QUOTE - 272)) | (1 << (PostgreSQLParser.KW_RANGE - 272)) | (1 << (PostgreSQLParser.KW_READ - 272)) | (1 << (PostgreSQLParser.KW_REASSIGN - 272)) | (1 << (PostgreSQLParser.KW_RECHECK - 272)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (PostgreSQLParser.KW_REF - 304)) | (1 << (PostgreSQLParser.KW_REFRESH - 304)) | (1 << (PostgreSQLParser.KW_REINDEX - 304)) | (1 << (PostgreSQLParser.KW_RELATIVE - 304)) | (1 << (PostgreSQLParser.KW_RELEASE - 304)) | (1 << (PostgreSQLParser.KW_RENAME - 304)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 304)) | (1 << (PostgreSQLParser.KW_REPLACE - 304)) | (1 << (PostgreSQLParser.KW_REPLICA - 304)) | (1 << (PostgreSQLParser.KW_RESET - 304)) | (1 << (PostgreSQLParser.KW_RESTART - 304)) | (1 << (PostgreSQLParser.KW_RESTRICT - 304)) | (1 << (PostgreSQLParser.KW_RETURNS - 304)) | (1 << (PostgreSQLParser.KW_REVOKE - 304)) | (1 << (PostgreSQLParser.KW_ROLE - 304)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 304)) | (1 << (PostgreSQLParser.KW_ROWS - 304)) | (1 << (PostgreSQLParser.KW_RULE - 304)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 304)) | (1 << (PostgreSQLParser.KW_SCHEMA - 304)) | (1 << (PostgreSQLParser.KW_SCROLL - 304)) | (1 << (PostgreSQLParser.KW_SEARCH - 304)) | (1 << (PostgreSQLParser.KW_SECOND - 304)) | (1 << (PostgreSQLParser.KW_SECURITY - 304)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 304)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 304)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 304)) | (1 << (PostgreSQLParser.KW_SERVER - 304)) | (1 << (PostgreSQLParser.KW_SESSION - 304)) | (1 << (PostgreSQLParser.KW_SET - 304)) | (1 << (PostgreSQLParser.KW_SHARE - 304)) | (1 << (PostgreSQLParser.KW_SHOW - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (PostgreSQLParser.KW_SIMPLE - 336)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 336)) | (1 << (PostgreSQLParser.KW_STABLE - 336)) | (1 << (PostgreSQLParser.KW_STANDALONE - 336)) | (1 << (PostgreSQLParser.KW_START - 336)) | (1 << (PostgreSQLParser.KW_STATEMENT - 336)) | (1 << (PostgreSQLParser.KW_STATISTICS - 336)) | (1 << (PostgreSQLParser.KW_STDIN - 336)) | (1 << (PostgreSQLParser.KW_STDOUT - 336)) | (1 << (PostgreSQLParser.KW_STORAGE - 336)) | (1 << (PostgreSQLParser.KW_STRICT - 336)) | (1 << (PostgreSQLParser.KW_STRIP - 336)) | (1 << (PostgreSQLParser.KW_SYSID - 336)) | (1 << (PostgreSQLParser.KW_SYSTEM - 336)) | (1 << (PostgreSQLParser.KW_TABLES - 336)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 336)) | (1 << (PostgreSQLParser.KW_TEMP - 336)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 336)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 336)) | (1 << (PostgreSQLParser.KW_TEXT - 336)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 336)) | (1 << (PostgreSQLParser.KW_TRIGGER - 336)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 336)) | (1 << (PostgreSQLParser.KW_TRUSTED - 336)) | (1 << (PostgreSQLParser.KW_TYPE - 336)) | (1 << (PostgreSQLParser.KW_TYPES - 336)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 336)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 336)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 336)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 336)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 336)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (PostgreSQLParser.KW_UNTIL - 368)) | (1 << (PostgreSQLParser.KW_UPDATE - 368)) | (1 << (PostgreSQLParser.KW_VACUUM - 368)) | (1 << (PostgreSQLParser.KW_VALID - 368)) | (1 << (PostgreSQLParser.KW_VALIDATE - 368)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 368)) | (1 << (PostgreSQLParser.KW_VARYING - 368)) | (1 << (PostgreSQLParser.KW_VERSION - 368)) | (1 << (PostgreSQLParser.KW_VIEW - 368)) | (1 << (PostgreSQLParser.KW_VOLATILE - 368)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 368)) | (1 << (PostgreSQLParser.KW_WITHOUT - 368)) | (1 << (PostgreSQLParser.KW_WORK - 368)) | (1 << (PostgreSQLParser.KW_WRAPPER - 368)) | (1 << (PostgreSQLParser.KW_WRITE - 368)) | (1 << (PostgreSQLParser.KW_XML - 368)) | (1 << (PostgreSQLParser.KW_YEAR - 368)) | (1 << (PostgreSQLParser.KW_YES - 368)) | (1 << (PostgreSQLParser.KW_ZONE - 368)) | (1 << (PostgreSQLParser.KW_BETWEEN - 368)) | (1 << (PostgreSQLParser.KW_BIGINT - 368)) | (1 << (PostgreSQLParser.KW_BIT - 368)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 368)) | (1 << (PostgreSQLParser.KW_CHAR - 368)) | (1 << (PostgreSQLParser.KW_CHARACTER - 368)) | (1 << (PostgreSQLParser.KW_COALESCE - 368)) | (1 << (PostgreSQLParser.KW_DEC - 368)) | (1 << (PostgreSQLParser.KW_DECIMAL - 368)) | (1 << (PostgreSQLParser.KW_EXISTS - 368)) | (1 << (PostgreSQLParser.KW_EXTRACT - 368)) | (1 << (PostgreSQLParser.KW_FLOAT - 368)) | (1 << (PostgreSQLParser.KW_GREATEST - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (PostgreSQLParser.KW_INOUT - 400)) | (1 << (PostgreSQLParser.KW_INT - 400)) | (1 << (PostgreSQLParser.KW_INTEGER - 400)) | (1 << (PostgreSQLParser.KW_INTERVAL - 400)) | (1 << (PostgreSQLParser.KW_LEAST - 400)) | (1 << (PostgreSQLParser.KW_NATIONAL - 400)) | (1 << (PostgreSQLParser.KW_NCHAR - 400)) | (1 << (PostgreSQLParser.KW_NONE - 400)) | (1 << (PostgreSQLParser.KW_NULLIF - 400)) | (1 << (PostgreSQLParser.KW_NUMERIC - 400)) | (1 << (PostgreSQLParser.KW_OVERLAY - 400)) | (1 << (PostgreSQLParser.KW_POSITION - 400)) | (1 << (PostgreSQLParser.KW_PRECISION - 400)) | (1 << (PostgreSQLParser.KW_REAL - 400)) | (1 << (PostgreSQLParser.KW_ROW - 400)) | (1 << (PostgreSQLParser.KW_SETOF - 400)) | (1 << (PostgreSQLParser.KW_SMALLINT - 400)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 400)) | (1 << (PostgreSQLParser.KW_TIME - 400)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 400)) | (1 << (PostgreSQLParser.KW_TREAT - 400)) | (1 << (PostgreSQLParser.KW_TRIM - 400)) | (1 << (PostgreSQLParser.KW_VALUES - 400)) | (1 << (PostgreSQLParser.KW_VARCHAR - 400)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 400)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 400)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 400)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 400)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 400)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 400)) | (1 << (PostgreSQLParser.KW_XMLPI - 400)) | (1 << (PostgreSQLParser.KW_XMLROOT - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (PostgreSQLParser.KW_XMLSERIALIZE - 432)) | (1 << (PostgreSQLParser.KW_CALL - 432)) | (1 << (PostgreSQLParser.KW_CURRENT - 432)) | (1 << (PostgreSQLParser.KW_ATTACH - 432)) | (1 << (PostgreSQLParser.KW_DETACH - 432)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 432)) | (1 << (PostgreSQLParser.KW_GENERATED - 432)) | (1 << (PostgreSQLParser.KW_LOGGED - 432)) | (1 << (PostgreSQLParser.KW_STORED - 432)) | (1 << (PostgreSQLParser.KW_INCLUDE - 432)) | (1 << (PostgreSQLParser.KW_ROUTINE - 432)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 432)) | (1 << (PostgreSQLParser.KW_IMPORT - 432)) | (1 << (PostgreSQLParser.KW_POLICY - 432)) | (1 << (PostgreSQLParser.KW_METHOD - 432)) | (1 << (PostgreSQLParser.KW_REFERENCING - 432)) | (1 << (PostgreSQLParser.KW_NEW - 432)) | (1 << (PostgreSQLParser.KW_OLD - 432)) | (1 << (PostgreSQLParser.KW_VALUE - 432)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 432)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 432)) | (1 << (PostgreSQLParser.KW_OUT - 432)) | (1 << (PostgreSQLParser.KW_ROUTINES - 432)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 432)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 432)) | (1 << (PostgreSQLParser.KW_INPUT - 432)) | (1 << (PostgreSQLParser.KW_SUPPORT - 432)) | (1 << (PostgreSQLParser.KW_PARALLEL - 432)) | (1 << (PostgreSQLParser.KW_SQL - 432)) | (1 << (PostgreSQLParser.KW_DEPENDS - 432)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (PostgreSQLParser.KW_CONFLICT - 464)) | (1 << (PostgreSQLParser.KW_SKIP - 464)) | (1 << (PostgreSQLParser.KW_LOCKED - 464)) | (1 << (PostgreSQLParser.KW_TIES - 464)) | (1 << (PostgreSQLParser.KW_ROLLUP - 464)) | (1 << (PostgreSQLParser.KW_CUBE - 464)) | (1 << (PostgreSQLParser.KW_GROUPING - 464)) | (1 << (PostgreSQLParser.KW_SETS - 464)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 464)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 464)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 464)) | (1 << (PostgreSQLParser.KW_COLUMNS - 464)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 464)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 464)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 464)) | (1 << (PostgreSQLParser.KW_WITHIN - 464)) | (1 << (PostgreSQLParser.KW_FILTER - 464)) | (1 << (PostgreSQLParser.KW_GROUPS - 464)) | (1 << (PostgreSQLParser.KW_OTHERS - 464)) | (1 << (PostgreSQLParser.KW_NFC - 464)) | (1 << (PostgreSQLParser.KW_NFD - 464)) | (1 << (PostgreSQLParser.KW_NFKC - 464)) | (1 << (PostgreSQLParser.KW_NFKD - 464)) | (1 << (PostgreSQLParser.KW_UESCAPE - 464)) | (1 << (PostgreSQLParser.KW_VIEWS - 464)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 464)) | (1 << (PostgreSQLParser.KW_DUMP - 464)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 464)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 464)) | (1 << (PostgreSQLParser.KW_ERROR - 464)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 464)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (PostgreSQLParser.KW_ALIAS - 496)) | (1 << (PostgreSQLParser.KW_CONSTANT - 496)) | (1 << (PostgreSQLParser.KW_PERFORM - 496)) | (1 << (PostgreSQLParser.KW_GET - 496)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 496)) | (1 << (PostgreSQLParser.KW_STACKED - 496)) | (1 << (PostgreSQLParser.KW_ELSIF - 496)) | (1 << (PostgreSQLParser.KW_REVERSE - 496)) | (1 << (PostgreSQLParser.KW_SLICE - 496)) | (1 << (PostgreSQLParser.KW_EXIT - 496)) | (1 << (PostgreSQLParser.KW_RETURN - 496)) | (1 << (PostgreSQLParser.KW_QUERY - 496)) | (1 << (PostgreSQLParser.KW_RAISE - 496)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 496)) | (1 << (PostgreSQLParser.KW_DEBUG - 496)) | (1 << (PostgreSQLParser.KW_LOG - 496)) | (1 << (PostgreSQLParser.KW_INFO - 496)) | (1 << (PostgreSQLParser.KW_NOTICE - 496)) | (1 << (PostgreSQLParser.KW_WARNING - 496)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 496)) | (1 << (PostgreSQLParser.KW_ASSERT - 496)) | (1 << (PostgreSQLParser.KW_OPEN - 496)) | (1 << (PostgreSQLParser.Identifier - 496)) | (1 << (PostgreSQLParser.QuotedIdentifier - 496)))) !== 0) || ((((_la - 530)) & ~0x1F) === 0 && ((1 << (_la - 530)) & ((1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 530)) | (1 << (PostgreSQLParser.StringConstant - 530)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 530)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 530)) | (1 << (PostgreSQLParser.Integral - 530)) | (1 << (PostgreSQLParser.Numeric - 530)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 530)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 530)) | (1 << (PostgreSQLParser.EscapeStringConstant - 530)))) !== 0)) {
				{
				this.state = 2803;
				this.copy_generic_opt_arg();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_generic_opt_arg(): Copy_generic_opt_argContext {
		let _localctx: Copy_generic_opt_argContext = new Copy_generic_opt_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 164, PostgreSQLParser.RULE_copy_generic_opt_arg);
		try {
			this.state = 2813;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_ON:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2806;
				this.opt_boolean_or_string();
				}
				break;
			case PostgreSQLParser.PLUS:
			case PostgreSQLParser.MINUS:
			case PostgreSQLParser.Integral:
			case PostgreSQLParser.Numeric:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2807;
				this.numericonly();
				}
				break;
			case PostgreSQLParser.STAR:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2808;
				this.match(PostgreSQLParser.STAR);
				}
				break;
			case PostgreSQLParser.OPEN_PAREN:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2809;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 2810;
				this.copy_generic_opt_arg_list();
				this.state = 2811;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_generic_opt_arg_list(): Copy_generic_opt_arg_listContext {
		let _localctx: Copy_generic_opt_arg_listContext = new Copy_generic_opt_arg_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 166, PostgreSQLParser.RULE_copy_generic_opt_arg_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2815;
			this.copy_generic_opt_arg_list_item();
			this.state = 2820;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 2816;
				this.match(PostgreSQLParser.COMMA);
				this.state = 2817;
				this.copy_generic_opt_arg_list_item();
				}
				}
				this.state = 2822;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public copy_generic_opt_arg_list_item(): Copy_generic_opt_arg_list_itemContext {
		let _localctx: Copy_generic_opt_arg_list_itemContext = new Copy_generic_opt_arg_list_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, PostgreSQLParser.RULE_copy_generic_opt_arg_list_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2823;
			this.opt_boolean_or_string();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createstmt(): CreatestmtContext {
		let _localctx: CreatestmtContext = new CreatestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, PostgreSQLParser.RULE_createstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2825;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 2827;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_GLOBAL || _la === PostgreSQLParser.KW_LOCAL || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PostgreSQLParser.KW_TEMP - 352)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 352)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 352)))) !== 0)) {
				{
				this.state = 2826;
				this.opttemp();
				}
			}

			this.state = 2829;
			this.match(PostgreSQLParser.KW_TABLE);
			this.state = 2833;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 128, this._ctx) ) {
			case 1:
				{
				this.state = 2830;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 2831;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 2832;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 2835;
			this.table_qualified_name();
			this.state = 2901;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.OPEN_PAREN:
				{
				this.state = 2836;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 2838;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_CHECK - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)) | (1 << (PostgreSQLParser.KW_FOREIGN - 33)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (PostgreSQLParser.KW_PRIMARY - 85)) | (1 << (PostgreSQLParser.KW_TABLE - 85)) | (1 << (PostgreSQLParser.KW_UNIQUE - 85)) | (1 << (PostgreSQLParser.KW_IS - 85)))) !== 0) || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & ((1 << (PostgreSQLParser.KW_LIKE - 120)) | (1 << (PostgreSQLParser.KW_OUTER - 120)) | (1 << (PostgreSQLParser.KW_OVER - 120)) | (1 << (PostgreSQLParser.KW_ABORT - 120)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 120)) | (1 << (PostgreSQLParser.KW_ACCESS - 120)) | (1 << (PostgreSQLParser.KW_ACTION - 120)) | (1 << (PostgreSQLParser.KW_ADD - 120)) | (1 << (PostgreSQLParser.KW_ADMIN - 120)) | (1 << (PostgreSQLParser.KW_AFTER - 120)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 120)) | (1 << (PostgreSQLParser.KW_ALSO - 120)) | (1 << (PostgreSQLParser.KW_ALTER - 120)) | (1 << (PostgreSQLParser.KW_ALWAYS - 120)) | (1 << (PostgreSQLParser.KW_ASSERTION - 120)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 120)) | (1 << (PostgreSQLParser.KW_AT - 120)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 120)) | (1 << (PostgreSQLParser.KW_BACKWARD - 120)) | (1 << (PostgreSQLParser.KW_BEFORE - 120)) | (1 << (PostgreSQLParser.KW_BEGIN - 120)) | (1 << (PostgreSQLParser.KW_BY - 120)) | (1 << (PostgreSQLParser.KW_CACHE - 120)) | (1 << (PostgreSQLParser.KW_CALLED - 120)) | (1 << (PostgreSQLParser.KW_CASCADE - 120)) | (1 << (PostgreSQLParser.KW_CASCADED - 120)))) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & ((1 << (PostgreSQLParser.KW_CATALOG - 152)) | (1 << (PostgreSQLParser.KW_CHAIN - 152)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 152)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 152)) | (1 << (PostgreSQLParser.KW_CLASS - 152)) | (1 << (PostgreSQLParser.KW_CLOSE - 152)) | (1 << (PostgreSQLParser.KW_CLUSTER - 152)) | (1 << (PostgreSQLParser.KW_COMMENT - 152)) | (1 << (PostgreSQLParser.KW_COMMENTS - 152)) | (1 << (PostgreSQLParser.KW_COMMIT - 152)) | (1 << (PostgreSQLParser.KW_COMMITTED - 152)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 152)) | (1 << (PostgreSQLParser.KW_CONNECTION - 152)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 152)) | (1 << (PostgreSQLParser.KW_CONTENT - 152)) | (1 << (PostgreSQLParser.KW_CONTINUE - 152)) | (1 << (PostgreSQLParser.KW_CONVERSION - 152)) | (1 << (PostgreSQLParser.KW_COPY - 152)) | (1 << (PostgreSQLParser.KW_COST - 152)) | (1 << (PostgreSQLParser.KW_CSV - 152)) | (1 << (PostgreSQLParser.KW_CURSOR - 152)) | (1 << (PostgreSQLParser.KW_CYCLE - 152)) | (1 << (PostgreSQLParser.KW_DATA - 152)) | (1 << (PostgreSQLParser.KW_DATABASE - 152)) | (1 << (PostgreSQLParser.KW_DAY - 152)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 152)) | (1 << (PostgreSQLParser.KW_DECLARE - 152)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 152)) | (1 << (PostgreSQLParser.KW_DEFERRED - 152)) | (1 << (PostgreSQLParser.KW_DEFINER - 152)) | (1 << (PostgreSQLParser.KW_DELETE - 152)) | (1 << (PostgreSQLParser.KW_DELIMITER - 152)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (PostgreSQLParser.KW_DELIMITERS - 184)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 184)) | (1 << (PostgreSQLParser.KW_DISABLE - 184)) | (1 << (PostgreSQLParser.KW_DISCARD - 184)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 184)) | (1 << (PostgreSQLParser.KW_DOMAIN - 184)) | (1 << (PostgreSQLParser.KW_DOUBLE - 184)) | (1 << (PostgreSQLParser.KW_DROP - 184)) | (1 << (PostgreSQLParser.KW_EACH - 184)) | (1 << (PostgreSQLParser.KW_ENABLE - 184)) | (1 << (PostgreSQLParser.KW_ENCODING - 184)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 184)) | (1 << (PostgreSQLParser.KW_ENUM - 184)) | (1 << (PostgreSQLParser.KW_ESCAPE - 184)) | (1 << (PostgreSQLParser.KW_EVENT - 184)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 184)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 184)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 184)) | (1 << (PostgreSQLParser.KW_EXECUTE - 184)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 184)) | (1 << (PostgreSQLParser.KW_EXTENSION - 184)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 184)) | (1 << (PostgreSQLParser.KW_FAMILY - 184)) | (1 << (PostgreSQLParser.KW_FIRST - 184)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 184)) | (1 << (PostgreSQLParser.KW_FORCE - 184)) | (1 << (PostgreSQLParser.KW_FORWARD - 184)) | (1 << (PostgreSQLParser.KW_FUNCTION - 184)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 184)) | (1 << (PostgreSQLParser.KW_GLOBAL - 184)) | (1 << (PostgreSQLParser.KW_GRANTED - 184)) | (1 << (PostgreSQLParser.KW_HANDLER - 184)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (PostgreSQLParser.KW_HEADER - 216)) | (1 << (PostgreSQLParser.KW_HOLD - 216)) | (1 << (PostgreSQLParser.KW_HOUR - 216)) | (1 << (PostgreSQLParser.KW_IDENTITY - 216)) | (1 << (PostgreSQLParser.KW_IF - 216)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 216)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 216)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 216)) | (1 << (PostgreSQLParser.KW_INCLUDING - 216)) | (1 << (PostgreSQLParser.KW_INCREMENT - 216)) | (1 << (PostgreSQLParser.KW_INDEX - 216)) | (1 << (PostgreSQLParser.KW_INDEXES - 216)) | (1 << (PostgreSQLParser.KW_INHERIT - 216)) | (1 << (PostgreSQLParser.KW_INHERITS - 216)) | (1 << (PostgreSQLParser.KW_INLINE - 216)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 216)) | (1 << (PostgreSQLParser.KW_INSERT - 216)) | (1 << (PostgreSQLParser.KW_INSTEAD - 216)) | (1 << (PostgreSQLParser.KW_INVOKER - 216)) | (1 << (PostgreSQLParser.KW_ISOLATION - 216)) | (1 << (PostgreSQLParser.KW_KEY - 216)) | (1 << (PostgreSQLParser.KW_LABEL - 216)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (PostgreSQLParser.KW_LARGE - 248)) | (1 << (PostgreSQLParser.KW_LAST - 248)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 248)) | (1 << (PostgreSQLParser.KW_LEVEL - 248)) | (1 << (PostgreSQLParser.KW_LISTEN - 248)) | (1 << (PostgreSQLParser.KW_LOAD - 248)) | (1 << (PostgreSQLParser.KW_LOCAL - 248)) | (1 << (PostgreSQLParser.KW_LOCATION - 248)) | (1 << (PostgreSQLParser.KW_LOCK - 248)) | (1 << (PostgreSQLParser.KW_MAPPING - 248)) | (1 << (PostgreSQLParser.KW_MATCH - 248)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 248)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 248)) | (1 << (PostgreSQLParser.KW_MINUTE - 248)) | (1 << (PostgreSQLParser.KW_MINVALUE - 248)) | (1 << (PostgreSQLParser.KW_MODE - 248)) | (1 << (PostgreSQLParser.KW_MONTH - 248)) | (1 << (PostgreSQLParser.KW_MOVE - 248)) | (1 << (PostgreSQLParser.KW_NAME - 248)) | (1 << (PostgreSQLParser.KW_NAMES - 248)) | (1 << (PostgreSQLParser.KW_NEXT - 248)) | (1 << (PostgreSQLParser.KW_NO - 248)) | (1 << (PostgreSQLParser.KW_NOTHING - 248)) | (1 << (PostgreSQLParser.KW_NOTIFY - 248)) | (1 << (PostgreSQLParser.KW_NOWAIT - 248)) | (1 << (PostgreSQLParser.KW_NULLS - 248)) | (1 << (PostgreSQLParser.KW_OBJECT - 248)) | (1 << (PostgreSQLParser.KW_OF - 248)) | (1 << (PostgreSQLParser.KW_OFF - 248)) | (1 << (PostgreSQLParser.KW_OIDS - 248)) | (1 << (PostgreSQLParser.KW_OPERATOR - 248)) | (1 << (PostgreSQLParser.KW_OPTION - 248)))) !== 0) || ((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & ((1 << (PostgreSQLParser.KW_OPTIONS - 280)) | (1 << (PostgreSQLParser.KW_OWNED - 280)) | (1 << (PostgreSQLParser.KW_OWNER - 280)) | (1 << (PostgreSQLParser.KW_PARSER - 280)) | (1 << (PostgreSQLParser.KW_PARTIAL - 280)) | (1 << (PostgreSQLParser.KW_PARTITION - 280)) | (1 << (PostgreSQLParser.KW_PASSING - 280)) | (1 << (PostgreSQLParser.KW_PASSWORD - 280)) | (1 << (PostgreSQLParser.KW_PLANS - 280)) | (1 << (PostgreSQLParser.KW_PRECEDING - 280)) | (1 << (PostgreSQLParser.KW_PREPARE - 280)) | (1 << (PostgreSQLParser.KW_PREPARED - 280)) | (1 << (PostgreSQLParser.KW_PRESERVE - 280)) | (1 << (PostgreSQLParser.KW_PRIOR - 280)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 280)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 280)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 280)) | (1 << (PostgreSQLParser.KW_PROGRAM - 280)) | (1 << (PostgreSQLParser.KW_QUOTE - 280)) | (1 << (PostgreSQLParser.KW_RANGE - 280)) | (1 << (PostgreSQLParser.KW_READ - 280)) | (1 << (PostgreSQLParser.KW_REASSIGN - 280)) | (1 << (PostgreSQLParser.KW_RECHECK - 280)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 280)) | (1 << (PostgreSQLParser.KW_REF - 280)) | (1 << (PostgreSQLParser.KW_REFRESH - 280)) | (1 << (PostgreSQLParser.KW_REINDEX - 280)) | (1 << (PostgreSQLParser.KW_RELATIVE - 280)) | (1 << (PostgreSQLParser.KW_RELEASE - 280)) | (1 << (PostgreSQLParser.KW_RENAME - 280)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 280)) | (1 << (PostgreSQLParser.KW_REPLACE - 280)))) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & ((1 << (PostgreSQLParser.KW_REPLICA - 312)) | (1 << (PostgreSQLParser.KW_RESET - 312)) | (1 << (PostgreSQLParser.KW_RESTART - 312)) | (1 << (PostgreSQLParser.KW_RESTRICT - 312)) | (1 << (PostgreSQLParser.KW_RETURNS - 312)) | (1 << (PostgreSQLParser.KW_REVOKE - 312)) | (1 << (PostgreSQLParser.KW_ROLE - 312)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 312)) | (1 << (PostgreSQLParser.KW_ROWS - 312)) | (1 << (PostgreSQLParser.KW_RULE - 312)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 312)) | (1 << (PostgreSQLParser.KW_SCHEMA - 312)) | (1 << (PostgreSQLParser.KW_SCROLL - 312)) | (1 << (PostgreSQLParser.KW_SEARCH - 312)) | (1 << (PostgreSQLParser.KW_SECOND - 312)) | (1 << (PostgreSQLParser.KW_SECURITY - 312)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 312)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 312)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 312)) | (1 << (PostgreSQLParser.KW_SERVER - 312)) | (1 << (PostgreSQLParser.KW_SESSION - 312)) | (1 << (PostgreSQLParser.KW_SET - 312)) | (1 << (PostgreSQLParser.KW_SHARE - 312)) | (1 << (PostgreSQLParser.KW_SHOW - 312)) | (1 << (PostgreSQLParser.KW_SIMPLE - 312)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 312)) | (1 << (PostgreSQLParser.KW_STABLE - 312)) | (1 << (PostgreSQLParser.KW_STANDALONE - 312)) | (1 << (PostgreSQLParser.KW_START - 312)) | (1 << (PostgreSQLParser.KW_STATEMENT - 312)) | (1 << (PostgreSQLParser.KW_STATISTICS - 312)) | (1 << (PostgreSQLParser.KW_STDIN - 312)))) !== 0) || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & ((1 << (PostgreSQLParser.KW_STDOUT - 344)) | (1 << (PostgreSQLParser.KW_STORAGE - 344)) | (1 << (PostgreSQLParser.KW_STRICT - 344)) | (1 << (PostgreSQLParser.KW_STRIP - 344)) | (1 << (PostgreSQLParser.KW_SYSID - 344)) | (1 << (PostgreSQLParser.KW_SYSTEM - 344)) | (1 << (PostgreSQLParser.KW_TABLES - 344)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 344)) | (1 << (PostgreSQLParser.KW_TEMP - 344)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 344)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 344)) | (1 << (PostgreSQLParser.KW_TEXT - 344)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 344)) | (1 << (PostgreSQLParser.KW_TRIGGER - 344)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 344)) | (1 << (PostgreSQLParser.KW_TRUSTED - 344)) | (1 << (PostgreSQLParser.KW_TYPE - 344)) | (1 << (PostgreSQLParser.KW_TYPES - 344)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 344)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 344)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 344)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 344)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 344)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 344)) | (1 << (PostgreSQLParser.KW_UNTIL - 344)) | (1 << (PostgreSQLParser.KW_UPDATE - 344)) | (1 << (PostgreSQLParser.KW_VACUUM - 344)) | (1 << (PostgreSQLParser.KW_VALID - 344)) | (1 << (PostgreSQLParser.KW_VALIDATE - 344)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 344)) | (1 << (PostgreSQLParser.KW_VARYING - 344)) | (1 << (PostgreSQLParser.KW_VERSION - 344)))) !== 0) || ((((_la - 376)) & ~0x1F) === 0 && ((1 << (_la - 376)) & ((1 << (PostgreSQLParser.KW_VIEW - 376)) | (1 << (PostgreSQLParser.KW_VOLATILE - 376)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 376)) | (1 << (PostgreSQLParser.KW_WITHOUT - 376)) | (1 << (PostgreSQLParser.KW_WORK - 376)) | (1 << (PostgreSQLParser.KW_WRAPPER - 376)) | (1 << (PostgreSQLParser.KW_WRITE - 376)) | (1 << (PostgreSQLParser.KW_XML - 376)) | (1 << (PostgreSQLParser.KW_YEAR - 376)) | (1 << (PostgreSQLParser.KW_YES - 376)) | (1 << (PostgreSQLParser.KW_ZONE - 376)) | (1 << (PostgreSQLParser.KW_BETWEEN - 376)) | (1 << (PostgreSQLParser.KW_BIGINT - 376)) | (1 << (PostgreSQLParser.KW_BIT - 376)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 376)) | (1 << (PostgreSQLParser.KW_CHAR - 376)) | (1 << (PostgreSQLParser.KW_CHARACTER - 376)) | (1 << (PostgreSQLParser.KW_COALESCE - 376)) | (1 << (PostgreSQLParser.KW_DEC - 376)) | (1 << (PostgreSQLParser.KW_DECIMAL - 376)) | (1 << (PostgreSQLParser.KW_EXISTS - 376)) | (1 << (PostgreSQLParser.KW_EXTRACT - 376)) | (1 << (PostgreSQLParser.KW_FLOAT - 376)) | (1 << (PostgreSQLParser.KW_GREATEST - 376)) | (1 << (PostgreSQLParser.KW_INOUT - 376)) | (1 << (PostgreSQLParser.KW_INT - 376)) | (1 << (PostgreSQLParser.KW_INTEGER - 376)) | (1 << (PostgreSQLParser.KW_INTERVAL - 376)) | (1 << (PostgreSQLParser.KW_LEAST - 376)) | (1 << (PostgreSQLParser.KW_NATIONAL - 376)) | (1 << (PostgreSQLParser.KW_NCHAR - 376)) | (1 << (PostgreSQLParser.KW_NONE - 376)))) !== 0) || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & ((1 << (PostgreSQLParser.KW_NULLIF - 408)) | (1 << (PostgreSQLParser.KW_NUMERIC - 408)) | (1 << (PostgreSQLParser.KW_OVERLAY - 408)) | (1 << (PostgreSQLParser.KW_POSITION - 408)) | (1 << (PostgreSQLParser.KW_PRECISION - 408)) | (1 << (PostgreSQLParser.KW_REAL - 408)) | (1 << (PostgreSQLParser.KW_ROW - 408)) | (1 << (PostgreSQLParser.KW_SETOF - 408)) | (1 << (PostgreSQLParser.KW_SMALLINT - 408)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 408)) | (1 << (PostgreSQLParser.KW_TIME - 408)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 408)) | (1 << (PostgreSQLParser.KW_TREAT - 408)) | (1 << (PostgreSQLParser.KW_TRIM - 408)) | (1 << (PostgreSQLParser.KW_VALUES - 408)) | (1 << (PostgreSQLParser.KW_VARCHAR - 408)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 408)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 408)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 408)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 408)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 408)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 408)) | (1 << (PostgreSQLParser.KW_XMLPI - 408)) | (1 << (PostgreSQLParser.KW_XMLROOT - 408)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 408)) | (1 << (PostgreSQLParser.KW_CALL - 408)) | (1 << (PostgreSQLParser.KW_CURRENT - 408)) | (1 << (PostgreSQLParser.KW_ATTACH - 408)) | (1 << (PostgreSQLParser.KW_DETACH - 408)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 408)) | (1 << (PostgreSQLParser.KW_GENERATED - 408)) | (1 << (PostgreSQLParser.KW_LOGGED - 408)))) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & ((1 << (PostgreSQLParser.KW_STORED - 440)) | (1 << (PostgreSQLParser.KW_INCLUDE - 440)) | (1 << (PostgreSQLParser.KW_ROUTINE - 440)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 440)) | (1 << (PostgreSQLParser.KW_IMPORT - 440)) | (1 << (PostgreSQLParser.KW_POLICY - 440)) | (1 << (PostgreSQLParser.KW_METHOD - 440)) | (1 << (PostgreSQLParser.KW_REFERENCING - 440)) | (1 << (PostgreSQLParser.KW_NEW - 440)) | (1 << (PostgreSQLParser.KW_OLD - 440)) | (1 << (PostgreSQLParser.KW_VALUE - 440)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 440)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 440)) | (1 << (PostgreSQLParser.KW_OUT - 440)) | (1 << (PostgreSQLParser.KW_ROUTINES - 440)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 440)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 440)) | (1 << (PostgreSQLParser.KW_INPUT - 440)) | (1 << (PostgreSQLParser.KW_SUPPORT - 440)) | (1 << (PostgreSQLParser.KW_PARALLEL - 440)) | (1 << (PostgreSQLParser.KW_SQL - 440)) | (1 << (PostgreSQLParser.KW_DEPENDS - 440)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 440)) | (1 << (PostgreSQLParser.KW_CONFLICT - 440)) | (1 << (PostgreSQLParser.KW_SKIP - 440)) | (1 << (PostgreSQLParser.KW_LOCKED - 440)) | (1 << (PostgreSQLParser.KW_TIES - 440)) | (1 << (PostgreSQLParser.KW_ROLLUP - 440)) | (1 << (PostgreSQLParser.KW_CUBE - 440)) | (1 << (PostgreSQLParser.KW_GROUPING - 440)) | (1 << (PostgreSQLParser.KW_SETS - 440)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (PostgreSQLParser.KW_ORDINALITY - 473)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 473)) | (1 << (PostgreSQLParser.KW_COLUMNS - 473)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 473)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 473)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 473)) | (1 << (PostgreSQLParser.KW_WITHIN - 473)) | (1 << (PostgreSQLParser.KW_FILTER - 473)) | (1 << (PostgreSQLParser.KW_GROUPS - 473)) | (1 << (PostgreSQLParser.KW_OTHERS - 473)) | (1 << (PostgreSQLParser.KW_NFC - 473)) | (1 << (PostgreSQLParser.KW_NFD - 473)) | (1 << (PostgreSQLParser.KW_NFKC - 473)) | (1 << (PostgreSQLParser.KW_NFKD - 473)) | (1 << (PostgreSQLParser.KW_UESCAPE - 473)) | (1 << (PostgreSQLParser.KW_VIEWS - 473)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 473)) | (1 << (PostgreSQLParser.KW_DUMP - 473)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 473)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 473)) | (1 << (PostgreSQLParser.KW_ERROR - 473)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 473)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 473)) | (1 << (PostgreSQLParser.KW_ALIAS - 473)) | (1 << (PostgreSQLParser.KW_CONSTANT - 473)) | (1 << (PostgreSQLParser.KW_PERFORM - 473)) | (1 << (PostgreSQLParser.KW_GET - 473)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 473)) | (1 << (PostgreSQLParser.KW_STACKED - 473)) | (1 << (PostgreSQLParser.KW_ELSIF - 473)) | (1 << (PostgreSQLParser.KW_REVERSE - 473)))) !== 0) || ((((_la - 506)) & ~0x1F) === 0 && ((1 << (_la - 506)) & ((1 << (PostgreSQLParser.KW_SLICE - 506)) | (1 << (PostgreSQLParser.KW_EXIT - 506)) | (1 << (PostgreSQLParser.KW_RETURN - 506)) | (1 << (PostgreSQLParser.KW_QUERY - 506)) | (1 << (PostgreSQLParser.KW_RAISE - 506)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 506)) | (1 << (PostgreSQLParser.KW_DEBUG - 506)) | (1 << (PostgreSQLParser.KW_LOG - 506)) | (1 << (PostgreSQLParser.KW_INFO - 506)) | (1 << (PostgreSQLParser.KW_NOTICE - 506)) | (1 << (PostgreSQLParser.KW_WARNING - 506)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 506)) | (1 << (PostgreSQLParser.KW_ASSERT - 506)) | (1 << (PostgreSQLParser.KW_OPEN - 506)) | (1 << (PostgreSQLParser.Identifier - 506)) | (1 << (PostgreSQLParser.QuotedIdentifier - 506)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 506)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
					{
					this.state = 2837;
					this.table_column_list();
					}
				}

				this.state = 2840;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 2842;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_INHERITS) {
					{
					this.state = 2841;
					this.optinherit();
					}
				}

				this.state = 2845;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_PARTITION) {
					{
					this.state = 2844;
					this.optpartitionspec();
					}
				}

				this.state = 2848;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING) {
					{
					this.state = 2847;
					this.table_access_method_clause();
					}
				}

				this.state = 2851;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 133, this._ctx) ) {
				case 1:
					{
					this.state = 2850;
					this.optwith();
					}
					break;
				}
				this.state = 2854;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ON) {
					{
					this.state = 2853;
					this.oncommitoption();
					}
				}

				this.state = 2857;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TABLESPACE) {
					{
					this.state = 2856;
					this.opttablespace();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_OF:
				{
				this.state = 2859;
				this.match(PostgreSQLParser.KW_OF);
				this.state = 2860;
				this.any_name();
				this.state = 2862;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 136, this._ctx) ) {
				case 1:
					{
					this.state = 2861;
					this.opttypedtableelementlist();
					}
					break;
				}
				this.state = 2865;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_PARTITION) {
					{
					this.state = 2864;
					this.optpartitionspec();
					}
				}

				this.state = 2868;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING) {
					{
					this.state = 2867;
					this.table_access_method_clause();
					}
				}

				this.state = 2871;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 139, this._ctx) ) {
				case 1:
					{
					this.state = 2870;
					this.optwith();
					}
					break;
				}
				this.state = 2874;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ON) {
					{
					this.state = 2873;
					this.oncommitoption();
					}
				}

				this.state = 2877;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TABLESPACE) {
					{
					this.state = 2876;
					this.opttablespace();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_PARTITION:
				{
				this.state = 2879;
				this.match(PostgreSQLParser.KW_PARTITION);
				this.state = 2880;
				this.match(PostgreSQLParser.KW_OF);
				this.state = 2881;
				this.qualified_name();
				this.state = 2883;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_PAREN) {
					{
					this.state = 2882;
					this.opttypedtableelementlist();
					}
				}

				this.state = 2885;
				this.partitionboundspec();
				this.state = 2887;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_PARTITION) {
					{
					this.state = 2886;
					this.optpartitionspec();
					}
				}

				this.state = 2890;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING) {
					{
					this.state = 2889;
					this.table_access_method_clause();
					}
				}

				this.state = 2893;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 145, this._ctx) ) {
				case 1:
					{
					this.state = 2892;
					this.optwith();
					}
					break;
				}
				this.state = 2896;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ON) {
					{
					this.state = 2895;
					this.oncommitoption();
					}
				}

				this.state = 2899;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TABLESPACE) {
					{
					this.state = 2898;
					this.opttablespace();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opttemp(): OpttempContext {
		let _localctx: OpttempContext = new OpttempContext(this._ctx, this.state);
		this.enterRule(_localctx, 172, PostgreSQLParser.RULE_opttemp);
		let _la: number;
		try {
			this.state = 2910;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_TEMPORARY:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2903;
				this.match(PostgreSQLParser.KW_TEMPORARY);
				}
				break;
			case PostgreSQLParser.KW_TEMP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2904;
				this.match(PostgreSQLParser.KW_TEMP);
				}
				break;
			case PostgreSQLParser.KW_LOCAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2905;
				this.match(PostgreSQLParser.KW_LOCAL);
				this.state = 2906;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_TEMP || _la === PostgreSQLParser.KW_TEMPORARY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParser.KW_GLOBAL:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2907;
				this.match(PostgreSQLParser.KW_GLOBAL);
				this.state = 2908;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_TEMP || _la === PostgreSQLParser.KW_TEMPORARY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParser.KW_UNLOGGED:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 2909;
				this.match(PostgreSQLParser.KW_UNLOGGED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_column_list(): Table_column_listContext {
		let _localctx: Table_column_listContext = new Table_column_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, PostgreSQLParser.RULE_table_column_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2912;
			this.tableelementlist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opttableelementlist(): OpttableelementlistContext {
		let _localctx: OpttableelementlistContext = new OpttableelementlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, PostgreSQLParser.RULE_opttableelementlist);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2914;
			this.tableelementlist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opttypedtableelementlist(): OpttypedtableelementlistContext {
		let _localctx: OpttypedtableelementlistContext = new OpttypedtableelementlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, PostgreSQLParser.RULE_opttypedtableelementlist);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2916;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 2917;
			this.typedtableelementlist();
			this.state = 2918;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableelementlist(): TableelementlistContext {
		let _localctx: TableelementlistContext = new TableelementlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, PostgreSQLParser.RULE_tableelementlist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2920;
			this.tableelement();
			this.state = 2925;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 2921;
				this.match(PostgreSQLParser.COMMA);
				this.state = 2922;
				this.tableelement();
				}
				}
				this.state = 2927;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public typedtableelementlist(): TypedtableelementlistContext {
		let _localctx: TypedtableelementlistContext = new TypedtableelementlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, PostgreSQLParser.RULE_typedtableelementlist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2928;
			this.typedtableelement();
			this.state = 2933;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 2929;
				this.match(PostgreSQLParser.COMMA);
				this.state = 2930;
				this.typedtableelement();
				}
				}
				this.state = 2935;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableelement(): TableelementContext {
		let _localctx: TableelementContext = new TableelementContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, PostgreSQLParser.RULE_tableelement);
		try {
			this.state = 2939;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 152, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2936;
				this.columnDef();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2937;
				this.tablelikeclause();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2938;
				this.tableconstraint();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public typedtableelement(): TypedtableelementContext {
		let _localctx: TypedtableelementContext = new TypedtableelementContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, PostgreSQLParser.RULE_typedtableelement);
		try {
			this.state = 2943;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 153, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2941;
				this.columnOptions();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2942;
				this.tableconstraint();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnDef(): ColumnDefContext {
		let _localctx: ColumnDefContext = new ColumnDefContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, PostgreSQLParser.RULE_columnDef);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2945;
			this.colid();
			this.state = 2946;
			this.typename();
			this.state = 2948;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_OPTIONS) {
				{
				this.state = 2947;
				this.create_generic_options();
				}
			}

			this.state = 2952;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_COLLATE) {
				{
				this.state = 2950;
				this.match(PostgreSQLParser.KW_COLLATE);
				this.state = 2951;
				this.any_name();
				}
			}

			this.state = 2954;
			this.colquallist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnOptions(): ColumnOptionsContext {
		let _localctx: ColumnOptionsContext = new ColumnOptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, PostgreSQLParser.RULE_columnOptions);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2956;
			this.colid();
			this.state = 2959;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 156, this._ctx) ) {
			case 1:
				{
				this.state = 2957;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 2958;
				this.match(PostgreSQLParser.KW_OPTIONS);
				}
				break;
			}
			this.state = 2961;
			this.colquallist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public colquallist(): ColquallistContext {
		let _localctx: ColquallistContext = new ColquallistContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, PostgreSQLParser.RULE_colquallist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2966;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 42)) & ~0x1F) === 0 && ((1 << (_la - 42)) & ((1 << (PostgreSQLParser.KW_CHECK - 42)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 42)) | (1 << (PostgreSQLParser.KW_DEFAULT - 42)))) !== 0) || ((((_la - 77)) & ~0x1F) === 0 && ((1 << (_la - 77)) & ((1 << (PostgreSQLParser.KW_NOT - 77)) | (1 << (PostgreSQLParser.KW_NULL - 77)) | (1 << (PostgreSQLParser.KW_PRIMARY - 77)) | (1 << (PostgreSQLParser.KW_REFERENCES - 77)) | (1 << (PostgreSQLParser.KW_UNIQUE - 77)))) !== 0) || _la === PostgreSQLParser.KW_GENERATED) {
				{
				{
				this.state = 2963;
				this.colconstraint();
				}
				}
				this.state = 2968;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public colconstraint(): ColconstraintContext {
		let _localctx: ColconstraintContext = new ColconstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, PostgreSQLParser.RULE_colconstraint);
		let _la: number;
		try {
			this.state = 2987;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 163, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CONSTRAINT) {
					{
					this.state = 2969;
					this.match(PostgreSQLParser.KW_CONSTRAINT);
					this.state = 2970;
					this.name();
					}
				}

				this.state = 2973;
				this.colconstraintelem();
				this.state = 2975;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 159, this._ctx) ) {
				case 1:
					{
					this.state = 2974;
					this.deferrable_trigger();
					}
					break;
				}
				this.state = 2978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_INITIALLY) {
					{
					this.state = 2977;
					this.initially_trigger();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2980;
				this.colconstraintelem();
				this.state = 2982;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 161, this._ctx) ) {
				case 1:
					{
					this.state = 2981;
					this.deferrable_trigger();
					}
					break;
				}
				this.state = 2985;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_INITIALLY) {
					{
					this.state = 2984;
					this.initially_trigger();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public colconstraintelem(): ColconstraintelemContext {
		let _localctx: ColconstraintelemContext = new ColconstraintelemContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, PostgreSQLParser.RULE_colconstraintelem);
		let _la: number;
		try {
			this.state = 3041;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_NOT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2989;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 2990;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;
			case PostgreSQLParser.KW_NULL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2991;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;
			case PostgreSQLParser.KW_UNIQUE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 2992;
				this.match(PostgreSQLParser.KW_UNIQUE);
				this.state = 2994;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 164, this._ctx) ) {
				case 1:
					{
					this.state = 2993;
					this.opt_definition();
					}
					break;
				}
				this.state = 2997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING) {
					{
					this.state = 2996;
					this.optconstablespace();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_PRIMARY:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 2999;
				this.match(PostgreSQLParser.KW_PRIMARY);
				this.state = 3000;
				this.match(PostgreSQLParser.KW_KEY);
				this.state = 3002;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 166, this._ctx) ) {
				case 1:
					{
					this.state = 3001;
					this.opt_definition();
					}
					break;
				}
				this.state = 3005;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING) {
					{
					this.state = 3004;
					this.optconstablespace();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_CHECK:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3007;
				this.match(PostgreSQLParser.KW_CHECK);
				this.state = 3008;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 3009;
				this.a_expr();
				this.state = 3010;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 3012;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NO) {
					{
					this.state = 3011;
					this.opt_no_inherit();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_DEFAULT:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3014;
				this.match(PostgreSQLParser.KW_DEFAULT);
				this.state = 3015;
				this.b_expr(0);
				}
				break;
			case PostgreSQLParser.KW_GENERATED:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3016;
				this.match(PostgreSQLParser.KW_GENERATED);
				this.state = 3017;
				this.generated_when();
				this.state = 3018;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 3028;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_IDENTITY:
					{
					this.state = 3019;
					this.match(PostgreSQLParser.KW_IDENTITY);
					this.state = 3021;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 169, this._ctx) ) {
					case 1:
						{
						this.state = 3020;
						this.optparenthesizedseqoptlist();
						}
						break;
					}
					}
					break;
				case PostgreSQLParser.OPEN_PAREN:
					{
					this.state = 3023;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 3024;
					this.a_expr();
					this.state = 3025;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					this.state = 3026;
					this.match(PostgreSQLParser.KW_STORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PostgreSQLParser.KW_REFERENCES:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3030;
				this.match(PostgreSQLParser.KW_REFERENCES);
				this.state = 3031;
				this.qualified_name();
				this.state = 3033;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 171, this._ctx) ) {
				case 1:
					{
					this.state = 3032;
					this.opt_column_list();
					}
					break;
				}
				this.state = 3036;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_MATCH) {
					{
					this.state = 3035;
					this.key_match();
					}
				}

				this.state = 3039;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ON) {
					{
					this.state = 3038;
					this.key_actions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generated_when(): Generated_whenContext {
		let _localctx: Generated_whenContext = new Generated_whenContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, PostgreSQLParser.RULE_generated_when);
		try {
			this.state = 3046;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_ALWAYS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3043;
				this.match(PostgreSQLParser.KW_ALWAYS);
				}
				break;
			case PostgreSQLParser.KW_BY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3044;
				this.match(PostgreSQLParser.KW_BY);
				this.state = 3045;
				this.match(PostgreSQLParser.KW_DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deferrable_trigger(): Deferrable_triggerContext {
		let _localctx: Deferrable_triggerContext = new Deferrable_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, PostgreSQLParser.RULE_deferrable_trigger);
		try {
			this.state = 3051;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_DEFERRABLE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3048;
				this.match(PostgreSQLParser.KW_DEFERRABLE);
				}
				break;
			case PostgreSQLParser.KW_NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3049;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 3050;
				this.match(PostgreSQLParser.KW_DEFERRABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public initially_trigger(): Initially_triggerContext {
		let _localctx: Initially_triggerContext = new Initially_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, PostgreSQLParser.RULE_initially_trigger);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3053;
			this.match(PostgreSQLParser.KW_INITIALLY);
			this.state = 3054;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_DEFERRED || _la === PostgreSQLParser.KW_IMMEDIATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablelikeclause(): TablelikeclauseContext {
		let _localctx: TablelikeclauseContext = new TablelikeclauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, PostgreSQLParser.RULE_tablelikeclause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3056;
			this.match(PostgreSQLParser.KW_LIKE);
			this.state = 3057;
			this.qualified_name();
			this.state = 3058;
			this.tablelikeoptionlist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablelikeoptionlist(): TablelikeoptionlistContext {
		let _localctx: TablelikeoptionlistContext = new TablelikeoptionlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, PostgreSQLParser.RULE_tablelikeoptionlist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3064;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.KW_EXCLUDING || _la === PostgreSQLParser.KW_INCLUDING) {
				{
				{
				this.state = 3060;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_EXCLUDING || _la === PostgreSQLParser.KW_INCLUDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3061;
				this.tablelikeoption();
				}
				}
				this.state = 3066;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablelikeoption(): TablelikeoptionContext {
		let _localctx: TablelikeoptionContext = new TablelikeoptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, PostgreSQLParser.RULE_tablelikeoption);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3067;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_ALL || ((((_la - 160)) & ~0x1F) === 0 && ((1 << (_la - 160)) & ((1 << (PostgreSQLParser.KW_COMMENTS - 160)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 160)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 160)))) !== 0) || _la === PostgreSQLParser.KW_IDENTITY || _la === PostgreSQLParser.KW_INDEXES || _la === PostgreSQLParser.KW_STATISTICS || _la === PostgreSQLParser.KW_STORAGE || _la === PostgreSQLParser.KW_GENERATED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tableconstraint(): TableconstraintContext {
		let _localctx: TableconstraintContext = new TableconstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, PostgreSQLParser.RULE_tableconstraint);
		try {
			this.state = 3074;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_CONSTRAINT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3069;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 3070;
				this.name();
				this.state = 3071;
				this.constraintelem();
				}
				break;
			case PostgreSQLParser.KW_CHECK:
			case PostgreSQLParser.KW_FOREIGN:
			case PostgreSQLParser.KW_PRIMARY:
			case PostgreSQLParser.KW_UNIQUE:
			case PostgreSQLParser.KW_EXCLUDE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3073;
				this.constraintelem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraintelem(): ConstraintelemContext {
		let _localctx: ConstraintelemContext = new ConstraintelemContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, PostgreSQLParser.RULE_constraintelem);
		let _la: number;
		try {
			this.state = 3162;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_CHECK:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3076;
				this.match(PostgreSQLParser.KW_CHECK);
				this.state = 3077;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 3078;
				this.a_expr();
				this.state = 3079;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 3080;
				this.constraintattributespec();
				}
				break;
			case PostgreSQLParser.KW_UNIQUE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3082;
				this.match(PostgreSQLParser.KW_UNIQUE);
				this.state = 3100;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.OPEN_PAREN:
					{
					this.state = 3083;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 3084;
					this.columnlist();
					this.state = 3085;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					this.state = 3087;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.KW_INCLUDE) {
						{
						this.state = 3086;
						this.opt_c_include();
						}
					}

					this.state = 3090;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 180, this._ctx) ) {
					case 1:
						{
						this.state = 3089;
						this.opt_definition();
						}
						break;
					}
					this.state = 3093;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.KW_USING) {
						{
						this.state = 3092;
						this.optconstablespace();
						}
					}

					this.state = 3095;
					this.constraintattributespec();
					}
					break;
				case PostgreSQLParser.KW_USING:
					{
					this.state = 3097;
					this.existingindex();
					this.state = 3098;
					this.constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PostgreSQLParser.KW_PRIMARY:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3102;
				this.match(PostgreSQLParser.KW_PRIMARY);
				this.state = 3103;
				this.match(PostgreSQLParser.KW_KEY);
				this.state = 3121;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.OPEN_PAREN:
					{
					this.state = 3104;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 3105;
					this.columnlist();
					this.state = 3106;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					this.state = 3108;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.KW_INCLUDE) {
						{
						this.state = 3107;
						this.opt_c_include();
						}
					}

					this.state = 3111;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 184, this._ctx) ) {
					case 1:
						{
						this.state = 3110;
						this.opt_definition();
						}
						break;
					}
					this.state = 3114;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.KW_USING) {
						{
						this.state = 3113;
						this.optconstablespace();
						}
					}

					this.state = 3116;
					this.constraintattributespec();
					}
					break;
				case PostgreSQLParser.KW_USING:
					{
					this.state = 3118;
					this.existingindex();
					this.state = 3119;
					this.constraintattributespec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PostgreSQLParser.KW_EXCLUDE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3123;
				this.match(PostgreSQLParser.KW_EXCLUDE);
				this.state = 3125;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING) {
					{
					this.state = 3124;
					this.access_method_clause();
					}
				}

				this.state = 3127;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 3128;
				this.exclusionconstraintlist();
				this.state = 3129;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 3131;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_INCLUDE) {
					{
					this.state = 3130;
					this.opt_c_include();
					}
				}

				this.state = 3134;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 189, this._ctx) ) {
				case 1:
					{
					this.state = 3133;
					this.opt_definition();
					}
					break;
				}
				this.state = 3137;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING) {
					{
					this.state = 3136;
					this.optconstablespace();
					}
				}

				this.state = 3140;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WHERE) {
					{
					this.state = 3139;
					this.exclusionwhereclause();
					}
				}

				this.state = 3142;
				this.constraintattributespec();
				}
				break;
			case PostgreSQLParser.KW_FOREIGN:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3144;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 3145;
				this.match(PostgreSQLParser.KW_KEY);
				this.state = 3146;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 3147;
				this.columnlist();
				this.state = 3148;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 3149;
				this.match(PostgreSQLParser.KW_REFERENCES);
				this.state = 3150;
				this.qualified_name();
				this.state = 3152;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 192, this._ctx) ) {
				case 1:
					{
					this.state = 3151;
					this.opt_column_list();
					}
					break;
				}
				this.state = 3155;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_MATCH) {
					{
					this.state = 3154;
					this.key_match();
					}
				}

				this.state = 3158;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ON) {
					{
					this.state = 3157;
					this.key_actions();
					}
				}

				this.state = 3160;
				this.constraintattributespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_no_inherit(): Opt_no_inheritContext {
		let _localctx: Opt_no_inheritContext = new Opt_no_inheritContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, PostgreSQLParser.RULE_opt_no_inherit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3164;
			this.match(PostgreSQLParser.KW_NO);
			this.state = 3165;
			this.match(PostgreSQLParser.KW_INHERIT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_column_list(): Opt_column_listContext {
		let _localctx: Opt_column_listContext = new Opt_column_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, PostgreSQLParser.RULE_opt_column_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3167;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 3168;
			this.columnlist();
			this.state = 3169;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnlist(): ColumnlistContext {
		let _localctx: ColumnlistContext = new ColumnlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, PostgreSQLParser.RULE_columnlist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3171;
			this.columnElem();
			this.state = 3176;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 3172;
				this.match(PostgreSQLParser.COMMA);
				this.state = 3173;
				this.columnElem();
				}
				}
				this.state = 3178;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnElem(): ColumnElemContext {
		let _localctx: ColumnElemContext = new ColumnElemContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, PostgreSQLParser.RULE_columnElem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3179;
			this.colid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_c_include(): Opt_c_includeContext {
		let _localctx: Opt_c_includeContext = new Opt_c_includeContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, PostgreSQLParser.RULE_opt_c_include);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3181;
			this.match(PostgreSQLParser.KW_INCLUDE);
			this.state = 3182;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 3183;
			this.columnlist();
			this.state = 3184;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_match(): Key_matchContext {
		let _localctx: Key_matchContext = new Key_matchContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, PostgreSQLParser.RULE_key_match);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3186;
			this.match(PostgreSQLParser.KW_MATCH);
			this.state = 3187;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_FULL || _la === PostgreSQLParser.KW_PARTIAL || _la === PostgreSQLParser.KW_SIMPLE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exclusionconstraintlist(): ExclusionconstraintlistContext {
		let _localctx: ExclusionconstraintlistContext = new ExclusionconstraintlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, PostgreSQLParser.RULE_exclusionconstraintlist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3189;
			this.exclusionconstraintelem();
			this.state = 3194;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 3190;
				this.match(PostgreSQLParser.COMMA);
				this.state = 3191;
				this.exclusionconstraintelem();
				}
				}
				this.state = 3196;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exclusionconstraintelem(): ExclusionconstraintelemContext {
		let _localctx: ExclusionconstraintelemContext = new ExclusionconstraintelemContext(this._ctx, this.state);
		this.enterRule(_localctx, 228, PostgreSQLParser.RULE_exclusionconstraintelem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3197;
			this.index_elem();
			this.state = 3198;
			this.match(PostgreSQLParser.KW_WITH);
			this.state = 3205;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 198, this._ctx) ) {
			case 1:
				{
				this.state = 3199;
				this.any_operator();
				}
				break;

			case 2:
				{
				this.state = 3200;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 3201;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 3202;
				this.any_operator();
				this.state = 3203;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exclusionwhereclause(): ExclusionwhereclauseContext {
		let _localctx: ExclusionwhereclauseContext = new ExclusionwhereclauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, PostgreSQLParser.RULE_exclusionwhereclause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3207;
			this.match(PostgreSQLParser.KW_WHERE);
			this.state = 3208;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 3209;
			this.a_expr();
			this.state = 3210;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_actions(): Key_actionsContext {
		let _localctx: Key_actionsContext = new Key_actionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 232, PostgreSQLParser.RULE_key_actions);
		try {
			this.state = 3220;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 199, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3212;
				this.key_update();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3213;
				this.key_delete();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3214;
				this.key_update();
				this.state = 3215;
				this.key_delete();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3217;
				this.key_delete();
				this.state = 3218;
				this.key_update();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_update(): Key_updateContext {
		let _localctx: Key_updateContext = new Key_updateContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, PostgreSQLParser.RULE_key_update);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3222;
			this.match(PostgreSQLParser.KW_ON);
			this.state = 3223;
			this.match(PostgreSQLParser.KW_UPDATE);
			this.state = 3224;
			this.key_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_delete(): Key_deleteContext {
		let _localctx: Key_deleteContext = new Key_deleteContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, PostgreSQLParser.RULE_key_delete);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3226;
			this.match(PostgreSQLParser.KW_ON);
			this.state = 3227;
			this.match(PostgreSQLParser.KW_DELETE);
			this.state = 3228;
			this.key_action();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public key_action(): Key_actionContext {
		let _localctx: Key_actionContext = new Key_actionContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, PostgreSQLParser.RULE_key_action);
		let _la: number;
		try {
			this.state = 3236;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_NO:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3230;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 3231;
				this.match(PostgreSQLParser.KW_ACTION);
				}
				break;
			case PostgreSQLParser.KW_RESTRICT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3232;
				this.match(PostgreSQLParser.KW_RESTRICT);
				}
				break;
			case PostgreSQLParser.KW_CASCADE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3233;
				this.match(PostgreSQLParser.KW_CASCADE);
				}
				break;
			case PostgreSQLParser.KW_SET:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3234;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 3235;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_DEFAULT || _la === PostgreSQLParser.KW_NULL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optinherit(): OptinheritContext {
		let _localctx: OptinheritContext = new OptinheritContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, PostgreSQLParser.RULE_optinherit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3238;
			this.match(PostgreSQLParser.KW_INHERITS);
			this.state = 3239;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 3240;
			this.qualified_name_list();
			this.state = 3241;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optpartitionspec(): OptpartitionspecContext {
		let _localctx: OptpartitionspecContext = new OptpartitionspecContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, PostgreSQLParser.RULE_optpartitionspec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3243;
			this.partitionspec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public partitionspec(): PartitionspecContext {
		let _localctx: PartitionspecContext = new PartitionspecContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, PostgreSQLParser.RULE_partitionspec);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3245;
			this.match(PostgreSQLParser.KW_PARTITION);
			this.state = 3246;
			this.match(PostgreSQLParser.KW_BY);
			this.state = 3247;
			this.colid();
			this.state = 3248;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 3249;
			this.part_params();
			this.state = 3250;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public part_params(): Part_paramsContext {
		let _localctx: Part_paramsContext = new Part_paramsContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, PostgreSQLParser.RULE_part_params);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3252;
			this.part_elem();
			this.state = 3257;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 3253;
				this.match(PostgreSQLParser.COMMA);
				this.state = 3254;
				this.part_elem();
				}
				}
				this.state = 3259;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public part_elem(): Part_elemContext {
		let _localctx: Part_elemContext = new Part_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, PostgreSQLParser.RULE_part_elem);
		let _la: number;
		try {
			this.state = 3283;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 208, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3260;
				this.colid();
				this.state = 3262;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 202, this._ctx) ) {
				case 1:
					{
					this.state = 3261;
					this.opt_collate();
					}
					break;
				}
				this.state = 3265;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 92)) & ~0x1F) === 0 && ((1 << (_la - 92)) & ((1 << (PostgreSQLParser.KW_TABLE - 92)) | (1 << (PostgreSQLParser.KW_IS - 92)) | (1 << (PostgreSQLParser.KW_OUTER - 92)))) !== 0) || ((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (PostgreSQLParser.KW_OVER - 124)) | (1 << (PostgreSQLParser.KW_ABORT - 124)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 124)) | (1 << (PostgreSQLParser.KW_ACCESS - 124)) | (1 << (PostgreSQLParser.KW_ACTION - 124)) | (1 << (PostgreSQLParser.KW_ADD - 124)) | (1 << (PostgreSQLParser.KW_ADMIN - 124)) | (1 << (PostgreSQLParser.KW_AFTER - 124)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 124)) | (1 << (PostgreSQLParser.KW_ALSO - 124)) | (1 << (PostgreSQLParser.KW_ALTER - 124)) | (1 << (PostgreSQLParser.KW_ALWAYS - 124)) | (1 << (PostgreSQLParser.KW_ASSERTION - 124)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 124)) | (1 << (PostgreSQLParser.KW_AT - 124)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 124)) | (1 << (PostgreSQLParser.KW_BACKWARD - 124)) | (1 << (PostgreSQLParser.KW_BEFORE - 124)) | (1 << (PostgreSQLParser.KW_BEGIN - 124)) | (1 << (PostgreSQLParser.KW_BY - 124)) | (1 << (PostgreSQLParser.KW_CACHE - 124)) | (1 << (PostgreSQLParser.KW_CALLED - 124)) | (1 << (PostgreSQLParser.KW_CASCADE - 124)) | (1 << (PostgreSQLParser.KW_CASCADED - 124)) | (1 << (PostgreSQLParser.KW_CATALOG - 124)) | (1 << (PostgreSQLParser.KW_CHAIN - 124)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 124)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 124)))) !== 0) || ((((_la - 156)) & ~0x1F) === 0 && ((1 << (_la - 156)) & ((1 << (PostgreSQLParser.KW_CLASS - 156)) | (1 << (PostgreSQLParser.KW_CLOSE - 156)) | (1 << (PostgreSQLParser.KW_CLUSTER - 156)) | (1 << (PostgreSQLParser.KW_COMMENT - 156)) | (1 << (PostgreSQLParser.KW_COMMENTS - 156)) | (1 << (PostgreSQLParser.KW_COMMIT - 156)) | (1 << (PostgreSQLParser.KW_COMMITTED - 156)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 156)) | (1 << (PostgreSQLParser.KW_CONNECTION - 156)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 156)) | (1 << (PostgreSQLParser.KW_CONTENT - 156)) | (1 << (PostgreSQLParser.KW_CONTINUE - 156)) | (1 << (PostgreSQLParser.KW_CONVERSION - 156)) | (1 << (PostgreSQLParser.KW_COPY - 156)) | (1 << (PostgreSQLParser.KW_COST - 156)) | (1 << (PostgreSQLParser.KW_CSV - 156)) | (1 << (PostgreSQLParser.KW_CURSOR - 156)) | (1 << (PostgreSQLParser.KW_CYCLE - 156)) | (1 << (PostgreSQLParser.KW_DATA - 156)) | (1 << (PostgreSQLParser.KW_DATABASE - 156)) | (1 << (PostgreSQLParser.KW_DAY - 156)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 156)) | (1 << (PostgreSQLParser.KW_DECLARE - 156)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 156)) | (1 << (PostgreSQLParser.KW_DEFERRED - 156)) | (1 << (PostgreSQLParser.KW_DEFINER - 156)) | (1 << (PostgreSQLParser.KW_DELETE - 156)) | (1 << (PostgreSQLParser.KW_DELIMITER - 156)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 156)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 156)) | (1 << (PostgreSQLParser.KW_DISABLE - 156)) | (1 << (PostgreSQLParser.KW_DISCARD - 156)))) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (PostgreSQLParser.KW_DOCUMENT - 188)) | (1 << (PostgreSQLParser.KW_DOMAIN - 188)) | (1 << (PostgreSQLParser.KW_DOUBLE - 188)) | (1 << (PostgreSQLParser.KW_DROP - 188)) | (1 << (PostgreSQLParser.KW_EACH - 188)) | (1 << (PostgreSQLParser.KW_ENABLE - 188)) | (1 << (PostgreSQLParser.KW_ENCODING - 188)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 188)) | (1 << (PostgreSQLParser.KW_ENUM - 188)) | (1 << (PostgreSQLParser.KW_ESCAPE - 188)) | (1 << (PostgreSQLParser.KW_EVENT - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 188)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 188)) | (1 << (PostgreSQLParser.KW_EXECUTE - 188)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 188)) | (1 << (PostgreSQLParser.KW_EXTENSION - 188)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 188)) | (1 << (PostgreSQLParser.KW_FAMILY - 188)) | (1 << (PostgreSQLParser.KW_FIRST - 188)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 188)) | (1 << (PostgreSQLParser.KW_FORCE - 188)) | (1 << (PostgreSQLParser.KW_FORWARD - 188)) | (1 << (PostgreSQLParser.KW_FUNCTION - 188)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 188)) | (1 << (PostgreSQLParser.KW_GLOBAL - 188)) | (1 << (PostgreSQLParser.KW_GRANTED - 188)) | (1 << (PostgreSQLParser.KW_HANDLER - 188)) | (1 << (PostgreSQLParser.KW_HEADER - 188)) | (1 << (PostgreSQLParser.KW_HOLD - 188)) | (1 << (PostgreSQLParser.KW_HOUR - 188)) | (1 << (PostgreSQLParser.KW_IDENTITY - 188)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (PostgreSQLParser.KW_IF - 220)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 220)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 220)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 220)) | (1 << (PostgreSQLParser.KW_INCLUDING - 220)) | (1 << (PostgreSQLParser.KW_INCREMENT - 220)) | (1 << (PostgreSQLParser.KW_INDEX - 220)) | (1 << (PostgreSQLParser.KW_INDEXES - 220)) | (1 << (PostgreSQLParser.KW_INHERIT - 220)) | (1 << (PostgreSQLParser.KW_INHERITS - 220)) | (1 << (PostgreSQLParser.KW_INLINE - 220)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 220)) | (1 << (PostgreSQLParser.KW_INSERT - 220)) | (1 << (PostgreSQLParser.KW_INSTEAD - 220)) | (1 << (PostgreSQLParser.KW_INVOKER - 220)) | (1 << (PostgreSQLParser.KW_ISOLATION - 220)) | (1 << (PostgreSQLParser.KW_KEY - 220)) | (1 << (PostgreSQLParser.KW_LABEL - 220)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 220)) | (1 << (PostgreSQLParser.KW_LARGE - 220)) | (1 << (PostgreSQLParser.KW_LAST - 220)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 220)) | (1 << (PostgreSQLParser.KW_LEVEL - 220)))) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & ((1 << (PostgreSQLParser.KW_LISTEN - 252)) | (1 << (PostgreSQLParser.KW_LOAD - 252)) | (1 << (PostgreSQLParser.KW_LOCAL - 252)) | (1 << (PostgreSQLParser.KW_LOCATION - 252)) | (1 << (PostgreSQLParser.KW_LOCK - 252)) | (1 << (PostgreSQLParser.KW_MAPPING - 252)) | (1 << (PostgreSQLParser.KW_MATCH - 252)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 252)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 252)) | (1 << (PostgreSQLParser.KW_MINUTE - 252)) | (1 << (PostgreSQLParser.KW_MINVALUE - 252)) | (1 << (PostgreSQLParser.KW_MODE - 252)) | (1 << (PostgreSQLParser.KW_MONTH - 252)) | (1 << (PostgreSQLParser.KW_MOVE - 252)) | (1 << (PostgreSQLParser.KW_NAME - 252)) | (1 << (PostgreSQLParser.KW_NAMES - 252)) | (1 << (PostgreSQLParser.KW_NEXT - 252)) | (1 << (PostgreSQLParser.KW_NO - 252)) | (1 << (PostgreSQLParser.KW_NOTHING - 252)) | (1 << (PostgreSQLParser.KW_NOTIFY - 252)) | (1 << (PostgreSQLParser.KW_NOWAIT - 252)) | (1 << (PostgreSQLParser.KW_NULLS - 252)) | (1 << (PostgreSQLParser.KW_OBJECT - 252)) | (1 << (PostgreSQLParser.KW_OF - 252)) | (1 << (PostgreSQLParser.KW_OFF - 252)) | (1 << (PostgreSQLParser.KW_OIDS - 252)) | (1 << (PostgreSQLParser.KW_OPERATOR - 252)) | (1 << (PostgreSQLParser.KW_OPTION - 252)) | (1 << (PostgreSQLParser.KW_OPTIONS - 252)) | (1 << (PostgreSQLParser.KW_OWNED - 252)) | (1 << (PostgreSQLParser.KW_OWNER - 252)) | (1 << (PostgreSQLParser.KW_PARSER - 252)))) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & ((1 << (PostgreSQLParser.KW_PARTIAL - 284)) | (1 << (PostgreSQLParser.KW_PARTITION - 284)) | (1 << (PostgreSQLParser.KW_PASSING - 284)) | (1 << (PostgreSQLParser.KW_PASSWORD - 284)) | (1 << (PostgreSQLParser.KW_PLANS - 284)) | (1 << (PostgreSQLParser.KW_PRECEDING - 284)) | (1 << (PostgreSQLParser.KW_PREPARE - 284)) | (1 << (PostgreSQLParser.KW_PREPARED - 284)) | (1 << (PostgreSQLParser.KW_PRESERVE - 284)) | (1 << (PostgreSQLParser.KW_PRIOR - 284)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 284)) | (1 << (PostgreSQLParser.KW_PROGRAM - 284)) | (1 << (PostgreSQLParser.KW_QUOTE - 284)) | (1 << (PostgreSQLParser.KW_RANGE - 284)) | (1 << (PostgreSQLParser.KW_READ - 284)) | (1 << (PostgreSQLParser.KW_REASSIGN - 284)) | (1 << (PostgreSQLParser.KW_RECHECK - 284)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 284)) | (1 << (PostgreSQLParser.KW_REF - 284)) | (1 << (PostgreSQLParser.KW_REFRESH - 284)) | (1 << (PostgreSQLParser.KW_REINDEX - 284)) | (1 << (PostgreSQLParser.KW_RELATIVE - 284)) | (1 << (PostgreSQLParser.KW_RELEASE - 284)) | (1 << (PostgreSQLParser.KW_RENAME - 284)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 284)) | (1 << (PostgreSQLParser.KW_REPLACE - 284)) | (1 << (PostgreSQLParser.KW_REPLICA - 284)) | (1 << (PostgreSQLParser.KW_RESET - 284)) | (1 << (PostgreSQLParser.KW_RESTART - 284)) | (1 << (PostgreSQLParser.KW_RESTRICT - 284)))) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & ((1 << (PostgreSQLParser.KW_RETURNS - 316)) | (1 << (PostgreSQLParser.KW_REVOKE - 316)) | (1 << (PostgreSQLParser.KW_ROLE - 316)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 316)) | (1 << (PostgreSQLParser.KW_ROWS - 316)) | (1 << (PostgreSQLParser.KW_RULE - 316)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 316)) | (1 << (PostgreSQLParser.KW_SCHEMA - 316)) | (1 << (PostgreSQLParser.KW_SCROLL - 316)) | (1 << (PostgreSQLParser.KW_SEARCH - 316)) | (1 << (PostgreSQLParser.KW_SECOND - 316)) | (1 << (PostgreSQLParser.KW_SECURITY - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 316)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 316)) | (1 << (PostgreSQLParser.KW_SERVER - 316)) | (1 << (PostgreSQLParser.KW_SESSION - 316)) | (1 << (PostgreSQLParser.KW_SET - 316)) | (1 << (PostgreSQLParser.KW_SHARE - 316)) | (1 << (PostgreSQLParser.KW_SHOW - 316)) | (1 << (PostgreSQLParser.KW_SIMPLE - 316)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 316)) | (1 << (PostgreSQLParser.KW_STABLE - 316)) | (1 << (PostgreSQLParser.KW_STANDALONE - 316)) | (1 << (PostgreSQLParser.KW_START - 316)) | (1 << (PostgreSQLParser.KW_STATEMENT - 316)) | (1 << (PostgreSQLParser.KW_STATISTICS - 316)) | (1 << (PostgreSQLParser.KW_STDIN - 316)) | (1 << (PostgreSQLParser.KW_STDOUT - 316)) | (1 << (PostgreSQLParser.KW_STORAGE - 316)) | (1 << (PostgreSQLParser.KW_STRICT - 316)) | (1 << (PostgreSQLParser.KW_STRIP - 316)))) !== 0) || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (PostgreSQLParser.KW_SYSID - 348)) | (1 << (PostgreSQLParser.KW_SYSTEM - 348)) | (1 << (PostgreSQLParser.KW_TABLES - 348)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 348)) | (1 << (PostgreSQLParser.KW_TEMP - 348)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 348)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 348)) | (1 << (PostgreSQLParser.KW_TEXT - 348)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 348)) | (1 << (PostgreSQLParser.KW_TRIGGER - 348)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 348)) | (1 << (PostgreSQLParser.KW_TRUSTED - 348)) | (1 << (PostgreSQLParser.KW_TYPE - 348)) | (1 << (PostgreSQLParser.KW_TYPES - 348)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 348)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 348)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 348)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 348)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 348)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 348)) | (1 << (PostgreSQLParser.KW_UNTIL - 348)) | (1 << (PostgreSQLParser.KW_UPDATE - 348)) | (1 << (PostgreSQLParser.KW_VACUUM - 348)) | (1 << (PostgreSQLParser.KW_VALID - 348)) | (1 << (PostgreSQLParser.KW_VALIDATE - 348)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 348)) | (1 << (PostgreSQLParser.KW_VARYING - 348)) | (1 << (PostgreSQLParser.KW_VERSION - 348)) | (1 << (PostgreSQLParser.KW_VIEW - 348)) | (1 << (PostgreSQLParser.KW_VOLATILE - 348)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 348)) | (1 << (PostgreSQLParser.KW_WITHOUT - 348)))) !== 0) || ((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (PostgreSQLParser.KW_WORK - 380)) | (1 << (PostgreSQLParser.KW_WRAPPER - 380)) | (1 << (PostgreSQLParser.KW_WRITE - 380)) | (1 << (PostgreSQLParser.KW_XML - 380)) | (1 << (PostgreSQLParser.KW_YEAR - 380)) | (1 << (PostgreSQLParser.KW_YES - 380)) | (1 << (PostgreSQLParser.KW_ZONE - 380)) | (1 << (PostgreSQLParser.KW_BETWEEN - 380)) | (1 << (PostgreSQLParser.KW_BIGINT - 380)) | (1 << (PostgreSQLParser.KW_BIT - 380)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 380)) | (1 << (PostgreSQLParser.KW_CHAR - 380)) | (1 << (PostgreSQLParser.KW_CHARACTER - 380)) | (1 << (PostgreSQLParser.KW_COALESCE - 380)) | (1 << (PostgreSQLParser.KW_DEC - 380)) | (1 << (PostgreSQLParser.KW_DECIMAL - 380)) | (1 << (PostgreSQLParser.KW_EXISTS - 380)) | (1 << (PostgreSQLParser.KW_EXTRACT - 380)) | (1 << (PostgreSQLParser.KW_FLOAT - 380)) | (1 << (PostgreSQLParser.KW_GREATEST - 380)) | (1 << (PostgreSQLParser.KW_INOUT - 380)) | (1 << (PostgreSQLParser.KW_INT - 380)) | (1 << (PostgreSQLParser.KW_INTEGER - 380)) | (1 << (PostgreSQLParser.KW_INTERVAL - 380)) | (1 << (PostgreSQLParser.KW_LEAST - 380)) | (1 << (PostgreSQLParser.KW_NATIONAL - 380)) | (1 << (PostgreSQLParser.KW_NCHAR - 380)) | (1 << (PostgreSQLParser.KW_NONE - 380)) | (1 << (PostgreSQLParser.KW_NULLIF - 380)) | (1 << (PostgreSQLParser.KW_NUMERIC - 380)) | (1 << (PostgreSQLParser.KW_OVERLAY - 380)) | (1 << (PostgreSQLParser.KW_POSITION - 380)))) !== 0) || ((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & ((1 << (PostgreSQLParser.KW_PRECISION - 412)) | (1 << (PostgreSQLParser.KW_REAL - 412)) | (1 << (PostgreSQLParser.KW_ROW - 412)) | (1 << (PostgreSQLParser.KW_SETOF - 412)) | (1 << (PostgreSQLParser.KW_SMALLINT - 412)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 412)) | (1 << (PostgreSQLParser.KW_TIME - 412)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 412)) | (1 << (PostgreSQLParser.KW_TREAT - 412)) | (1 << (PostgreSQLParser.KW_TRIM - 412)) | (1 << (PostgreSQLParser.KW_VALUES - 412)) | (1 << (PostgreSQLParser.KW_VARCHAR - 412)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 412)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 412)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 412)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 412)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 412)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 412)) | (1 << (PostgreSQLParser.KW_XMLPI - 412)) | (1 << (PostgreSQLParser.KW_XMLROOT - 412)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 412)) | (1 << (PostgreSQLParser.KW_CALL - 412)) | (1 << (PostgreSQLParser.KW_CURRENT - 412)) | (1 << (PostgreSQLParser.KW_ATTACH - 412)) | (1 << (PostgreSQLParser.KW_DETACH - 412)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 412)) | (1 << (PostgreSQLParser.KW_GENERATED - 412)) | (1 << (PostgreSQLParser.KW_LOGGED - 412)) | (1 << (PostgreSQLParser.KW_STORED - 412)) | (1 << (PostgreSQLParser.KW_INCLUDE - 412)) | (1 << (PostgreSQLParser.KW_ROUTINE - 412)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 412)))) !== 0) || ((((_la - 444)) & ~0x1F) === 0 && ((1 << (_la - 444)) & ((1 << (PostgreSQLParser.KW_IMPORT - 444)) | (1 << (PostgreSQLParser.KW_POLICY - 444)) | (1 << (PostgreSQLParser.KW_METHOD - 444)) | (1 << (PostgreSQLParser.KW_REFERENCING - 444)) | (1 << (PostgreSQLParser.KW_NEW - 444)) | (1 << (PostgreSQLParser.KW_OLD - 444)) | (1 << (PostgreSQLParser.KW_VALUE - 444)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 444)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 444)) | (1 << (PostgreSQLParser.KW_OUT - 444)) | (1 << (PostgreSQLParser.KW_ROUTINES - 444)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 444)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 444)) | (1 << (PostgreSQLParser.KW_INPUT - 444)) | (1 << (PostgreSQLParser.KW_SUPPORT - 444)) | (1 << (PostgreSQLParser.KW_PARALLEL - 444)) | (1 << (PostgreSQLParser.KW_SQL - 444)) | (1 << (PostgreSQLParser.KW_DEPENDS - 444)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 444)) | (1 << (PostgreSQLParser.KW_CONFLICT - 444)) | (1 << (PostgreSQLParser.KW_SKIP - 444)) | (1 << (PostgreSQLParser.KW_LOCKED - 444)) | (1 << (PostgreSQLParser.KW_TIES - 444)) | (1 << (PostgreSQLParser.KW_ROLLUP - 444)) | (1 << (PostgreSQLParser.KW_CUBE - 444)) | (1 << (PostgreSQLParser.KW_GROUPING - 444)) | (1 << (PostgreSQLParser.KW_SETS - 444)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 444)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 444)) | (1 << (PostgreSQLParser.KW_COLUMNS - 444)))) !== 0) || ((((_la - 476)) & ~0x1F) === 0 && ((1 << (_la - 476)) & ((1 << (PostgreSQLParser.KW_XMLNAMESPACES - 476)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 476)) | (1 << (PostgreSQLParser.KW_WITHIN - 476)) | (1 << (PostgreSQLParser.KW_FILTER - 476)) | (1 << (PostgreSQLParser.KW_GROUPS - 476)) | (1 << (PostgreSQLParser.KW_OTHERS - 476)) | (1 << (PostgreSQLParser.KW_NFC - 476)) | (1 << (PostgreSQLParser.KW_NFD - 476)) | (1 << (PostgreSQLParser.KW_NFKC - 476)) | (1 << (PostgreSQLParser.KW_NFKD - 476)) | (1 << (PostgreSQLParser.KW_UESCAPE - 476)) | (1 << (PostgreSQLParser.KW_VIEWS - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 476)) | (1 << (PostgreSQLParser.KW_DUMP - 476)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 476)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 476)) | (1 << (PostgreSQLParser.KW_ERROR - 476)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 476)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 476)) | (1 << (PostgreSQLParser.KW_ALIAS - 476)) | (1 << (PostgreSQLParser.KW_CONSTANT - 476)) | (1 << (PostgreSQLParser.KW_PERFORM - 476)) | (1 << (PostgreSQLParser.KW_GET - 476)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 476)) | (1 << (PostgreSQLParser.KW_STACKED - 476)) | (1 << (PostgreSQLParser.KW_ELSIF - 476)) | (1 << (PostgreSQLParser.KW_REVERSE - 476)) | (1 << (PostgreSQLParser.KW_SLICE - 476)) | (1 << (PostgreSQLParser.KW_EXIT - 476)))) !== 0) || ((((_la - 508)) & ~0x1F) === 0 && ((1 << (_la - 508)) & ((1 << (PostgreSQLParser.KW_RETURN - 508)) | (1 << (PostgreSQLParser.KW_QUERY - 508)) | (1 << (PostgreSQLParser.KW_RAISE - 508)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 508)) | (1 << (PostgreSQLParser.KW_DEBUG - 508)) | (1 << (PostgreSQLParser.KW_LOG - 508)) | (1 << (PostgreSQLParser.KW_INFO - 508)) | (1 << (PostgreSQLParser.KW_NOTICE - 508)) | (1 << (PostgreSQLParser.KW_WARNING - 508)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 508)) | (1 << (PostgreSQLParser.KW_ASSERT - 508)) | (1 << (PostgreSQLParser.KW_OPEN - 508)) | (1 << (PostgreSQLParser.Identifier - 508)) | (1 << (PostgreSQLParser.QuotedIdentifier - 508)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 508)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
					{
					this.state = 3264;
					this.opt_class();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3267;
				this.func_expr_windowless();
				this.state = 3269;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 204, this._ctx) ) {
				case 1:
					{
					this.state = 3268;
					this.opt_collate();
					}
					break;
				}
				this.state = 3272;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 92)) & ~0x1F) === 0 && ((1 << (_la - 92)) & ((1 << (PostgreSQLParser.KW_TABLE - 92)) | (1 << (PostgreSQLParser.KW_IS - 92)) | (1 << (PostgreSQLParser.KW_OUTER - 92)))) !== 0) || ((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (PostgreSQLParser.KW_OVER - 124)) | (1 << (PostgreSQLParser.KW_ABORT - 124)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 124)) | (1 << (PostgreSQLParser.KW_ACCESS - 124)) | (1 << (PostgreSQLParser.KW_ACTION - 124)) | (1 << (PostgreSQLParser.KW_ADD - 124)) | (1 << (PostgreSQLParser.KW_ADMIN - 124)) | (1 << (PostgreSQLParser.KW_AFTER - 124)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 124)) | (1 << (PostgreSQLParser.KW_ALSO - 124)) | (1 << (PostgreSQLParser.KW_ALTER - 124)) | (1 << (PostgreSQLParser.KW_ALWAYS - 124)) | (1 << (PostgreSQLParser.KW_ASSERTION - 124)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 124)) | (1 << (PostgreSQLParser.KW_AT - 124)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 124)) | (1 << (PostgreSQLParser.KW_BACKWARD - 124)) | (1 << (PostgreSQLParser.KW_BEFORE - 124)) | (1 << (PostgreSQLParser.KW_BEGIN - 124)) | (1 << (PostgreSQLParser.KW_BY - 124)) | (1 << (PostgreSQLParser.KW_CACHE - 124)) | (1 << (PostgreSQLParser.KW_CALLED - 124)) | (1 << (PostgreSQLParser.KW_CASCADE - 124)) | (1 << (PostgreSQLParser.KW_CASCADED - 124)) | (1 << (PostgreSQLParser.KW_CATALOG - 124)) | (1 << (PostgreSQLParser.KW_CHAIN - 124)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 124)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 124)))) !== 0) || ((((_la - 156)) & ~0x1F) === 0 && ((1 << (_la - 156)) & ((1 << (PostgreSQLParser.KW_CLASS - 156)) | (1 << (PostgreSQLParser.KW_CLOSE - 156)) | (1 << (PostgreSQLParser.KW_CLUSTER - 156)) | (1 << (PostgreSQLParser.KW_COMMENT - 156)) | (1 << (PostgreSQLParser.KW_COMMENTS - 156)) | (1 << (PostgreSQLParser.KW_COMMIT - 156)) | (1 << (PostgreSQLParser.KW_COMMITTED - 156)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 156)) | (1 << (PostgreSQLParser.KW_CONNECTION - 156)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 156)) | (1 << (PostgreSQLParser.KW_CONTENT - 156)) | (1 << (PostgreSQLParser.KW_CONTINUE - 156)) | (1 << (PostgreSQLParser.KW_CONVERSION - 156)) | (1 << (PostgreSQLParser.KW_COPY - 156)) | (1 << (PostgreSQLParser.KW_COST - 156)) | (1 << (PostgreSQLParser.KW_CSV - 156)) | (1 << (PostgreSQLParser.KW_CURSOR - 156)) | (1 << (PostgreSQLParser.KW_CYCLE - 156)) | (1 << (PostgreSQLParser.KW_DATA - 156)) | (1 << (PostgreSQLParser.KW_DATABASE - 156)) | (1 << (PostgreSQLParser.KW_DAY - 156)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 156)) | (1 << (PostgreSQLParser.KW_DECLARE - 156)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 156)) | (1 << (PostgreSQLParser.KW_DEFERRED - 156)) | (1 << (PostgreSQLParser.KW_DEFINER - 156)) | (1 << (PostgreSQLParser.KW_DELETE - 156)) | (1 << (PostgreSQLParser.KW_DELIMITER - 156)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 156)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 156)) | (1 << (PostgreSQLParser.KW_DISABLE - 156)) | (1 << (PostgreSQLParser.KW_DISCARD - 156)))) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (PostgreSQLParser.KW_DOCUMENT - 188)) | (1 << (PostgreSQLParser.KW_DOMAIN - 188)) | (1 << (PostgreSQLParser.KW_DOUBLE - 188)) | (1 << (PostgreSQLParser.KW_DROP - 188)) | (1 << (PostgreSQLParser.KW_EACH - 188)) | (1 << (PostgreSQLParser.KW_ENABLE - 188)) | (1 << (PostgreSQLParser.KW_ENCODING - 188)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 188)) | (1 << (PostgreSQLParser.KW_ENUM - 188)) | (1 << (PostgreSQLParser.KW_ESCAPE - 188)) | (1 << (PostgreSQLParser.KW_EVENT - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 188)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 188)) | (1 << (PostgreSQLParser.KW_EXECUTE - 188)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 188)) | (1 << (PostgreSQLParser.KW_EXTENSION - 188)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 188)) | (1 << (PostgreSQLParser.KW_FAMILY - 188)) | (1 << (PostgreSQLParser.KW_FIRST - 188)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 188)) | (1 << (PostgreSQLParser.KW_FORCE - 188)) | (1 << (PostgreSQLParser.KW_FORWARD - 188)) | (1 << (PostgreSQLParser.KW_FUNCTION - 188)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 188)) | (1 << (PostgreSQLParser.KW_GLOBAL - 188)) | (1 << (PostgreSQLParser.KW_GRANTED - 188)) | (1 << (PostgreSQLParser.KW_HANDLER - 188)) | (1 << (PostgreSQLParser.KW_HEADER - 188)) | (1 << (PostgreSQLParser.KW_HOLD - 188)) | (1 << (PostgreSQLParser.KW_HOUR - 188)) | (1 << (PostgreSQLParser.KW_IDENTITY - 188)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (PostgreSQLParser.KW_IF - 220)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 220)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 220)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 220)) | (1 << (PostgreSQLParser.KW_INCLUDING - 220)) | (1 << (PostgreSQLParser.KW_INCREMENT - 220)) | (1 << (PostgreSQLParser.KW_INDEX - 220)) | (1 << (PostgreSQLParser.KW_INDEXES - 220)) | (1 << (PostgreSQLParser.KW_INHERIT - 220)) | (1 << (PostgreSQLParser.KW_INHERITS - 220)) | (1 << (PostgreSQLParser.KW_INLINE - 220)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 220)) | (1 << (PostgreSQLParser.KW_INSERT - 220)) | (1 << (PostgreSQLParser.KW_INSTEAD - 220)) | (1 << (PostgreSQLParser.KW_INVOKER - 220)) | (1 << (PostgreSQLParser.KW_ISOLATION - 220)) | (1 << (PostgreSQLParser.KW_KEY - 220)) | (1 << (PostgreSQLParser.KW_LABEL - 220)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 220)) | (1 << (PostgreSQLParser.KW_LARGE - 220)) | (1 << (PostgreSQLParser.KW_LAST - 220)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 220)) | (1 << (PostgreSQLParser.KW_LEVEL - 220)))) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & ((1 << (PostgreSQLParser.KW_LISTEN - 252)) | (1 << (PostgreSQLParser.KW_LOAD - 252)) | (1 << (PostgreSQLParser.KW_LOCAL - 252)) | (1 << (PostgreSQLParser.KW_LOCATION - 252)) | (1 << (PostgreSQLParser.KW_LOCK - 252)) | (1 << (PostgreSQLParser.KW_MAPPING - 252)) | (1 << (PostgreSQLParser.KW_MATCH - 252)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 252)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 252)) | (1 << (PostgreSQLParser.KW_MINUTE - 252)) | (1 << (PostgreSQLParser.KW_MINVALUE - 252)) | (1 << (PostgreSQLParser.KW_MODE - 252)) | (1 << (PostgreSQLParser.KW_MONTH - 252)) | (1 << (PostgreSQLParser.KW_MOVE - 252)) | (1 << (PostgreSQLParser.KW_NAME - 252)) | (1 << (PostgreSQLParser.KW_NAMES - 252)) | (1 << (PostgreSQLParser.KW_NEXT - 252)) | (1 << (PostgreSQLParser.KW_NO - 252)) | (1 << (PostgreSQLParser.KW_NOTHING - 252)) | (1 << (PostgreSQLParser.KW_NOTIFY - 252)) | (1 << (PostgreSQLParser.KW_NOWAIT - 252)) | (1 << (PostgreSQLParser.KW_NULLS - 252)) | (1 << (PostgreSQLParser.KW_OBJECT - 252)) | (1 << (PostgreSQLParser.KW_OF - 252)) | (1 << (PostgreSQLParser.KW_OFF - 252)) | (1 << (PostgreSQLParser.KW_OIDS - 252)) | (1 << (PostgreSQLParser.KW_OPERATOR - 252)) | (1 << (PostgreSQLParser.KW_OPTION - 252)) | (1 << (PostgreSQLParser.KW_OPTIONS - 252)) | (1 << (PostgreSQLParser.KW_OWNED - 252)) | (1 << (PostgreSQLParser.KW_OWNER - 252)) | (1 << (PostgreSQLParser.KW_PARSER - 252)))) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & ((1 << (PostgreSQLParser.KW_PARTIAL - 284)) | (1 << (PostgreSQLParser.KW_PARTITION - 284)) | (1 << (PostgreSQLParser.KW_PASSING - 284)) | (1 << (PostgreSQLParser.KW_PASSWORD - 284)) | (1 << (PostgreSQLParser.KW_PLANS - 284)) | (1 << (PostgreSQLParser.KW_PRECEDING - 284)) | (1 << (PostgreSQLParser.KW_PREPARE - 284)) | (1 << (PostgreSQLParser.KW_PREPARED - 284)) | (1 << (PostgreSQLParser.KW_PRESERVE - 284)) | (1 << (PostgreSQLParser.KW_PRIOR - 284)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 284)) | (1 << (PostgreSQLParser.KW_PROGRAM - 284)) | (1 << (PostgreSQLParser.KW_QUOTE - 284)) | (1 << (PostgreSQLParser.KW_RANGE - 284)) | (1 << (PostgreSQLParser.KW_READ - 284)) | (1 << (PostgreSQLParser.KW_REASSIGN - 284)) | (1 << (PostgreSQLParser.KW_RECHECK - 284)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 284)) | (1 << (PostgreSQLParser.KW_REF - 284)) | (1 << (PostgreSQLParser.KW_REFRESH - 284)) | (1 << (PostgreSQLParser.KW_REINDEX - 284)) | (1 << (PostgreSQLParser.KW_RELATIVE - 284)) | (1 << (PostgreSQLParser.KW_RELEASE - 284)) | (1 << (PostgreSQLParser.KW_RENAME - 284)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 284)) | (1 << (PostgreSQLParser.KW_REPLACE - 284)) | (1 << (PostgreSQLParser.KW_REPLICA - 284)) | (1 << (PostgreSQLParser.KW_RESET - 284)) | (1 << (PostgreSQLParser.KW_RESTART - 284)) | (1 << (PostgreSQLParser.KW_RESTRICT - 284)))) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & ((1 << (PostgreSQLParser.KW_RETURNS - 316)) | (1 << (PostgreSQLParser.KW_REVOKE - 316)) | (1 << (PostgreSQLParser.KW_ROLE - 316)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 316)) | (1 << (PostgreSQLParser.KW_ROWS - 316)) | (1 << (PostgreSQLParser.KW_RULE - 316)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 316)) | (1 << (PostgreSQLParser.KW_SCHEMA - 316)) | (1 << (PostgreSQLParser.KW_SCROLL - 316)) | (1 << (PostgreSQLParser.KW_SEARCH - 316)) | (1 << (PostgreSQLParser.KW_SECOND - 316)) | (1 << (PostgreSQLParser.KW_SECURITY - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 316)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 316)) | (1 << (PostgreSQLParser.KW_SERVER - 316)) | (1 << (PostgreSQLParser.KW_SESSION - 316)) | (1 << (PostgreSQLParser.KW_SET - 316)) | (1 << (PostgreSQLParser.KW_SHARE - 316)) | (1 << (PostgreSQLParser.KW_SHOW - 316)) | (1 << (PostgreSQLParser.KW_SIMPLE - 316)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 316)) | (1 << (PostgreSQLParser.KW_STABLE - 316)) | (1 << (PostgreSQLParser.KW_STANDALONE - 316)) | (1 << (PostgreSQLParser.KW_START - 316)) | (1 << (PostgreSQLParser.KW_STATEMENT - 316)) | (1 << (PostgreSQLParser.KW_STATISTICS - 316)) | (1 << (PostgreSQLParser.KW_STDIN - 316)) | (1 << (PostgreSQLParser.KW_STDOUT - 316)) | (1 << (PostgreSQLParser.KW_STORAGE - 316)) | (1 << (PostgreSQLParser.KW_STRICT - 316)) | (1 << (PostgreSQLParser.KW_STRIP - 316)))) !== 0) || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (PostgreSQLParser.KW_SYSID - 348)) | (1 << (PostgreSQLParser.KW_SYSTEM - 348)) | (1 << (PostgreSQLParser.KW_TABLES - 348)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 348)) | (1 << (PostgreSQLParser.KW_TEMP - 348)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 348)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 348)) | (1 << (PostgreSQLParser.KW_TEXT - 348)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 348)) | (1 << (PostgreSQLParser.KW_TRIGGER - 348)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 348)) | (1 << (PostgreSQLParser.KW_TRUSTED - 348)) | (1 << (PostgreSQLParser.KW_TYPE - 348)) | (1 << (PostgreSQLParser.KW_TYPES - 348)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 348)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 348)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 348)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 348)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 348)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 348)) | (1 << (PostgreSQLParser.KW_UNTIL - 348)) | (1 << (PostgreSQLParser.KW_UPDATE - 348)) | (1 << (PostgreSQLParser.KW_VACUUM - 348)) | (1 << (PostgreSQLParser.KW_VALID - 348)) | (1 << (PostgreSQLParser.KW_VALIDATE - 348)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 348)) | (1 << (PostgreSQLParser.KW_VARYING - 348)) | (1 << (PostgreSQLParser.KW_VERSION - 348)) | (1 << (PostgreSQLParser.KW_VIEW - 348)) | (1 << (PostgreSQLParser.KW_VOLATILE - 348)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 348)) | (1 << (PostgreSQLParser.KW_WITHOUT - 348)))) !== 0) || ((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (PostgreSQLParser.KW_WORK - 380)) | (1 << (PostgreSQLParser.KW_WRAPPER - 380)) | (1 << (PostgreSQLParser.KW_WRITE - 380)) | (1 << (PostgreSQLParser.KW_XML - 380)) | (1 << (PostgreSQLParser.KW_YEAR - 380)) | (1 << (PostgreSQLParser.KW_YES - 380)) | (1 << (PostgreSQLParser.KW_ZONE - 380)) | (1 << (PostgreSQLParser.KW_BETWEEN - 380)) | (1 << (PostgreSQLParser.KW_BIGINT - 380)) | (1 << (PostgreSQLParser.KW_BIT - 380)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 380)) | (1 << (PostgreSQLParser.KW_CHAR - 380)) | (1 << (PostgreSQLParser.KW_CHARACTER - 380)) | (1 << (PostgreSQLParser.KW_COALESCE - 380)) | (1 << (PostgreSQLParser.KW_DEC - 380)) | (1 << (PostgreSQLParser.KW_DECIMAL - 380)) | (1 << (PostgreSQLParser.KW_EXISTS - 380)) | (1 << (PostgreSQLParser.KW_EXTRACT - 380)) | (1 << (PostgreSQLParser.KW_FLOAT - 380)) | (1 << (PostgreSQLParser.KW_GREATEST - 380)) | (1 << (PostgreSQLParser.KW_INOUT - 380)) | (1 << (PostgreSQLParser.KW_INT - 380)) | (1 << (PostgreSQLParser.KW_INTEGER - 380)) | (1 << (PostgreSQLParser.KW_INTERVAL - 380)) | (1 << (PostgreSQLParser.KW_LEAST - 380)) | (1 << (PostgreSQLParser.KW_NATIONAL - 380)) | (1 << (PostgreSQLParser.KW_NCHAR - 380)) | (1 << (PostgreSQLParser.KW_NONE - 380)) | (1 << (PostgreSQLParser.KW_NULLIF - 380)) | (1 << (PostgreSQLParser.KW_NUMERIC - 380)) | (1 << (PostgreSQLParser.KW_OVERLAY - 380)) | (1 << (PostgreSQLParser.KW_POSITION - 380)))) !== 0) || ((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & ((1 << (PostgreSQLParser.KW_PRECISION - 412)) | (1 << (PostgreSQLParser.KW_REAL - 412)) | (1 << (PostgreSQLParser.KW_ROW - 412)) | (1 << (PostgreSQLParser.KW_SETOF - 412)) | (1 << (PostgreSQLParser.KW_SMALLINT - 412)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 412)) | (1 << (PostgreSQLParser.KW_TIME - 412)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 412)) | (1 << (PostgreSQLParser.KW_TREAT - 412)) | (1 << (PostgreSQLParser.KW_TRIM - 412)) | (1 << (PostgreSQLParser.KW_VALUES - 412)) | (1 << (PostgreSQLParser.KW_VARCHAR - 412)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 412)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 412)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 412)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 412)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 412)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 412)) | (1 << (PostgreSQLParser.KW_XMLPI - 412)) | (1 << (PostgreSQLParser.KW_XMLROOT - 412)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 412)) | (1 << (PostgreSQLParser.KW_CALL - 412)) | (1 << (PostgreSQLParser.KW_CURRENT - 412)) | (1 << (PostgreSQLParser.KW_ATTACH - 412)) | (1 << (PostgreSQLParser.KW_DETACH - 412)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 412)) | (1 << (PostgreSQLParser.KW_GENERATED - 412)) | (1 << (PostgreSQLParser.KW_LOGGED - 412)) | (1 << (PostgreSQLParser.KW_STORED - 412)) | (1 << (PostgreSQLParser.KW_INCLUDE - 412)) | (1 << (PostgreSQLParser.KW_ROUTINE - 412)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 412)))) !== 0) || ((((_la - 444)) & ~0x1F) === 0 && ((1 << (_la - 444)) & ((1 << (PostgreSQLParser.KW_IMPORT - 444)) | (1 << (PostgreSQLParser.KW_POLICY - 444)) | (1 << (PostgreSQLParser.KW_METHOD - 444)) | (1 << (PostgreSQLParser.KW_REFERENCING - 444)) | (1 << (PostgreSQLParser.KW_NEW - 444)) | (1 << (PostgreSQLParser.KW_OLD - 444)) | (1 << (PostgreSQLParser.KW_VALUE - 444)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 444)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 444)) | (1 << (PostgreSQLParser.KW_OUT - 444)) | (1 << (PostgreSQLParser.KW_ROUTINES - 444)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 444)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 444)) | (1 << (PostgreSQLParser.KW_INPUT - 444)) | (1 << (PostgreSQLParser.KW_SUPPORT - 444)) | (1 << (PostgreSQLParser.KW_PARALLEL - 444)) | (1 << (PostgreSQLParser.KW_SQL - 444)) | (1 << (PostgreSQLParser.KW_DEPENDS - 444)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 444)) | (1 << (PostgreSQLParser.KW_CONFLICT - 444)) | (1 << (PostgreSQLParser.KW_SKIP - 444)) | (1 << (PostgreSQLParser.KW_LOCKED - 444)) | (1 << (PostgreSQLParser.KW_TIES - 444)) | (1 << (PostgreSQLParser.KW_ROLLUP - 444)) | (1 << (PostgreSQLParser.KW_CUBE - 444)) | (1 << (PostgreSQLParser.KW_GROUPING - 444)) | (1 << (PostgreSQLParser.KW_SETS - 444)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 444)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 444)) | (1 << (PostgreSQLParser.KW_COLUMNS - 444)))) !== 0) || ((((_la - 476)) & ~0x1F) === 0 && ((1 << (_la - 476)) & ((1 << (PostgreSQLParser.KW_XMLNAMESPACES - 476)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 476)) | (1 << (PostgreSQLParser.KW_WITHIN - 476)) | (1 << (PostgreSQLParser.KW_FILTER - 476)) | (1 << (PostgreSQLParser.KW_GROUPS - 476)) | (1 << (PostgreSQLParser.KW_OTHERS - 476)) | (1 << (PostgreSQLParser.KW_NFC - 476)) | (1 << (PostgreSQLParser.KW_NFD - 476)) | (1 << (PostgreSQLParser.KW_NFKC - 476)) | (1 << (PostgreSQLParser.KW_NFKD - 476)) | (1 << (PostgreSQLParser.KW_UESCAPE - 476)) | (1 << (PostgreSQLParser.KW_VIEWS - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 476)) | (1 << (PostgreSQLParser.KW_DUMP - 476)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 476)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 476)) | (1 << (PostgreSQLParser.KW_ERROR - 476)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 476)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 476)) | (1 << (PostgreSQLParser.KW_ALIAS - 476)) | (1 << (PostgreSQLParser.KW_CONSTANT - 476)) | (1 << (PostgreSQLParser.KW_PERFORM - 476)) | (1 << (PostgreSQLParser.KW_GET - 476)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 476)) | (1 << (PostgreSQLParser.KW_STACKED - 476)) | (1 << (PostgreSQLParser.KW_ELSIF - 476)) | (1 << (PostgreSQLParser.KW_REVERSE - 476)) | (1 << (PostgreSQLParser.KW_SLICE - 476)) | (1 << (PostgreSQLParser.KW_EXIT - 476)))) !== 0) || ((((_la - 508)) & ~0x1F) === 0 && ((1 << (_la - 508)) & ((1 << (PostgreSQLParser.KW_RETURN - 508)) | (1 << (PostgreSQLParser.KW_QUERY - 508)) | (1 << (PostgreSQLParser.KW_RAISE - 508)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 508)) | (1 << (PostgreSQLParser.KW_DEBUG - 508)) | (1 << (PostgreSQLParser.KW_LOG - 508)) | (1 << (PostgreSQLParser.KW_INFO - 508)) | (1 << (PostgreSQLParser.KW_NOTICE - 508)) | (1 << (PostgreSQLParser.KW_WARNING - 508)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 508)) | (1 << (PostgreSQLParser.KW_ASSERT - 508)) | (1 << (PostgreSQLParser.KW_OPEN - 508)) | (1 << (PostgreSQLParser.Identifier - 508)) | (1 << (PostgreSQLParser.QuotedIdentifier - 508)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 508)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
					{
					this.state = 3271;
					this.opt_class();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3274;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 3275;
				this.a_expr();
				this.state = 3276;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 3278;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 206, this._ctx) ) {
				case 1:
					{
					this.state = 3277;
					this.opt_collate();
					}
					break;
				}
				this.state = 3281;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 92)) & ~0x1F) === 0 && ((1 << (_la - 92)) & ((1 << (PostgreSQLParser.KW_TABLE - 92)) | (1 << (PostgreSQLParser.KW_IS - 92)) | (1 << (PostgreSQLParser.KW_OUTER - 92)))) !== 0) || ((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (PostgreSQLParser.KW_OVER - 124)) | (1 << (PostgreSQLParser.KW_ABORT - 124)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 124)) | (1 << (PostgreSQLParser.KW_ACCESS - 124)) | (1 << (PostgreSQLParser.KW_ACTION - 124)) | (1 << (PostgreSQLParser.KW_ADD - 124)) | (1 << (PostgreSQLParser.KW_ADMIN - 124)) | (1 << (PostgreSQLParser.KW_AFTER - 124)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 124)) | (1 << (PostgreSQLParser.KW_ALSO - 124)) | (1 << (PostgreSQLParser.KW_ALTER - 124)) | (1 << (PostgreSQLParser.KW_ALWAYS - 124)) | (1 << (PostgreSQLParser.KW_ASSERTION - 124)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 124)) | (1 << (PostgreSQLParser.KW_AT - 124)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 124)) | (1 << (PostgreSQLParser.KW_BACKWARD - 124)) | (1 << (PostgreSQLParser.KW_BEFORE - 124)) | (1 << (PostgreSQLParser.KW_BEGIN - 124)) | (1 << (PostgreSQLParser.KW_BY - 124)) | (1 << (PostgreSQLParser.KW_CACHE - 124)) | (1 << (PostgreSQLParser.KW_CALLED - 124)) | (1 << (PostgreSQLParser.KW_CASCADE - 124)) | (1 << (PostgreSQLParser.KW_CASCADED - 124)) | (1 << (PostgreSQLParser.KW_CATALOG - 124)) | (1 << (PostgreSQLParser.KW_CHAIN - 124)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 124)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 124)))) !== 0) || ((((_la - 156)) & ~0x1F) === 0 && ((1 << (_la - 156)) & ((1 << (PostgreSQLParser.KW_CLASS - 156)) | (1 << (PostgreSQLParser.KW_CLOSE - 156)) | (1 << (PostgreSQLParser.KW_CLUSTER - 156)) | (1 << (PostgreSQLParser.KW_COMMENT - 156)) | (1 << (PostgreSQLParser.KW_COMMENTS - 156)) | (1 << (PostgreSQLParser.KW_COMMIT - 156)) | (1 << (PostgreSQLParser.KW_COMMITTED - 156)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 156)) | (1 << (PostgreSQLParser.KW_CONNECTION - 156)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 156)) | (1 << (PostgreSQLParser.KW_CONTENT - 156)) | (1 << (PostgreSQLParser.KW_CONTINUE - 156)) | (1 << (PostgreSQLParser.KW_CONVERSION - 156)) | (1 << (PostgreSQLParser.KW_COPY - 156)) | (1 << (PostgreSQLParser.KW_COST - 156)) | (1 << (PostgreSQLParser.KW_CSV - 156)) | (1 << (PostgreSQLParser.KW_CURSOR - 156)) | (1 << (PostgreSQLParser.KW_CYCLE - 156)) | (1 << (PostgreSQLParser.KW_DATA - 156)) | (1 << (PostgreSQLParser.KW_DATABASE - 156)) | (1 << (PostgreSQLParser.KW_DAY - 156)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 156)) | (1 << (PostgreSQLParser.KW_DECLARE - 156)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 156)) | (1 << (PostgreSQLParser.KW_DEFERRED - 156)) | (1 << (PostgreSQLParser.KW_DEFINER - 156)) | (1 << (PostgreSQLParser.KW_DELETE - 156)) | (1 << (PostgreSQLParser.KW_DELIMITER - 156)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 156)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 156)) | (1 << (PostgreSQLParser.KW_DISABLE - 156)) | (1 << (PostgreSQLParser.KW_DISCARD - 156)))) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (PostgreSQLParser.KW_DOCUMENT - 188)) | (1 << (PostgreSQLParser.KW_DOMAIN - 188)) | (1 << (PostgreSQLParser.KW_DOUBLE - 188)) | (1 << (PostgreSQLParser.KW_DROP - 188)) | (1 << (PostgreSQLParser.KW_EACH - 188)) | (1 << (PostgreSQLParser.KW_ENABLE - 188)) | (1 << (PostgreSQLParser.KW_ENCODING - 188)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 188)) | (1 << (PostgreSQLParser.KW_ENUM - 188)) | (1 << (PostgreSQLParser.KW_ESCAPE - 188)) | (1 << (PostgreSQLParser.KW_EVENT - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 188)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 188)) | (1 << (PostgreSQLParser.KW_EXECUTE - 188)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 188)) | (1 << (PostgreSQLParser.KW_EXTENSION - 188)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 188)) | (1 << (PostgreSQLParser.KW_FAMILY - 188)) | (1 << (PostgreSQLParser.KW_FIRST - 188)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 188)) | (1 << (PostgreSQLParser.KW_FORCE - 188)) | (1 << (PostgreSQLParser.KW_FORWARD - 188)) | (1 << (PostgreSQLParser.KW_FUNCTION - 188)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 188)) | (1 << (PostgreSQLParser.KW_GLOBAL - 188)) | (1 << (PostgreSQLParser.KW_GRANTED - 188)) | (1 << (PostgreSQLParser.KW_HANDLER - 188)) | (1 << (PostgreSQLParser.KW_HEADER - 188)) | (1 << (PostgreSQLParser.KW_HOLD - 188)) | (1 << (PostgreSQLParser.KW_HOUR - 188)) | (1 << (PostgreSQLParser.KW_IDENTITY - 188)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (PostgreSQLParser.KW_IF - 220)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 220)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 220)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 220)) | (1 << (PostgreSQLParser.KW_INCLUDING - 220)) | (1 << (PostgreSQLParser.KW_INCREMENT - 220)) | (1 << (PostgreSQLParser.KW_INDEX - 220)) | (1 << (PostgreSQLParser.KW_INDEXES - 220)) | (1 << (PostgreSQLParser.KW_INHERIT - 220)) | (1 << (PostgreSQLParser.KW_INHERITS - 220)) | (1 << (PostgreSQLParser.KW_INLINE - 220)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 220)) | (1 << (PostgreSQLParser.KW_INSERT - 220)) | (1 << (PostgreSQLParser.KW_INSTEAD - 220)) | (1 << (PostgreSQLParser.KW_INVOKER - 220)) | (1 << (PostgreSQLParser.KW_ISOLATION - 220)) | (1 << (PostgreSQLParser.KW_KEY - 220)) | (1 << (PostgreSQLParser.KW_LABEL - 220)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 220)) | (1 << (PostgreSQLParser.KW_LARGE - 220)) | (1 << (PostgreSQLParser.KW_LAST - 220)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 220)) | (1 << (PostgreSQLParser.KW_LEVEL - 220)))) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & ((1 << (PostgreSQLParser.KW_LISTEN - 252)) | (1 << (PostgreSQLParser.KW_LOAD - 252)) | (1 << (PostgreSQLParser.KW_LOCAL - 252)) | (1 << (PostgreSQLParser.KW_LOCATION - 252)) | (1 << (PostgreSQLParser.KW_LOCK - 252)) | (1 << (PostgreSQLParser.KW_MAPPING - 252)) | (1 << (PostgreSQLParser.KW_MATCH - 252)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 252)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 252)) | (1 << (PostgreSQLParser.KW_MINUTE - 252)) | (1 << (PostgreSQLParser.KW_MINVALUE - 252)) | (1 << (PostgreSQLParser.KW_MODE - 252)) | (1 << (PostgreSQLParser.KW_MONTH - 252)) | (1 << (PostgreSQLParser.KW_MOVE - 252)) | (1 << (PostgreSQLParser.KW_NAME - 252)) | (1 << (PostgreSQLParser.KW_NAMES - 252)) | (1 << (PostgreSQLParser.KW_NEXT - 252)) | (1 << (PostgreSQLParser.KW_NO - 252)) | (1 << (PostgreSQLParser.KW_NOTHING - 252)) | (1 << (PostgreSQLParser.KW_NOTIFY - 252)) | (1 << (PostgreSQLParser.KW_NOWAIT - 252)) | (1 << (PostgreSQLParser.KW_NULLS - 252)) | (1 << (PostgreSQLParser.KW_OBJECT - 252)) | (1 << (PostgreSQLParser.KW_OF - 252)) | (1 << (PostgreSQLParser.KW_OFF - 252)) | (1 << (PostgreSQLParser.KW_OIDS - 252)) | (1 << (PostgreSQLParser.KW_OPERATOR - 252)) | (1 << (PostgreSQLParser.KW_OPTION - 252)) | (1 << (PostgreSQLParser.KW_OPTIONS - 252)) | (1 << (PostgreSQLParser.KW_OWNED - 252)) | (1 << (PostgreSQLParser.KW_OWNER - 252)) | (1 << (PostgreSQLParser.KW_PARSER - 252)))) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & ((1 << (PostgreSQLParser.KW_PARTIAL - 284)) | (1 << (PostgreSQLParser.KW_PARTITION - 284)) | (1 << (PostgreSQLParser.KW_PASSING - 284)) | (1 << (PostgreSQLParser.KW_PASSWORD - 284)) | (1 << (PostgreSQLParser.KW_PLANS - 284)) | (1 << (PostgreSQLParser.KW_PRECEDING - 284)) | (1 << (PostgreSQLParser.KW_PREPARE - 284)) | (1 << (PostgreSQLParser.KW_PREPARED - 284)) | (1 << (PostgreSQLParser.KW_PRESERVE - 284)) | (1 << (PostgreSQLParser.KW_PRIOR - 284)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 284)) | (1 << (PostgreSQLParser.KW_PROGRAM - 284)) | (1 << (PostgreSQLParser.KW_QUOTE - 284)) | (1 << (PostgreSQLParser.KW_RANGE - 284)) | (1 << (PostgreSQLParser.KW_READ - 284)) | (1 << (PostgreSQLParser.KW_REASSIGN - 284)) | (1 << (PostgreSQLParser.KW_RECHECK - 284)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 284)) | (1 << (PostgreSQLParser.KW_REF - 284)) | (1 << (PostgreSQLParser.KW_REFRESH - 284)) | (1 << (PostgreSQLParser.KW_REINDEX - 284)) | (1 << (PostgreSQLParser.KW_RELATIVE - 284)) | (1 << (PostgreSQLParser.KW_RELEASE - 284)) | (1 << (PostgreSQLParser.KW_RENAME - 284)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 284)) | (1 << (PostgreSQLParser.KW_REPLACE - 284)) | (1 << (PostgreSQLParser.KW_REPLICA - 284)) | (1 << (PostgreSQLParser.KW_RESET - 284)) | (1 << (PostgreSQLParser.KW_RESTART - 284)) | (1 << (PostgreSQLParser.KW_RESTRICT - 284)))) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & ((1 << (PostgreSQLParser.KW_RETURNS - 316)) | (1 << (PostgreSQLParser.KW_REVOKE - 316)) | (1 << (PostgreSQLParser.KW_ROLE - 316)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 316)) | (1 << (PostgreSQLParser.KW_ROWS - 316)) | (1 << (PostgreSQLParser.KW_RULE - 316)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 316)) | (1 << (PostgreSQLParser.KW_SCHEMA - 316)) | (1 << (PostgreSQLParser.KW_SCROLL - 316)) | (1 << (PostgreSQLParser.KW_SEARCH - 316)) | (1 << (PostgreSQLParser.KW_SECOND - 316)) | (1 << (PostgreSQLParser.KW_SECURITY - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 316)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 316)) | (1 << (PostgreSQLParser.KW_SERVER - 316)) | (1 << (PostgreSQLParser.KW_SESSION - 316)) | (1 << (PostgreSQLParser.KW_SET - 316)) | (1 << (PostgreSQLParser.KW_SHARE - 316)) | (1 << (PostgreSQLParser.KW_SHOW - 316)) | (1 << (PostgreSQLParser.KW_SIMPLE - 316)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 316)) | (1 << (PostgreSQLParser.KW_STABLE - 316)) | (1 << (PostgreSQLParser.KW_STANDALONE - 316)) | (1 << (PostgreSQLParser.KW_START - 316)) | (1 << (PostgreSQLParser.KW_STATEMENT - 316)) | (1 << (PostgreSQLParser.KW_STATISTICS - 316)) | (1 << (PostgreSQLParser.KW_STDIN - 316)) | (1 << (PostgreSQLParser.KW_STDOUT - 316)) | (1 << (PostgreSQLParser.KW_STORAGE - 316)) | (1 << (PostgreSQLParser.KW_STRICT - 316)) | (1 << (PostgreSQLParser.KW_STRIP - 316)))) !== 0) || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (PostgreSQLParser.KW_SYSID - 348)) | (1 << (PostgreSQLParser.KW_SYSTEM - 348)) | (1 << (PostgreSQLParser.KW_TABLES - 348)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 348)) | (1 << (PostgreSQLParser.KW_TEMP - 348)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 348)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 348)) | (1 << (PostgreSQLParser.KW_TEXT - 348)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 348)) | (1 << (PostgreSQLParser.KW_TRIGGER - 348)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 348)) | (1 << (PostgreSQLParser.KW_TRUSTED - 348)) | (1 << (PostgreSQLParser.KW_TYPE - 348)) | (1 << (PostgreSQLParser.KW_TYPES - 348)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 348)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 348)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 348)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 348)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 348)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 348)) | (1 << (PostgreSQLParser.KW_UNTIL - 348)) | (1 << (PostgreSQLParser.KW_UPDATE - 348)) | (1 << (PostgreSQLParser.KW_VACUUM - 348)) | (1 << (PostgreSQLParser.KW_VALID - 348)) | (1 << (PostgreSQLParser.KW_VALIDATE - 348)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 348)) | (1 << (PostgreSQLParser.KW_VARYING - 348)) | (1 << (PostgreSQLParser.KW_VERSION - 348)) | (1 << (PostgreSQLParser.KW_VIEW - 348)) | (1 << (PostgreSQLParser.KW_VOLATILE - 348)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 348)) | (1 << (PostgreSQLParser.KW_WITHOUT - 348)))) !== 0) || ((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (PostgreSQLParser.KW_WORK - 380)) | (1 << (PostgreSQLParser.KW_WRAPPER - 380)) | (1 << (PostgreSQLParser.KW_WRITE - 380)) | (1 << (PostgreSQLParser.KW_XML - 380)) | (1 << (PostgreSQLParser.KW_YEAR - 380)) | (1 << (PostgreSQLParser.KW_YES - 380)) | (1 << (PostgreSQLParser.KW_ZONE - 380)) | (1 << (PostgreSQLParser.KW_BETWEEN - 380)) | (1 << (PostgreSQLParser.KW_BIGINT - 380)) | (1 << (PostgreSQLParser.KW_BIT - 380)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 380)) | (1 << (PostgreSQLParser.KW_CHAR - 380)) | (1 << (PostgreSQLParser.KW_CHARACTER - 380)) | (1 << (PostgreSQLParser.KW_COALESCE - 380)) | (1 << (PostgreSQLParser.KW_DEC - 380)) | (1 << (PostgreSQLParser.KW_DECIMAL - 380)) | (1 << (PostgreSQLParser.KW_EXISTS - 380)) | (1 << (PostgreSQLParser.KW_EXTRACT - 380)) | (1 << (PostgreSQLParser.KW_FLOAT - 380)) | (1 << (PostgreSQLParser.KW_GREATEST - 380)) | (1 << (PostgreSQLParser.KW_INOUT - 380)) | (1 << (PostgreSQLParser.KW_INT - 380)) | (1 << (PostgreSQLParser.KW_INTEGER - 380)) | (1 << (PostgreSQLParser.KW_INTERVAL - 380)) | (1 << (PostgreSQLParser.KW_LEAST - 380)) | (1 << (PostgreSQLParser.KW_NATIONAL - 380)) | (1 << (PostgreSQLParser.KW_NCHAR - 380)) | (1 << (PostgreSQLParser.KW_NONE - 380)) | (1 << (PostgreSQLParser.KW_NULLIF - 380)) | (1 << (PostgreSQLParser.KW_NUMERIC - 380)) | (1 << (PostgreSQLParser.KW_OVERLAY - 380)) | (1 << (PostgreSQLParser.KW_POSITION - 380)))) !== 0) || ((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & ((1 << (PostgreSQLParser.KW_PRECISION - 412)) | (1 << (PostgreSQLParser.KW_REAL - 412)) | (1 << (PostgreSQLParser.KW_ROW - 412)) | (1 << (PostgreSQLParser.KW_SETOF - 412)) | (1 << (PostgreSQLParser.KW_SMALLINT - 412)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 412)) | (1 << (PostgreSQLParser.KW_TIME - 412)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 412)) | (1 << (PostgreSQLParser.KW_TREAT - 412)) | (1 << (PostgreSQLParser.KW_TRIM - 412)) | (1 << (PostgreSQLParser.KW_VALUES - 412)) | (1 << (PostgreSQLParser.KW_VARCHAR - 412)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 412)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 412)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 412)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 412)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 412)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 412)) | (1 << (PostgreSQLParser.KW_XMLPI - 412)) | (1 << (PostgreSQLParser.KW_XMLROOT - 412)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 412)) | (1 << (PostgreSQLParser.KW_CALL - 412)) | (1 << (PostgreSQLParser.KW_CURRENT - 412)) | (1 << (PostgreSQLParser.KW_ATTACH - 412)) | (1 << (PostgreSQLParser.KW_DETACH - 412)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 412)) | (1 << (PostgreSQLParser.KW_GENERATED - 412)) | (1 << (PostgreSQLParser.KW_LOGGED - 412)) | (1 << (PostgreSQLParser.KW_STORED - 412)) | (1 << (PostgreSQLParser.KW_INCLUDE - 412)) | (1 << (PostgreSQLParser.KW_ROUTINE - 412)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 412)))) !== 0) || ((((_la - 444)) & ~0x1F) === 0 && ((1 << (_la - 444)) & ((1 << (PostgreSQLParser.KW_IMPORT - 444)) | (1 << (PostgreSQLParser.KW_POLICY - 444)) | (1 << (PostgreSQLParser.KW_METHOD - 444)) | (1 << (PostgreSQLParser.KW_REFERENCING - 444)) | (1 << (PostgreSQLParser.KW_NEW - 444)) | (1 << (PostgreSQLParser.KW_OLD - 444)) | (1 << (PostgreSQLParser.KW_VALUE - 444)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 444)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 444)) | (1 << (PostgreSQLParser.KW_OUT - 444)) | (1 << (PostgreSQLParser.KW_ROUTINES - 444)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 444)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 444)) | (1 << (PostgreSQLParser.KW_INPUT - 444)) | (1 << (PostgreSQLParser.KW_SUPPORT - 444)) | (1 << (PostgreSQLParser.KW_PARALLEL - 444)) | (1 << (PostgreSQLParser.KW_SQL - 444)) | (1 << (PostgreSQLParser.KW_DEPENDS - 444)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 444)) | (1 << (PostgreSQLParser.KW_CONFLICT - 444)) | (1 << (PostgreSQLParser.KW_SKIP - 444)) | (1 << (PostgreSQLParser.KW_LOCKED - 444)) | (1 << (PostgreSQLParser.KW_TIES - 444)) | (1 << (PostgreSQLParser.KW_ROLLUP - 444)) | (1 << (PostgreSQLParser.KW_CUBE - 444)) | (1 << (PostgreSQLParser.KW_GROUPING - 444)) | (1 << (PostgreSQLParser.KW_SETS - 444)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 444)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 444)) | (1 << (PostgreSQLParser.KW_COLUMNS - 444)))) !== 0) || ((((_la - 476)) & ~0x1F) === 0 && ((1 << (_la - 476)) & ((1 << (PostgreSQLParser.KW_XMLNAMESPACES - 476)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 476)) | (1 << (PostgreSQLParser.KW_WITHIN - 476)) | (1 << (PostgreSQLParser.KW_FILTER - 476)) | (1 << (PostgreSQLParser.KW_GROUPS - 476)) | (1 << (PostgreSQLParser.KW_OTHERS - 476)) | (1 << (PostgreSQLParser.KW_NFC - 476)) | (1 << (PostgreSQLParser.KW_NFD - 476)) | (1 << (PostgreSQLParser.KW_NFKC - 476)) | (1 << (PostgreSQLParser.KW_NFKD - 476)) | (1 << (PostgreSQLParser.KW_UESCAPE - 476)) | (1 << (PostgreSQLParser.KW_VIEWS - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 476)) | (1 << (PostgreSQLParser.KW_DUMP - 476)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 476)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 476)) | (1 << (PostgreSQLParser.KW_ERROR - 476)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 476)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 476)) | (1 << (PostgreSQLParser.KW_ALIAS - 476)) | (1 << (PostgreSQLParser.KW_CONSTANT - 476)) | (1 << (PostgreSQLParser.KW_PERFORM - 476)) | (1 << (PostgreSQLParser.KW_GET - 476)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 476)) | (1 << (PostgreSQLParser.KW_STACKED - 476)) | (1 << (PostgreSQLParser.KW_ELSIF - 476)) | (1 << (PostgreSQLParser.KW_REVERSE - 476)) | (1 << (PostgreSQLParser.KW_SLICE - 476)) | (1 << (PostgreSQLParser.KW_EXIT - 476)))) !== 0) || ((((_la - 508)) & ~0x1F) === 0 && ((1 << (_la - 508)) & ((1 << (PostgreSQLParser.KW_RETURN - 508)) | (1 << (PostgreSQLParser.KW_QUERY - 508)) | (1 << (PostgreSQLParser.KW_RAISE - 508)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 508)) | (1 << (PostgreSQLParser.KW_DEBUG - 508)) | (1 << (PostgreSQLParser.KW_LOG - 508)) | (1 << (PostgreSQLParser.KW_INFO - 508)) | (1 << (PostgreSQLParser.KW_NOTICE - 508)) | (1 << (PostgreSQLParser.KW_WARNING - 508)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 508)) | (1 << (PostgreSQLParser.KW_ASSERT - 508)) | (1 << (PostgreSQLParser.KW_OPEN - 508)) | (1 << (PostgreSQLParser.Identifier - 508)) | (1 << (PostgreSQLParser.QuotedIdentifier - 508)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 508)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
					{
					this.state = 3280;
					this.opt_class();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_access_method_clause(): Table_access_method_clauseContext {
		let _localctx: Table_access_method_clauseContext = new Table_access_method_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, PostgreSQLParser.RULE_table_access_method_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3285;
			this.match(PostgreSQLParser.KW_USING);
			this.state = 3286;
			this.name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optwith(): OptwithContext {
		let _localctx: OptwithContext = new OptwithContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, PostgreSQLParser.RULE_optwith);
		try {
			this.state = 3294;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 209, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3288;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 3289;
				this.reloptions();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3290;
				this.match(PostgreSQLParser.KW_WITHOUT);
				this.state = 3291;
				this.match(PostgreSQLParser.KW_OIDS);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3292;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 3293;
				this.match(PostgreSQLParser.KW_OIDS);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public oncommitoption(): OncommitoptionContext {
		let _localctx: OncommitoptionContext = new OncommitoptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, PostgreSQLParser.RULE_oncommitoption);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3296;
			this.match(PostgreSQLParser.KW_ON);
			this.state = 3297;
			this.match(PostgreSQLParser.KW_COMMIT);
			this.state = 3303;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_DROP:
				{
				this.state = 3298;
				this.match(PostgreSQLParser.KW_DROP);
				}
				break;
			case PostgreSQLParser.KW_DELETE:
				{
				this.state = 3299;
				this.match(PostgreSQLParser.KW_DELETE);
				this.state = 3300;
				this.match(PostgreSQLParser.KW_ROWS);
				}
				break;
			case PostgreSQLParser.KW_PRESERVE:
				{
				this.state = 3301;
				this.match(PostgreSQLParser.KW_PRESERVE);
				this.state = 3302;
				this.match(PostgreSQLParser.KW_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opttablespace(): OpttablespaceContext {
		let _localctx: OpttablespaceContext = new OpttablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, PostgreSQLParser.RULE_opttablespace);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3305;
			this.match(PostgreSQLParser.KW_TABLESPACE);
			this.state = 3306;
			this.name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optconstablespace(): OptconstablespaceContext {
		let _localctx: OptconstablespaceContext = new OptconstablespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, PostgreSQLParser.RULE_optconstablespace);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3308;
			this.match(PostgreSQLParser.KW_USING);
			this.state = 3309;
			this.match(PostgreSQLParser.KW_INDEX);
			this.state = 3310;
			this.match(PostgreSQLParser.KW_TABLESPACE);
			this.state = 3311;
			this.name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public existingindex(): ExistingindexContext {
		let _localctx: ExistingindexContext = new ExistingindexContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, PostgreSQLParser.RULE_existingindex);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3313;
			this.match(PostgreSQLParser.KW_USING);
			this.state = 3314;
			this.match(PostgreSQLParser.KW_INDEX);
			this.state = 3315;
			this.name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createstatsstmt(): CreatestatsstmtContext {
		let _localctx: CreatestatsstmtContext = new CreatestatsstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, PostgreSQLParser.RULE_createstatsstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3317;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 3318;
			this.match(PostgreSQLParser.KW_STATISTICS);
			this.state = 3322;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 211, this._ctx) ) {
			case 1:
				{
				this.state = 3319;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3320;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 3321;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 3324;
			this.any_name();
			this.state = 3326;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.OPEN_PAREN) {
				{
				this.state = 3325;
				this.opt_name_list();
				}
			}

			this.state = 3328;
			this.match(PostgreSQLParser.KW_ON);
			this.state = 3329;
			this.expr_list();
			this.state = 3330;
			this.match(PostgreSQLParser.KW_FROM);
			this.state = 3331;
			this.from_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterstatsstmt(): AlterstatsstmtContext {
		let _localctx: AlterstatsstmtContext = new AlterstatsstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, PostgreSQLParser.RULE_alterstatsstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3333;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 3334;
			this.match(PostgreSQLParser.KW_STATISTICS);
			this.state = 3337;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 213, this._ctx) ) {
			case 1:
				{
				this.state = 3335;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3336;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 3339;
			this.any_name();
			this.state = 3340;
			this.match(PostgreSQLParser.KW_SET);
			this.state = 3341;
			this.match(PostgreSQLParser.KW_STATISTICS);
			this.state = 3342;
			this.signediconst();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createasstmt(): CreateasstmtContext {
		let _localctx: CreateasstmtContext = new CreateasstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, PostgreSQLParser.RULE_createasstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3344;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 3346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_GLOBAL || _la === PostgreSQLParser.KW_LOCAL || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PostgreSQLParser.KW_TEMP - 352)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 352)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 352)))) !== 0)) {
				{
				this.state = 3345;
				this.opttemp();
				}
			}

			this.state = 3348;
			this.match(PostgreSQLParser.KW_TABLE);
			this.state = 3352;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 215, this._ctx) ) {
			case 1:
				{
				this.state = 3349;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3350;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 3351;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 3354;
			this.create_as_target();
			this.state = 3355;
			this.match(PostgreSQLParser.KW_AS);
			this.state = 3356;
			this.selectstmt();
			this.state = 3358;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 216, this._ctx) ) {
			case 1:
				{
				this.state = 3357;
				this.opt_with_data();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_as_target(): Create_as_targetContext {
		let _localctx: Create_as_targetContext = new Create_as_targetContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, PostgreSQLParser.RULE_create_as_target);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3360;
			this.qualified_name();
			this.state = 3362;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.OPEN_PAREN) {
				{
				this.state = 3361;
				this.opt_column_list();
				}
			}

			this.state = 3365;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_USING) {
				{
				this.state = 3364;
				this.table_access_method_clause();
				}
			}

			this.state = 3368;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WITH || _la === PostgreSQLParser.KW_WITHOUT) {
				{
				this.state = 3367;
				this.optwith();
				}
			}

			this.state = 3371;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_ON) {
				{
				this.state = 3370;
				this.oncommitoption();
				}
			}

			this.state = 3374;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_TABLESPACE) {
				{
				this.state = 3373;
				this.opttablespace();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_with_data(): Opt_with_dataContext {
		let _localctx: Opt_with_dataContext = new Opt_with_dataContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, PostgreSQLParser.RULE_opt_with_data);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3376;
			this.match(PostgreSQLParser.KW_WITH);
			this.state = 3380;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_DATA:
				{
				this.state = 3377;
				this.match(PostgreSQLParser.KW_DATA);
				}
				break;
			case PostgreSQLParser.KW_NO:
				{
				this.state = 3378;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 3379;
				this.match(PostgreSQLParser.KW_DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public creatematviewstmt(): CreatematviewstmtContext {
		let _localctx: CreatematviewstmtContext = new CreatematviewstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, PostgreSQLParser.RULE_creatematviewstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3382;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 3384;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_UNLOGGED) {
				{
				this.state = 3383;
				this.optnolog();
				}
			}

			this.state = 3386;
			this.match(PostgreSQLParser.KW_MATERIALIZED);
			this.state = 3387;
			this.match(PostgreSQLParser.KW_VIEW);
			this.state = 3391;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 224, this._ctx) ) {
			case 1:
				{
				this.state = 3388;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3389;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 3390;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 3393;
			this.create_mv_target();
			this.state = 3394;
			this.match(PostgreSQLParser.KW_AS);
			this.state = 3395;
			this.selectstmt();
			this.state = 3397;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 225, this._ctx) ) {
			case 1:
				{
				this.state = 3396;
				this.opt_with_data();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_mv_target(): Create_mv_targetContext {
		let _localctx: Create_mv_targetContext = new Create_mv_targetContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, PostgreSQLParser.RULE_create_mv_target);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3399;
			this.qualified_name();
			this.state = 3401;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.OPEN_PAREN) {
				{
				this.state = 3400;
				this.opt_column_list();
				}
			}

			this.state = 3404;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_USING) {
				{
				this.state = 3403;
				this.table_access_method_clause();
				}
			}

			this.state = 3407;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WITH) {
				{
				this.state = 3406;
				this.opt_reloptions();
				}
			}

			this.state = 3410;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_TABLESPACE) {
				{
				this.state = 3409;
				this.opttablespace();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optnolog(): OptnologContext {
		let _localctx: OptnologContext = new OptnologContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, PostgreSQLParser.RULE_optnolog);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3412;
			this.match(PostgreSQLParser.KW_UNLOGGED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public refreshmatviewstmt(): RefreshmatviewstmtContext {
		let _localctx: RefreshmatviewstmtContext = new RefreshmatviewstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, PostgreSQLParser.RULE_refreshmatviewstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3414;
			this.match(PostgreSQLParser.KW_REFRESH);
			this.state = 3415;
			this.match(PostgreSQLParser.KW_MATERIALIZED);
			this.state = 3416;
			this.match(PostgreSQLParser.KW_VIEW);
			this.state = 3418;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_CONCURRENTLY) {
				{
				this.state = 3417;
				this.opt_concurrently();
				}
			}

			this.state = 3420;
			this.qualified_name();
			this.state = 3422;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 231, this._ctx) ) {
			case 1:
				{
				this.state = 3421;
				this.opt_with_data();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createseqstmt(): CreateseqstmtContext {
		let _localctx: CreateseqstmtContext = new CreateseqstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, PostgreSQLParser.RULE_createseqstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3424;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 3426;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_GLOBAL || _la === PostgreSQLParser.KW_LOCAL || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PostgreSQLParser.KW_TEMP - 352)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 352)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 352)))) !== 0)) {
				{
				this.state = 3425;
				this.opttemp();
				}
			}

			this.state = 3428;
			this.match(PostgreSQLParser.KW_SEQUENCE);
			this.state = 3432;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 233, this._ctx) ) {
			case 1:
				{
				this.state = 3429;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3430;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 3431;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 3434;
			this.qualified_name();
			this.state = 3436;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 234, this._ctx) ) {
			case 1:
				{
				this.state = 3435;
				this.optseqoptlist();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterseqstmt(): AlterseqstmtContext {
		let _localctx: AlterseqstmtContext = new AlterseqstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, PostgreSQLParser.RULE_alterseqstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3438;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 3439;
			this.match(PostgreSQLParser.KW_SEQUENCE);
			this.state = 3442;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 235, this._ctx) ) {
			case 1:
				{
				this.state = 3440;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3441;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 3444;
			this.qualified_name();
			this.state = 3445;
			this.seqoptlist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optseqoptlist(): OptseqoptlistContext {
		let _localctx: OptseqoptlistContext = new OptseqoptlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, PostgreSQLParser.RULE_optseqoptlist);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3447;
			this.seqoptlist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext {
		let _localctx: OptparenthesizedseqoptlistContext = new OptparenthesizedseqoptlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, PostgreSQLParser.RULE_optparenthesizedseqoptlist);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3449;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 3450;
			this.seqoptlist();
			this.state = 3451;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public seqoptlist(): SeqoptlistContext {
		let _localctx: SeqoptlistContext = new SeqoptlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, PostgreSQLParser.RULE_seqoptlist);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3454;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 3453;
					this.seqoptelem();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3456;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 236, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public seqoptelem(): SeqoptelemContext {
		let _localctx: SeqoptelemContext = new SeqoptelemContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, PostgreSQLParser.RULE_seqoptelem);
		let _la: number;
		try {
			this.state = 3492;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3458;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 3459;
				this.simpletypename();
				}
				break;
			case PostgreSQLParser.KW_CACHE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3460;
				this.match(PostgreSQLParser.KW_CACHE);
				this.state = 3461;
				this.numericonly();
				}
				break;
			case PostgreSQLParser.KW_CYCLE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3462;
				this.match(PostgreSQLParser.KW_CYCLE);
				}
				break;
			case PostgreSQLParser.KW_INCREMENT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3463;
				this.match(PostgreSQLParser.KW_INCREMENT);
				this.state = 3465;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_BY) {
					{
					this.state = 3464;
					this.opt_by();
					}
				}

				this.state = 3467;
				this.numericonly();
				}
				break;
			case PostgreSQLParser.KW_MAXVALUE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3468;
				this.match(PostgreSQLParser.KW_MAXVALUE);
				this.state = 3469;
				this.numericonly();
				}
				break;
			case PostgreSQLParser.KW_MINVALUE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3470;
				this.match(PostgreSQLParser.KW_MINVALUE);
				this.state = 3471;
				this.numericonly();
				}
				break;
			case PostgreSQLParser.KW_NO:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3472;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 3473;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_CYCLE || _la === PostgreSQLParser.KW_MAXVALUE || _la === PostgreSQLParser.KW_MINVALUE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParser.KW_OWNED:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3474;
				this.match(PostgreSQLParser.KW_OWNED);
				this.state = 3475;
				this.match(PostgreSQLParser.KW_BY);
				this.state = 3476;
				this.any_name();
				}
				break;
			case PostgreSQLParser.KW_SEQUENCE:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3477;
				this.match(PostgreSQLParser.KW_SEQUENCE);
				this.state = 3478;
				this.match(PostgreSQLParser.KW_NAME);
				this.state = 3479;
				this.any_name();
				}
				break;
			case PostgreSQLParser.KW_START:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3480;
				this.match(PostgreSQLParser.KW_START);
				this.state = 3482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WITH) {
					{
					this.state = 3481;
					this.opt_with();
					}
				}

				this.state = 3484;
				this.numericonly();
				}
				break;
			case PostgreSQLParser.KW_RESTART:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3485;
				this.match(PostgreSQLParser.KW_RESTART);
				this.state = 3487;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 239, this._ctx) ) {
				case 1:
					{
					this.state = 3486;
					this.opt_with();
					}
					break;
				}
				this.state = 3490;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.PLUS || _la === PostgreSQLParser.MINUS || _la === PostgreSQLParser.Integral || _la === PostgreSQLParser.Numeric) {
					{
					this.state = 3489;
					this.numericonly();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_by(): Opt_byContext {
		let _localctx: Opt_byContext = new Opt_byContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, PostgreSQLParser.RULE_opt_by);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3494;
			this.match(PostgreSQLParser.KW_BY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public numericonly(): NumericonlyContext {
		let _localctx: NumericonlyContext = new NumericonlyContext(this._ctx, this.state);
		this.enterRule(_localctx, 294, PostgreSQLParser.RULE_numericonly);
		try {
			this.state = 3502;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 242, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3496;
				this.fconst();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3497;
				this.match(PostgreSQLParser.PLUS);
				this.state = 3498;
				this.fconst();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3499;
				this.match(PostgreSQLParser.MINUS);
				this.state = 3500;
				this.fconst();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3501;
				this.signediconst();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public numericonly_list(): Numericonly_listContext {
		let _localctx: Numericonly_listContext = new Numericonly_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, PostgreSQLParser.RULE_numericonly_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3504;
			this.numericonly();
			this.state = 3509;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 3505;
				this.match(PostgreSQLParser.COMMA);
				this.state = 3506;
				this.numericonly();
				}
				}
				this.state = 3511;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createplangstmt(): CreateplangstmtContext {
		let _localctx: CreateplangstmtContext = new CreateplangstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, PostgreSQLParser.RULE_createplangstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3512;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 3514;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_OR) {
				{
				this.state = 3513;
				this.opt_or_replace();
				}
			}

			this.state = 3517;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_TRUSTED) {
				{
				this.state = 3516;
				this.opt_trusted();
				}
			}

			this.state = 3520;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_PROCEDURAL) {
				{
				this.state = 3519;
				this.opt_procedural();
				}
			}

			this.state = 3522;
			this.match(PostgreSQLParser.KW_LANGUAGE);
			this.state = 3523;
			this.name();
			this.state = 3532;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_HANDLER) {
				{
				this.state = 3524;
				this.match(PostgreSQLParser.KW_HANDLER);
				this.state = 3525;
				this.handler_name();
				this.state = 3527;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_INLINE) {
					{
					this.state = 3526;
					this.opt_inline_handler();
					}
				}

				this.state = 3530;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NO || _la === PostgreSQLParser.KW_VALIDATOR) {
					{
					this.state = 3529;
					this.opt_validator();
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_trusted(): Opt_trustedContext {
		let _localctx: Opt_trustedContext = new Opt_trustedContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, PostgreSQLParser.RULE_opt_trusted);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3534;
			this.match(PostgreSQLParser.KW_TRUSTED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public handler_name(): Handler_nameContext {
		let _localctx: Handler_nameContext = new Handler_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, PostgreSQLParser.RULE_handler_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3536;
			this.name();
			this.state = 3538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.DOT) {
				{
				this.state = 3537;
				this.attrs();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_inline_handler(): Opt_inline_handlerContext {
		let _localctx: Opt_inline_handlerContext = new Opt_inline_handlerContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, PostgreSQLParser.RULE_opt_inline_handler);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3540;
			this.match(PostgreSQLParser.KW_INLINE);
			this.state = 3541;
			this.handler_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public validator_clause(): Validator_clauseContext {
		let _localctx: Validator_clauseContext = new Validator_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, PostgreSQLParser.RULE_validator_clause);
		try {
			this.state = 3547;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_VALIDATOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3543;
				this.match(PostgreSQLParser.KW_VALIDATOR);
				this.state = 3544;
				this.handler_name();
				}
				break;
			case PostgreSQLParser.KW_NO:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3545;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 3546;
				this.match(PostgreSQLParser.KW_VALIDATOR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_validator(): Opt_validatorContext {
		let _localctx: Opt_validatorContext = new Opt_validatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, PostgreSQLParser.RULE_opt_validator);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3549;
			this.validator_clause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_procedural(): Opt_proceduralContext {
		let _localctx: Opt_proceduralContext = new Opt_proceduralContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, PostgreSQLParser.RULE_opt_procedural);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3551;
			this.match(PostgreSQLParser.KW_PROCEDURAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createtablespacestmt(): CreatetablespacestmtContext {
		let _localctx: CreatetablespacestmtContext = new CreatetablespacestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, PostgreSQLParser.RULE_createtablespacestmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3553;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 3554;
			this.match(PostgreSQLParser.KW_TABLESPACE);
			this.state = 3555;
			this.name();
			this.state = 3557;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_OWNER) {
				{
				this.state = 3556;
				this.opttablespaceowner();
				}
			}

			this.state = 3559;
			this.match(PostgreSQLParser.KW_LOCATION);
			this.state = 3560;
			this.sconst();
			this.state = 3562;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 253, this._ctx) ) {
			case 1:
				{
				this.state = 3561;
				this.opt_reloptions();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opttablespaceowner(): OpttablespaceownerContext {
		let _localctx: OpttablespaceownerContext = new OpttablespaceownerContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, PostgreSQLParser.RULE_opttablespaceowner);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3564;
			this.match(PostgreSQLParser.KW_OWNER);
			this.state = 3565;
			this.rolespec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public droptablespacestmt(): DroptablespacestmtContext {
		let _localctx: DroptablespacestmtContext = new DroptablespacestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, PostgreSQLParser.RULE_droptablespacestmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3567;
			this.match(PostgreSQLParser.KW_DROP);
			this.state = 3568;
			this.match(PostgreSQLParser.KW_TABLESPACE);
			this.state = 3571;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 254, this._ctx) ) {
			case 1:
				{
				this.state = 3569;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3570;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 3573;
			this.name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createextensionstmt(): CreateextensionstmtContext {
		let _localctx: CreateextensionstmtContext = new CreateextensionstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, PostgreSQLParser.RULE_createextensionstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3575;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 3576;
			this.match(PostgreSQLParser.KW_EXTENSION);
			this.state = 3580;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 255, this._ctx) ) {
			case 1:
				{
				this.state = 3577;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3578;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 3579;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 3582;
			this.name();
			this.state = 3584;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 256, this._ctx) ) {
			case 1:
				{
				this.state = 3583;
				this.opt_with();
				}
				break;
			}
			this.state = 3586;
			this.create_extension_opt_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_extension_opt_list(): Create_extension_opt_listContext {
		let _localctx: Create_extension_opt_listContext = new Create_extension_opt_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, PostgreSQLParser.RULE_create_extension_opt_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3591;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_SCHEMA || _la === PostgreSQLParser.KW_VERSION) {
				{
				{
				this.state = 3588;
				this.create_extension_opt_item();
				}
				}
				this.state = 3593;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_extension_opt_item(): Create_extension_opt_itemContext {
		let _localctx: Create_extension_opt_itemContext = new Create_extension_opt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, PostgreSQLParser.RULE_create_extension_opt_item);
		try {
			this.state = 3601;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_SCHEMA:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3594;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 3595;
				this.name();
				}
				break;
			case PostgreSQLParser.KW_VERSION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3596;
				this.match(PostgreSQLParser.KW_VERSION);
				this.state = 3597;
				this.nonreservedword_or_sconst();
				}
				break;
			case PostgreSQLParser.KW_FROM:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3598;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 3599;
				this.nonreservedword_or_sconst();
				}
				break;
			case PostgreSQLParser.KW_CASCADE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3600;
				this.match(PostgreSQLParser.KW_CASCADE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterextensionstmt(): AlterextensionstmtContext {
		let _localctx: AlterextensionstmtContext = new AlterextensionstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, PostgreSQLParser.RULE_alterextensionstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3603;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 3604;
			this.match(PostgreSQLParser.KW_EXTENSION);
			this.state = 3605;
			this.name();
			this.state = 3606;
			this.match(PostgreSQLParser.KW_UPDATE);
			this.state = 3607;
			this.alter_extension_opt_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_extension_opt_list(): Alter_extension_opt_listContext {
		let _localctx: Alter_extension_opt_listContext = new Alter_extension_opt_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, PostgreSQLParser.RULE_alter_extension_opt_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3612;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.KW_TO) {
				{
				{
				this.state = 3609;
				this.alter_extension_opt_item();
				}
				}
				this.state = 3614;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_extension_opt_item(): Alter_extension_opt_itemContext {
		let _localctx: Alter_extension_opt_itemContext = new Alter_extension_opt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, PostgreSQLParser.RULE_alter_extension_opt_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3615;
			this.match(PostgreSQLParser.KW_TO);
			this.state = 3616;
			this.nonreservedword_or_sconst();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterextensioncontentsstmt(): AlterextensioncontentsstmtContext {
		let _localctx: AlterextensioncontentsstmtContext = new AlterextensioncontentsstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, PostgreSQLParser.RULE_alterextensioncontentsstmt);
		try {
			this.state = 3722;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 260, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3618;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3619;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3620;
				this.name();
				this.state = 3621;
				this.add_drop();
				this.state = 3622;
				this.object_type_name();
				this.state = 3623;
				this.name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3625;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3626;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3627;
				this.name();
				this.state = 3628;
				this.add_drop();
				this.state = 3629;
				this.object_type_any_name();
				this.state = 3630;
				this.any_name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3632;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3633;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3634;
				this.name();
				this.state = 3635;
				this.add_drop();
				this.state = 3636;
				this.match(PostgreSQLParser.KW_AGGREGATE);
				this.state = 3637;
				this.aggregate_with_argtypes();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3639;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3640;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3641;
				this.name();
				this.state = 3642;
				this.add_drop();
				this.state = 3643;
				this.match(PostgreSQLParser.KW_CAST);
				this.state = 3644;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 3645;
				this.typename();
				this.state = 3646;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 3647;
				this.typename();
				this.state = 3648;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 3650;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3651;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3652;
				this.name();
				this.state = 3653;
				this.add_drop();
				this.state = 3654;
				this.match(PostgreSQLParser.KW_DOMAIN);
				this.state = 3655;
				this.typename();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 3657;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3658;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3659;
				this.name();
				this.state = 3660;
				this.add_drop();
				this.state = 3661;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 3662;
				this.function_with_argtypes();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 3664;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3665;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3666;
				this.name();
				this.state = 3667;
				this.add_drop();
				this.state = 3668;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 3669;
				this.operator_with_argtypes();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 3671;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3672;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3673;
				this.name();
				this.state = 3674;
				this.add_drop();
				this.state = 3675;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 3676;
				this.match(PostgreSQLParser.KW_CLASS);
				this.state = 3677;
				this.any_name();
				this.state = 3678;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 3679;
				this.name();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 3681;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3682;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3683;
				this.name();
				this.state = 3684;
				this.add_drop();
				this.state = 3685;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 3686;
				this.match(PostgreSQLParser.KW_FAMILY);
				this.state = 3687;
				this.any_name();
				this.state = 3688;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 3689;
				this.name();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 3691;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3692;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3693;
				this.name();
				this.state = 3694;
				this.add_drop();
				this.state = 3695;
				this.match(PostgreSQLParser.KW_PROCEDURE);
				this.state = 3696;
				this.function_with_argtypes();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 3698;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3699;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3700;
				this.name();
				this.state = 3701;
				this.add_drop();
				this.state = 3702;
				this.match(PostgreSQLParser.KW_ROUTINE);
				this.state = 3703;
				this.function_with_argtypes();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 3705;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3706;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3707;
				this.name();
				this.state = 3708;
				this.add_drop();
				this.state = 3709;
				this.match(PostgreSQLParser.KW_TRANSFORM);
				this.state = 3710;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 3711;
				this.typename();
				this.state = 3712;
				this.match(PostgreSQLParser.KW_LANGUAGE);
				this.state = 3713;
				this.name();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 3715;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3716;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 3717;
				this.name();
				this.state = 3718;
				this.add_drop();
				this.state = 3719;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 3720;
				this.typename();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createfdwstmt(): CreatefdwstmtContext {
		let _localctx: CreatefdwstmtContext = new CreatefdwstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, PostgreSQLParser.RULE_createfdwstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3724;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 3725;
			this.match(PostgreSQLParser.KW_FOREIGN);
			this.state = 3726;
			this.match(PostgreSQLParser.KW_DATA);
			this.state = 3727;
			this.match(PostgreSQLParser.KW_WRAPPER);
			this.state = 3728;
			this.name();
			this.state = 3730;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_HANDLER || _la === PostgreSQLParser.KW_NO || _la === PostgreSQLParser.KW_VALIDATOR) {
				{
				this.state = 3729;
				this.opt_fdw_options();
				}
			}

			this.state = 3733;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_OPTIONS) {
				{
				this.state = 3732;
				this.create_generic_options();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fdw_option(): Fdw_optionContext {
		let _localctx: Fdw_optionContext = new Fdw_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, PostgreSQLParser.RULE_fdw_option);
		try {
			this.state = 3743;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 263, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3735;
				this.match(PostgreSQLParser.KW_HANDLER);
				this.state = 3736;
				this.handler_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3737;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 3738;
				this.match(PostgreSQLParser.KW_HANDLER);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3739;
				this.match(PostgreSQLParser.KW_VALIDATOR);
				this.state = 3740;
				this.handler_name();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3741;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 3742;
				this.match(PostgreSQLParser.KW_VALIDATOR);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fdw_options(): Fdw_optionsContext {
		let _localctx: Fdw_optionsContext = new Fdw_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, PostgreSQLParser.RULE_fdw_options);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3746;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 3745;
				this.fdw_option();
				}
				}
				this.state = 3748;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PostgreSQLParser.KW_HANDLER || _la === PostgreSQLParser.KW_NO || _la === PostgreSQLParser.KW_VALIDATOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_fdw_options(): Opt_fdw_optionsContext {
		let _localctx: Opt_fdw_optionsContext = new Opt_fdw_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, PostgreSQLParser.RULE_opt_fdw_options);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3750;
			this.fdw_options();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterfdwstmt(): AlterfdwstmtContext {
		let _localctx: AlterfdwstmtContext = new AlterfdwstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, PostgreSQLParser.RULE_alterfdwstmt);
		let _la: number;
		try {
			this.state = 3769;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 266, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3752;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3753;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 3754;
				this.match(PostgreSQLParser.KW_DATA);
				this.state = 3755;
				this.match(PostgreSQLParser.KW_WRAPPER);
				this.state = 3756;
				this.name();
				this.state = 3758;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_HANDLER || _la === PostgreSQLParser.KW_NO || _la === PostgreSQLParser.KW_VALIDATOR) {
					{
					this.state = 3757;
					this.opt_fdw_options();
					}
				}

				this.state = 3760;
				this.alter_generic_options();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3762;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 3763;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 3764;
				this.match(PostgreSQLParser.KW_DATA);
				this.state = 3765;
				this.match(PostgreSQLParser.KW_WRAPPER);
				this.state = 3766;
				this.name();
				this.state = 3767;
				this.fdw_options();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public create_generic_options(): Create_generic_optionsContext {
		let _localctx: Create_generic_optionsContext = new Create_generic_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, PostgreSQLParser.RULE_create_generic_options);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3771;
			this.match(PostgreSQLParser.KW_OPTIONS);
			this.state = 3772;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 3773;
			this.generic_option_list();
			this.state = 3774;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generic_option_list(): Generic_option_listContext {
		let _localctx: Generic_option_listContext = new Generic_option_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, PostgreSQLParser.RULE_generic_option_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3776;
			this.generic_option_elem();
			this.state = 3781;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 3777;
				this.match(PostgreSQLParser.COMMA);
				this.state = 3778;
				this.generic_option_elem();
				}
				}
				this.state = 3783;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_generic_options(): Alter_generic_optionsContext {
		let _localctx: Alter_generic_optionsContext = new Alter_generic_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, PostgreSQLParser.RULE_alter_generic_options);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3784;
			this.match(PostgreSQLParser.KW_OPTIONS);
			this.state = 3785;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 3786;
			this.alter_generic_option_list();
			this.state = 3787;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_generic_option_list(): Alter_generic_option_listContext {
		let _localctx: Alter_generic_option_listContext = new Alter_generic_option_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, PostgreSQLParser.RULE_alter_generic_option_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3789;
			this.alter_generic_option_elem();
			this.state = 3794;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 3790;
				this.match(PostgreSQLParser.COMMA);
				this.state = 3791;
				this.alter_generic_option_elem();
				}
				}
				this.state = 3796;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alter_generic_option_elem(): Alter_generic_option_elemContext {
		let _localctx: Alter_generic_option_elemContext = new Alter_generic_option_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, PostgreSQLParser.RULE_alter_generic_option_elem);
		try {
			this.state = 3804;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 269, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3797;
				this.generic_option_elem();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3798;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 3799;
				this.generic_option_elem();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3800;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 3801;
				this.generic_option_elem();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3802;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 3803;
				this.generic_option_elem();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generic_option_elem(): Generic_option_elemContext {
		let _localctx: Generic_option_elemContext = new Generic_option_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, PostgreSQLParser.RULE_generic_option_elem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3806;
			this.generic_option_name();
			this.state = 3807;
			this.generic_option_arg();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generic_option_name(): Generic_option_nameContext {
		let _localctx: Generic_option_nameContext = new Generic_option_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, PostgreSQLParser.RULE_generic_option_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3809;
			this.collabel();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generic_option_arg(): Generic_option_argContext {
		let _localctx: Generic_option_argContext = new Generic_option_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, PostgreSQLParser.RULE_generic_option_arg);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3811;
			this.sconst();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createforeignserverstmt(): CreateforeignserverstmtContext {
		let _localctx: CreateforeignserverstmtContext = new CreateforeignserverstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, PostgreSQLParser.RULE_createforeignserverstmt);
		let _la: number;
		try {
			this.state = 3848;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 276, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3813;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 3814;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 3815;
				this.name();
				this.state = 3817;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TYPE) {
					{
					this.state = 3816;
					this.opt_type();
					}
				}

				this.state = 3820;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_VERSION) {
					{
					this.state = 3819;
					this.opt_foreign_server_version();
					}
				}

				this.state = 3822;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 3823;
				this.match(PostgreSQLParser.KW_DATA);
				this.state = 3824;
				this.match(PostgreSQLParser.KW_WRAPPER);
				this.state = 3825;
				this.name();
				this.state = 3827;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OPTIONS) {
					{
					this.state = 3826;
					this.create_generic_options();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3829;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 3830;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 3831;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3832;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 3833;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 3834;
				this.name();
				this.state = 3836;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TYPE) {
					{
					this.state = 3835;
					this.opt_type();
					}
				}

				this.state = 3839;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_VERSION) {
					{
					this.state = 3838;
					this.opt_foreign_server_version();
					}
				}

				this.state = 3841;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 3842;
				this.match(PostgreSQLParser.KW_DATA);
				this.state = 3843;
				this.match(PostgreSQLParser.KW_WRAPPER);
				this.state = 3844;
				this.name();
				this.state = 3846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OPTIONS) {
					{
					this.state = 3845;
					this.create_generic_options();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_type(): Opt_typeContext {
		let _localctx: Opt_typeContext = new Opt_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, PostgreSQLParser.RULE_opt_type);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3850;
			this.match(PostgreSQLParser.KW_TYPE);
			this.state = 3851;
			this.sconst();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public foreign_server_version(): Foreign_server_versionContext {
		let _localctx: Foreign_server_versionContext = new Foreign_server_versionContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, PostgreSQLParser.RULE_foreign_server_version);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3853;
			this.match(PostgreSQLParser.KW_VERSION);
			this.state = 3856;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.EscapeStringConstant:
				{
				this.state = 3854;
				this.sconst();
				}
				break;
			case PostgreSQLParser.KW_NULL:
				{
				this.state = 3855;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_foreign_server_version(): Opt_foreign_server_versionContext {
		let _localctx: Opt_foreign_server_versionContext = new Opt_foreign_server_versionContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, PostgreSQLParser.RULE_opt_foreign_server_version);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3858;
			this.foreign_server_version();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterforeignserverstmt(): AlterforeignserverstmtContext {
		let _localctx: AlterforeignserverstmtContext = new AlterforeignserverstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, PostgreSQLParser.RULE_alterforeignserverstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3860;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 3861;
			this.match(PostgreSQLParser.KW_SERVER);
			this.state = 3862;
			this.name();
			this.state = 3868;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_OPTIONS:
				{
				this.state = 3863;
				this.alter_generic_options();
				}
				break;
			case PostgreSQLParser.KW_VERSION:
				{
				this.state = 3864;
				this.foreign_server_version();
				this.state = 3866;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OPTIONS) {
					{
					this.state = 3865;
					this.alter_generic_options();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createforeigntablestmt(): CreateforeigntablestmtContext {
		let _localctx: CreateforeigntablestmtContext = new CreateforeigntablestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, PostgreSQLParser.RULE_createforeigntablestmt);
		let _la: number;
		try {
			this.state = 3942;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 290, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3870;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 3871;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 3872;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 3873;
				this.qualified_name();
				this.state = 3874;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 3876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_CHECK - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)) | (1 << (PostgreSQLParser.KW_FOREIGN - 33)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (PostgreSQLParser.KW_PRIMARY - 85)) | (1 << (PostgreSQLParser.KW_TABLE - 85)) | (1 << (PostgreSQLParser.KW_UNIQUE - 85)) | (1 << (PostgreSQLParser.KW_IS - 85)))) !== 0) || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & ((1 << (PostgreSQLParser.KW_LIKE - 120)) | (1 << (PostgreSQLParser.KW_OUTER - 120)) | (1 << (PostgreSQLParser.KW_OVER - 120)) | (1 << (PostgreSQLParser.KW_ABORT - 120)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 120)) | (1 << (PostgreSQLParser.KW_ACCESS - 120)) | (1 << (PostgreSQLParser.KW_ACTION - 120)) | (1 << (PostgreSQLParser.KW_ADD - 120)) | (1 << (PostgreSQLParser.KW_ADMIN - 120)) | (1 << (PostgreSQLParser.KW_AFTER - 120)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 120)) | (1 << (PostgreSQLParser.KW_ALSO - 120)) | (1 << (PostgreSQLParser.KW_ALTER - 120)) | (1 << (PostgreSQLParser.KW_ALWAYS - 120)) | (1 << (PostgreSQLParser.KW_ASSERTION - 120)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 120)) | (1 << (PostgreSQLParser.KW_AT - 120)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 120)) | (1 << (PostgreSQLParser.KW_BACKWARD - 120)) | (1 << (PostgreSQLParser.KW_BEFORE - 120)) | (1 << (PostgreSQLParser.KW_BEGIN - 120)) | (1 << (PostgreSQLParser.KW_BY - 120)) | (1 << (PostgreSQLParser.KW_CACHE - 120)) | (1 << (PostgreSQLParser.KW_CALLED - 120)) | (1 << (PostgreSQLParser.KW_CASCADE - 120)) | (1 << (PostgreSQLParser.KW_CASCADED - 120)))) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & ((1 << (PostgreSQLParser.KW_CATALOG - 152)) | (1 << (PostgreSQLParser.KW_CHAIN - 152)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 152)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 152)) | (1 << (PostgreSQLParser.KW_CLASS - 152)) | (1 << (PostgreSQLParser.KW_CLOSE - 152)) | (1 << (PostgreSQLParser.KW_CLUSTER - 152)) | (1 << (PostgreSQLParser.KW_COMMENT - 152)) | (1 << (PostgreSQLParser.KW_COMMENTS - 152)) | (1 << (PostgreSQLParser.KW_COMMIT - 152)) | (1 << (PostgreSQLParser.KW_COMMITTED - 152)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 152)) | (1 << (PostgreSQLParser.KW_CONNECTION - 152)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 152)) | (1 << (PostgreSQLParser.KW_CONTENT - 152)) | (1 << (PostgreSQLParser.KW_CONTINUE - 152)) | (1 << (PostgreSQLParser.KW_CONVERSION - 152)) | (1 << (PostgreSQLParser.KW_COPY - 152)) | (1 << (PostgreSQLParser.KW_COST - 152)) | (1 << (PostgreSQLParser.KW_CSV - 152)) | (1 << (PostgreSQLParser.KW_CURSOR - 152)) | (1 << (PostgreSQLParser.KW_CYCLE - 152)) | (1 << (PostgreSQLParser.KW_DATA - 152)) | (1 << (PostgreSQLParser.KW_DATABASE - 152)) | (1 << (PostgreSQLParser.KW_DAY - 152)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 152)) | (1 << (PostgreSQLParser.KW_DECLARE - 152)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 152)) | (1 << (PostgreSQLParser.KW_DEFERRED - 152)) | (1 << (PostgreSQLParser.KW_DEFINER - 152)) | (1 << (PostgreSQLParser.KW_DELETE - 152)) | (1 << (PostgreSQLParser.KW_DELIMITER - 152)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (PostgreSQLParser.KW_DELIMITERS - 184)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 184)) | (1 << (PostgreSQLParser.KW_DISABLE - 184)) | (1 << (PostgreSQLParser.KW_DISCARD - 184)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 184)) | (1 << (PostgreSQLParser.KW_DOMAIN - 184)) | (1 << (PostgreSQLParser.KW_DOUBLE - 184)) | (1 << (PostgreSQLParser.KW_DROP - 184)) | (1 << (PostgreSQLParser.KW_EACH - 184)) | (1 << (PostgreSQLParser.KW_ENABLE - 184)) | (1 << (PostgreSQLParser.KW_ENCODING - 184)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 184)) | (1 << (PostgreSQLParser.KW_ENUM - 184)) | (1 << (PostgreSQLParser.KW_ESCAPE - 184)) | (1 << (PostgreSQLParser.KW_EVENT - 184)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 184)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 184)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 184)) | (1 << (PostgreSQLParser.KW_EXECUTE - 184)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 184)) | (1 << (PostgreSQLParser.KW_EXTENSION - 184)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 184)) | (1 << (PostgreSQLParser.KW_FAMILY - 184)) | (1 << (PostgreSQLParser.KW_FIRST - 184)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 184)) | (1 << (PostgreSQLParser.KW_FORCE - 184)) | (1 << (PostgreSQLParser.KW_FORWARD - 184)) | (1 << (PostgreSQLParser.KW_FUNCTION - 184)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 184)) | (1 << (PostgreSQLParser.KW_GLOBAL - 184)) | (1 << (PostgreSQLParser.KW_GRANTED - 184)) | (1 << (PostgreSQLParser.KW_HANDLER - 184)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (PostgreSQLParser.KW_HEADER - 216)) | (1 << (PostgreSQLParser.KW_HOLD - 216)) | (1 << (PostgreSQLParser.KW_HOUR - 216)) | (1 << (PostgreSQLParser.KW_IDENTITY - 216)) | (1 << (PostgreSQLParser.KW_IF - 216)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 216)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 216)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 216)) | (1 << (PostgreSQLParser.KW_INCLUDING - 216)) | (1 << (PostgreSQLParser.KW_INCREMENT - 216)) | (1 << (PostgreSQLParser.KW_INDEX - 216)) | (1 << (PostgreSQLParser.KW_INDEXES - 216)) | (1 << (PostgreSQLParser.KW_INHERIT - 216)) | (1 << (PostgreSQLParser.KW_INHERITS - 216)) | (1 << (PostgreSQLParser.KW_INLINE - 216)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 216)) | (1 << (PostgreSQLParser.KW_INSERT - 216)) | (1 << (PostgreSQLParser.KW_INSTEAD - 216)) | (1 << (PostgreSQLParser.KW_INVOKER - 216)) | (1 << (PostgreSQLParser.KW_ISOLATION - 216)) | (1 << (PostgreSQLParser.KW_KEY - 216)) | (1 << (PostgreSQLParser.KW_LABEL - 216)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (PostgreSQLParser.KW_LARGE - 248)) | (1 << (PostgreSQLParser.KW_LAST - 248)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 248)) | (1 << (PostgreSQLParser.KW_LEVEL - 248)) | (1 << (PostgreSQLParser.KW_LISTEN - 248)) | (1 << (PostgreSQLParser.KW_LOAD - 248)) | (1 << (PostgreSQLParser.KW_LOCAL - 248)) | (1 << (PostgreSQLParser.KW_LOCATION - 248)) | (1 << (PostgreSQLParser.KW_LOCK - 248)) | (1 << (PostgreSQLParser.KW_MAPPING - 248)) | (1 << (PostgreSQLParser.KW_MATCH - 248)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 248)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 248)) | (1 << (PostgreSQLParser.KW_MINUTE - 248)) | (1 << (PostgreSQLParser.KW_MINVALUE - 248)) | (1 << (PostgreSQLParser.KW_MODE - 248)) | (1 << (PostgreSQLParser.KW_MONTH - 248)) | (1 << (PostgreSQLParser.KW_MOVE - 248)) | (1 << (PostgreSQLParser.KW_NAME - 248)) | (1 << (PostgreSQLParser.KW_NAMES - 248)) | (1 << (PostgreSQLParser.KW_NEXT - 248)) | (1 << (PostgreSQLParser.KW_NO - 248)) | (1 << (PostgreSQLParser.KW_NOTHING - 248)) | (1 << (PostgreSQLParser.KW_NOTIFY - 248)) | (1 << (PostgreSQLParser.KW_NOWAIT - 248)) | (1 << (PostgreSQLParser.KW_NULLS - 248)) | (1 << (PostgreSQLParser.KW_OBJECT - 248)) | (1 << (PostgreSQLParser.KW_OF - 248)) | (1 << (PostgreSQLParser.KW_OFF - 248)) | (1 << (PostgreSQLParser.KW_OIDS - 248)) | (1 << (PostgreSQLParser.KW_OPERATOR - 248)) | (1 << (PostgreSQLParser.KW_OPTION - 248)))) !== 0) || ((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & ((1 << (PostgreSQLParser.KW_OPTIONS - 280)) | (1 << (PostgreSQLParser.KW_OWNED - 280)) | (1 << (PostgreSQLParser.KW_OWNER - 280)) | (1 << (PostgreSQLParser.KW_PARSER - 280)) | (1 << (PostgreSQLParser.KW_PARTIAL - 280)) | (1 << (PostgreSQLParser.KW_PARTITION - 280)) | (1 << (PostgreSQLParser.KW_PASSING - 280)) | (1 << (PostgreSQLParser.KW_PASSWORD - 280)) | (1 << (PostgreSQLParser.KW_PLANS - 280)) | (1 << (PostgreSQLParser.KW_PRECEDING - 280)) | (1 << (PostgreSQLParser.KW_PREPARE - 280)) | (1 << (PostgreSQLParser.KW_PREPARED - 280)) | (1 << (PostgreSQLParser.KW_PRESERVE - 280)) | (1 << (PostgreSQLParser.KW_PRIOR - 280)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 280)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 280)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 280)) | (1 << (PostgreSQLParser.KW_PROGRAM - 280)) | (1 << (PostgreSQLParser.KW_QUOTE - 280)) | (1 << (PostgreSQLParser.KW_RANGE - 280)) | (1 << (PostgreSQLParser.KW_READ - 280)) | (1 << (PostgreSQLParser.KW_REASSIGN - 280)) | (1 << (PostgreSQLParser.KW_RECHECK - 280)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 280)) | (1 << (PostgreSQLParser.KW_REF - 280)) | (1 << (PostgreSQLParser.KW_REFRESH - 280)) | (1 << (PostgreSQLParser.KW_REINDEX - 280)) | (1 << (PostgreSQLParser.KW_RELATIVE - 280)) | (1 << (PostgreSQLParser.KW_RELEASE - 280)) | (1 << (PostgreSQLParser.KW_RENAME - 280)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 280)) | (1 << (PostgreSQLParser.KW_REPLACE - 280)))) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & ((1 << (PostgreSQLParser.KW_REPLICA - 312)) | (1 << (PostgreSQLParser.KW_RESET - 312)) | (1 << (PostgreSQLParser.KW_RESTART - 312)) | (1 << (PostgreSQLParser.KW_RESTRICT - 312)) | (1 << (PostgreSQLParser.KW_RETURNS - 312)) | (1 << (PostgreSQLParser.KW_REVOKE - 312)) | (1 << (PostgreSQLParser.KW_ROLE - 312)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 312)) | (1 << (PostgreSQLParser.KW_ROWS - 312)) | (1 << (PostgreSQLParser.KW_RULE - 312)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 312)) | (1 << (PostgreSQLParser.KW_SCHEMA - 312)) | (1 << (PostgreSQLParser.KW_SCROLL - 312)) | (1 << (PostgreSQLParser.KW_SEARCH - 312)) | (1 << (PostgreSQLParser.KW_SECOND - 312)) | (1 << (PostgreSQLParser.KW_SECURITY - 312)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 312)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 312)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 312)) | (1 << (PostgreSQLParser.KW_SERVER - 312)) | (1 << (PostgreSQLParser.KW_SESSION - 312)) | (1 << (PostgreSQLParser.KW_SET - 312)) | (1 << (PostgreSQLParser.KW_SHARE - 312)) | (1 << (PostgreSQLParser.KW_SHOW - 312)) | (1 << (PostgreSQLParser.KW_SIMPLE - 312)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 312)) | (1 << (PostgreSQLParser.KW_STABLE - 312)) | (1 << (PostgreSQLParser.KW_STANDALONE - 312)) | (1 << (PostgreSQLParser.KW_START - 312)) | (1 << (PostgreSQLParser.KW_STATEMENT - 312)) | (1 << (PostgreSQLParser.KW_STATISTICS - 312)) | (1 << (PostgreSQLParser.KW_STDIN - 312)))) !== 0) || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & ((1 << (PostgreSQLParser.KW_STDOUT - 344)) | (1 << (PostgreSQLParser.KW_STORAGE - 344)) | (1 << (PostgreSQLParser.KW_STRICT - 344)) | (1 << (PostgreSQLParser.KW_STRIP - 344)) | (1 << (PostgreSQLParser.KW_SYSID - 344)) | (1 << (PostgreSQLParser.KW_SYSTEM - 344)) | (1 << (PostgreSQLParser.KW_TABLES - 344)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 344)) | (1 << (PostgreSQLParser.KW_TEMP - 344)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 344)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 344)) | (1 << (PostgreSQLParser.KW_TEXT - 344)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 344)) | (1 << (PostgreSQLParser.KW_TRIGGER - 344)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 344)) | (1 << (PostgreSQLParser.KW_TRUSTED - 344)) | (1 << (PostgreSQLParser.KW_TYPE - 344)) | (1 << (PostgreSQLParser.KW_TYPES - 344)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 344)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 344)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 344)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 344)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 344)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 344)) | (1 << (PostgreSQLParser.KW_UNTIL - 344)) | (1 << (PostgreSQLParser.KW_UPDATE - 344)) | (1 << (PostgreSQLParser.KW_VACUUM - 344)) | (1 << (PostgreSQLParser.KW_VALID - 344)) | (1 << (PostgreSQLParser.KW_VALIDATE - 344)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 344)) | (1 << (PostgreSQLParser.KW_VARYING - 344)) | (1 << (PostgreSQLParser.KW_VERSION - 344)))) !== 0) || ((((_la - 376)) & ~0x1F) === 0 && ((1 << (_la - 376)) & ((1 << (PostgreSQLParser.KW_VIEW - 376)) | (1 << (PostgreSQLParser.KW_VOLATILE - 376)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 376)) | (1 << (PostgreSQLParser.KW_WITHOUT - 376)) | (1 << (PostgreSQLParser.KW_WORK - 376)) | (1 << (PostgreSQLParser.KW_WRAPPER - 376)) | (1 << (PostgreSQLParser.KW_WRITE - 376)) | (1 << (PostgreSQLParser.KW_XML - 376)) | (1 << (PostgreSQLParser.KW_YEAR - 376)) | (1 << (PostgreSQLParser.KW_YES - 376)) | (1 << (PostgreSQLParser.KW_ZONE - 376)) | (1 << (PostgreSQLParser.KW_BETWEEN - 376)) | (1 << (PostgreSQLParser.KW_BIGINT - 376)) | (1 << (PostgreSQLParser.KW_BIT - 376)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 376)) | (1 << (PostgreSQLParser.KW_CHAR - 376)) | (1 << (PostgreSQLParser.KW_CHARACTER - 376)) | (1 << (PostgreSQLParser.KW_COALESCE - 376)) | (1 << (PostgreSQLParser.KW_DEC - 376)) | (1 << (PostgreSQLParser.KW_DECIMAL - 376)) | (1 << (PostgreSQLParser.KW_EXISTS - 376)) | (1 << (PostgreSQLParser.KW_EXTRACT - 376)) | (1 << (PostgreSQLParser.KW_FLOAT - 376)) | (1 << (PostgreSQLParser.KW_GREATEST - 376)) | (1 << (PostgreSQLParser.KW_INOUT - 376)) | (1 << (PostgreSQLParser.KW_INT - 376)) | (1 << (PostgreSQLParser.KW_INTEGER - 376)) | (1 << (PostgreSQLParser.KW_INTERVAL - 376)) | (1 << (PostgreSQLParser.KW_LEAST - 376)) | (1 << (PostgreSQLParser.KW_NATIONAL - 376)) | (1 << (PostgreSQLParser.KW_NCHAR - 376)) | (1 << (PostgreSQLParser.KW_NONE - 376)))) !== 0) || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & ((1 << (PostgreSQLParser.KW_NULLIF - 408)) | (1 << (PostgreSQLParser.KW_NUMERIC - 408)) | (1 << (PostgreSQLParser.KW_OVERLAY - 408)) | (1 << (PostgreSQLParser.KW_POSITION - 408)) | (1 << (PostgreSQLParser.KW_PRECISION - 408)) | (1 << (PostgreSQLParser.KW_REAL - 408)) | (1 << (PostgreSQLParser.KW_ROW - 408)) | (1 << (PostgreSQLParser.KW_SETOF - 408)) | (1 << (PostgreSQLParser.KW_SMALLINT - 408)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 408)) | (1 << (PostgreSQLParser.KW_TIME - 408)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 408)) | (1 << (PostgreSQLParser.KW_TREAT - 408)) | (1 << (PostgreSQLParser.KW_TRIM - 408)) | (1 << (PostgreSQLParser.KW_VALUES - 408)) | (1 << (PostgreSQLParser.KW_VARCHAR - 408)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 408)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 408)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 408)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 408)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 408)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 408)) | (1 << (PostgreSQLParser.KW_XMLPI - 408)) | (1 << (PostgreSQLParser.KW_XMLROOT - 408)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 408)) | (1 << (PostgreSQLParser.KW_CALL - 408)) | (1 << (PostgreSQLParser.KW_CURRENT - 408)) | (1 << (PostgreSQLParser.KW_ATTACH - 408)) | (1 << (PostgreSQLParser.KW_DETACH - 408)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 408)) | (1 << (PostgreSQLParser.KW_GENERATED - 408)) | (1 << (PostgreSQLParser.KW_LOGGED - 408)))) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & ((1 << (PostgreSQLParser.KW_STORED - 440)) | (1 << (PostgreSQLParser.KW_INCLUDE - 440)) | (1 << (PostgreSQLParser.KW_ROUTINE - 440)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 440)) | (1 << (PostgreSQLParser.KW_IMPORT - 440)) | (1 << (PostgreSQLParser.KW_POLICY - 440)) | (1 << (PostgreSQLParser.KW_METHOD - 440)) | (1 << (PostgreSQLParser.KW_REFERENCING - 440)) | (1 << (PostgreSQLParser.KW_NEW - 440)) | (1 << (PostgreSQLParser.KW_OLD - 440)) | (1 << (PostgreSQLParser.KW_VALUE - 440)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 440)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 440)) | (1 << (PostgreSQLParser.KW_OUT - 440)) | (1 << (PostgreSQLParser.KW_ROUTINES - 440)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 440)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 440)) | (1 << (PostgreSQLParser.KW_INPUT - 440)) | (1 << (PostgreSQLParser.KW_SUPPORT - 440)) | (1 << (PostgreSQLParser.KW_PARALLEL - 440)) | (1 << (PostgreSQLParser.KW_SQL - 440)) | (1 << (PostgreSQLParser.KW_DEPENDS - 440)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 440)) | (1 << (PostgreSQLParser.KW_CONFLICT - 440)) | (1 << (PostgreSQLParser.KW_SKIP - 440)) | (1 << (PostgreSQLParser.KW_LOCKED - 440)) | (1 << (PostgreSQLParser.KW_TIES - 440)) | (1 << (PostgreSQLParser.KW_ROLLUP - 440)) | (1 << (PostgreSQLParser.KW_CUBE - 440)) | (1 << (PostgreSQLParser.KW_GROUPING - 440)) | (1 << (PostgreSQLParser.KW_SETS - 440)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (PostgreSQLParser.KW_ORDINALITY - 473)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 473)) | (1 << (PostgreSQLParser.KW_COLUMNS - 473)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 473)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 473)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 473)) | (1 << (PostgreSQLParser.KW_WITHIN - 473)) | (1 << (PostgreSQLParser.KW_FILTER - 473)) | (1 << (PostgreSQLParser.KW_GROUPS - 473)) | (1 << (PostgreSQLParser.KW_OTHERS - 473)) | (1 << (PostgreSQLParser.KW_NFC - 473)) | (1 << (PostgreSQLParser.KW_NFD - 473)) | (1 << (PostgreSQLParser.KW_NFKC - 473)) | (1 << (PostgreSQLParser.KW_NFKD - 473)) | (1 << (PostgreSQLParser.KW_UESCAPE - 473)) | (1 << (PostgreSQLParser.KW_VIEWS - 473)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 473)) | (1 << (PostgreSQLParser.KW_DUMP - 473)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 473)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 473)) | (1 << (PostgreSQLParser.KW_ERROR - 473)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 473)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 473)) | (1 << (PostgreSQLParser.KW_ALIAS - 473)) | (1 << (PostgreSQLParser.KW_CONSTANT - 473)) | (1 << (PostgreSQLParser.KW_PERFORM - 473)) | (1 << (PostgreSQLParser.KW_GET - 473)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 473)) | (1 << (PostgreSQLParser.KW_STACKED - 473)) | (1 << (PostgreSQLParser.KW_ELSIF - 473)) | (1 << (PostgreSQLParser.KW_REVERSE - 473)))) !== 0) || ((((_la - 506)) & ~0x1F) === 0 && ((1 << (_la - 506)) & ((1 << (PostgreSQLParser.KW_SLICE - 506)) | (1 << (PostgreSQLParser.KW_EXIT - 506)) | (1 << (PostgreSQLParser.KW_RETURN - 506)) | (1 << (PostgreSQLParser.KW_QUERY - 506)) | (1 << (PostgreSQLParser.KW_RAISE - 506)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 506)) | (1 << (PostgreSQLParser.KW_DEBUG - 506)) | (1 << (PostgreSQLParser.KW_LOG - 506)) | (1 << (PostgreSQLParser.KW_INFO - 506)) | (1 << (PostgreSQLParser.KW_NOTICE - 506)) | (1 << (PostgreSQLParser.KW_WARNING - 506)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 506)) | (1 << (PostgreSQLParser.KW_ASSERT - 506)) | (1 << (PostgreSQLParser.KW_OPEN - 506)) | (1 << (PostgreSQLParser.Identifier - 506)) | (1 << (PostgreSQLParser.QuotedIdentifier - 506)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 506)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
					{
					this.state = 3875;
					this.opttableelementlist();
					}
				}

				this.state = 3878;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 3880;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_INHERITS) {
					{
					this.state = 3879;
					this.optinherit();
					}
				}

				this.state = 3882;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 3883;
				this.name();
				this.state = 3885;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OPTIONS) {
					{
					this.state = 3884;
					this.create_generic_options();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3887;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 3888;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 3889;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 3890;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3891;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 3892;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 3893;
				this.qualified_name();
				this.state = 3894;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 3896;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_CHECK - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)) | (1 << (PostgreSQLParser.KW_FOREIGN - 33)))) !== 0) || ((((_la - 85)) & ~0x1F) === 0 && ((1 << (_la - 85)) & ((1 << (PostgreSQLParser.KW_PRIMARY - 85)) | (1 << (PostgreSQLParser.KW_TABLE - 85)) | (1 << (PostgreSQLParser.KW_UNIQUE - 85)) | (1 << (PostgreSQLParser.KW_IS - 85)))) !== 0) || ((((_la - 120)) & ~0x1F) === 0 && ((1 << (_la - 120)) & ((1 << (PostgreSQLParser.KW_LIKE - 120)) | (1 << (PostgreSQLParser.KW_OUTER - 120)) | (1 << (PostgreSQLParser.KW_OVER - 120)) | (1 << (PostgreSQLParser.KW_ABORT - 120)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 120)) | (1 << (PostgreSQLParser.KW_ACCESS - 120)) | (1 << (PostgreSQLParser.KW_ACTION - 120)) | (1 << (PostgreSQLParser.KW_ADD - 120)) | (1 << (PostgreSQLParser.KW_ADMIN - 120)) | (1 << (PostgreSQLParser.KW_AFTER - 120)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 120)) | (1 << (PostgreSQLParser.KW_ALSO - 120)) | (1 << (PostgreSQLParser.KW_ALTER - 120)) | (1 << (PostgreSQLParser.KW_ALWAYS - 120)) | (1 << (PostgreSQLParser.KW_ASSERTION - 120)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 120)) | (1 << (PostgreSQLParser.KW_AT - 120)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 120)) | (1 << (PostgreSQLParser.KW_BACKWARD - 120)) | (1 << (PostgreSQLParser.KW_BEFORE - 120)) | (1 << (PostgreSQLParser.KW_BEGIN - 120)) | (1 << (PostgreSQLParser.KW_BY - 120)) | (1 << (PostgreSQLParser.KW_CACHE - 120)) | (1 << (PostgreSQLParser.KW_CALLED - 120)) | (1 << (PostgreSQLParser.KW_CASCADE - 120)) | (1 << (PostgreSQLParser.KW_CASCADED - 120)))) !== 0) || ((((_la - 152)) & ~0x1F) === 0 && ((1 << (_la - 152)) & ((1 << (PostgreSQLParser.KW_CATALOG - 152)) | (1 << (PostgreSQLParser.KW_CHAIN - 152)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 152)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 152)) | (1 << (PostgreSQLParser.KW_CLASS - 152)) | (1 << (PostgreSQLParser.KW_CLOSE - 152)) | (1 << (PostgreSQLParser.KW_CLUSTER - 152)) | (1 << (PostgreSQLParser.KW_COMMENT - 152)) | (1 << (PostgreSQLParser.KW_COMMENTS - 152)) | (1 << (PostgreSQLParser.KW_COMMIT - 152)) | (1 << (PostgreSQLParser.KW_COMMITTED - 152)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 152)) | (1 << (PostgreSQLParser.KW_CONNECTION - 152)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 152)) | (1 << (PostgreSQLParser.KW_CONTENT - 152)) | (1 << (PostgreSQLParser.KW_CONTINUE - 152)) | (1 << (PostgreSQLParser.KW_CONVERSION - 152)) | (1 << (PostgreSQLParser.KW_COPY - 152)) | (1 << (PostgreSQLParser.KW_COST - 152)) | (1 << (PostgreSQLParser.KW_CSV - 152)) | (1 << (PostgreSQLParser.KW_CURSOR - 152)) | (1 << (PostgreSQLParser.KW_CYCLE - 152)) | (1 << (PostgreSQLParser.KW_DATA - 152)) | (1 << (PostgreSQLParser.KW_DATABASE - 152)) | (1 << (PostgreSQLParser.KW_DAY - 152)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 152)) | (1 << (PostgreSQLParser.KW_DECLARE - 152)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 152)) | (1 << (PostgreSQLParser.KW_DEFERRED - 152)) | (1 << (PostgreSQLParser.KW_DEFINER - 152)) | (1 << (PostgreSQLParser.KW_DELETE - 152)) | (1 << (PostgreSQLParser.KW_DELIMITER - 152)))) !== 0) || ((((_la - 184)) & ~0x1F) === 0 && ((1 << (_la - 184)) & ((1 << (PostgreSQLParser.KW_DELIMITERS - 184)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 184)) | (1 << (PostgreSQLParser.KW_DISABLE - 184)) | (1 << (PostgreSQLParser.KW_DISCARD - 184)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 184)) | (1 << (PostgreSQLParser.KW_DOMAIN - 184)) | (1 << (PostgreSQLParser.KW_DOUBLE - 184)) | (1 << (PostgreSQLParser.KW_DROP - 184)) | (1 << (PostgreSQLParser.KW_EACH - 184)) | (1 << (PostgreSQLParser.KW_ENABLE - 184)) | (1 << (PostgreSQLParser.KW_ENCODING - 184)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 184)) | (1 << (PostgreSQLParser.KW_ENUM - 184)) | (1 << (PostgreSQLParser.KW_ESCAPE - 184)) | (1 << (PostgreSQLParser.KW_EVENT - 184)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 184)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 184)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 184)) | (1 << (PostgreSQLParser.KW_EXECUTE - 184)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 184)) | (1 << (PostgreSQLParser.KW_EXTENSION - 184)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 184)) | (1 << (PostgreSQLParser.KW_FAMILY - 184)) | (1 << (PostgreSQLParser.KW_FIRST - 184)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 184)) | (1 << (PostgreSQLParser.KW_FORCE - 184)) | (1 << (PostgreSQLParser.KW_FORWARD - 184)) | (1 << (PostgreSQLParser.KW_FUNCTION - 184)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 184)) | (1 << (PostgreSQLParser.KW_GLOBAL - 184)) | (1 << (PostgreSQLParser.KW_GRANTED - 184)) | (1 << (PostgreSQLParser.KW_HANDLER - 184)))) !== 0) || ((((_la - 216)) & ~0x1F) === 0 && ((1 << (_la - 216)) & ((1 << (PostgreSQLParser.KW_HEADER - 216)) | (1 << (PostgreSQLParser.KW_HOLD - 216)) | (1 << (PostgreSQLParser.KW_HOUR - 216)) | (1 << (PostgreSQLParser.KW_IDENTITY - 216)) | (1 << (PostgreSQLParser.KW_IF - 216)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 216)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 216)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 216)) | (1 << (PostgreSQLParser.KW_INCLUDING - 216)) | (1 << (PostgreSQLParser.KW_INCREMENT - 216)) | (1 << (PostgreSQLParser.KW_INDEX - 216)) | (1 << (PostgreSQLParser.KW_INDEXES - 216)) | (1 << (PostgreSQLParser.KW_INHERIT - 216)) | (1 << (PostgreSQLParser.KW_INHERITS - 216)) | (1 << (PostgreSQLParser.KW_INLINE - 216)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 216)) | (1 << (PostgreSQLParser.KW_INSERT - 216)) | (1 << (PostgreSQLParser.KW_INSTEAD - 216)) | (1 << (PostgreSQLParser.KW_INVOKER - 216)) | (1 << (PostgreSQLParser.KW_ISOLATION - 216)) | (1 << (PostgreSQLParser.KW_KEY - 216)) | (1 << (PostgreSQLParser.KW_LABEL - 216)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 216)))) !== 0) || ((((_la - 248)) & ~0x1F) === 0 && ((1 << (_la - 248)) & ((1 << (PostgreSQLParser.KW_LARGE - 248)) | (1 << (PostgreSQLParser.KW_LAST - 248)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 248)) | (1 << (PostgreSQLParser.KW_LEVEL - 248)) | (1 << (PostgreSQLParser.KW_LISTEN - 248)) | (1 << (PostgreSQLParser.KW_LOAD - 248)) | (1 << (PostgreSQLParser.KW_LOCAL - 248)) | (1 << (PostgreSQLParser.KW_LOCATION - 248)) | (1 << (PostgreSQLParser.KW_LOCK - 248)) | (1 << (PostgreSQLParser.KW_MAPPING - 248)) | (1 << (PostgreSQLParser.KW_MATCH - 248)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 248)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 248)) | (1 << (PostgreSQLParser.KW_MINUTE - 248)) | (1 << (PostgreSQLParser.KW_MINVALUE - 248)) | (1 << (PostgreSQLParser.KW_MODE - 248)) | (1 << (PostgreSQLParser.KW_MONTH - 248)) | (1 << (PostgreSQLParser.KW_MOVE - 248)) | (1 << (PostgreSQLParser.KW_NAME - 248)) | (1 << (PostgreSQLParser.KW_NAMES - 248)) | (1 << (PostgreSQLParser.KW_NEXT - 248)) | (1 << (PostgreSQLParser.KW_NO - 248)) | (1 << (PostgreSQLParser.KW_NOTHING - 248)) | (1 << (PostgreSQLParser.KW_NOTIFY - 248)) | (1 << (PostgreSQLParser.KW_NOWAIT - 248)) | (1 << (PostgreSQLParser.KW_NULLS - 248)) | (1 << (PostgreSQLParser.KW_OBJECT - 248)) | (1 << (PostgreSQLParser.KW_OF - 248)) | (1 << (PostgreSQLParser.KW_OFF - 248)) | (1 << (PostgreSQLParser.KW_OIDS - 248)) | (1 << (PostgreSQLParser.KW_OPERATOR - 248)) | (1 << (PostgreSQLParser.KW_OPTION - 248)))) !== 0) || ((((_la - 280)) & ~0x1F) === 0 && ((1 << (_la - 280)) & ((1 << (PostgreSQLParser.KW_OPTIONS - 280)) | (1 << (PostgreSQLParser.KW_OWNED - 280)) | (1 << (PostgreSQLParser.KW_OWNER - 280)) | (1 << (PostgreSQLParser.KW_PARSER - 280)) | (1 << (PostgreSQLParser.KW_PARTIAL - 280)) | (1 << (PostgreSQLParser.KW_PARTITION - 280)) | (1 << (PostgreSQLParser.KW_PASSING - 280)) | (1 << (PostgreSQLParser.KW_PASSWORD - 280)) | (1 << (PostgreSQLParser.KW_PLANS - 280)) | (1 << (PostgreSQLParser.KW_PRECEDING - 280)) | (1 << (PostgreSQLParser.KW_PREPARE - 280)) | (1 << (PostgreSQLParser.KW_PREPARED - 280)) | (1 << (PostgreSQLParser.KW_PRESERVE - 280)) | (1 << (PostgreSQLParser.KW_PRIOR - 280)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 280)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 280)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 280)) | (1 << (PostgreSQLParser.KW_PROGRAM - 280)) | (1 << (PostgreSQLParser.KW_QUOTE - 280)) | (1 << (PostgreSQLParser.KW_RANGE - 280)) | (1 << (PostgreSQLParser.KW_READ - 280)) | (1 << (PostgreSQLParser.KW_REASSIGN - 280)) | (1 << (PostgreSQLParser.KW_RECHECK - 280)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 280)) | (1 << (PostgreSQLParser.KW_REF - 280)) | (1 << (PostgreSQLParser.KW_REFRESH - 280)) | (1 << (PostgreSQLParser.KW_REINDEX - 280)) | (1 << (PostgreSQLParser.KW_RELATIVE - 280)) | (1 << (PostgreSQLParser.KW_RELEASE - 280)) | (1 << (PostgreSQLParser.KW_RENAME - 280)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 280)) | (1 << (PostgreSQLParser.KW_REPLACE - 280)))) !== 0) || ((((_la - 312)) & ~0x1F) === 0 && ((1 << (_la - 312)) & ((1 << (PostgreSQLParser.KW_REPLICA - 312)) | (1 << (PostgreSQLParser.KW_RESET - 312)) | (1 << (PostgreSQLParser.KW_RESTART - 312)) | (1 << (PostgreSQLParser.KW_RESTRICT - 312)) | (1 << (PostgreSQLParser.KW_RETURNS - 312)) | (1 << (PostgreSQLParser.KW_REVOKE - 312)) | (1 << (PostgreSQLParser.KW_ROLE - 312)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 312)) | (1 << (PostgreSQLParser.KW_ROWS - 312)) | (1 << (PostgreSQLParser.KW_RULE - 312)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 312)) | (1 << (PostgreSQLParser.KW_SCHEMA - 312)) | (1 << (PostgreSQLParser.KW_SCROLL - 312)) | (1 << (PostgreSQLParser.KW_SEARCH - 312)) | (1 << (PostgreSQLParser.KW_SECOND - 312)) | (1 << (PostgreSQLParser.KW_SECURITY - 312)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 312)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 312)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 312)) | (1 << (PostgreSQLParser.KW_SERVER - 312)) | (1 << (PostgreSQLParser.KW_SESSION - 312)) | (1 << (PostgreSQLParser.KW_SET - 312)) | (1 << (PostgreSQLParser.KW_SHARE - 312)) | (1 << (PostgreSQLParser.KW_SHOW - 312)) | (1 << (PostgreSQLParser.KW_SIMPLE - 312)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 312)) | (1 << (PostgreSQLParser.KW_STABLE - 312)) | (1 << (PostgreSQLParser.KW_STANDALONE - 312)) | (1 << (PostgreSQLParser.KW_START - 312)) | (1 << (PostgreSQLParser.KW_STATEMENT - 312)) | (1 << (PostgreSQLParser.KW_STATISTICS - 312)) | (1 << (PostgreSQLParser.KW_STDIN - 312)))) !== 0) || ((((_la - 344)) & ~0x1F) === 0 && ((1 << (_la - 344)) & ((1 << (PostgreSQLParser.KW_STDOUT - 344)) | (1 << (PostgreSQLParser.KW_STORAGE - 344)) | (1 << (PostgreSQLParser.KW_STRICT - 344)) | (1 << (PostgreSQLParser.KW_STRIP - 344)) | (1 << (PostgreSQLParser.KW_SYSID - 344)) | (1 << (PostgreSQLParser.KW_SYSTEM - 344)) | (1 << (PostgreSQLParser.KW_TABLES - 344)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 344)) | (1 << (PostgreSQLParser.KW_TEMP - 344)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 344)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 344)) | (1 << (PostgreSQLParser.KW_TEXT - 344)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 344)) | (1 << (PostgreSQLParser.KW_TRIGGER - 344)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 344)) | (1 << (PostgreSQLParser.KW_TRUSTED - 344)) | (1 << (PostgreSQLParser.KW_TYPE - 344)) | (1 << (PostgreSQLParser.KW_TYPES - 344)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 344)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 344)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 344)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 344)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 344)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 344)) | (1 << (PostgreSQLParser.KW_UNTIL - 344)) | (1 << (PostgreSQLParser.KW_UPDATE - 344)) | (1 << (PostgreSQLParser.KW_VACUUM - 344)) | (1 << (PostgreSQLParser.KW_VALID - 344)) | (1 << (PostgreSQLParser.KW_VALIDATE - 344)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 344)) | (1 << (PostgreSQLParser.KW_VARYING - 344)) | (1 << (PostgreSQLParser.KW_VERSION - 344)))) !== 0) || ((((_la - 376)) & ~0x1F) === 0 && ((1 << (_la - 376)) & ((1 << (PostgreSQLParser.KW_VIEW - 376)) | (1 << (PostgreSQLParser.KW_VOLATILE - 376)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 376)) | (1 << (PostgreSQLParser.KW_WITHOUT - 376)) | (1 << (PostgreSQLParser.KW_WORK - 376)) | (1 << (PostgreSQLParser.KW_WRAPPER - 376)) | (1 << (PostgreSQLParser.KW_WRITE - 376)) | (1 << (PostgreSQLParser.KW_XML - 376)) | (1 << (PostgreSQLParser.KW_YEAR - 376)) | (1 << (PostgreSQLParser.KW_YES - 376)) | (1 << (PostgreSQLParser.KW_ZONE - 376)) | (1 << (PostgreSQLParser.KW_BETWEEN - 376)) | (1 << (PostgreSQLParser.KW_BIGINT - 376)) | (1 << (PostgreSQLParser.KW_BIT - 376)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 376)) | (1 << (PostgreSQLParser.KW_CHAR - 376)) | (1 << (PostgreSQLParser.KW_CHARACTER - 376)) | (1 << (PostgreSQLParser.KW_COALESCE - 376)) | (1 << (PostgreSQLParser.KW_DEC - 376)) | (1 << (PostgreSQLParser.KW_DECIMAL - 376)) | (1 << (PostgreSQLParser.KW_EXISTS - 376)) | (1 << (PostgreSQLParser.KW_EXTRACT - 376)) | (1 << (PostgreSQLParser.KW_FLOAT - 376)) | (1 << (PostgreSQLParser.KW_GREATEST - 376)) | (1 << (PostgreSQLParser.KW_INOUT - 376)) | (1 << (PostgreSQLParser.KW_INT - 376)) | (1 << (PostgreSQLParser.KW_INTEGER - 376)) | (1 << (PostgreSQLParser.KW_INTERVAL - 376)) | (1 << (PostgreSQLParser.KW_LEAST - 376)) | (1 << (PostgreSQLParser.KW_NATIONAL - 376)) | (1 << (PostgreSQLParser.KW_NCHAR - 376)) | (1 << (PostgreSQLParser.KW_NONE - 376)))) !== 0) || ((((_la - 408)) & ~0x1F) === 0 && ((1 << (_la - 408)) & ((1 << (PostgreSQLParser.KW_NULLIF - 408)) | (1 << (PostgreSQLParser.KW_NUMERIC - 408)) | (1 << (PostgreSQLParser.KW_OVERLAY - 408)) | (1 << (PostgreSQLParser.KW_POSITION - 408)) | (1 << (PostgreSQLParser.KW_PRECISION - 408)) | (1 << (PostgreSQLParser.KW_REAL - 408)) | (1 << (PostgreSQLParser.KW_ROW - 408)) | (1 << (PostgreSQLParser.KW_SETOF - 408)) | (1 << (PostgreSQLParser.KW_SMALLINT - 408)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 408)) | (1 << (PostgreSQLParser.KW_TIME - 408)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 408)) | (1 << (PostgreSQLParser.KW_TREAT - 408)) | (1 << (PostgreSQLParser.KW_TRIM - 408)) | (1 << (PostgreSQLParser.KW_VALUES - 408)) | (1 << (PostgreSQLParser.KW_VARCHAR - 408)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 408)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 408)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 408)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 408)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 408)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 408)) | (1 << (PostgreSQLParser.KW_XMLPI - 408)) | (1 << (PostgreSQLParser.KW_XMLROOT - 408)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 408)) | (1 << (PostgreSQLParser.KW_CALL - 408)) | (1 << (PostgreSQLParser.KW_CURRENT - 408)) | (1 << (PostgreSQLParser.KW_ATTACH - 408)) | (1 << (PostgreSQLParser.KW_DETACH - 408)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 408)) | (1 << (PostgreSQLParser.KW_GENERATED - 408)) | (1 << (PostgreSQLParser.KW_LOGGED - 408)))) !== 0) || ((((_la - 440)) & ~0x1F) === 0 && ((1 << (_la - 440)) & ((1 << (PostgreSQLParser.KW_STORED - 440)) | (1 << (PostgreSQLParser.KW_INCLUDE - 440)) | (1 << (PostgreSQLParser.KW_ROUTINE - 440)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 440)) | (1 << (PostgreSQLParser.KW_IMPORT - 440)) | (1 << (PostgreSQLParser.KW_POLICY - 440)) | (1 << (PostgreSQLParser.KW_METHOD - 440)) | (1 << (PostgreSQLParser.KW_REFERENCING - 440)) | (1 << (PostgreSQLParser.KW_NEW - 440)) | (1 << (PostgreSQLParser.KW_OLD - 440)) | (1 << (PostgreSQLParser.KW_VALUE - 440)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 440)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 440)) | (1 << (PostgreSQLParser.KW_OUT - 440)) | (1 << (PostgreSQLParser.KW_ROUTINES - 440)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 440)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 440)) | (1 << (PostgreSQLParser.KW_INPUT - 440)) | (1 << (PostgreSQLParser.KW_SUPPORT - 440)) | (1 << (PostgreSQLParser.KW_PARALLEL - 440)) | (1 << (PostgreSQLParser.KW_SQL - 440)) | (1 << (PostgreSQLParser.KW_DEPENDS - 440)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 440)) | (1 << (PostgreSQLParser.KW_CONFLICT - 440)) | (1 << (PostgreSQLParser.KW_SKIP - 440)) | (1 << (PostgreSQLParser.KW_LOCKED - 440)) | (1 << (PostgreSQLParser.KW_TIES - 440)) | (1 << (PostgreSQLParser.KW_ROLLUP - 440)) | (1 << (PostgreSQLParser.KW_CUBE - 440)) | (1 << (PostgreSQLParser.KW_GROUPING - 440)) | (1 << (PostgreSQLParser.KW_SETS - 440)))) !== 0) || ((((_la - 473)) & ~0x1F) === 0 && ((1 << (_la - 473)) & ((1 << (PostgreSQLParser.KW_ORDINALITY - 473)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 473)) | (1 << (PostgreSQLParser.KW_COLUMNS - 473)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 473)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 473)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 473)) | (1 << (PostgreSQLParser.KW_WITHIN - 473)) | (1 << (PostgreSQLParser.KW_FILTER - 473)) | (1 << (PostgreSQLParser.KW_GROUPS - 473)) | (1 << (PostgreSQLParser.KW_OTHERS - 473)) | (1 << (PostgreSQLParser.KW_NFC - 473)) | (1 << (PostgreSQLParser.KW_NFD - 473)) | (1 << (PostgreSQLParser.KW_NFKC - 473)) | (1 << (PostgreSQLParser.KW_NFKD - 473)) | (1 << (PostgreSQLParser.KW_UESCAPE - 473)) | (1 << (PostgreSQLParser.KW_VIEWS - 473)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 473)) | (1 << (PostgreSQLParser.KW_DUMP - 473)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 473)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 473)) | (1 << (PostgreSQLParser.KW_ERROR - 473)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 473)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 473)) | (1 << (PostgreSQLParser.KW_ALIAS - 473)) | (1 << (PostgreSQLParser.KW_CONSTANT - 473)) | (1 << (PostgreSQLParser.KW_PERFORM - 473)) | (1 << (PostgreSQLParser.KW_GET - 473)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 473)) | (1 << (PostgreSQLParser.KW_STACKED - 473)) | (1 << (PostgreSQLParser.KW_ELSIF - 473)) | (1 << (PostgreSQLParser.KW_REVERSE - 473)))) !== 0) || ((((_la - 506)) & ~0x1F) === 0 && ((1 << (_la - 506)) & ((1 << (PostgreSQLParser.KW_SLICE - 506)) | (1 << (PostgreSQLParser.KW_EXIT - 506)) | (1 << (PostgreSQLParser.KW_RETURN - 506)) | (1 << (PostgreSQLParser.KW_QUERY - 506)) | (1 << (PostgreSQLParser.KW_RAISE - 506)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 506)) | (1 << (PostgreSQLParser.KW_DEBUG - 506)) | (1 << (PostgreSQLParser.KW_LOG - 506)) | (1 << (PostgreSQLParser.KW_INFO - 506)) | (1 << (PostgreSQLParser.KW_NOTICE - 506)) | (1 << (PostgreSQLParser.KW_WARNING - 506)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 506)) | (1 << (PostgreSQLParser.KW_ASSERT - 506)) | (1 << (PostgreSQLParser.KW_OPEN - 506)) | (1 << (PostgreSQLParser.Identifier - 506)) | (1 << (PostgreSQLParser.QuotedIdentifier - 506)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 506)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
					{
					this.state = 3895;
					this.opttableelementlist();
					}
				}

				this.state = 3898;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 3900;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_INHERITS) {
					{
					this.state = 3899;
					this.optinherit();
					}
				}

				this.state = 3902;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 3903;
				this.name();
				this.state = 3905;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OPTIONS) {
					{
					this.state = 3904;
					this.create_generic_options();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 3907;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 3908;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 3909;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 3910;
				this.qualified_name();
				this.state = 3911;
				this.match(PostgreSQLParser.KW_PARTITION);
				this.state = 3912;
				this.match(PostgreSQLParser.KW_OF);
				this.state = 3913;
				this.qualified_name();
				this.state = 3915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_PAREN) {
					{
					this.state = 3914;
					this.opttypedtableelementlist();
					}
				}

				this.state = 3917;
				this.partitionboundspec();
				this.state = 3918;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 3919;
				this.name();
				this.state = 3921;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OPTIONS) {
					{
					this.state = 3920;
					this.create_generic_options();
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 3923;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 3924;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 3925;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 3926;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3927;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 3928;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 3929;
				this.qualified_name();
				this.state = 3930;
				this.match(PostgreSQLParser.KW_PARTITION);
				this.state = 3931;
				this.match(PostgreSQLParser.KW_OF);
				this.state = 3932;
				this.qualified_name();
				this.state = 3934;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_PAREN) {
					{
					this.state = 3933;
					this.opttypedtableelementlist();
					}
				}

				this.state = 3936;
				this.partitionboundspec();
				this.state = 3937;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 3938;
				this.name();
				this.state = 3940;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OPTIONS) {
					{
					this.state = 3939;
					this.create_generic_options();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public importforeignschemastmt(): ImportforeignschemastmtContext {
		let _localctx: ImportforeignschemastmtContext = new ImportforeignschemastmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, PostgreSQLParser.RULE_importforeignschemastmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3944;
			this.match(PostgreSQLParser.KW_IMPORT);
			this.state = 3945;
			this.match(PostgreSQLParser.KW_FOREIGN);
			this.state = 3946;
			this.match(PostgreSQLParser.KW_SCHEMA);
			this.state = 3947;
			this.name();
			this.state = 3949;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_EXCEPT || _la === PostgreSQLParser.KW_LIMIT) {
				{
				this.state = 3948;
				this.import_qualification();
				}
			}

			this.state = 3951;
			this.match(PostgreSQLParser.KW_FROM);
			this.state = 3952;
			this.match(PostgreSQLParser.KW_SERVER);
			this.state = 3953;
			this.name();
			this.state = 3954;
			this.match(PostgreSQLParser.KW_INTO);
			this.state = 3955;
			this.name();
			this.state = 3957;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_OPTIONS) {
				{
				this.state = 3956;
				this.create_generic_options();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public import_qualification_type(): Import_qualification_typeContext {
		let _localctx: Import_qualification_typeContext = new Import_qualification_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, PostgreSQLParser.RULE_import_qualification_type);
		try {
			this.state = 3962;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_LIMIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3959;
				this.match(PostgreSQLParser.KW_LIMIT);
				this.state = 3960;
				this.match(PostgreSQLParser.KW_TO);
				}
				break;
			case PostgreSQLParser.KW_EXCEPT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3961;
				this.match(PostgreSQLParser.KW_EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public import_qualification(): Import_qualificationContext {
		let _localctx: Import_qualificationContext = new Import_qualificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, PostgreSQLParser.RULE_import_qualification);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3964;
			this.import_qualification_type();
			this.state = 3965;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 3966;
			this.relation_expr_list();
			this.state = 3967;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createusermappingstmt(): CreateusermappingstmtContext {
		let _localctx: CreateusermappingstmtContext = new CreateusermappingstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, PostgreSQLParser.RULE_createusermappingstmt);
		let _la: number;
		try {
			this.state = 3992;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 296, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3969;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 3970;
				this.match(PostgreSQLParser.KW_USER);
				this.state = 3971;
				this.match(PostgreSQLParser.KW_MAPPING);
				this.state = 3972;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 3973;
				this.auth_ident();
				this.state = 3974;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 3975;
				this.name();
				this.state = 3977;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OPTIONS) {
					{
					this.state = 3976;
					this.create_generic_options();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3979;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 3980;
				this.match(PostgreSQLParser.KW_USER);
				this.state = 3981;
				this.match(PostgreSQLParser.KW_MAPPING);
				this.state = 3982;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 3983;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 3984;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 3985;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 3986;
				this.auth_ident();
				this.state = 3987;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 3988;
				this.name();
				this.state = 3990;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OPTIONS) {
					{
					this.state = 3989;
					this.create_generic_options();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public auth_ident(): Auth_identContext {
		let _localctx: Auth_identContext = new Auth_identContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, PostgreSQLParser.RULE_auth_ident);
		try {
			this.state = 3996;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_CURRENT_USER:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_SESSION_USER:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.KW_PUBLIC:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3994;
				this.rolespec();
				}
				break;
			case PostgreSQLParser.KW_USER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 3995;
				this.match(PostgreSQLParser.KW_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropusermappingstmt(): DropusermappingstmtContext {
		let _localctx: DropusermappingstmtContext = new DropusermappingstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, PostgreSQLParser.RULE_dropusermappingstmt);
		try {
			this.state = 4016;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 298, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 3998;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 3999;
				this.match(PostgreSQLParser.KW_USER);
				this.state = 4000;
				this.match(PostgreSQLParser.KW_MAPPING);
				this.state = 4001;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 4002;
				this.auth_ident();
				this.state = 4003;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 4004;
				this.name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4006;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4007;
				this.match(PostgreSQLParser.KW_USER);
				this.state = 4008;
				this.match(PostgreSQLParser.KW_MAPPING);
				this.state = 4009;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 4010;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 4011;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 4012;
				this.auth_ident();
				this.state = 4013;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 4014;
				this.name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterusermappingstmt(): AlterusermappingstmtContext {
		let _localctx: AlterusermappingstmtContext = new AlterusermappingstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, PostgreSQLParser.RULE_alterusermappingstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4018;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 4019;
			this.match(PostgreSQLParser.KW_USER);
			this.state = 4020;
			this.match(PostgreSQLParser.KW_MAPPING);
			this.state = 4021;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 4022;
			this.auth_ident();
			this.state = 4023;
			this.match(PostgreSQLParser.KW_SERVER);
			this.state = 4024;
			this.name();
			this.state = 4025;
			this.alter_generic_options();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createpolicystmt(): CreatepolicystmtContext {
		let _localctx: CreatepolicystmtContext = new CreatepolicystmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, PostgreSQLParser.RULE_createpolicystmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4027;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 4028;
			this.match(PostgreSQLParser.KW_POLICY);
			this.state = 4029;
			this.name();
			this.state = 4030;
			this.match(PostgreSQLParser.KW_ON);
			this.state = 4031;
			this.qualified_name();
			this.state = 4033;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_AS) {
				{
				this.state = 4032;
				this.rowsecuritydefaultpermissive();
				}
			}

			this.state = 4036;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_FOR) {
				{
				this.state = 4035;
				this.rowsecuritydefaultforcmd();
				}
			}

			this.state = 4039;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_TO) {
				{
				this.state = 4038;
				this.rowsecuritydefaulttorole();
				}
			}

			this.state = 4042;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_USING) {
				{
				this.state = 4041;
				this.rowsecurityoptionalexpr();
				}
			}

			this.state = 4045;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 303, this._ctx) ) {
			case 1:
				{
				this.state = 4044;
				this.rowsecurityoptionalwithcheck();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterpolicystmt(): AlterpolicystmtContext {
		let _localctx: AlterpolicystmtContext = new AlterpolicystmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, PostgreSQLParser.RULE_alterpolicystmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4047;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 4048;
			this.match(PostgreSQLParser.KW_POLICY);
			this.state = 4049;
			this.name();
			this.state = 4050;
			this.match(PostgreSQLParser.KW_ON);
			this.state = 4051;
			this.qualified_name();
			this.state = 4053;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_TO) {
				{
				this.state = 4052;
				this.rowsecurityoptionaltorole();
				}
			}

			this.state = 4056;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_USING) {
				{
				this.state = 4055;
				this.rowsecurityoptionalexpr();
				}
			}

			this.state = 4059;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 306, this._ctx) ) {
			case 1:
				{
				this.state = 4058;
				this.rowsecurityoptionalwithcheck();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext {
		let _localctx: RowsecurityoptionalexprContext = new RowsecurityoptionalexprContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, PostgreSQLParser.RULE_rowsecurityoptionalexpr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4061;
			this.match(PostgreSQLParser.KW_USING);
			this.state = 4062;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 4063;
			this.a_expr();
			this.state = 4064;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext {
		let _localctx: RowsecurityoptionalwithcheckContext = new RowsecurityoptionalwithcheckContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, PostgreSQLParser.RULE_rowsecurityoptionalwithcheck);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4066;
			this.match(PostgreSQLParser.KW_WITH);
			this.state = 4067;
			this.match(PostgreSQLParser.KW_CHECK);
			this.state = 4068;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 4069;
			this.a_expr();
			this.state = 4070;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowsecuritydefaulttorole(): RowsecuritydefaulttoroleContext {
		let _localctx: RowsecuritydefaulttoroleContext = new RowsecuritydefaulttoroleContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, PostgreSQLParser.RULE_rowsecuritydefaulttorole);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4072;
			this.match(PostgreSQLParser.KW_TO);
			this.state = 4073;
			this.role_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowsecurityoptionaltorole(): RowsecurityoptionaltoroleContext {
		let _localctx: RowsecurityoptionaltoroleContext = new RowsecurityoptionaltoroleContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, PostgreSQLParser.RULE_rowsecurityoptionaltorole);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4075;
			this.match(PostgreSQLParser.KW_TO);
			this.state = 4076;
			this.role_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowsecuritydefaultpermissive(): RowsecuritydefaultpermissiveContext {
		let _localctx: RowsecuritydefaultpermissiveContext = new RowsecuritydefaultpermissiveContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, PostgreSQLParser.RULE_rowsecuritydefaultpermissive);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4078;
			this.match(PostgreSQLParser.KW_AS);
			this.state = 4079;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowsecuritydefaultforcmd(): RowsecuritydefaultforcmdContext {
		let _localctx: RowsecuritydefaultforcmdContext = new RowsecuritydefaultforcmdContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, PostgreSQLParser.RULE_rowsecuritydefaultforcmd);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4081;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 4082;
			this.row_security_cmd();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public row_security_cmd(): Row_security_cmdContext {
		let _localctx: Row_security_cmdContext = new Row_security_cmdContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, PostgreSQLParser.RULE_row_security_cmd);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4084;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_ALL || _la === PostgreSQLParser.KW_SELECT || _la === PostgreSQLParser.KW_DELETE || _la === PostgreSQLParser.KW_INSERT || _la === PostgreSQLParser.KW_UPDATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createamstmt(): CreateamstmtContext {
		let _localctx: CreateamstmtContext = new CreateamstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, PostgreSQLParser.RULE_createamstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4086;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 4087;
			this.match(PostgreSQLParser.KW_ACCESS);
			this.state = 4088;
			this.match(PostgreSQLParser.KW_METHOD);
			this.state = 4089;
			this.name();
			this.state = 4090;
			this.match(PostgreSQLParser.KW_TYPE);
			this.state = 4091;
			this.am_type();
			this.state = 4092;
			this.match(PostgreSQLParser.KW_HANDLER);
			this.state = 4093;
			this.handler_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public am_type(): Am_typeContext {
		let _localctx: Am_typeContext = new Am_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, PostgreSQLParser.RULE_am_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4095;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_TABLE || _la === PostgreSQLParser.KW_INDEX)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createtrigstmt(): CreatetrigstmtContext {
		let _localctx: CreatetrigstmtContext = new CreatetrigstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, PostgreSQLParser.RULE_createtrigstmt);
		let _la: number;
		try {
			this.state = 4147;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 314, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4097;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4098;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 4099;
				this.name();
				this.state = 4100;
				this.triggeractiontime();
				this.state = 4101;
				this.triggerevents();
				this.state = 4102;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4103;
				this.qualified_name();
				this.state = 4105;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_REFERENCING) {
					{
					this.state = 4104;
					this.triggerreferencing();
					}
				}

				this.state = 4108;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 4107;
					this.triggerforspec();
					}
				}

				this.state = 4111;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WHEN) {
					{
					this.state = 4110;
					this.triggerwhen();
					}
				}

				this.state = 4113;
				this.match(PostgreSQLParser.KW_EXECUTE);
				this.state = 4114;
				this.function_or_procedure();
				this.state = 4115;
				this.func_name();
				this.state = 4116;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 4117;
				this.triggerfuncargs();
				this.state = 4118;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4120;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4122;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CONSTRAINT) {
					{
					this.state = 4121;
					this.match(PostgreSQLParser.KW_CONSTRAINT);
					}
				}

				this.state = 4124;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 4125;
				this.name();
				this.state = 4126;
				this.triggeractiontime();
				this.state = 4127;
				this.triggerevents();
				this.state = 4128;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4129;
				this.qualified_name();
				this.state = 4131;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM) {
					{
					this.state = 4130;
					this.optconstrfromtable();
					}
				}

				this.state = 4133;
				this.constraintattributespec();
				this.state = 4135;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 4134;
					this.foreachrow();
					}
				}

				this.state = 4138;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WHEN) {
					{
					this.state = 4137;
					this.triggerwhen();
					}
				}

				this.state = 4140;
				this.match(PostgreSQLParser.KW_EXECUTE);
				this.state = 4141;
				this.function_or_procedure();
				this.state = 4142;
				this.func_name();
				this.state = 4143;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 4144;
				this.triggerfuncargs();
				this.state = 4145;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggeractiontime(): TriggeractiontimeContext {
		let _localctx: TriggeractiontimeContext = new TriggeractiontimeContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, PostgreSQLParser.RULE_triggeractiontime);
		try {
			this.state = 4153;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_BEFORE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4149;
				this.match(PostgreSQLParser.KW_BEFORE);
				}
				break;
			case PostgreSQLParser.KW_AFTER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4150;
				this.match(PostgreSQLParser.KW_AFTER);
				}
				break;
			case PostgreSQLParser.KW_INSTEAD:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4151;
				this.match(PostgreSQLParser.KW_INSTEAD);
				this.state = 4152;
				this.match(PostgreSQLParser.KW_OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public foreachrow(): ForeachrowContext {
		let _localctx: ForeachrowContext = new ForeachrowContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, PostgreSQLParser.RULE_foreachrow);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4155;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 4157;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_EACH) {
				{
				this.state = 4156;
				this.match(PostgreSQLParser.KW_EACH);
				}
			}

			this.state = 4159;
			this.roworstatment();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roworstatment(): RoworstatmentContext {
		let _localctx: RoworstatmentContext = new RoworstatmentContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, PostgreSQLParser.RULE_roworstatment);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4161;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_STATEMENT || _la === PostgreSQLParser.KW_ROW)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggerevents(): TriggereventsContext {
		let _localctx: TriggereventsContext = new TriggereventsContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, PostgreSQLParser.RULE_triggerevents);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4163;
			this.triggeroneevent();
			this.state = 4168;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.KW_OR) {
				{
				{
				this.state = 4164;
				this.match(PostgreSQLParser.KW_OR);
				this.state = 4165;
				this.triggeroneevent();
				}
				}
				this.state = 4170;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggeroneevent(): TriggeroneeventContext {
		let _localctx: TriggeroneeventContext = new TriggeroneeventContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, PostgreSQLParser.RULE_triggeroneevent);
		try {
			this.state = 4178;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 318, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4171;
				this.match(PostgreSQLParser.KW_INSERT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4172;
				this.match(PostgreSQLParser.KW_DELETE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4173;
				this.match(PostgreSQLParser.KW_UPDATE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4174;
				this.match(PostgreSQLParser.KW_UPDATE);
				this.state = 4175;
				this.match(PostgreSQLParser.KW_OF);
				this.state = 4176;
				this.columnlist();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4177;
				this.match(PostgreSQLParser.KW_TRUNCATE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggerreferencing(): TriggerreferencingContext {
		let _localctx: TriggerreferencingContext = new TriggerreferencingContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, PostgreSQLParser.RULE_triggerreferencing);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4180;
			this.match(PostgreSQLParser.KW_REFERENCING);
			this.state = 4181;
			this.triggertransitions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggertransitions(): TriggertransitionsContext {
		let _localctx: TriggertransitionsContext = new TriggertransitionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 420, PostgreSQLParser.RULE_triggertransitions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4184;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 4183;
				this.triggertransition();
				}
				}
				this.state = 4186;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PostgreSQLParser.KW_NEW || _la === PostgreSQLParser.KW_OLD);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggertransition(): TriggertransitionContext {
		let _localctx: TriggertransitionContext = new TriggertransitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, PostgreSQLParser.RULE_triggertransition);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4188;
			this.transitionoldornew();
			this.state = 4189;
			this.transitionrowortable();
			this.state = 4191;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_AS) {
				{
				this.state = 4190;
				this.opt_as();
				}
			}

			this.state = 4193;
			this.transitionrelname();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transitionoldornew(): TransitionoldornewContext {
		let _localctx: TransitionoldornewContext = new TransitionoldornewContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, PostgreSQLParser.RULE_transitionoldornew);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4195;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_NEW || _la === PostgreSQLParser.KW_OLD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transitionrowortable(): TransitionrowortableContext {
		let _localctx: TransitionrowortableContext = new TransitionrowortableContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, PostgreSQLParser.RULE_transitionrowortable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4197;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_TABLE || _la === PostgreSQLParser.KW_ROW)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transitionrelname(): TransitionrelnameContext {
		let _localctx: TransitionrelnameContext = new TransitionrelnameContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, PostgreSQLParser.RULE_transitionrelname);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4199;
			this.colid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggerforspec(): TriggerforspecContext {
		let _localctx: TriggerforspecContext = new TriggerforspecContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, PostgreSQLParser.RULE_triggerforspec);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4201;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 4203;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_EACH) {
				{
				this.state = 4202;
				this.triggerforopteach();
				}
			}

			this.state = 4205;
			this.triggerfortype();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggerforopteach(): TriggerforopteachContext {
		let _localctx: TriggerforopteachContext = new TriggerforopteachContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, PostgreSQLParser.RULE_triggerforopteach);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4207;
			this.match(PostgreSQLParser.KW_EACH);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggerfortype(): TriggerfortypeContext {
		let _localctx: TriggerfortypeContext = new TriggerfortypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, PostgreSQLParser.RULE_triggerfortype);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4209;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_STATEMENT || _la === PostgreSQLParser.KW_ROW)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggerwhen(): TriggerwhenContext {
		let _localctx: TriggerwhenContext = new TriggerwhenContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, PostgreSQLParser.RULE_triggerwhen);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4211;
			this.match(PostgreSQLParser.KW_WHEN);
			this.state = 4212;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 4213;
			this.a_expr();
			this.state = 4214;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_or_procedure(): Function_or_procedureContext {
		let _localctx: Function_or_procedureContext = new Function_or_procedureContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, PostgreSQLParser.RULE_function_or_procedure);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4216;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_FUNCTION || _la === PostgreSQLParser.KW_PROCEDURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggerfuncargs(): TriggerfuncargsContext {
		let _localctx: TriggerfuncargsContext = new TriggerfuncargsContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, PostgreSQLParser.RULE_triggerfuncargs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4220;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_ALL:
			case PostgreSQLParser.KW_ANALYSE:
			case PostgreSQLParser.KW_ANALYZE:
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ANY:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_AS:
			case PostgreSQLParser.KW_ASC:
			case PostgreSQLParser.KW_ASYMMETRIC:
			case PostgreSQLParser.KW_BOTH:
			case PostgreSQLParser.KW_CASE:
			case PostgreSQLParser.KW_CAST:
			case PostgreSQLParser.KW_CHECK:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_CREATE:
			case PostgreSQLParser.KW_CURRENT_CATALOG:
			case PostgreSQLParser.KW_CURRENT_DATE:
			case PostgreSQLParser.KW_CURRENT_ROLE:
			case PostgreSQLParser.KW_CURRENT_TIME:
			case PostgreSQLParser.KW_CURRENT_TIMESTAMP:
			case PostgreSQLParser.KW_CURRENT_USER:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DEFERRABLE:
			case PostgreSQLParser.KW_DESC:
			case PostgreSQLParser.KW_DISTINCT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_ELSE:
			case PostgreSQLParser.KW_EXCEPT:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_FOR:
			case PostgreSQLParser.KW_FOREIGN:
			case PostgreSQLParser.KW_FROM:
			case PostgreSQLParser.KW_GRANT:
			case PostgreSQLParser.KW_GROUP:
			case PostgreSQLParser.KW_HAVING:
			case PostgreSQLParser.KW_IN:
			case PostgreSQLParser.KW_INITIALLY:
			case PostgreSQLParser.KW_INTERSECT:
			case PostgreSQLParser.KW_LATERAL:
			case PostgreSQLParser.KW_LEADING:
			case PostgreSQLParser.KW_LIMIT:
			case PostgreSQLParser.KW_LOCALTIME:
			case PostgreSQLParser.KW_LOCALTIMESTAMP:
			case PostgreSQLParser.KW_NOT:
			case PostgreSQLParser.KW_NULL:
			case PostgreSQLParser.KW_OFFSET:
			case PostgreSQLParser.KW_ON:
			case PostgreSQLParser.KW_ONLY:
			case PostgreSQLParser.KW_OR:
			case PostgreSQLParser.KW_ORDER:
			case PostgreSQLParser.KW_PLACING:
			case PostgreSQLParser.KW_PRIMARY:
			case PostgreSQLParser.KW_REFERENCES:
			case PostgreSQLParser.KW_RETURNING:
			case PostgreSQLParser.KW_SELECT:
			case PostgreSQLParser.KW_SESSION_USER:
			case PostgreSQLParser.KW_SOME:
			case PostgreSQLParser.KW_SYMMETRIC:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_THEN:
			case PostgreSQLParser.KW_TO:
			case PostgreSQLParser.KW_TRAILING:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_UNION:
			case PostgreSQLParser.KW_UNIQUE:
			case PostgreSQLParser.KW_USER:
			case PostgreSQLParser.KW_USING:
			case PostgreSQLParser.KW_VARIADIC:
			case PostgreSQLParser.KW_WHEN:
			case PostgreSQLParser.KW_WHERE:
			case PostgreSQLParser.KW_WINDOW:
			case PostgreSQLParser.KW_WITH:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_END:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.Integral:
			case PostgreSQLParser.Numeric:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				{
				this.state = 4218;
				this.triggerfuncarg();
				}
				break;
			case PostgreSQLParser.CLOSE_PAREN:
			case PostgreSQLParser.COMMA:
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 4226;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 4222;
				this.match(PostgreSQLParser.COMMA);
				this.state = 4223;
				this.triggerfuncarg();
				}
				}
				this.state = 4228;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public triggerfuncarg(): TriggerfuncargContext {
		let _localctx: TriggerfuncargContext = new TriggerfuncargContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, PostgreSQLParser.RULE_triggerfuncarg);
		try {
			this.state = 4233;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.Integral:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4229;
				this.iconst();
				}
				break;
			case PostgreSQLParser.Numeric:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4230;
				this.fconst();
				}
				break;
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4231;
				this.sconst();
				}
				break;
			case PostgreSQLParser.KW_ALL:
			case PostgreSQLParser.KW_ANALYSE:
			case PostgreSQLParser.KW_ANALYZE:
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ANY:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_AS:
			case PostgreSQLParser.KW_ASC:
			case PostgreSQLParser.KW_ASYMMETRIC:
			case PostgreSQLParser.KW_BOTH:
			case PostgreSQLParser.KW_CASE:
			case PostgreSQLParser.KW_CAST:
			case PostgreSQLParser.KW_CHECK:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_CREATE:
			case PostgreSQLParser.KW_CURRENT_CATALOG:
			case PostgreSQLParser.KW_CURRENT_DATE:
			case PostgreSQLParser.KW_CURRENT_ROLE:
			case PostgreSQLParser.KW_CURRENT_TIME:
			case PostgreSQLParser.KW_CURRENT_TIMESTAMP:
			case PostgreSQLParser.KW_CURRENT_USER:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DEFERRABLE:
			case PostgreSQLParser.KW_DESC:
			case PostgreSQLParser.KW_DISTINCT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_ELSE:
			case PostgreSQLParser.KW_EXCEPT:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_FOR:
			case PostgreSQLParser.KW_FOREIGN:
			case PostgreSQLParser.KW_FROM:
			case PostgreSQLParser.KW_GRANT:
			case PostgreSQLParser.KW_GROUP:
			case PostgreSQLParser.KW_HAVING:
			case PostgreSQLParser.KW_IN:
			case PostgreSQLParser.KW_INITIALLY:
			case PostgreSQLParser.KW_INTERSECT:
			case PostgreSQLParser.KW_LATERAL:
			case PostgreSQLParser.KW_LEADING:
			case PostgreSQLParser.KW_LIMIT:
			case PostgreSQLParser.KW_LOCALTIME:
			case PostgreSQLParser.KW_LOCALTIMESTAMP:
			case PostgreSQLParser.KW_NOT:
			case PostgreSQLParser.KW_NULL:
			case PostgreSQLParser.KW_OFFSET:
			case PostgreSQLParser.KW_ON:
			case PostgreSQLParser.KW_ONLY:
			case PostgreSQLParser.KW_OR:
			case PostgreSQLParser.KW_ORDER:
			case PostgreSQLParser.KW_PLACING:
			case PostgreSQLParser.KW_PRIMARY:
			case PostgreSQLParser.KW_REFERENCES:
			case PostgreSQLParser.KW_RETURNING:
			case PostgreSQLParser.KW_SELECT:
			case PostgreSQLParser.KW_SESSION_USER:
			case PostgreSQLParser.KW_SOME:
			case PostgreSQLParser.KW_SYMMETRIC:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_THEN:
			case PostgreSQLParser.KW_TO:
			case PostgreSQLParser.KW_TRAILING:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_UNION:
			case PostgreSQLParser.KW_UNIQUE:
			case PostgreSQLParser.KW_USER:
			case PostgreSQLParser.KW_USING:
			case PostgreSQLParser.KW_VARIADIC:
			case PostgreSQLParser.KW_WHEN:
			case PostgreSQLParser.KW_WHERE:
			case PostgreSQLParser.KW_WINDOW:
			case PostgreSQLParser.KW_WITH:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_END:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4232;
				this.collabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public optconstrfromtable(): OptconstrfromtableContext {
		let _localctx: OptconstrfromtableContext = new OptconstrfromtableContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, PostgreSQLParser.RULE_optconstrfromtable);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4235;
			this.match(PostgreSQLParser.KW_FROM);
			this.state = 4236;
			this.qualified_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraintattributespec(): ConstraintattributespecContext {
		let _localctx: ConstraintattributespecContext = new ConstraintattributespecContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, PostgreSQLParser.RULE_constraintattributespec);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 54)) & ~0x1F) === 0 && ((1 << (_la - 54)) & ((1 << (PostgreSQLParser.KW_DEFERRABLE - 54)) | (1 << (PostgreSQLParser.KW_INITIALLY - 54)) | (1 << (PostgreSQLParser.KW_NOT - 54)))) !== 0) || _la === PostgreSQLParser.KW_NO) {
				{
				{
				this.state = 4238;
				this.constraintattributeElem();
				}
				}
				this.state = 4243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constraintattributeElem(): ConstraintattributeElemContext {
		let _localctx: ConstraintattributeElemContext = new ConstraintattributeElemContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, PostgreSQLParser.RULE_constraintattributeElem);
		try {
			this.state = 4255;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 326, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4244;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 4245;
				this.match(PostgreSQLParser.KW_DEFERRABLE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4246;
				this.match(PostgreSQLParser.KW_DEFERRABLE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4247;
				this.match(PostgreSQLParser.KW_INITIALLY);
				this.state = 4248;
				this.match(PostgreSQLParser.KW_IMMEDIATE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4249;
				this.match(PostgreSQLParser.KW_INITIALLY);
				this.state = 4250;
				this.match(PostgreSQLParser.KW_DEFERRED);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4251;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 4252;
				this.match(PostgreSQLParser.KW_VALID);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4253;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 4254;
				this.match(PostgreSQLParser.KW_INHERIT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createeventtrigstmt(): CreateeventtrigstmtContext {
		let _localctx: CreateeventtrigstmtContext = new CreateeventtrigstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, PostgreSQLParser.RULE_createeventtrigstmt);
		try {
			this.state = 4283;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 327, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4257;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4258;
				this.match(PostgreSQLParser.KW_EVENT);
				this.state = 4259;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 4260;
				this.name();
				this.state = 4261;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4262;
				this.collabel();
				this.state = 4263;
				this.match(PostgreSQLParser.KW_EXECUTE);
				this.state = 4264;
				this.function_or_procedure();
				this.state = 4265;
				this.func_name();
				this.state = 4266;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 4267;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4269;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4270;
				this.match(PostgreSQLParser.KW_EVENT);
				this.state = 4271;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 4272;
				this.name();
				this.state = 4273;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4274;
				this.collabel();
				this.state = 4275;
				this.match(PostgreSQLParser.KW_WHEN);
				this.state = 4276;
				this.event_trigger_when_list();
				this.state = 4277;
				this.match(PostgreSQLParser.KW_EXECUTE);
				this.state = 4278;
				this.function_or_procedure();
				this.state = 4279;
				this.func_name();
				this.state = 4280;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 4281;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public event_trigger_when_list(): Event_trigger_when_listContext {
		let _localctx: Event_trigger_when_listContext = new Event_trigger_when_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, PostgreSQLParser.RULE_event_trigger_when_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4285;
			this.event_trigger_when_item();
			this.state = 4290;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.KW_AND) {
				{
				{
				this.state = 4286;
				this.match(PostgreSQLParser.KW_AND);
				this.state = 4287;
				this.event_trigger_when_item();
				}
				}
				this.state = 4292;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public event_trigger_when_item(): Event_trigger_when_itemContext {
		let _localctx: Event_trigger_when_itemContext = new Event_trigger_when_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, PostgreSQLParser.RULE_event_trigger_when_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4293;
			this.colid();
			this.state = 4294;
			this.match(PostgreSQLParser.KW_IN);
			this.state = 4295;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 4296;
			this.event_trigger_value_list();
			this.state = 4297;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public event_trigger_value_list(): Event_trigger_value_listContext {
		let _localctx: Event_trigger_value_listContext = new Event_trigger_value_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, PostgreSQLParser.RULE_event_trigger_value_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4299;
			this.sconst();
			this.state = 4304;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 4300;
				this.match(PostgreSQLParser.COMMA);
				this.state = 4301;
				this.sconst();
				}
				}
				this.state = 4306;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public altereventtrigstmt(): AltereventtrigstmtContext {
		let _localctx: AltereventtrigstmtContext = new AltereventtrigstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, PostgreSQLParser.RULE_altereventtrigstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4307;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 4308;
			this.match(PostgreSQLParser.KW_EVENT);
			this.state = 4309;
			this.match(PostgreSQLParser.KW_TRIGGER);
			this.state = 4310;
			this.name();
			this.state = 4311;
			this.enable_trigger();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enable_trigger(): Enable_triggerContext {
		let _localctx: Enable_triggerContext = new Enable_triggerContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, PostgreSQLParser.RULE_enable_trigger);
		try {
			this.state = 4319;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 330, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4313;
				this.match(PostgreSQLParser.KW_ENABLE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4314;
				this.match(PostgreSQLParser.KW_ENABLE);
				this.state = 4315;
				this.match(PostgreSQLParser.KW_REPLICA);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4316;
				this.match(PostgreSQLParser.KW_ENABLE);
				this.state = 4317;
				this.match(PostgreSQLParser.KW_ALWAYS);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4318;
				this.match(PostgreSQLParser.KW_DISABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createassertionstmt(): CreateassertionstmtContext {
		let _localctx: CreateassertionstmtContext = new CreateassertionstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, PostgreSQLParser.RULE_createassertionstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4321;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 4322;
			this.match(PostgreSQLParser.KW_ASSERTION);
			this.state = 4323;
			this.any_name();
			this.state = 4324;
			this.match(PostgreSQLParser.KW_CHECK);
			this.state = 4325;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 4326;
			this.a_expr();
			this.state = 4327;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			this.state = 4328;
			this.constraintattributespec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public definestmt(): DefinestmtContext {
		let _localctx: DefinestmtContext = new DefinestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, PostgreSQLParser.RULE_definestmt);
		let _la: number;
		try {
			this.state = 4444;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 335, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4330;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4332;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OR) {
					{
					this.state = 4331;
					this.opt_or_replace();
					}
				}

				this.state = 4334;
				this.match(PostgreSQLParser.KW_AGGREGATE);
				this.state = 4335;
				this.func_name();
				this.state = 4336;
				this.aggr_args();
				this.state = 4337;
				this.definition();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4339;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4341;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OR) {
					{
					this.state = 4340;
					this.opt_or_replace();
					}
				}

				this.state = 4343;
				this.match(PostgreSQLParser.KW_AGGREGATE);
				this.state = 4344;
				this.func_name();
				this.state = 4345;
				this.old_aggr_definition();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4347;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4348;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 4349;
				this.any_operator();
				this.state = 4350;
				this.definition();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4352;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4353;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4354;
				this.any_name();
				this.state = 4355;
				this.definition();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4357;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4358;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4359;
				this.any_name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4360;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4361;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4362;
				this.any_name();
				this.state = 4363;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 4364;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 4366;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 92)) & ~0x1F) === 0 && ((1 << (_la - 92)) & ((1 << (PostgreSQLParser.KW_TABLE - 92)) | (1 << (PostgreSQLParser.KW_IS - 92)) | (1 << (PostgreSQLParser.KW_OUTER - 92)))) !== 0) || ((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (PostgreSQLParser.KW_OVER - 124)) | (1 << (PostgreSQLParser.KW_ABORT - 124)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 124)) | (1 << (PostgreSQLParser.KW_ACCESS - 124)) | (1 << (PostgreSQLParser.KW_ACTION - 124)) | (1 << (PostgreSQLParser.KW_ADD - 124)) | (1 << (PostgreSQLParser.KW_ADMIN - 124)) | (1 << (PostgreSQLParser.KW_AFTER - 124)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 124)) | (1 << (PostgreSQLParser.KW_ALSO - 124)) | (1 << (PostgreSQLParser.KW_ALTER - 124)) | (1 << (PostgreSQLParser.KW_ALWAYS - 124)) | (1 << (PostgreSQLParser.KW_ASSERTION - 124)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 124)) | (1 << (PostgreSQLParser.KW_AT - 124)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 124)) | (1 << (PostgreSQLParser.KW_BACKWARD - 124)) | (1 << (PostgreSQLParser.KW_BEFORE - 124)) | (1 << (PostgreSQLParser.KW_BEGIN - 124)) | (1 << (PostgreSQLParser.KW_BY - 124)) | (1 << (PostgreSQLParser.KW_CACHE - 124)) | (1 << (PostgreSQLParser.KW_CALLED - 124)) | (1 << (PostgreSQLParser.KW_CASCADE - 124)) | (1 << (PostgreSQLParser.KW_CASCADED - 124)) | (1 << (PostgreSQLParser.KW_CATALOG - 124)) | (1 << (PostgreSQLParser.KW_CHAIN - 124)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 124)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 124)))) !== 0) || ((((_la - 156)) & ~0x1F) === 0 && ((1 << (_la - 156)) & ((1 << (PostgreSQLParser.KW_CLASS - 156)) | (1 << (PostgreSQLParser.KW_CLOSE - 156)) | (1 << (PostgreSQLParser.KW_CLUSTER - 156)) | (1 << (PostgreSQLParser.KW_COMMENT - 156)) | (1 << (PostgreSQLParser.KW_COMMENTS - 156)) | (1 << (PostgreSQLParser.KW_COMMIT - 156)) | (1 << (PostgreSQLParser.KW_COMMITTED - 156)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 156)) | (1 << (PostgreSQLParser.KW_CONNECTION - 156)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 156)) | (1 << (PostgreSQLParser.KW_CONTENT - 156)) | (1 << (PostgreSQLParser.KW_CONTINUE - 156)) | (1 << (PostgreSQLParser.KW_CONVERSION - 156)) | (1 << (PostgreSQLParser.KW_COPY - 156)) | (1 << (PostgreSQLParser.KW_COST - 156)) | (1 << (PostgreSQLParser.KW_CSV - 156)) | (1 << (PostgreSQLParser.KW_CURSOR - 156)) | (1 << (PostgreSQLParser.KW_CYCLE - 156)) | (1 << (PostgreSQLParser.KW_DATA - 156)) | (1 << (PostgreSQLParser.KW_DATABASE - 156)) | (1 << (PostgreSQLParser.KW_DAY - 156)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 156)) | (1 << (PostgreSQLParser.KW_DECLARE - 156)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 156)) | (1 << (PostgreSQLParser.KW_DEFERRED - 156)) | (1 << (PostgreSQLParser.KW_DEFINER - 156)) | (1 << (PostgreSQLParser.KW_DELETE - 156)) | (1 << (PostgreSQLParser.KW_DELIMITER - 156)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 156)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 156)) | (1 << (PostgreSQLParser.KW_DISABLE - 156)) | (1 << (PostgreSQLParser.KW_DISCARD - 156)))) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (PostgreSQLParser.KW_DOCUMENT - 188)) | (1 << (PostgreSQLParser.KW_DOMAIN - 188)) | (1 << (PostgreSQLParser.KW_DOUBLE - 188)) | (1 << (PostgreSQLParser.KW_DROP - 188)) | (1 << (PostgreSQLParser.KW_EACH - 188)) | (1 << (PostgreSQLParser.KW_ENABLE - 188)) | (1 << (PostgreSQLParser.KW_ENCODING - 188)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 188)) | (1 << (PostgreSQLParser.KW_ENUM - 188)) | (1 << (PostgreSQLParser.KW_ESCAPE - 188)) | (1 << (PostgreSQLParser.KW_EVENT - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 188)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 188)) | (1 << (PostgreSQLParser.KW_EXECUTE - 188)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 188)) | (1 << (PostgreSQLParser.KW_EXTENSION - 188)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 188)) | (1 << (PostgreSQLParser.KW_FAMILY - 188)) | (1 << (PostgreSQLParser.KW_FIRST - 188)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 188)) | (1 << (PostgreSQLParser.KW_FORCE - 188)) | (1 << (PostgreSQLParser.KW_FORWARD - 188)) | (1 << (PostgreSQLParser.KW_FUNCTION - 188)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 188)) | (1 << (PostgreSQLParser.KW_GLOBAL - 188)) | (1 << (PostgreSQLParser.KW_GRANTED - 188)) | (1 << (PostgreSQLParser.KW_HANDLER - 188)) | (1 << (PostgreSQLParser.KW_HEADER - 188)) | (1 << (PostgreSQLParser.KW_HOLD - 188)) | (1 << (PostgreSQLParser.KW_HOUR - 188)) | (1 << (PostgreSQLParser.KW_IDENTITY - 188)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (PostgreSQLParser.KW_IF - 220)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 220)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 220)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 220)) | (1 << (PostgreSQLParser.KW_INCLUDING - 220)) | (1 << (PostgreSQLParser.KW_INCREMENT - 220)) | (1 << (PostgreSQLParser.KW_INDEX - 220)) | (1 << (PostgreSQLParser.KW_INDEXES - 220)) | (1 << (PostgreSQLParser.KW_INHERIT - 220)) | (1 << (PostgreSQLParser.KW_INHERITS - 220)) | (1 << (PostgreSQLParser.KW_INLINE - 220)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 220)) | (1 << (PostgreSQLParser.KW_INSERT - 220)) | (1 << (PostgreSQLParser.KW_INSTEAD - 220)) | (1 << (PostgreSQLParser.KW_INVOKER - 220)) | (1 << (PostgreSQLParser.KW_ISOLATION - 220)) | (1 << (PostgreSQLParser.KW_KEY - 220)) | (1 << (PostgreSQLParser.KW_LABEL - 220)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 220)) | (1 << (PostgreSQLParser.KW_LARGE - 220)) | (1 << (PostgreSQLParser.KW_LAST - 220)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 220)) | (1 << (PostgreSQLParser.KW_LEVEL - 220)))) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & ((1 << (PostgreSQLParser.KW_LISTEN - 252)) | (1 << (PostgreSQLParser.KW_LOAD - 252)) | (1 << (PostgreSQLParser.KW_LOCAL - 252)) | (1 << (PostgreSQLParser.KW_LOCATION - 252)) | (1 << (PostgreSQLParser.KW_LOCK - 252)) | (1 << (PostgreSQLParser.KW_MAPPING - 252)) | (1 << (PostgreSQLParser.KW_MATCH - 252)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 252)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 252)) | (1 << (PostgreSQLParser.KW_MINUTE - 252)) | (1 << (PostgreSQLParser.KW_MINVALUE - 252)) | (1 << (PostgreSQLParser.KW_MODE - 252)) | (1 << (PostgreSQLParser.KW_MONTH - 252)) | (1 << (PostgreSQLParser.KW_MOVE - 252)) | (1 << (PostgreSQLParser.KW_NAME - 252)) | (1 << (PostgreSQLParser.KW_NAMES - 252)) | (1 << (PostgreSQLParser.KW_NEXT - 252)) | (1 << (PostgreSQLParser.KW_NO - 252)) | (1 << (PostgreSQLParser.KW_NOTHING - 252)) | (1 << (PostgreSQLParser.KW_NOTIFY - 252)) | (1 << (PostgreSQLParser.KW_NOWAIT - 252)) | (1 << (PostgreSQLParser.KW_NULLS - 252)) | (1 << (PostgreSQLParser.KW_OBJECT - 252)) | (1 << (PostgreSQLParser.KW_OF - 252)) | (1 << (PostgreSQLParser.KW_OFF - 252)) | (1 << (PostgreSQLParser.KW_OIDS - 252)) | (1 << (PostgreSQLParser.KW_OPERATOR - 252)) | (1 << (PostgreSQLParser.KW_OPTION - 252)) | (1 << (PostgreSQLParser.KW_OPTIONS - 252)) | (1 << (PostgreSQLParser.KW_OWNED - 252)) | (1 << (PostgreSQLParser.KW_OWNER - 252)) | (1 << (PostgreSQLParser.KW_PARSER - 252)))) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & ((1 << (PostgreSQLParser.KW_PARTIAL - 284)) | (1 << (PostgreSQLParser.KW_PARTITION - 284)) | (1 << (PostgreSQLParser.KW_PASSING - 284)) | (1 << (PostgreSQLParser.KW_PASSWORD - 284)) | (1 << (PostgreSQLParser.KW_PLANS - 284)) | (1 << (PostgreSQLParser.KW_PRECEDING - 284)) | (1 << (PostgreSQLParser.KW_PREPARE - 284)) | (1 << (PostgreSQLParser.KW_PREPARED - 284)) | (1 << (PostgreSQLParser.KW_PRESERVE - 284)) | (1 << (PostgreSQLParser.KW_PRIOR - 284)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 284)) | (1 << (PostgreSQLParser.KW_PROGRAM - 284)) | (1 << (PostgreSQLParser.KW_QUOTE - 284)) | (1 << (PostgreSQLParser.KW_RANGE - 284)) | (1 << (PostgreSQLParser.KW_READ - 284)) | (1 << (PostgreSQLParser.KW_REASSIGN - 284)) | (1 << (PostgreSQLParser.KW_RECHECK - 284)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 284)) | (1 << (PostgreSQLParser.KW_REF - 284)) | (1 << (PostgreSQLParser.KW_REFRESH - 284)) | (1 << (PostgreSQLParser.KW_REINDEX - 284)) | (1 << (PostgreSQLParser.KW_RELATIVE - 284)) | (1 << (PostgreSQLParser.KW_RELEASE - 284)) | (1 << (PostgreSQLParser.KW_RENAME - 284)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 284)) | (1 << (PostgreSQLParser.KW_REPLACE - 284)) | (1 << (PostgreSQLParser.KW_REPLICA - 284)) | (1 << (PostgreSQLParser.KW_RESET - 284)) | (1 << (PostgreSQLParser.KW_RESTART - 284)) | (1 << (PostgreSQLParser.KW_RESTRICT - 284)))) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & ((1 << (PostgreSQLParser.KW_RETURNS - 316)) | (1 << (PostgreSQLParser.KW_REVOKE - 316)) | (1 << (PostgreSQLParser.KW_ROLE - 316)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 316)) | (1 << (PostgreSQLParser.KW_ROWS - 316)) | (1 << (PostgreSQLParser.KW_RULE - 316)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 316)) | (1 << (PostgreSQLParser.KW_SCHEMA - 316)) | (1 << (PostgreSQLParser.KW_SCROLL - 316)) | (1 << (PostgreSQLParser.KW_SEARCH - 316)) | (1 << (PostgreSQLParser.KW_SECOND - 316)) | (1 << (PostgreSQLParser.KW_SECURITY - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 316)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 316)) | (1 << (PostgreSQLParser.KW_SERVER - 316)) | (1 << (PostgreSQLParser.KW_SESSION - 316)) | (1 << (PostgreSQLParser.KW_SET - 316)) | (1 << (PostgreSQLParser.KW_SHARE - 316)) | (1 << (PostgreSQLParser.KW_SHOW - 316)) | (1 << (PostgreSQLParser.KW_SIMPLE - 316)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 316)) | (1 << (PostgreSQLParser.KW_STABLE - 316)) | (1 << (PostgreSQLParser.KW_STANDALONE - 316)) | (1 << (PostgreSQLParser.KW_START - 316)) | (1 << (PostgreSQLParser.KW_STATEMENT - 316)) | (1 << (PostgreSQLParser.KW_STATISTICS - 316)) | (1 << (PostgreSQLParser.KW_STDIN - 316)) | (1 << (PostgreSQLParser.KW_STDOUT - 316)) | (1 << (PostgreSQLParser.KW_STORAGE - 316)) | (1 << (PostgreSQLParser.KW_STRICT - 316)) | (1 << (PostgreSQLParser.KW_STRIP - 316)))) !== 0) || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (PostgreSQLParser.KW_SYSID - 348)) | (1 << (PostgreSQLParser.KW_SYSTEM - 348)) | (1 << (PostgreSQLParser.KW_TABLES - 348)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 348)) | (1 << (PostgreSQLParser.KW_TEMP - 348)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 348)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 348)) | (1 << (PostgreSQLParser.KW_TEXT - 348)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 348)) | (1 << (PostgreSQLParser.KW_TRIGGER - 348)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 348)) | (1 << (PostgreSQLParser.KW_TRUSTED - 348)) | (1 << (PostgreSQLParser.KW_TYPE - 348)) | (1 << (PostgreSQLParser.KW_TYPES - 348)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 348)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 348)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 348)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 348)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 348)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 348)) | (1 << (PostgreSQLParser.KW_UNTIL - 348)) | (1 << (PostgreSQLParser.KW_UPDATE - 348)) | (1 << (PostgreSQLParser.KW_VACUUM - 348)) | (1 << (PostgreSQLParser.KW_VALID - 348)) | (1 << (PostgreSQLParser.KW_VALIDATE - 348)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 348)) | (1 << (PostgreSQLParser.KW_VARYING - 348)) | (1 << (PostgreSQLParser.KW_VERSION - 348)) | (1 << (PostgreSQLParser.KW_VIEW - 348)) | (1 << (PostgreSQLParser.KW_VOLATILE - 348)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 348)) | (1 << (PostgreSQLParser.KW_WITHOUT - 348)))) !== 0) || ((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (PostgreSQLParser.KW_WORK - 380)) | (1 << (PostgreSQLParser.KW_WRAPPER - 380)) | (1 << (PostgreSQLParser.KW_WRITE - 380)) | (1 << (PostgreSQLParser.KW_XML - 380)) | (1 << (PostgreSQLParser.KW_YEAR - 380)) | (1 << (PostgreSQLParser.KW_YES - 380)) | (1 << (PostgreSQLParser.KW_ZONE - 380)) | (1 << (PostgreSQLParser.KW_BETWEEN - 380)) | (1 << (PostgreSQLParser.KW_BIGINT - 380)) | (1 << (PostgreSQLParser.KW_BIT - 380)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 380)) | (1 << (PostgreSQLParser.KW_CHAR - 380)) | (1 << (PostgreSQLParser.KW_CHARACTER - 380)) | (1 << (PostgreSQLParser.KW_COALESCE - 380)) | (1 << (PostgreSQLParser.KW_DEC - 380)) | (1 << (PostgreSQLParser.KW_DECIMAL - 380)) | (1 << (PostgreSQLParser.KW_EXISTS - 380)) | (1 << (PostgreSQLParser.KW_EXTRACT - 380)) | (1 << (PostgreSQLParser.KW_FLOAT - 380)) | (1 << (PostgreSQLParser.KW_GREATEST - 380)) | (1 << (PostgreSQLParser.KW_INOUT - 380)) | (1 << (PostgreSQLParser.KW_INT - 380)) | (1 << (PostgreSQLParser.KW_INTEGER - 380)) | (1 << (PostgreSQLParser.KW_INTERVAL - 380)) | (1 << (PostgreSQLParser.KW_LEAST - 380)) | (1 << (PostgreSQLParser.KW_NATIONAL - 380)) | (1 << (PostgreSQLParser.KW_NCHAR - 380)) | (1 << (PostgreSQLParser.KW_NONE - 380)) | (1 << (PostgreSQLParser.KW_NULLIF - 380)) | (1 << (PostgreSQLParser.KW_NUMERIC - 380)) | (1 << (PostgreSQLParser.KW_OVERLAY - 380)) | (1 << (PostgreSQLParser.KW_POSITION - 380)))) !== 0) || ((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & ((1 << (PostgreSQLParser.KW_PRECISION - 412)) | (1 << (PostgreSQLParser.KW_REAL - 412)) | (1 << (PostgreSQLParser.KW_ROW - 412)) | (1 << (PostgreSQLParser.KW_SETOF - 412)) | (1 << (PostgreSQLParser.KW_SMALLINT - 412)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 412)) | (1 << (PostgreSQLParser.KW_TIME - 412)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 412)) | (1 << (PostgreSQLParser.KW_TREAT - 412)) | (1 << (PostgreSQLParser.KW_TRIM - 412)) | (1 << (PostgreSQLParser.KW_VALUES - 412)) | (1 << (PostgreSQLParser.KW_VARCHAR - 412)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 412)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 412)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 412)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 412)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 412)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 412)) | (1 << (PostgreSQLParser.KW_XMLPI - 412)) | (1 << (PostgreSQLParser.KW_XMLROOT - 412)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 412)) | (1 << (PostgreSQLParser.KW_CALL - 412)) | (1 << (PostgreSQLParser.KW_CURRENT - 412)) | (1 << (PostgreSQLParser.KW_ATTACH - 412)) | (1 << (PostgreSQLParser.KW_DETACH - 412)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 412)) | (1 << (PostgreSQLParser.KW_GENERATED - 412)) | (1 << (PostgreSQLParser.KW_LOGGED - 412)) | (1 << (PostgreSQLParser.KW_STORED - 412)) | (1 << (PostgreSQLParser.KW_INCLUDE - 412)) | (1 << (PostgreSQLParser.KW_ROUTINE - 412)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 412)))) !== 0) || ((((_la - 444)) & ~0x1F) === 0 && ((1 << (_la - 444)) & ((1 << (PostgreSQLParser.KW_IMPORT - 444)) | (1 << (PostgreSQLParser.KW_POLICY - 444)) | (1 << (PostgreSQLParser.KW_METHOD - 444)) | (1 << (PostgreSQLParser.KW_REFERENCING - 444)) | (1 << (PostgreSQLParser.KW_NEW - 444)) | (1 << (PostgreSQLParser.KW_OLD - 444)) | (1 << (PostgreSQLParser.KW_VALUE - 444)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 444)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 444)) | (1 << (PostgreSQLParser.KW_OUT - 444)) | (1 << (PostgreSQLParser.KW_ROUTINES - 444)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 444)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 444)) | (1 << (PostgreSQLParser.KW_INPUT - 444)) | (1 << (PostgreSQLParser.KW_SUPPORT - 444)) | (1 << (PostgreSQLParser.KW_PARALLEL - 444)) | (1 << (PostgreSQLParser.KW_SQL - 444)) | (1 << (PostgreSQLParser.KW_DEPENDS - 444)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 444)) | (1 << (PostgreSQLParser.KW_CONFLICT - 444)) | (1 << (PostgreSQLParser.KW_SKIP - 444)) | (1 << (PostgreSQLParser.KW_LOCKED - 444)) | (1 << (PostgreSQLParser.KW_TIES - 444)) | (1 << (PostgreSQLParser.KW_ROLLUP - 444)) | (1 << (PostgreSQLParser.KW_CUBE - 444)) | (1 << (PostgreSQLParser.KW_GROUPING - 444)) | (1 << (PostgreSQLParser.KW_SETS - 444)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 444)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 444)) | (1 << (PostgreSQLParser.KW_COLUMNS - 444)))) !== 0) || ((((_la - 476)) & ~0x1F) === 0 && ((1 << (_la - 476)) & ((1 << (PostgreSQLParser.KW_XMLNAMESPACES - 476)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 476)) | (1 << (PostgreSQLParser.KW_WITHIN - 476)) | (1 << (PostgreSQLParser.KW_FILTER - 476)) | (1 << (PostgreSQLParser.KW_GROUPS - 476)) | (1 << (PostgreSQLParser.KW_OTHERS - 476)) | (1 << (PostgreSQLParser.KW_NFC - 476)) | (1 << (PostgreSQLParser.KW_NFD - 476)) | (1 << (PostgreSQLParser.KW_NFKC - 476)) | (1 << (PostgreSQLParser.KW_NFKD - 476)) | (1 << (PostgreSQLParser.KW_UESCAPE - 476)) | (1 << (PostgreSQLParser.KW_VIEWS - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 476)) | (1 << (PostgreSQLParser.KW_DUMP - 476)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 476)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 476)) | (1 << (PostgreSQLParser.KW_ERROR - 476)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 476)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 476)) | (1 << (PostgreSQLParser.KW_ALIAS - 476)) | (1 << (PostgreSQLParser.KW_CONSTANT - 476)) | (1 << (PostgreSQLParser.KW_PERFORM - 476)) | (1 << (PostgreSQLParser.KW_GET - 476)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 476)) | (1 << (PostgreSQLParser.KW_STACKED - 476)) | (1 << (PostgreSQLParser.KW_ELSIF - 476)) | (1 << (PostgreSQLParser.KW_REVERSE - 476)) | (1 << (PostgreSQLParser.KW_SLICE - 476)) | (1 << (PostgreSQLParser.KW_EXIT - 476)))) !== 0) || ((((_la - 508)) & ~0x1F) === 0 && ((1 << (_la - 508)) & ((1 << (PostgreSQLParser.KW_RETURN - 508)) | (1 << (PostgreSQLParser.KW_QUERY - 508)) | (1 << (PostgreSQLParser.KW_RAISE - 508)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 508)) | (1 << (PostgreSQLParser.KW_DEBUG - 508)) | (1 << (PostgreSQLParser.KW_LOG - 508)) | (1 << (PostgreSQLParser.KW_INFO - 508)) | (1 << (PostgreSQLParser.KW_NOTICE - 508)) | (1 << (PostgreSQLParser.KW_WARNING - 508)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 508)) | (1 << (PostgreSQLParser.KW_ASSERT - 508)) | (1 << (PostgreSQLParser.KW_OPEN - 508)) | (1 << (PostgreSQLParser.Identifier - 508)) | (1 << (PostgreSQLParser.QuotedIdentifier - 508)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 508)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
					{
					this.state = 4365;
					this.opttablefuncelementlist();
					}
				}

				this.state = 4368;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4370;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4371;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4372;
				this.any_name();
				this.state = 4373;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 4374;
				this.match(PostgreSQLParser.KW_ENUM);
				this.state = 4375;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 4377;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 534)) & ~0x1F) === 0 && ((1 << (_la - 534)) & ((1 << (PostgreSQLParser.StringConstant - 534)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 534)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 534)) | (1 << (PostgreSQLParser.EscapeStringConstant - 534)))) !== 0)) {
					{
					this.state = 4376;
					this.opt_enum_val_list();
					}
				}

				this.state = 4379;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4381;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4382;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4383;
				this.any_name();
				this.state = 4384;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 4385;
				this.match(PostgreSQLParser.KW_RANGE);
				this.state = 4386;
				this.definition();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4388;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4389;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 4390;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 4391;
				this.match(PostgreSQLParser.KW_PARSER);
				this.state = 4392;
				this.any_name();
				this.state = 4393;
				this.definition();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4395;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4396;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 4397;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 4398;
				this.match(PostgreSQLParser.KW_DICTIONARY);
				this.state = 4399;
				this.any_name();
				this.state = 4400;
				this.definition();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4402;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4403;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 4404;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 4405;
				this.match(PostgreSQLParser.KW_TEMPLATE);
				this.state = 4406;
				this.any_name();
				this.state = 4407;
				this.definition();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4409;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4410;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 4411;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 4412;
				this.match(PostgreSQLParser.KW_CONFIGURATION);
				this.state = 4413;
				this.any_name();
				this.state = 4414;
				this.definition();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4416;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4417;
				this.match(PostgreSQLParser.KW_COLLATION);
				this.state = 4418;
				this.any_name();
				this.state = 4419;
				this.definition();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 4421;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4422;
				this.match(PostgreSQLParser.KW_COLLATION);
				this.state = 4423;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 4424;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 4425;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 4426;
				this.any_name();
				this.state = 4427;
				this.definition();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 4429;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4430;
				this.match(PostgreSQLParser.KW_COLLATION);
				this.state = 4431;
				this.any_name();
				this.state = 4432;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 4433;
				this.any_name();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 4435;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 4436;
				this.match(PostgreSQLParser.KW_COLLATION);
				this.state = 4437;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 4438;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 4439;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 4440;
				this.any_name();
				this.state = 4441;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 4442;
				this.any_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public definition(): DefinitionContext {
		let _localctx: DefinitionContext = new DefinitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, PostgreSQLParser.RULE_definition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4446;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 4447;
			this.def_list();
			this.state = 4448;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public def_list(): Def_listContext {
		let _localctx: Def_listContext = new Def_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, PostgreSQLParser.RULE_def_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4450;
			this.def_elem();
			this.state = 4455;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 4451;
				this.match(PostgreSQLParser.COMMA);
				this.state = 4452;
				this.def_elem();
				}
				}
				this.state = 4457;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public def_elem(): Def_elemContext {
		let _localctx: Def_elemContext = new Def_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, PostgreSQLParser.RULE_def_elem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4458;
			this.collabel();
			this.state = 4461;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.EQUAL) {
				{
				this.state = 4459;
				this.match(PostgreSQLParser.EQUAL);
				this.state = 4460;
				this.def_arg();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public def_arg(): Def_argContext {
		let _localctx: Def_argContext = new Def_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, PostgreSQLParser.RULE_def_arg);
		try {
			this.state = 4469;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 338, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4463;
				this.func_type();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4464;
				this.reserved_keyword();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4465;
				this.qual_all_op();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4466;
				this.numericonly();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4467;
				this.sconst();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4468;
				this.match(PostgreSQLParser.KW_NONE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public old_aggr_definition(): Old_aggr_definitionContext {
		let _localctx: Old_aggr_definitionContext = new Old_aggr_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, PostgreSQLParser.RULE_old_aggr_definition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4471;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 4472;
			this.old_aggr_list();
			this.state = 4473;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public old_aggr_list(): Old_aggr_listContext {
		let _localctx: Old_aggr_listContext = new Old_aggr_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, PostgreSQLParser.RULE_old_aggr_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4475;
			this.old_aggr_elem();
			this.state = 4480;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 4476;
				this.match(PostgreSQLParser.COMMA);
				this.state = 4477;
				this.old_aggr_elem();
				}
				}
				this.state = 4482;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public old_aggr_elem(): Old_aggr_elemContext {
		let _localctx: Old_aggr_elemContext = new Old_aggr_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, PostgreSQLParser.RULE_old_aggr_elem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4483;
			this.identifier();
			this.state = 4484;
			this.match(PostgreSQLParser.EQUAL);
			this.state = 4485;
			this.def_arg();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_enum_val_list(): Opt_enum_val_listContext {
		let _localctx: Opt_enum_val_listContext = new Opt_enum_val_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, PostgreSQLParser.RULE_opt_enum_val_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4487;
			this.enum_val_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enum_val_list(): Enum_val_listContext {
		let _localctx: Enum_val_listContext = new Enum_val_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, PostgreSQLParser.RULE_enum_val_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4489;
			this.sconst();
			this.state = 4494;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 4490;
				this.match(PostgreSQLParser.COMMA);
				this.state = 4491;
				this.sconst();
				}
				}
				this.state = 4496;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterenumstmt(): AlterenumstmtContext {
		let _localctx: AlterenumstmtContext = new AlterenumstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 484, PostgreSQLParser.RULE_alterenumstmt);
		let _la: number;
		try {
			this.state = 4540;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 344, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4497;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 4498;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4499;
				this.any_name();
				this.state = 4500;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 4501;
				this.match(PostgreSQLParser.KW_VALUE);
				this.state = 4503;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_IF) {
					{
					this.state = 4502;
					this.opt_if_not_exists();
					}
				}

				this.state = 4505;
				this.sconst();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4507;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 4508;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4509;
				this.any_name();
				this.state = 4510;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 4511;
				this.match(PostgreSQLParser.KW_VALUE);
				this.state = 4513;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_IF) {
					{
					this.state = 4512;
					this.opt_if_not_exists();
					}
				}

				this.state = 4515;
				this.sconst();
				this.state = 4516;
				this.match(PostgreSQLParser.KW_BEFORE);
				this.state = 4517;
				this.sconst();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4519;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 4520;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4521;
				this.any_name();
				this.state = 4522;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 4523;
				this.match(PostgreSQLParser.KW_VALUE);
				this.state = 4525;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_IF) {
					{
					this.state = 4524;
					this.opt_if_not_exists();
					}
				}

				this.state = 4527;
				this.sconst();
				this.state = 4528;
				this.match(PostgreSQLParser.KW_AFTER);
				this.state = 4529;
				this.sconst();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4531;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 4532;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4533;
				this.any_name();
				this.state = 4534;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 4535;
				this.match(PostgreSQLParser.KW_VALUE);
				this.state = 4536;
				this.sconst();
				this.state = 4537;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 4538;
				this.sconst();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_if_not_exists(): Opt_if_not_existsContext {
		let _localctx: Opt_if_not_existsContext = new Opt_if_not_existsContext(this._ctx, this.state);
		this.enterRule(_localctx, 486, PostgreSQLParser.RULE_opt_if_not_exists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4542;
			this.match(PostgreSQLParser.KW_IF);
			this.state = 4543;
			this.match(PostgreSQLParser.KW_NOT);
			this.state = 4544;
			this.match(PostgreSQLParser.KW_EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createopclassstmt(): CreateopclassstmtContext {
		let _localctx: CreateopclassstmtContext = new CreateopclassstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 488, PostgreSQLParser.RULE_createopclassstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4546;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 4547;
			this.match(PostgreSQLParser.KW_OPERATOR);
			this.state = 4548;
			this.match(PostgreSQLParser.KW_CLASS);
			this.state = 4549;
			this.any_name();
			this.state = 4551;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_DEFAULT) {
				{
				this.state = 4550;
				this.opt_default();
				}
			}

			this.state = 4553;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 4554;
			this.match(PostgreSQLParser.KW_TYPE);
			this.state = 4555;
			this.typename();
			this.state = 4556;
			this.match(PostgreSQLParser.KW_USING);
			this.state = 4557;
			this.name();
			this.state = 4559;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_FAMILY) {
				{
				this.state = 4558;
				this.opt_opfamily();
				}
			}

			this.state = 4561;
			this.match(PostgreSQLParser.KW_AS);
			this.state = 4562;
			this.opclass_item_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opclass_item_list(): Opclass_item_listContext {
		let _localctx: Opclass_item_listContext = new Opclass_item_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 490, PostgreSQLParser.RULE_opclass_item_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4564;
			this.opclass_item();
			this.state = 4569;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 4565;
				this.match(PostgreSQLParser.COMMA);
				this.state = 4566;
				this.opclass_item();
				}
				}
				this.state = 4571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opclass_item(): Opclass_itemContext {
		let _localctx: Opclass_itemContext = new Opclass_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 492, PostgreSQLParser.RULE_opclass_item);
		let _la: number;
		try {
			this.state = 4603;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 352, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4572;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 4573;
				this.iconst();
				this.state = 4574;
				this.any_operator();
				this.state = 4576;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 4575;
					this.opclass_purpose();
					}
				}

				this.state = 4579;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_RECHECK) {
					{
					this.state = 4578;
					this.opt_recheck();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4581;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 4582;
				this.iconst();
				this.state = 4583;
				this.operator_with_argtypes();
				this.state = 4585;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 4584;
					this.opclass_purpose();
					}
				}

				this.state = 4588;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_RECHECK) {
					{
					this.state = 4587;
					this.opt_recheck();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4590;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 4591;
				this.iconst();
				this.state = 4592;
				this.function_with_argtypes();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4594;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 4595;
				this.iconst();
				this.state = 4596;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 4597;
				this.type_list();
				this.state = 4598;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 4599;
				this.function_with_argtypes();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4601;
				this.match(PostgreSQLParser.KW_STORAGE);
				this.state = 4602;
				this.typename();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_default(): Opt_defaultContext {
		let _localctx: Opt_defaultContext = new Opt_defaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 494, PostgreSQLParser.RULE_opt_default);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4605;
			this.match(PostgreSQLParser.KW_DEFAULT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_opfamily(): Opt_opfamilyContext {
		let _localctx: Opt_opfamilyContext = new Opt_opfamilyContext(this._ctx, this.state);
		this.enterRule(_localctx, 496, PostgreSQLParser.RULE_opt_opfamily);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4607;
			this.match(PostgreSQLParser.KW_FAMILY);
			this.state = 4608;
			this.any_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opclass_purpose(): Opclass_purposeContext {
		let _localctx: Opclass_purposeContext = new Opclass_purposeContext(this._ctx, this.state);
		this.enterRule(_localctx, 498, PostgreSQLParser.RULE_opclass_purpose);
		try {
			this.state = 4616;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 353, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4610;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 4611;
				this.match(PostgreSQLParser.KW_SEARCH);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4612;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 4613;
				this.match(PostgreSQLParser.KW_ORDER);
				this.state = 4614;
				this.match(PostgreSQLParser.KW_BY);
				this.state = 4615;
				this.any_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_recheck(): Opt_recheckContext {
		let _localctx: Opt_recheckContext = new Opt_recheckContext(this._ctx, this.state);
		this.enterRule(_localctx, 500, PostgreSQLParser.RULE_opt_recheck);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4618;
			this.match(PostgreSQLParser.KW_RECHECK);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createopfamilystmt(): CreateopfamilystmtContext {
		let _localctx: CreateopfamilystmtContext = new CreateopfamilystmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 502, PostgreSQLParser.RULE_createopfamilystmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4620;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 4621;
			this.match(PostgreSQLParser.KW_OPERATOR);
			this.state = 4622;
			this.match(PostgreSQLParser.KW_FAMILY);
			this.state = 4623;
			this.any_name();
			this.state = 4624;
			this.match(PostgreSQLParser.KW_USING);
			this.state = 4625;
			this.name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alteropfamilystmt(): AlteropfamilystmtContext {
		let _localctx: AlteropfamilystmtContext = new AlteropfamilystmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 504, PostgreSQLParser.RULE_alteropfamilystmt);
		try {
			this.state = 4645;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 354, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4627;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 4628;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 4629;
				this.match(PostgreSQLParser.KW_FAMILY);
				this.state = 4630;
				this.any_name();
				this.state = 4631;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 4632;
				this.name();
				this.state = 4633;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 4634;
				this.opclass_item_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4636;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 4637;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 4638;
				this.match(PostgreSQLParser.KW_FAMILY);
				this.state = 4639;
				this.any_name();
				this.state = 4640;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 4641;
				this.name();
				this.state = 4642;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4643;
				this.opclass_drop_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opclass_drop_list(): Opclass_drop_listContext {
		let _localctx: Opclass_drop_listContext = new Opclass_drop_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 506, PostgreSQLParser.RULE_opclass_drop_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4647;
			this.opclass_drop();
			this.state = 4652;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 4648;
				this.match(PostgreSQLParser.COMMA);
				this.state = 4649;
				this.opclass_drop();
				}
				}
				this.state = 4654;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opclass_drop(): Opclass_dropContext {
		let _localctx: Opclass_dropContext = new Opclass_dropContext(this._ctx, this.state);
		this.enterRule(_localctx, 508, PostgreSQLParser.RULE_opclass_drop);
		try {
			this.state = 4667;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_OPERATOR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4655;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 4656;
				this.iconst();
				this.state = 4657;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 4658;
				this.type_list();
				this.state = 4659;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_FUNCTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4661;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 4662;
				this.iconst();
				this.state = 4663;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 4664;
				this.type_list();
				this.state = 4665;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropopclassstmt(): DropopclassstmtContext {
		let _localctx: DropopclassstmtContext = new DropopclassstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 510, PostgreSQLParser.RULE_dropopclassstmt);
		let _la: number;
		try {
			this.state = 4689;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 359, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4669;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4670;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 4671;
				this.match(PostgreSQLParser.KW_CLASS);
				this.state = 4672;
				this.any_name();
				this.state = 4673;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 4674;
				this.name();
				this.state = 4676;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4675;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4678;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4679;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 4680;
				this.match(PostgreSQLParser.KW_CLASS);
				this.state = 4681;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 4682;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 4683;
				this.any_name();
				this.state = 4684;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 4685;
				this.name();
				this.state = 4687;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4686;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropopfamilystmt(): DropopfamilystmtContext {
		let _localctx: DropopfamilystmtContext = new DropopfamilystmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 512, PostgreSQLParser.RULE_dropopfamilystmt);
		let _la: number;
		try {
			this.state = 4711;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 362, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4691;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4692;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 4693;
				this.match(PostgreSQLParser.KW_FAMILY);
				this.state = 4694;
				this.any_name();
				this.state = 4695;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 4696;
				this.name();
				this.state = 4698;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4697;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4700;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4701;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 4702;
				this.match(PostgreSQLParser.KW_FAMILY);
				this.state = 4703;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 4704;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 4705;
				this.any_name();
				this.state = 4706;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 4707;
				this.name();
				this.state = 4709;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4708;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropownedstmt(): DropownedstmtContext {
		let _localctx: DropownedstmtContext = new DropownedstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 514, PostgreSQLParser.RULE_dropownedstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4713;
			this.match(PostgreSQLParser.KW_DROP);
			this.state = 4714;
			this.match(PostgreSQLParser.KW_OWNED);
			this.state = 4715;
			this.match(PostgreSQLParser.KW_BY);
			this.state = 4716;
			this.role_list();
			this.state = 4718;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
				{
				this.state = 4717;
				this.opt_drop_behavior();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reassignownedstmt(): ReassignownedstmtContext {
		let _localctx: ReassignownedstmtContext = new ReassignownedstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 516, PostgreSQLParser.RULE_reassignownedstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4720;
			this.match(PostgreSQLParser.KW_REASSIGN);
			this.state = 4721;
			this.match(PostgreSQLParser.KW_OWNED);
			this.state = 4722;
			this.match(PostgreSQLParser.KW_BY);
			this.state = 4723;
			this.role_list();
			this.state = 4724;
			this.match(PostgreSQLParser.KW_TO);
			this.state = 4725;
			this.rolespec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropstmt(): DropstmtContext {
		let _localctx: DropstmtContext = new DropstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 518, PostgreSQLParser.RULE_dropstmt);
		let _la: number;
		try {
			this.state = 4817;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 376, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4727;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4728;
				this.object_type_any_name();
				this.state = 4729;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 4730;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 4731;
				this.any_name_list();
				this.state = 4733;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4732;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4735;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4736;
				this.object_type_any_name();
				this.state = 4737;
				this.any_name_list();
				this.state = 4739;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4738;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4741;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4742;
				this.drop_type_name();
				this.state = 4743;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 4744;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 4745;
				this.name_list();
				this.state = 4747;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4746;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4749;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4750;
				this.drop_type_name();
				this.state = 4751;
				this.name_list();
				this.state = 4753;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4752;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4755;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4756;
				this.object_type_name_on_any_name();
				this.state = 4757;
				this.name();
				this.state = 4758;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4759;
				this.any_name();
				this.state = 4761;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4760;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4763;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4764;
				this.object_type_name_on_any_name();
				this.state = 4765;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 4766;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 4767;
				this.name();
				this.state = 4768;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4769;
				this.any_name();
				this.state = 4771;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4770;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4773;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4774;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4775;
				this.type_name_list();
				this.state = 4777;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4776;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4779;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4780;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4781;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 4782;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 4783;
				this.type_name_list();
				this.state = 4785;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4784;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4787;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4788;
				this.match(PostgreSQLParser.KW_DOMAIN);
				this.state = 4789;
				this.type_name_list();
				this.state = 4791;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4790;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4793;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4794;
				this.match(PostgreSQLParser.KW_DOMAIN);
				this.state = 4795;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 4796;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 4797;
				this.type_name_list();
				this.state = 4799;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4798;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4801;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4802;
				this.match(PostgreSQLParser.KW_INDEX);
				this.state = 4803;
				this.match(PostgreSQLParser.KW_CONCURRENTLY);
				this.state = 4804;
				this.any_name_list();
				this.state = 4806;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4805;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4808;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 4809;
				this.match(PostgreSQLParser.KW_INDEX);
				this.state = 4810;
				this.match(PostgreSQLParser.KW_CONCURRENTLY);
				this.state = 4811;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 4812;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 4813;
				this.any_name_list();
				this.state = 4815;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 4814;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public object_type_any_name(): Object_type_any_nameContext {
		let _localctx: Object_type_any_nameContext = new Object_type_any_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 520, PostgreSQLParser.RULE_object_type_any_name);
		try {
			this.state = 4842;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 377, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4819;
				this.match(PostgreSQLParser.KW_TABLE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4820;
				this.match(PostgreSQLParser.KW_SEQUENCE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4821;
				this.match(PostgreSQLParser.KW_VIEW);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4822;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				this.state = 4823;
				this.match(PostgreSQLParser.KW_VIEW);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4824;
				this.match(PostgreSQLParser.KW_INDEX);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4825;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 4826;
				this.match(PostgreSQLParser.KW_TABLE);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4827;
				this.match(PostgreSQLParser.KW_COLLATION);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4828;
				this.match(PostgreSQLParser.KW_CONVERSION);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4829;
				this.match(PostgreSQLParser.KW_STATISTICS);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4830;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 4831;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 4832;
				this.match(PostgreSQLParser.KW_PARSER);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4833;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 4834;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 4835;
				this.match(PostgreSQLParser.KW_DICTIONARY);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4836;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 4837;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 4838;
				this.match(PostgreSQLParser.KW_TEMPLATE);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 4839;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 4840;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 4841;
				this.match(PostgreSQLParser.KW_CONFIGURATION);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public object_type_name(): Object_type_nameContext {
		let _localctx: Object_type_nameContext = new Object_type_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 522, PostgreSQLParser.RULE_object_type_name);
		try {
			this.state = 4849;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_FOREIGN:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_PUBLICATION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4844;
				this.drop_type_name();
				}
				break;
			case PostgreSQLParser.KW_DATABASE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4845;
				this.match(PostgreSQLParser.KW_DATABASE);
				}
				break;
			case PostgreSQLParser.KW_ROLE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4846;
				this.match(PostgreSQLParser.KW_ROLE);
				}
				break;
			case PostgreSQLParser.KW_SUBSCRIPTION:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4847;
				this.match(PostgreSQLParser.KW_SUBSCRIPTION);
				}
				break;
			case PostgreSQLParser.KW_TABLESPACE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4848;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_type_name(): Drop_type_nameContext {
		let _localctx: Drop_type_nameContext = new Drop_type_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 524, PostgreSQLParser.RULE_drop_type_name);
		let _la: number;
		try {
			this.state = 4866;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_ACCESS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4851;
				this.match(PostgreSQLParser.KW_ACCESS);
				this.state = 4852;
				this.match(PostgreSQLParser.KW_METHOD);
				}
				break;
			case PostgreSQLParser.KW_EVENT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4853;
				this.match(PostgreSQLParser.KW_EVENT);
				this.state = 4854;
				this.match(PostgreSQLParser.KW_TRIGGER);
				}
				break;
			case PostgreSQLParser.KW_EXTENSION:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4855;
				this.match(PostgreSQLParser.KW_EXTENSION);
				}
				break;
			case PostgreSQLParser.KW_FOREIGN:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4856;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 4857;
				this.match(PostgreSQLParser.KW_DATA);
				this.state = 4858;
				this.match(PostgreSQLParser.KW_WRAPPER);
				}
				break;
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_PROCEDURAL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4860;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_PROCEDURAL) {
					{
					this.state = 4859;
					this.opt_procedural();
					}
				}

				this.state = 4862;
				this.match(PostgreSQLParser.KW_LANGUAGE);
				}
				break;
			case PostgreSQLParser.KW_PUBLICATION:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4863;
				this.match(PostgreSQLParser.KW_PUBLICATION);
				}
				break;
			case PostgreSQLParser.KW_SCHEMA:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4864;
				this.match(PostgreSQLParser.KW_SCHEMA);
				}
				break;
			case PostgreSQLParser.KW_SERVER:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4865;
				this.match(PostgreSQLParser.KW_SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public object_type_name_on_any_name(): Object_type_name_on_any_nameContext {
		let _localctx: Object_type_name_on_any_nameContext = new Object_type_name_on_any_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 526, PostgreSQLParser.RULE_object_type_name_on_any_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4868;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_RULE || _la === PostgreSQLParser.KW_TRIGGER || _la === PostgreSQLParser.KW_POLICY)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public any_name_list(): Any_name_listContext {
		let _localctx: Any_name_listContext = new Any_name_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 528, PostgreSQLParser.RULE_any_name_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4870;
			this.any_name();
			this.state = 4875;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 4871;
				this.match(PostgreSQLParser.COMMA);
				this.state = 4872;
				this.any_name();
				}
				}
				this.state = 4877;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public any_name(): Any_nameContext {
		let _localctx: Any_nameContext = new Any_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 530, PostgreSQLParser.RULE_any_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4878;
			this.colid();
			this.state = 4880;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.DOT) {
				{
				this.state = 4879;
				this.attrs();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public attrs(): AttrsContext {
		let _localctx: AttrsContext = new AttrsContext(this._ctx, this.state);
		this.enterRule(_localctx, 532, PostgreSQLParser.RULE_attrs);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4884;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 4882;
					this.match(PostgreSQLParser.DOT);
					this.state = 4883;
					this.attr_name();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 4886;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 383, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_name_list(): Type_name_listContext {
		let _localctx: Type_name_listContext = new Type_name_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 534, PostgreSQLParser.RULE_type_name_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4888;
			this.typename();
			this.state = 4893;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 4889;
				this.match(PostgreSQLParser.COMMA);
				this.state = 4890;
				this.typename();
				}
				}
				this.state = 4895;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public truncatestmt(): TruncatestmtContext {
		let _localctx: TruncatestmtContext = new TruncatestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 536, PostgreSQLParser.RULE_truncatestmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 4896;
			this.match(PostgreSQLParser.KW_TRUNCATE);
			this.state = 4898;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 385, this._ctx) ) {
			case 1:
				{
				this.state = 4897;
				this.opt_table();
				}
				break;
			}
			this.state = 4900;
			this.relation_expr_list();
			this.state = 4902;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_CONTINUE || _la === PostgreSQLParser.KW_RESTART) {
				{
				this.state = 4901;
				this.opt_restart_seqs();
				}
			}

			this.state = 4905;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
				{
				this.state = 4904;
				this.opt_drop_behavior();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_restart_seqs(): Opt_restart_seqsContext {
		let _localctx: Opt_restart_seqsContext = new Opt_restart_seqsContext(this._ctx, this.state);
		this.enterRule(_localctx, 538, PostgreSQLParser.RULE_opt_restart_seqs);
		try {
			this.state = 4911;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_CONTINUE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4907;
				this.match(PostgreSQLParser.KW_CONTINUE);
				this.state = 4908;
				this.match(PostgreSQLParser.KW_IDENTITY);
				}
				break;
			case PostgreSQLParser.KW_RESTART:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4909;
				this.match(PostgreSQLParser.KW_RESTART);
				this.state = 4910;
				this.match(PostgreSQLParser.KW_IDENTITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commentstmt(): CommentstmtContext {
		let _localctx: CommentstmtContext = new CommentstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 540, PostgreSQLParser.RULE_commentstmt);
		try {
			this.state = 5060;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 389, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 4913;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4914;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4915;
				this.object_type_any_name();
				this.state = 4916;
				this.any_name();
				this.state = 4917;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 4918;
				this.comment_text();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 4920;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4921;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4922;
				this.match(PostgreSQLParser.KW_COLUMN);
				this.state = 4923;
				this.any_name();
				this.state = 4924;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 4925;
				this.comment_text();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 4927;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4928;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4929;
				this.object_type_name();
				this.state = 4930;
				this.name();
				this.state = 4931;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 4932;
				this.comment_text();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 4934;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4935;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4936;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 4937;
				this.typename();
				this.state = 4938;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 4939;
				this.comment_text();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 4941;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4942;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4943;
				this.match(PostgreSQLParser.KW_DOMAIN);
				this.state = 4944;
				this.typename();
				this.state = 4945;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 4946;
				this.comment_text();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 4948;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4949;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4950;
				this.match(PostgreSQLParser.KW_AGGREGATE);
				this.state = 4951;
				this.aggregate_with_argtypes();
				this.state = 4952;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 4953;
				this.comment_text();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 4955;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4956;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4957;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 4958;
				this.function_with_argtypes();
				this.state = 4959;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 4960;
				this.comment_text();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 4962;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4963;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4964;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 4965;
				this.operator_with_argtypes();
				this.state = 4966;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 4967;
				this.comment_text();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 4969;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4970;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4971;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 4972;
				this.name();
				this.state = 4973;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4974;
				this.any_name();
				this.state = 4975;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 4976;
				this.comment_text();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 4978;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4979;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4980;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 4981;
				this.name();
				this.state = 4982;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4983;
				this.match(PostgreSQLParser.KW_DOMAIN);
				this.state = 4984;
				this.any_name();
				this.state = 4985;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 4986;
				this.comment_text();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 4988;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4989;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4990;
				this.object_type_name_on_any_name();
				this.state = 4991;
				this.name();
				this.state = 4992;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4993;
				this.any_name();
				this.state = 4994;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 4995;
				this.comment_text();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 4997;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 4998;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 4999;
				this.match(PostgreSQLParser.KW_PROCEDURE);
				this.state = 5000;
				this.function_with_argtypes();
				this.state = 5001;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5002;
				this.comment_text();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5004;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 5005;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5006;
				this.match(PostgreSQLParser.KW_ROUTINE);
				this.state = 5007;
				this.function_with_argtypes();
				this.state = 5008;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5009;
				this.comment_text();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5011;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 5012;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5013;
				this.match(PostgreSQLParser.KW_TRANSFORM);
				this.state = 5014;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 5015;
				this.typename();
				this.state = 5016;
				this.match(PostgreSQLParser.KW_LANGUAGE);
				this.state = 5017;
				this.name();
				this.state = 5018;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5019;
				this.comment_text();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5021;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 5022;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5023;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 5024;
				this.match(PostgreSQLParser.KW_CLASS);
				this.state = 5025;
				this.any_name();
				this.state = 5026;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 5027;
				this.name();
				this.state = 5028;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5029;
				this.comment_text();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5031;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 5032;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5033;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 5034;
				this.match(PostgreSQLParser.KW_FAMILY);
				this.state = 5035;
				this.any_name();
				this.state = 5036;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 5037;
				this.name();
				this.state = 5038;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5039;
				this.comment_text();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 5041;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 5042;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5043;
				this.match(PostgreSQLParser.KW_LARGE);
				this.state = 5044;
				this.match(PostgreSQLParser.KW_OBJECT);
				this.state = 5045;
				this.numericonly();
				this.state = 5046;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5047;
				this.comment_text();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 5049;
				this.match(PostgreSQLParser.KW_COMMENT);
				this.state = 5050;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5051;
				this.match(PostgreSQLParser.KW_CAST);
				this.state = 5052;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 5053;
				this.typename();
				this.state = 5054;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 5055;
				this.typename();
				this.state = 5056;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 5057;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5058;
				this.comment_text();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comment_text(): Comment_textContext {
		let _localctx: Comment_textContext = new Comment_textContext(this._ctx, this.state);
		this.enterRule(_localctx, 542, PostgreSQLParser.RULE_comment_text);
		try {
			this.state = 5064;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5062;
				this.sconst();
				}
				break;
			case PostgreSQLParser.KW_NULL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5063;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public seclabelstmt(): SeclabelstmtContext {
		let _localctx: SeclabelstmtContext = new SeclabelstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 544, PostgreSQLParser.RULE_seclabelstmt);
		let _la: number;
		try {
			this.state = 5177;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 401, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5066;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5067;
				this.match(PostgreSQLParser.KW_LABEL);
				this.state = 5069;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 5068;
					this.opt_provider();
					}
				}

				this.state = 5071;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5072;
				this.object_type_any_name();
				this.state = 5073;
				this.any_name();
				this.state = 5074;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5075;
				this.security_label();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5077;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5078;
				this.match(PostgreSQLParser.KW_LABEL);
				this.state = 5080;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 5079;
					this.opt_provider();
					}
				}

				this.state = 5082;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5083;
				this.match(PostgreSQLParser.KW_COLUMN);
				this.state = 5084;
				this.any_name();
				this.state = 5085;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5086;
				this.security_label();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5088;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5089;
				this.match(PostgreSQLParser.KW_LABEL);
				this.state = 5091;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 5090;
					this.opt_provider();
					}
				}

				this.state = 5093;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5094;
				this.object_type_name();
				this.state = 5095;
				this.name();
				this.state = 5096;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5097;
				this.security_label();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5099;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5100;
				this.match(PostgreSQLParser.KW_LABEL);
				this.state = 5102;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 5101;
					this.opt_provider();
					}
				}

				this.state = 5104;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5105;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 5106;
				this.typename();
				this.state = 5107;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5108;
				this.security_label();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5110;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5111;
				this.match(PostgreSQLParser.KW_LABEL);
				this.state = 5113;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 5112;
					this.opt_provider();
					}
				}

				this.state = 5115;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5116;
				this.match(PostgreSQLParser.KW_DOMAIN);
				this.state = 5117;
				this.typename();
				this.state = 5118;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5119;
				this.security_label();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5121;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5122;
				this.match(PostgreSQLParser.KW_LABEL);
				this.state = 5124;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 5123;
					this.opt_provider();
					}
				}

				this.state = 5126;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5127;
				this.match(PostgreSQLParser.KW_AGGREGATE);
				this.state = 5128;
				this.aggregate_with_argtypes();
				this.state = 5129;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5130;
				this.security_label();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5132;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5133;
				this.match(PostgreSQLParser.KW_LABEL);
				this.state = 5135;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 5134;
					this.opt_provider();
					}
				}

				this.state = 5137;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5138;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 5139;
				this.function_with_argtypes();
				this.state = 5140;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5141;
				this.security_label();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5143;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5144;
				this.match(PostgreSQLParser.KW_LABEL);
				this.state = 5146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 5145;
					this.opt_provider();
					}
				}

				this.state = 5148;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5149;
				this.match(PostgreSQLParser.KW_LARGE);
				this.state = 5150;
				this.match(PostgreSQLParser.KW_OBJECT);
				this.state = 5151;
				this.numericonly();
				this.state = 5152;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5153;
				this.security_label();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5155;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5156;
				this.match(PostgreSQLParser.KW_LABEL);
				this.state = 5158;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 5157;
					this.opt_provider();
					}
				}

				this.state = 5160;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5161;
				this.match(PostgreSQLParser.KW_PROCEDURE);
				this.state = 5162;
				this.function_with_argtypes();
				this.state = 5163;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5164;
				this.security_label();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5166;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5167;
				this.match(PostgreSQLParser.KW_LABEL);
				this.state = 5169;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FOR) {
					{
					this.state = 5168;
					this.opt_provider();
					}
				}

				this.state = 5171;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5172;
				this.match(PostgreSQLParser.KW_ROUTINE);
				this.state = 5173;
				this.function_with_argtypes();
				this.state = 5174;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 5175;
				this.security_label();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_provider(): Opt_providerContext {
		let _localctx: Opt_providerContext = new Opt_providerContext(this._ctx, this.state);
		this.enterRule(_localctx, 546, PostgreSQLParser.RULE_opt_provider);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5179;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 5180;
			this.nonreservedword_or_sconst();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public security_label(): Security_labelContext {
		let _localctx: Security_labelContext = new Security_labelContext(this._ctx, this.state);
		this.enterRule(_localctx, 548, PostgreSQLParser.RULE_security_label);
		try {
			this.state = 5184;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5182;
				this.sconst();
				}
				break;
			case PostgreSQLParser.KW_NULL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5183;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fetchstmt(): FetchstmtContext {
		let _localctx: FetchstmtContext = new FetchstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 550, PostgreSQLParser.RULE_fetchstmt);
		try {
			this.state = 5190;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_FETCH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5186;
				this.match(PostgreSQLParser.KW_FETCH);
				this.state = 5187;
				this.fetch_args();
				}
				break;
			case PostgreSQLParser.KW_MOVE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5188;
				this.match(PostgreSQLParser.KW_MOVE);
				this.state = 5189;
				this.fetch_args();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fetch_args(): Fetch_argsContext {
		let _localctx: Fetch_argsContext = new Fetch_argsContext(this._ctx, this.state);
		this.enterRule(_localctx, 552, PostgreSQLParser.RULE_fetch_args);
		let _la: number;
		try {
			this.state = 5277;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 418, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5192;
				this.cursor_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5193;
				this.from_in();
				this.state = 5194;
				this.cursor_name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5196;
				this.match(PostgreSQLParser.KW_NEXT);
				this.state = 5198;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5197;
					this.opt_from_in();
					}
				}

				this.state = 5200;
				this.cursor_name();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5201;
				this.match(PostgreSQLParser.KW_PRIOR);
				this.state = 5203;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5202;
					this.opt_from_in();
					}
				}

				this.state = 5205;
				this.cursor_name();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5206;
				this.match(PostgreSQLParser.KW_FIRST);
				this.state = 5208;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5207;
					this.opt_from_in();
					}
				}

				this.state = 5210;
				this.cursor_name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5211;
				this.match(PostgreSQLParser.KW_LAST);
				this.state = 5213;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5212;
					this.opt_from_in();
					}
				}

				this.state = 5215;
				this.cursor_name();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5216;
				this.match(PostgreSQLParser.KW_ABSOLUTE);
				this.state = 5217;
				this.signediconst();
				this.state = 5219;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5218;
					this.opt_from_in();
					}
				}

				this.state = 5221;
				this.cursor_name();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5223;
				this.match(PostgreSQLParser.KW_RELATIVE);
				this.state = 5224;
				this.signediconst();
				this.state = 5226;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5225;
					this.opt_from_in();
					}
				}

				this.state = 5228;
				this.cursor_name();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5230;
				this.signediconst();
				this.state = 5232;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5231;
					this.opt_from_in();
					}
				}

				this.state = 5234;
				this.cursor_name();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5236;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 5238;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5237;
					this.opt_from_in();
					}
				}

				this.state = 5240;
				this.cursor_name();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5241;
				this.match(PostgreSQLParser.KW_FORWARD);
				this.state = 5243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5242;
					this.opt_from_in();
					}
				}

				this.state = 5245;
				this.cursor_name();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5246;
				this.match(PostgreSQLParser.KW_FORWARD);
				this.state = 5247;
				this.signediconst();
				this.state = 5249;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5248;
					this.opt_from_in();
					}
				}

				this.state = 5251;
				this.cursor_name();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5253;
				this.match(PostgreSQLParser.KW_FORWARD);
				this.state = 5254;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 5256;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5255;
					this.opt_from_in();
					}
				}

				this.state = 5258;
				this.cursor_name();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5259;
				this.match(PostgreSQLParser.KW_BACKWARD);
				this.state = 5261;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5260;
					this.opt_from_in();
					}
				}

				this.state = 5263;
				this.cursor_name();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5264;
				this.match(PostgreSQLParser.KW_BACKWARD);
				this.state = 5265;
				this.signediconst();
				this.state = 5267;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5266;
					this.opt_from_in();
					}
				}

				this.state = 5269;
				this.cursor_name();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5271;
				this.match(PostgreSQLParser.KW_BACKWARD);
				this.state = 5272;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 5274;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN) {
					{
					this.state = 5273;
					this.opt_from_in();
					}
				}

				this.state = 5276;
				this.cursor_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_in(): From_inContext {
		let _localctx: From_inContext = new From_inContext(this._ctx, this.state);
		this.enterRule(_localctx, 554, PostgreSQLParser.RULE_from_in);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5279;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_FROM || _la === PostgreSQLParser.KW_IN)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_from_in(): Opt_from_inContext {
		let _localctx: Opt_from_inContext = new Opt_from_inContext(this._ctx, this.state);
		this.enterRule(_localctx, 556, PostgreSQLParser.RULE_opt_from_in);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5281;
			this.from_in();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantstmt(): GrantstmtContext {
		let _localctx: GrantstmtContext = new GrantstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 558, PostgreSQLParser.RULE_grantstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5283;
			this.match(PostgreSQLParser.KW_GRANT);
			this.state = 5284;
			this.privileges();
			this.state = 5285;
			this.match(PostgreSQLParser.KW_ON);
			this.state = 5286;
			this.privilege_target();
			this.state = 5287;
			this.match(PostgreSQLParser.KW_TO);
			this.state = 5288;
			this.grantee_list();
			this.state = 5290;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 419, this._ctx) ) {
			case 1:
				{
				this.state = 5289;
				this.opt_grant_grant_option();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokestmt(): RevokestmtContext {
		let _localctx: RevokestmtContext = new RevokestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 560, PostgreSQLParser.RULE_revokestmt);
		let _la: number;
		try {
			this.state = 5313;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 422, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5292;
				this.match(PostgreSQLParser.KW_REVOKE);
				this.state = 5293;
				this.privileges();
				this.state = 5294;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5295;
				this.privilege_target();
				this.state = 5296;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 5297;
				this.grantee_list();
				this.state = 5299;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5298;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5301;
				this.match(PostgreSQLParser.KW_REVOKE);
				this.state = 5302;
				this.match(PostgreSQLParser.KW_GRANT);
				this.state = 5303;
				this.match(PostgreSQLParser.KW_OPTION);
				this.state = 5304;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 5305;
				this.privileges();
				this.state = 5306;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5307;
				this.privilege_target();
				this.state = 5308;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 5309;
				this.grantee_list();
				this.state = 5311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5310;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privileges(): PrivilegesContext {
		let _localctx: PrivilegesContext = new PrivilegesContext(this._ctx, this.state);
		this.enterRule(_localctx, 562, PostgreSQLParser.RULE_privileges);
		try {
			this.state = 5331;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 423, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5315;
				this.privilege_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5316;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5317;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 5318;
				this.match(PostgreSQLParser.KW_PRIVILEGES);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5319;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 5320;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 5321;
				this.columnlist();
				this.state = 5322;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5324;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 5325;
				this.match(PostgreSQLParser.KW_PRIVILEGES);
				this.state = 5326;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 5327;
				this.columnlist();
				this.state = 5328;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5330;
				this.beforeprivilegeselectlist();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public beforeprivilegeselectlist(): BeforeprivilegeselectlistContext {
		let _localctx: BeforeprivilegeselectlistContext = new BeforeprivilegeselectlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 564, PostgreSQLParser.RULE_beforeprivilegeselectlist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5333;
			this.beforeprivilegeselect();
			this.state = 5338;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5334;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5335;
				this.beforeprivilegeselect();
				}
				}
				this.state = 5340;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public beforeprivilegeselect(): BeforeprivilegeselectContext {
		let _localctx: BeforeprivilegeselectContext = new BeforeprivilegeselectContext(this._ctx, this.state);
		this.enterRule(_localctx, 566, PostgreSQLParser.RULE_beforeprivilegeselect);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5341;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_CREATE || _la === PostgreSQLParser.KW_SELECT || _la === PostgreSQLParser.KW_DELETE || _la === PostgreSQLParser.KW_EXECUTE || _la === PostgreSQLParser.KW_INSERT || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PostgreSQLParser.KW_TEMP - 352)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 352)) | (1 << (PostgreSQLParser.KW_TRIGGER - 352)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 352)) | (1 << (PostgreSQLParser.KW_UPDATE - 352)))) !== 0) || ((((_la - 521)) & ~0x1F) === 0 && ((1 << (_la - 521)) & ((1 << (PostgreSQLParser.KW_PEFERENCES - 521)) | (1 << (PostgreSQLParser.KW_USAGE - 521)) | (1 << (PostgreSQLParser.KW_CONNECT - 521)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilege_list(): Privilege_listContext {
		let _localctx: Privilege_listContext = new Privilege_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 568, PostgreSQLParser.RULE_privilege_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5343;
			this.privilege();
			this.state = 5348;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5344;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5345;
				this.privilege();
				}
				}
				this.state = 5350;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilege(): PrivilegeContext {
		let _localctx: PrivilegeContext = new PrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 570, PostgreSQLParser.RULE_privilege);
		let _la: number;
		try {
			this.state = 5367;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_SELECT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5351;
				this.match(PostgreSQLParser.KW_SELECT);
				this.state = 5353;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_PAREN) {
					{
					this.state = 5352;
					this.opt_column_list();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_REFERENCES:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5355;
				this.match(PostgreSQLParser.KW_REFERENCES);
				this.state = 5357;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_PAREN) {
					{
					this.state = 5356;
					this.opt_column_list();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_CREATE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5359;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 5361;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_PAREN) {
					{
					this.state = 5360;
					this.opt_column_list();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5363;
				this.colid();
				this.state = 5365;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_PAREN) {
					{
					this.state = 5364;
					this.opt_column_list();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilege_target(): Privilege_targetContext {
		let _localctx: Privilege_targetContext = new Privilege_targetContext(this._ctx, this.state);
		this.enterRule(_localctx, 572, PostgreSQLParser.RULE_privilege_target);
		try {
			this.state = 5427;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 431, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5369;
				this.qualified_name_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5370;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 5371;
				this.qualified_name_list();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5372;
				this.match(PostgreSQLParser.KW_SEQUENCE);
				this.state = 5373;
				this.qualified_name_list();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5374;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 5375;
				this.match(PostgreSQLParser.KW_DATA);
				this.state = 5376;
				this.match(PostgreSQLParser.KW_WRAPPER);
				this.state = 5377;
				this.name_list();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5378;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 5379;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 5380;
				this.name_list();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5381;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 5382;
				this.function_with_argtypes_list();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5383;
				this.match(PostgreSQLParser.KW_PROCEDURE);
				this.state = 5384;
				this.function_with_argtypes_list();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5385;
				this.match(PostgreSQLParser.KW_ROUTINE);
				this.state = 5386;
				this.function_with_argtypes_list();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5387;
				this.match(PostgreSQLParser.KW_DATABASE);
				this.state = 5388;
				this.name_list();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5389;
				this.match(PostgreSQLParser.KW_DOMAIN);
				this.state = 5390;
				this.any_name_list();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5391;
				this.match(PostgreSQLParser.KW_LANGUAGE);
				this.state = 5392;
				this.name_list();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5393;
				this.match(PostgreSQLParser.KW_LARGE);
				this.state = 5394;
				this.match(PostgreSQLParser.KW_OBJECT);
				this.state = 5395;
				this.numericonly_list();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5396;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 5397;
				this.name_list();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5398;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 5399;
				this.name_list();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5400;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 5401;
				this.any_name_list();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5402;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 5403;
				this.match(PostgreSQLParser.KW_TABLES);
				this.state = 5404;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 5405;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 5406;
				this.name_list();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 5407;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 5408;
				this.match(PostgreSQLParser.KW_SEQUENCES);
				this.state = 5409;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 5410;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 5411;
				this.name_list();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 5412;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 5413;
				this.match(PostgreSQLParser.KW_FUNCTIONS);
				this.state = 5414;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 5415;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 5416;
				this.name_list();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 5417;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 5418;
				this.match(PostgreSQLParser.KW_PROCEDURES);
				this.state = 5419;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 5420;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 5421;
				this.name_list();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 5422;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 5423;
				this.match(PostgreSQLParser.KW_ROUTINES);
				this.state = 5424;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 5425;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 5426;
				this.name_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantee_list(): Grantee_listContext {
		let _localctx: Grantee_listContext = new Grantee_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 574, PostgreSQLParser.RULE_grantee_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5429;
			this.grantee();
			this.state = 5434;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5430;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5431;
				this.grantee();
				}
				}
				this.state = 5436;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantee(): GranteeContext {
		let _localctx: GranteeContext = new GranteeContext(this._ctx, this.state);
		this.enterRule(_localctx, 576, PostgreSQLParser.RULE_grantee);
		try {
			this.state = 5440;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_CURRENT_USER:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_SESSION_USER:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.KW_PUBLIC:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5437;
				this.rolespec();
				}
				break;
			case PostgreSQLParser.KW_GROUP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5438;
				this.match(PostgreSQLParser.KW_GROUP);
				this.state = 5439;
				this.rolespec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_grant_grant_option(): Opt_grant_grant_optionContext {
		let _localctx: Opt_grant_grant_optionContext = new Opt_grant_grant_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 578, PostgreSQLParser.RULE_opt_grant_grant_option);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5442;
			this.match(PostgreSQLParser.KW_WITH);
			this.state = 5443;
			this.match(PostgreSQLParser.KW_GRANT);
			this.state = 5444;
			this.match(PostgreSQLParser.KW_OPTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantrolestmt(): GrantrolestmtContext {
		let _localctx: GrantrolestmtContext = new GrantrolestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 580, PostgreSQLParser.RULE_grantrolestmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5446;
			this.match(PostgreSQLParser.KW_GRANT);
			this.state = 5447;
			this.privilege_list();
			this.state = 5448;
			this.match(PostgreSQLParser.KW_TO);
			this.state = 5449;
			this.role_list();
			this.state = 5451;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 434, this._ctx) ) {
			case 1:
				{
				this.state = 5450;
				this.opt_grant_admin_option();
				}
				break;
			}
			this.state = 5454;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_GRANTED) {
				{
				this.state = 5453;
				this.opt_granted_by();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokerolestmt(): RevokerolestmtContext {
		let _localctx: RevokerolestmtContext = new RevokerolestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 582, PostgreSQLParser.RULE_revokerolestmt);
		let _la: number;
		try {
			this.state = 5479;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 440, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5456;
				this.match(PostgreSQLParser.KW_REVOKE);
				this.state = 5457;
				this.privilege_list();
				this.state = 5458;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 5459;
				this.role_list();
				this.state = 5461;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_GRANTED) {
					{
					this.state = 5460;
					this.opt_granted_by();
					}
				}

				this.state = 5464;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5463;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5466;
				this.match(PostgreSQLParser.KW_REVOKE);
				this.state = 5467;
				this.match(PostgreSQLParser.KW_ADMIN);
				this.state = 5468;
				this.match(PostgreSQLParser.KW_OPTION);
				this.state = 5469;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 5470;
				this.privilege_list();
				this.state = 5471;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 5472;
				this.role_list();
				this.state = 5474;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_GRANTED) {
					{
					this.state = 5473;
					this.opt_granted_by();
					}
				}

				this.state = 5477;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5476;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_grant_admin_option(): Opt_grant_admin_optionContext {
		let _localctx: Opt_grant_admin_optionContext = new Opt_grant_admin_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 584, PostgreSQLParser.RULE_opt_grant_admin_option);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5481;
			this.match(PostgreSQLParser.KW_WITH);
			this.state = 5482;
			this.match(PostgreSQLParser.KW_ADMIN);
			this.state = 5483;
			this.match(PostgreSQLParser.KW_OPTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_granted_by(): Opt_granted_byContext {
		let _localctx: Opt_granted_byContext = new Opt_granted_byContext(this._ctx, this.state);
		this.enterRule(_localctx, 586, PostgreSQLParser.RULE_opt_granted_by);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5485;
			this.match(PostgreSQLParser.KW_GRANTED);
			this.state = 5486;
			this.match(PostgreSQLParser.KW_BY);
			this.state = 5487;
			this.rolespec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterdefaultprivilegesstmt(): AlterdefaultprivilegesstmtContext {
		let _localctx: AlterdefaultprivilegesstmtContext = new AlterdefaultprivilegesstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 588, PostgreSQLParser.RULE_alterdefaultprivilegesstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5489;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 5490;
			this.match(PostgreSQLParser.KW_DEFAULT);
			this.state = 5491;
			this.match(PostgreSQLParser.KW_PRIVILEGES);
			this.state = 5492;
			this.defacloptionlist();
			this.state = 5493;
			this.defaclaction();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defacloptionlist(): DefacloptionlistContext {
		let _localctx: DefacloptionlistContext = new DefacloptionlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 590, PostgreSQLParser.RULE_defacloptionlist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5498;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.KW_FOR || _la === PostgreSQLParser.KW_IN) {
				{
				{
				this.state = 5495;
				this.defacloption();
				}
				}
				this.state = 5500;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defacloption(): DefacloptionContext {
		let _localctx: DefacloptionContext = new DefacloptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 592, PostgreSQLParser.RULE_defacloption);
		try {
			this.state = 5510;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 442, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5501;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 5502;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 5503;
				this.name_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5504;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 5505;
				this.match(PostgreSQLParser.KW_ROLE);
				this.state = 5506;
				this.role_list();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5507;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 5508;
				this.match(PostgreSQLParser.KW_USER);
				this.state = 5509;
				this.role_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defaclaction(): DefaclactionContext {
		let _localctx: DefaclactionContext = new DefaclactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 594, PostgreSQLParser.RULE_defaclaction);
		let _la: number;
		try {
			this.state = 5542;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 446, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5512;
				this.match(PostgreSQLParser.KW_GRANT);
				this.state = 5513;
				this.privileges();
				this.state = 5514;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5515;
				this.defacl_privilege_target();
				this.state = 5516;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 5517;
				this.grantee_list();
				this.state = 5519;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 443, this._ctx) ) {
				case 1:
					{
					this.state = 5518;
					this.opt_grant_grant_option();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5521;
				this.match(PostgreSQLParser.KW_REVOKE);
				this.state = 5522;
				this.privileges();
				this.state = 5523;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5524;
				this.defacl_privilege_target();
				this.state = 5525;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 5526;
				this.grantee_list();
				this.state = 5528;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5527;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5530;
				this.match(PostgreSQLParser.KW_REVOKE);
				this.state = 5531;
				this.match(PostgreSQLParser.KW_GRANT);
				this.state = 5532;
				this.match(PostgreSQLParser.KW_OPTION);
				this.state = 5533;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 5534;
				this.privileges();
				this.state = 5535;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5536;
				this.defacl_privilege_target();
				this.state = 5537;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 5538;
				this.grantee_list();
				this.state = 5540;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5539;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public defacl_privilege_target(): Defacl_privilege_targetContext {
		let _localctx: Defacl_privilege_targetContext = new Defacl_privilege_targetContext(this._ctx, this.state);
		this.enterRule(_localctx, 596, PostgreSQLParser.RULE_defacl_privilege_target);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5544;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_FUNCTIONS || _la === PostgreSQLParser.KW_SEQUENCES || _la === PostgreSQLParser.KW_TABLES || _la === PostgreSQLParser.KW_TYPES || _la === PostgreSQLParser.KW_ROUTINES || _la === PostgreSQLParser.KW_SCHEMAS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexstmt(): IndexstmtContext {
		let _localctx: IndexstmtContext = new IndexstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 598, PostgreSQLParser.RULE_indexstmt);
		let _la: number;
		try {
			this.state = 5609;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 462, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5546;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 5548;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_UNIQUE) {
					{
					this.state = 5547;
					this.opt_unique();
					}
				}

				this.state = 5550;
				this.match(PostgreSQLParser.KW_INDEX);
				this.state = 5552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CONCURRENTLY) {
					{
					this.state = 5551;
					this.opt_concurrently();
					}
				}

				this.state = 5555;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 92)) & ~0x1F) === 0 && ((1 << (_la - 92)) & ((1 << (PostgreSQLParser.KW_TABLE - 92)) | (1 << (PostgreSQLParser.KW_IS - 92)) | (1 << (PostgreSQLParser.KW_OUTER - 92)))) !== 0) || ((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (PostgreSQLParser.KW_OVER - 124)) | (1 << (PostgreSQLParser.KW_ABORT - 124)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 124)) | (1 << (PostgreSQLParser.KW_ACCESS - 124)) | (1 << (PostgreSQLParser.KW_ACTION - 124)) | (1 << (PostgreSQLParser.KW_ADD - 124)) | (1 << (PostgreSQLParser.KW_ADMIN - 124)) | (1 << (PostgreSQLParser.KW_AFTER - 124)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 124)) | (1 << (PostgreSQLParser.KW_ALSO - 124)) | (1 << (PostgreSQLParser.KW_ALTER - 124)) | (1 << (PostgreSQLParser.KW_ALWAYS - 124)) | (1 << (PostgreSQLParser.KW_ASSERTION - 124)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 124)) | (1 << (PostgreSQLParser.KW_AT - 124)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 124)) | (1 << (PostgreSQLParser.KW_BACKWARD - 124)) | (1 << (PostgreSQLParser.KW_BEFORE - 124)) | (1 << (PostgreSQLParser.KW_BEGIN - 124)) | (1 << (PostgreSQLParser.KW_BY - 124)) | (1 << (PostgreSQLParser.KW_CACHE - 124)) | (1 << (PostgreSQLParser.KW_CALLED - 124)) | (1 << (PostgreSQLParser.KW_CASCADE - 124)) | (1 << (PostgreSQLParser.KW_CASCADED - 124)) | (1 << (PostgreSQLParser.KW_CATALOG - 124)) | (1 << (PostgreSQLParser.KW_CHAIN - 124)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 124)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 124)))) !== 0) || ((((_la - 156)) & ~0x1F) === 0 && ((1 << (_la - 156)) & ((1 << (PostgreSQLParser.KW_CLASS - 156)) | (1 << (PostgreSQLParser.KW_CLOSE - 156)) | (1 << (PostgreSQLParser.KW_CLUSTER - 156)) | (1 << (PostgreSQLParser.KW_COMMENT - 156)) | (1 << (PostgreSQLParser.KW_COMMENTS - 156)) | (1 << (PostgreSQLParser.KW_COMMIT - 156)) | (1 << (PostgreSQLParser.KW_COMMITTED - 156)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 156)) | (1 << (PostgreSQLParser.KW_CONNECTION - 156)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 156)) | (1 << (PostgreSQLParser.KW_CONTENT - 156)) | (1 << (PostgreSQLParser.KW_CONTINUE - 156)) | (1 << (PostgreSQLParser.KW_CONVERSION - 156)) | (1 << (PostgreSQLParser.KW_COPY - 156)) | (1 << (PostgreSQLParser.KW_COST - 156)) | (1 << (PostgreSQLParser.KW_CSV - 156)) | (1 << (PostgreSQLParser.KW_CURSOR - 156)) | (1 << (PostgreSQLParser.KW_CYCLE - 156)) | (1 << (PostgreSQLParser.KW_DATA - 156)) | (1 << (PostgreSQLParser.KW_DATABASE - 156)) | (1 << (PostgreSQLParser.KW_DAY - 156)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 156)) | (1 << (PostgreSQLParser.KW_DECLARE - 156)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 156)) | (1 << (PostgreSQLParser.KW_DEFERRED - 156)) | (1 << (PostgreSQLParser.KW_DEFINER - 156)) | (1 << (PostgreSQLParser.KW_DELETE - 156)) | (1 << (PostgreSQLParser.KW_DELIMITER - 156)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 156)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 156)) | (1 << (PostgreSQLParser.KW_DISABLE - 156)) | (1 << (PostgreSQLParser.KW_DISCARD - 156)))) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (PostgreSQLParser.KW_DOCUMENT - 188)) | (1 << (PostgreSQLParser.KW_DOMAIN - 188)) | (1 << (PostgreSQLParser.KW_DOUBLE - 188)) | (1 << (PostgreSQLParser.KW_DROP - 188)) | (1 << (PostgreSQLParser.KW_EACH - 188)) | (1 << (PostgreSQLParser.KW_ENABLE - 188)) | (1 << (PostgreSQLParser.KW_ENCODING - 188)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 188)) | (1 << (PostgreSQLParser.KW_ENUM - 188)) | (1 << (PostgreSQLParser.KW_ESCAPE - 188)) | (1 << (PostgreSQLParser.KW_EVENT - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 188)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 188)) | (1 << (PostgreSQLParser.KW_EXECUTE - 188)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 188)) | (1 << (PostgreSQLParser.KW_EXTENSION - 188)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 188)) | (1 << (PostgreSQLParser.KW_FAMILY - 188)) | (1 << (PostgreSQLParser.KW_FIRST - 188)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 188)) | (1 << (PostgreSQLParser.KW_FORCE - 188)) | (1 << (PostgreSQLParser.KW_FORWARD - 188)) | (1 << (PostgreSQLParser.KW_FUNCTION - 188)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 188)) | (1 << (PostgreSQLParser.KW_GLOBAL - 188)) | (1 << (PostgreSQLParser.KW_GRANTED - 188)) | (1 << (PostgreSQLParser.KW_HANDLER - 188)) | (1 << (PostgreSQLParser.KW_HEADER - 188)) | (1 << (PostgreSQLParser.KW_HOLD - 188)) | (1 << (PostgreSQLParser.KW_HOUR - 188)) | (1 << (PostgreSQLParser.KW_IDENTITY - 188)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (PostgreSQLParser.KW_IF - 220)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 220)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 220)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 220)) | (1 << (PostgreSQLParser.KW_INCLUDING - 220)) | (1 << (PostgreSQLParser.KW_INCREMENT - 220)) | (1 << (PostgreSQLParser.KW_INDEX - 220)) | (1 << (PostgreSQLParser.KW_INDEXES - 220)) | (1 << (PostgreSQLParser.KW_INHERIT - 220)) | (1 << (PostgreSQLParser.KW_INHERITS - 220)) | (1 << (PostgreSQLParser.KW_INLINE - 220)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 220)) | (1 << (PostgreSQLParser.KW_INSERT - 220)) | (1 << (PostgreSQLParser.KW_INSTEAD - 220)) | (1 << (PostgreSQLParser.KW_INVOKER - 220)) | (1 << (PostgreSQLParser.KW_ISOLATION - 220)) | (1 << (PostgreSQLParser.KW_KEY - 220)) | (1 << (PostgreSQLParser.KW_LABEL - 220)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 220)) | (1 << (PostgreSQLParser.KW_LARGE - 220)) | (1 << (PostgreSQLParser.KW_LAST - 220)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 220)) | (1 << (PostgreSQLParser.KW_LEVEL - 220)))) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & ((1 << (PostgreSQLParser.KW_LISTEN - 252)) | (1 << (PostgreSQLParser.KW_LOAD - 252)) | (1 << (PostgreSQLParser.KW_LOCAL - 252)) | (1 << (PostgreSQLParser.KW_LOCATION - 252)) | (1 << (PostgreSQLParser.KW_LOCK - 252)) | (1 << (PostgreSQLParser.KW_MAPPING - 252)) | (1 << (PostgreSQLParser.KW_MATCH - 252)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 252)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 252)) | (1 << (PostgreSQLParser.KW_MINUTE - 252)) | (1 << (PostgreSQLParser.KW_MINVALUE - 252)) | (1 << (PostgreSQLParser.KW_MODE - 252)) | (1 << (PostgreSQLParser.KW_MONTH - 252)) | (1 << (PostgreSQLParser.KW_MOVE - 252)) | (1 << (PostgreSQLParser.KW_NAME - 252)) | (1 << (PostgreSQLParser.KW_NAMES - 252)) | (1 << (PostgreSQLParser.KW_NEXT - 252)) | (1 << (PostgreSQLParser.KW_NO - 252)) | (1 << (PostgreSQLParser.KW_NOTHING - 252)) | (1 << (PostgreSQLParser.KW_NOTIFY - 252)) | (1 << (PostgreSQLParser.KW_NOWAIT - 252)) | (1 << (PostgreSQLParser.KW_NULLS - 252)) | (1 << (PostgreSQLParser.KW_OBJECT - 252)) | (1 << (PostgreSQLParser.KW_OF - 252)) | (1 << (PostgreSQLParser.KW_OFF - 252)) | (1 << (PostgreSQLParser.KW_OIDS - 252)) | (1 << (PostgreSQLParser.KW_OPERATOR - 252)) | (1 << (PostgreSQLParser.KW_OPTION - 252)) | (1 << (PostgreSQLParser.KW_OPTIONS - 252)) | (1 << (PostgreSQLParser.KW_OWNED - 252)) | (1 << (PostgreSQLParser.KW_OWNER - 252)) | (1 << (PostgreSQLParser.KW_PARSER - 252)))) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & ((1 << (PostgreSQLParser.KW_PARTIAL - 284)) | (1 << (PostgreSQLParser.KW_PARTITION - 284)) | (1 << (PostgreSQLParser.KW_PASSING - 284)) | (1 << (PostgreSQLParser.KW_PASSWORD - 284)) | (1 << (PostgreSQLParser.KW_PLANS - 284)) | (1 << (PostgreSQLParser.KW_PRECEDING - 284)) | (1 << (PostgreSQLParser.KW_PREPARE - 284)) | (1 << (PostgreSQLParser.KW_PREPARED - 284)) | (1 << (PostgreSQLParser.KW_PRESERVE - 284)) | (1 << (PostgreSQLParser.KW_PRIOR - 284)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 284)) | (1 << (PostgreSQLParser.KW_PROGRAM - 284)) | (1 << (PostgreSQLParser.KW_QUOTE - 284)) | (1 << (PostgreSQLParser.KW_RANGE - 284)) | (1 << (PostgreSQLParser.KW_READ - 284)) | (1 << (PostgreSQLParser.KW_REASSIGN - 284)) | (1 << (PostgreSQLParser.KW_RECHECK - 284)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 284)) | (1 << (PostgreSQLParser.KW_REF - 284)) | (1 << (PostgreSQLParser.KW_REFRESH - 284)) | (1 << (PostgreSQLParser.KW_REINDEX - 284)) | (1 << (PostgreSQLParser.KW_RELATIVE - 284)) | (1 << (PostgreSQLParser.KW_RELEASE - 284)) | (1 << (PostgreSQLParser.KW_RENAME - 284)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 284)) | (1 << (PostgreSQLParser.KW_REPLACE - 284)) | (1 << (PostgreSQLParser.KW_REPLICA - 284)) | (1 << (PostgreSQLParser.KW_RESET - 284)) | (1 << (PostgreSQLParser.KW_RESTART - 284)) | (1 << (PostgreSQLParser.KW_RESTRICT - 284)))) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & ((1 << (PostgreSQLParser.KW_RETURNS - 316)) | (1 << (PostgreSQLParser.KW_REVOKE - 316)) | (1 << (PostgreSQLParser.KW_ROLE - 316)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 316)) | (1 << (PostgreSQLParser.KW_ROWS - 316)) | (1 << (PostgreSQLParser.KW_RULE - 316)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 316)) | (1 << (PostgreSQLParser.KW_SCHEMA - 316)) | (1 << (PostgreSQLParser.KW_SCROLL - 316)) | (1 << (PostgreSQLParser.KW_SEARCH - 316)) | (1 << (PostgreSQLParser.KW_SECOND - 316)) | (1 << (PostgreSQLParser.KW_SECURITY - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 316)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 316)) | (1 << (PostgreSQLParser.KW_SERVER - 316)) | (1 << (PostgreSQLParser.KW_SESSION - 316)) | (1 << (PostgreSQLParser.KW_SET - 316)) | (1 << (PostgreSQLParser.KW_SHARE - 316)) | (1 << (PostgreSQLParser.KW_SHOW - 316)) | (1 << (PostgreSQLParser.KW_SIMPLE - 316)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 316)) | (1 << (PostgreSQLParser.KW_STABLE - 316)) | (1 << (PostgreSQLParser.KW_STANDALONE - 316)) | (1 << (PostgreSQLParser.KW_START - 316)) | (1 << (PostgreSQLParser.KW_STATEMENT - 316)) | (1 << (PostgreSQLParser.KW_STATISTICS - 316)) | (1 << (PostgreSQLParser.KW_STDIN - 316)) | (1 << (PostgreSQLParser.KW_STDOUT - 316)) | (1 << (PostgreSQLParser.KW_STORAGE - 316)) | (1 << (PostgreSQLParser.KW_STRICT - 316)) | (1 << (PostgreSQLParser.KW_STRIP - 316)))) !== 0) || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (PostgreSQLParser.KW_SYSID - 348)) | (1 << (PostgreSQLParser.KW_SYSTEM - 348)) | (1 << (PostgreSQLParser.KW_TABLES - 348)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 348)) | (1 << (PostgreSQLParser.KW_TEMP - 348)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 348)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 348)) | (1 << (PostgreSQLParser.KW_TEXT - 348)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 348)) | (1 << (PostgreSQLParser.KW_TRIGGER - 348)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 348)) | (1 << (PostgreSQLParser.KW_TRUSTED - 348)) | (1 << (PostgreSQLParser.KW_TYPE - 348)) | (1 << (PostgreSQLParser.KW_TYPES - 348)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 348)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 348)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 348)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 348)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 348)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 348)) | (1 << (PostgreSQLParser.KW_UNTIL - 348)) | (1 << (PostgreSQLParser.KW_UPDATE - 348)) | (1 << (PostgreSQLParser.KW_VACUUM - 348)) | (1 << (PostgreSQLParser.KW_VALID - 348)) | (1 << (PostgreSQLParser.KW_VALIDATE - 348)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 348)) | (1 << (PostgreSQLParser.KW_VARYING - 348)) | (1 << (PostgreSQLParser.KW_VERSION - 348)) | (1 << (PostgreSQLParser.KW_VIEW - 348)) | (1 << (PostgreSQLParser.KW_VOLATILE - 348)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 348)) | (1 << (PostgreSQLParser.KW_WITHOUT - 348)))) !== 0) || ((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (PostgreSQLParser.KW_WORK - 380)) | (1 << (PostgreSQLParser.KW_WRAPPER - 380)) | (1 << (PostgreSQLParser.KW_WRITE - 380)) | (1 << (PostgreSQLParser.KW_XML - 380)) | (1 << (PostgreSQLParser.KW_YEAR - 380)) | (1 << (PostgreSQLParser.KW_YES - 380)) | (1 << (PostgreSQLParser.KW_ZONE - 380)) | (1 << (PostgreSQLParser.KW_BETWEEN - 380)) | (1 << (PostgreSQLParser.KW_BIGINT - 380)) | (1 << (PostgreSQLParser.KW_BIT - 380)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 380)) | (1 << (PostgreSQLParser.KW_CHAR - 380)) | (1 << (PostgreSQLParser.KW_CHARACTER - 380)) | (1 << (PostgreSQLParser.KW_COALESCE - 380)) | (1 << (PostgreSQLParser.KW_DEC - 380)) | (1 << (PostgreSQLParser.KW_DECIMAL - 380)) | (1 << (PostgreSQLParser.KW_EXISTS - 380)) | (1 << (PostgreSQLParser.KW_EXTRACT - 380)) | (1 << (PostgreSQLParser.KW_FLOAT - 380)) | (1 << (PostgreSQLParser.KW_GREATEST - 380)) | (1 << (PostgreSQLParser.KW_INOUT - 380)) | (1 << (PostgreSQLParser.KW_INT - 380)) | (1 << (PostgreSQLParser.KW_INTEGER - 380)) | (1 << (PostgreSQLParser.KW_INTERVAL - 380)) | (1 << (PostgreSQLParser.KW_LEAST - 380)) | (1 << (PostgreSQLParser.KW_NATIONAL - 380)) | (1 << (PostgreSQLParser.KW_NCHAR - 380)) | (1 << (PostgreSQLParser.KW_NONE - 380)) | (1 << (PostgreSQLParser.KW_NULLIF - 380)) | (1 << (PostgreSQLParser.KW_NUMERIC - 380)) | (1 << (PostgreSQLParser.KW_OVERLAY - 380)) | (1 << (PostgreSQLParser.KW_POSITION - 380)))) !== 0) || ((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & ((1 << (PostgreSQLParser.KW_PRECISION - 412)) | (1 << (PostgreSQLParser.KW_REAL - 412)) | (1 << (PostgreSQLParser.KW_ROW - 412)) | (1 << (PostgreSQLParser.KW_SETOF - 412)) | (1 << (PostgreSQLParser.KW_SMALLINT - 412)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 412)) | (1 << (PostgreSQLParser.KW_TIME - 412)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 412)) | (1 << (PostgreSQLParser.KW_TREAT - 412)) | (1 << (PostgreSQLParser.KW_TRIM - 412)) | (1 << (PostgreSQLParser.KW_VALUES - 412)) | (1 << (PostgreSQLParser.KW_VARCHAR - 412)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 412)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 412)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 412)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 412)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 412)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 412)) | (1 << (PostgreSQLParser.KW_XMLPI - 412)) | (1 << (PostgreSQLParser.KW_XMLROOT - 412)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 412)) | (1 << (PostgreSQLParser.KW_CALL - 412)) | (1 << (PostgreSQLParser.KW_CURRENT - 412)) | (1 << (PostgreSQLParser.KW_ATTACH - 412)) | (1 << (PostgreSQLParser.KW_DETACH - 412)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 412)) | (1 << (PostgreSQLParser.KW_GENERATED - 412)) | (1 << (PostgreSQLParser.KW_LOGGED - 412)) | (1 << (PostgreSQLParser.KW_STORED - 412)) | (1 << (PostgreSQLParser.KW_INCLUDE - 412)) | (1 << (PostgreSQLParser.KW_ROUTINE - 412)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 412)))) !== 0) || ((((_la - 444)) & ~0x1F) === 0 && ((1 << (_la - 444)) & ((1 << (PostgreSQLParser.KW_IMPORT - 444)) | (1 << (PostgreSQLParser.KW_POLICY - 444)) | (1 << (PostgreSQLParser.KW_METHOD - 444)) | (1 << (PostgreSQLParser.KW_REFERENCING - 444)) | (1 << (PostgreSQLParser.KW_NEW - 444)) | (1 << (PostgreSQLParser.KW_OLD - 444)) | (1 << (PostgreSQLParser.KW_VALUE - 444)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 444)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 444)) | (1 << (PostgreSQLParser.KW_OUT - 444)) | (1 << (PostgreSQLParser.KW_ROUTINES - 444)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 444)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 444)) | (1 << (PostgreSQLParser.KW_INPUT - 444)) | (1 << (PostgreSQLParser.KW_SUPPORT - 444)) | (1 << (PostgreSQLParser.KW_PARALLEL - 444)) | (1 << (PostgreSQLParser.KW_SQL - 444)) | (1 << (PostgreSQLParser.KW_DEPENDS - 444)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 444)) | (1 << (PostgreSQLParser.KW_CONFLICT - 444)) | (1 << (PostgreSQLParser.KW_SKIP - 444)) | (1 << (PostgreSQLParser.KW_LOCKED - 444)) | (1 << (PostgreSQLParser.KW_TIES - 444)) | (1 << (PostgreSQLParser.KW_ROLLUP - 444)) | (1 << (PostgreSQLParser.KW_CUBE - 444)) | (1 << (PostgreSQLParser.KW_GROUPING - 444)) | (1 << (PostgreSQLParser.KW_SETS - 444)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 444)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 444)) | (1 << (PostgreSQLParser.KW_COLUMNS - 444)))) !== 0) || ((((_la - 476)) & ~0x1F) === 0 && ((1 << (_la - 476)) & ((1 << (PostgreSQLParser.KW_XMLNAMESPACES - 476)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 476)) | (1 << (PostgreSQLParser.KW_WITHIN - 476)) | (1 << (PostgreSQLParser.KW_FILTER - 476)) | (1 << (PostgreSQLParser.KW_GROUPS - 476)) | (1 << (PostgreSQLParser.KW_OTHERS - 476)) | (1 << (PostgreSQLParser.KW_NFC - 476)) | (1 << (PostgreSQLParser.KW_NFD - 476)) | (1 << (PostgreSQLParser.KW_NFKC - 476)) | (1 << (PostgreSQLParser.KW_NFKD - 476)) | (1 << (PostgreSQLParser.KW_UESCAPE - 476)) | (1 << (PostgreSQLParser.KW_VIEWS - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 476)) | (1 << (PostgreSQLParser.KW_DUMP - 476)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 476)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 476)) | (1 << (PostgreSQLParser.KW_ERROR - 476)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 476)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 476)) | (1 << (PostgreSQLParser.KW_ALIAS - 476)) | (1 << (PostgreSQLParser.KW_CONSTANT - 476)) | (1 << (PostgreSQLParser.KW_PERFORM - 476)) | (1 << (PostgreSQLParser.KW_GET - 476)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 476)) | (1 << (PostgreSQLParser.KW_STACKED - 476)) | (1 << (PostgreSQLParser.KW_ELSIF - 476)) | (1 << (PostgreSQLParser.KW_REVERSE - 476)) | (1 << (PostgreSQLParser.KW_SLICE - 476)) | (1 << (PostgreSQLParser.KW_EXIT - 476)))) !== 0) || ((((_la - 508)) & ~0x1F) === 0 && ((1 << (_la - 508)) & ((1 << (PostgreSQLParser.KW_RETURN - 508)) | (1 << (PostgreSQLParser.KW_QUERY - 508)) | (1 << (PostgreSQLParser.KW_RAISE - 508)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 508)) | (1 << (PostgreSQLParser.KW_DEBUG - 508)) | (1 << (PostgreSQLParser.KW_LOG - 508)) | (1 << (PostgreSQLParser.KW_INFO - 508)) | (1 << (PostgreSQLParser.KW_NOTICE - 508)) | (1 << (PostgreSQLParser.KW_WARNING - 508)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 508)) | (1 << (PostgreSQLParser.KW_ASSERT - 508)) | (1 << (PostgreSQLParser.KW_OPEN - 508)) | (1 << (PostgreSQLParser.Identifier - 508)) | (1 << (PostgreSQLParser.QuotedIdentifier - 508)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 508)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
					{
					this.state = 5554;
					this.opt_index_name();
					}
				}

				this.state = 5557;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5558;
				this.relation_expr();
				this.state = 5560;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING) {
					{
					this.state = 5559;
					this.access_method_clause();
					}
				}

				this.state = 5562;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 5563;
				this.index_params();
				this.state = 5564;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 5566;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_INCLUDE) {
					{
					this.state = 5565;
					this.opt_include();
					}
				}

				this.state = 5569;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 452, this._ctx) ) {
				case 1:
					{
					this.state = 5568;
					this.opt_reloptions();
					}
					break;
				}
				this.state = 5572;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TABLESPACE) {
					{
					this.state = 5571;
					this.opttablespace();
					}
				}

				this.state = 5575;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WHERE) {
					{
					this.state = 5574;
					this.where_clause();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5577;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 5579;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_UNIQUE) {
					{
					this.state = 5578;
					this.opt_unique();
					}
				}

				this.state = 5581;
				this.match(PostgreSQLParser.KW_INDEX);
				this.state = 5583;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CONCURRENTLY) {
					{
					this.state = 5582;
					this.opt_concurrently();
					}
				}

				this.state = 5585;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 5586;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 5587;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 5588;
				this.name();
				this.state = 5589;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5590;
				this.relation_expr();
				this.state = 5592;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING) {
					{
					this.state = 5591;
					this.access_method_clause();
					}
				}

				this.state = 5594;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 5595;
				this.index_params();
				this.state = 5596;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 5598;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_INCLUDE) {
					{
					this.state = 5597;
					this.opt_include();
					}
				}

				this.state = 5601;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 459, this._ctx) ) {
				case 1:
					{
					this.state = 5600;
					this.opt_reloptions();
					}
					break;
				}
				this.state = 5604;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TABLESPACE) {
					{
					this.state = 5603;
					this.opttablespace();
					}
				}

				this.state = 5607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WHERE) {
					{
					this.state = 5606;
					this.where_clause();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_unique(): Opt_uniqueContext {
		let _localctx: Opt_uniqueContext = new Opt_uniqueContext(this._ctx, this.state);
		this.enterRule(_localctx, 600, PostgreSQLParser.RULE_opt_unique);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5611;
			this.match(PostgreSQLParser.KW_UNIQUE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_concurrently(): Opt_concurrentlyContext {
		let _localctx: Opt_concurrentlyContext = new Opt_concurrentlyContext(this._ctx, this.state);
		this.enterRule(_localctx, 602, PostgreSQLParser.RULE_opt_concurrently);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5613;
			this.match(PostgreSQLParser.KW_CONCURRENTLY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_index_name(): Opt_index_nameContext {
		let _localctx: Opt_index_nameContext = new Opt_index_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 604, PostgreSQLParser.RULE_opt_index_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5615;
			this.name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public access_method_clause(): Access_method_clauseContext {
		let _localctx: Access_method_clauseContext = new Access_method_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 606, PostgreSQLParser.RULE_access_method_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5617;
			this.match(PostgreSQLParser.KW_USING);
			this.state = 5618;
			this.name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_params(): Index_paramsContext {
		let _localctx: Index_paramsContext = new Index_paramsContext(this._ctx, this.state);
		this.enterRule(_localctx, 608, PostgreSQLParser.RULE_index_params);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5620;
			this.index_elem();
			this.state = 5625;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5621;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5622;
				this.index_elem();
				}
				}
				this.state = 5627;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_elem_options(): Index_elem_optionsContext {
		let _localctx: Index_elem_optionsContext = new Index_elem_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 610, PostgreSQLParser.RULE_index_elem_options);
		let _la: number;
		try {
			this.state = 5651;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 471, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5629;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 464, this._ctx) ) {
				case 1:
					{
					this.state = 5628;
					this.opt_collate();
					}
					break;
				}
				this.state = 5632;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 465, this._ctx) ) {
				case 1:
					{
					this.state = 5631;
					this.opt_class();
					}
					break;
				}
				this.state = 5635;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ASC || _la === PostgreSQLParser.KW_DESC) {
					{
					this.state = 5634;
					this.opt_asc_desc();
					}
				}

				this.state = 5638;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NULLS) {
					{
					this.state = 5637;
					this.opt_nulls_order();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5641;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 468, this._ctx) ) {
				case 1:
					{
					this.state = 5640;
					this.opt_collate();
					}
					break;
				}
				this.state = 5643;
				this.any_name();
				this.state = 5644;
				this.reloptions();
				this.state = 5646;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ASC || _la === PostgreSQLParser.KW_DESC) {
					{
					this.state = 5645;
					this.opt_asc_desc();
					}
				}

				this.state = 5649;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NULLS) {
					{
					this.state = 5648;
					this.opt_nulls_order();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_elem(): Index_elemContext {
		let _localctx: Index_elemContext = new Index_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 612, PostgreSQLParser.RULE_index_elem);
		try {
			this.state = 5664;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 472, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5653;
				this.colid();
				this.state = 5654;
				this.index_elem_options();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5656;
				this.func_expr_windowless();
				this.state = 5657;
				this.index_elem_options();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5659;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 5660;
				this.a_expr();
				this.state = 5661;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 5662;
				this.index_elem_options();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_include(): Opt_includeContext {
		let _localctx: Opt_includeContext = new Opt_includeContext(this._ctx, this.state);
		this.enterRule(_localctx, 614, PostgreSQLParser.RULE_opt_include);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5666;
			this.match(PostgreSQLParser.KW_INCLUDE);
			this.state = 5667;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 5668;
			this.index_including_params();
			this.state = 5669;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_including_params(): Index_including_paramsContext {
		let _localctx: Index_including_paramsContext = new Index_including_paramsContext(this._ctx, this.state);
		this.enterRule(_localctx, 616, PostgreSQLParser.RULE_index_including_params);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5671;
			this.index_elem();
			this.state = 5676;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5672;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5673;
				this.index_elem();
				}
				}
				this.state = 5678;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_collate(): Opt_collateContext {
		let _localctx: Opt_collateContext = new Opt_collateContext(this._ctx, this.state);
		this.enterRule(_localctx, 618, PostgreSQLParser.RULE_opt_collate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5679;
			this.match(PostgreSQLParser.KW_COLLATE);
			this.state = 5680;
			this.any_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_class(): Opt_classContext {
		let _localctx: Opt_classContext = new Opt_classContext(this._ctx, this.state);
		this.enterRule(_localctx, 620, PostgreSQLParser.RULE_opt_class);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5682;
			this.any_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_asc_desc(): Opt_asc_descContext {
		let _localctx: Opt_asc_descContext = new Opt_asc_descContext(this._ctx, this.state);
		this.enterRule(_localctx, 622, PostgreSQLParser.RULE_opt_asc_desc);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5684;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_ASC || _la === PostgreSQLParser.KW_DESC)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_nulls_order(): Opt_nulls_orderContext {
		let _localctx: Opt_nulls_orderContext = new Opt_nulls_orderContext(this._ctx, this.state);
		this.enterRule(_localctx, 624, PostgreSQLParser.RULE_opt_nulls_order);
		try {
			this.state = 5690;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 474, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5686;
				this.match(PostgreSQLParser.KW_NULLS);
				this.state = 5687;
				this.match(PostgreSQLParser.KW_FIRST);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5688;
				this.match(PostgreSQLParser.KW_NULLS);
				this.state = 5689;
				this.match(PostgreSQLParser.KW_LAST);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createfunctionstmt(): CreatefunctionstmtContext {
		let _localctx: CreatefunctionstmtContext = new CreatefunctionstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 626, PostgreSQLParser.RULE_createfunctionstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5692;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 5694;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_OR) {
				{
				this.state = 5693;
				this.opt_or_replace();
				}
			}

			this.state = 5696;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_FUNCTION || _la === PostgreSQLParser.KW_PROCEDURE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5697;
			this.func_name();
			this.state = 5698;
			this.func_args_with_defaults();
			this.state = 5708;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 477, this._ctx) ) {
			case 1:
				{
				this.state = 5699;
				this.match(PostgreSQLParser.KW_RETURNS);
				this.state = 5706;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 476, this._ctx) ) {
				case 1:
					{
					this.state = 5700;
					this.func_return();
					}
					break;

				case 2:
					{
					this.state = 5701;
					this.match(PostgreSQLParser.KW_TABLE);
					this.state = 5702;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 5703;
					this.table_func_column_list();
					this.state = 5704;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			this.state = 5710;
			this.createfunc_opt_list();
			this.state = 5713;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 478, this._ctx) ) {
			case 1:
				{
				this.state = 5711;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 5712;
				this.attrilist();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public attrilist(): AttrilistContext {
		let _localctx: AttrilistContext = new AttrilistContext(this._ctx, this.state);
		this.enterRule(_localctx, 628, PostgreSQLParser.RULE_attrilist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5715;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 5716;
			this.colid();
			this.state = 5721;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5717;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5718;
				this.colid();
				}
				}
				this.state = 5723;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 5724;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_or_replace(): Opt_or_replaceContext {
		let _localctx: Opt_or_replaceContext = new Opt_or_replaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 630, PostgreSQLParser.RULE_opt_or_replace);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5726;
			this.match(PostgreSQLParser.KW_OR);
			this.state = 5727;
			this.match(PostgreSQLParser.KW_REPLACE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_args(): Func_argsContext {
		let _localctx: Func_argsContext = new Func_argsContext(this._ctx, this.state);
		this.enterRule(_localctx, 632, PostgreSQLParser.RULE_func_args);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5729;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 5731;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || _la === PostgreSQLParser.KW_IN || _la === PostgreSQLParser.KW_TABLE || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (PostgreSQLParser.KW_VARIADIC - 101)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 101)) | (1 << (PostgreSQLParser.KW_BINARY - 101)) | (1 << (PostgreSQLParser.KW_COLLATION - 101)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 101)) | (1 << (PostgreSQLParser.KW_CROSS - 101)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 101)) | (1 << (PostgreSQLParser.KW_FREEZE - 101)) | (1 << (PostgreSQLParser.KW_FULL - 101)) | (1 << (PostgreSQLParser.KW_ILIKE - 101)) | (1 << (PostgreSQLParser.KW_INNER - 101)) | (1 << (PostgreSQLParser.KW_IS - 101)) | (1 << (PostgreSQLParser.KW_ISNULL - 101)) | (1 << (PostgreSQLParser.KW_JOIN - 101)) | (1 << (PostgreSQLParser.KW_LEFT - 101)) | (1 << (PostgreSQLParser.KW_LIKE - 101)) | (1 << (PostgreSQLParser.KW_NATURAL - 101)) | (1 << (PostgreSQLParser.KW_NOTNULL - 101)) | (1 << (PostgreSQLParser.KW_OUTER - 101)) | (1 << (PostgreSQLParser.KW_OVER - 101)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 101)) | (1 << (PostgreSQLParser.KW_RIGHT - 101)) | (1 << (PostgreSQLParser.KW_SIMILAR - 101)) | (1 << (PostgreSQLParser.KW_VERBOSE - 101)) | (1 << (PostgreSQLParser.KW_ABORT - 101)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 101)) | (1 << (PostgreSQLParser.KW_ACCESS - 101)) | (1 << (PostgreSQLParser.KW_ACTION - 101)))) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & ((1 << (PostgreSQLParser.KW_ADD - 133)) | (1 << (PostgreSQLParser.KW_ADMIN - 133)) | (1 << (PostgreSQLParser.KW_AFTER - 133)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 133)) | (1 << (PostgreSQLParser.KW_ALSO - 133)) | (1 << (PostgreSQLParser.KW_ALTER - 133)) | (1 << (PostgreSQLParser.KW_ALWAYS - 133)) | (1 << (PostgreSQLParser.KW_ASSERTION - 133)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 133)) | (1 << (PostgreSQLParser.KW_AT - 133)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 133)) | (1 << (PostgreSQLParser.KW_BACKWARD - 133)) | (1 << (PostgreSQLParser.KW_BEFORE - 133)) | (1 << (PostgreSQLParser.KW_BEGIN - 133)) | (1 << (PostgreSQLParser.KW_BY - 133)) | (1 << (PostgreSQLParser.KW_CACHE - 133)) | (1 << (PostgreSQLParser.KW_CALLED - 133)) | (1 << (PostgreSQLParser.KW_CASCADE - 133)) | (1 << (PostgreSQLParser.KW_CASCADED - 133)) | (1 << (PostgreSQLParser.KW_CATALOG - 133)) | (1 << (PostgreSQLParser.KW_CHAIN - 133)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 133)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 133)) | (1 << (PostgreSQLParser.KW_CLASS - 133)) | (1 << (PostgreSQLParser.KW_CLOSE - 133)) | (1 << (PostgreSQLParser.KW_CLUSTER - 133)) | (1 << (PostgreSQLParser.KW_COMMENT - 133)) | (1 << (PostgreSQLParser.KW_COMMENTS - 133)) | (1 << (PostgreSQLParser.KW_COMMIT - 133)) | (1 << (PostgreSQLParser.KW_COMMITTED - 133)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 133)) | (1 << (PostgreSQLParser.KW_CONNECTION - 133)))) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & ((1 << (PostgreSQLParser.KW_CONSTRAINTS - 165)) | (1 << (PostgreSQLParser.KW_CONTENT - 165)) | (1 << (PostgreSQLParser.KW_CONTINUE - 165)) | (1 << (PostgreSQLParser.KW_CONVERSION - 165)) | (1 << (PostgreSQLParser.KW_COPY - 165)) | (1 << (PostgreSQLParser.KW_COST - 165)) | (1 << (PostgreSQLParser.KW_CSV - 165)) | (1 << (PostgreSQLParser.KW_CURSOR - 165)) | (1 << (PostgreSQLParser.KW_CYCLE - 165)) | (1 << (PostgreSQLParser.KW_DATA - 165)) | (1 << (PostgreSQLParser.KW_DATABASE - 165)) | (1 << (PostgreSQLParser.KW_DAY - 165)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 165)) | (1 << (PostgreSQLParser.KW_DECLARE - 165)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 165)) | (1 << (PostgreSQLParser.KW_DEFERRED - 165)) | (1 << (PostgreSQLParser.KW_DEFINER - 165)) | (1 << (PostgreSQLParser.KW_DELETE - 165)) | (1 << (PostgreSQLParser.KW_DELIMITER - 165)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 165)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 165)) | (1 << (PostgreSQLParser.KW_DISABLE - 165)) | (1 << (PostgreSQLParser.KW_DISCARD - 165)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 165)) | (1 << (PostgreSQLParser.KW_DOMAIN - 165)) | (1 << (PostgreSQLParser.KW_DOUBLE - 165)) | (1 << (PostgreSQLParser.KW_DROP - 165)) | (1 << (PostgreSQLParser.KW_EACH - 165)) | (1 << (PostgreSQLParser.KW_ENABLE - 165)) | (1 << (PostgreSQLParser.KW_ENCODING - 165)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 165)) | (1 << (PostgreSQLParser.KW_ENUM - 165)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (PostgreSQLParser.KW_ESCAPE - 197)) | (1 << (PostgreSQLParser.KW_EVENT - 197)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 197)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 197)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 197)) | (1 << (PostgreSQLParser.KW_EXECUTE - 197)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 197)) | (1 << (PostgreSQLParser.KW_EXTENSION - 197)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 197)) | (1 << (PostgreSQLParser.KW_FAMILY - 197)) | (1 << (PostgreSQLParser.KW_FIRST - 197)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 197)) | (1 << (PostgreSQLParser.KW_FORCE - 197)) | (1 << (PostgreSQLParser.KW_FORWARD - 197)) | (1 << (PostgreSQLParser.KW_FUNCTION - 197)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 197)) | (1 << (PostgreSQLParser.KW_GLOBAL - 197)) | (1 << (PostgreSQLParser.KW_GRANTED - 197)) | (1 << (PostgreSQLParser.KW_HANDLER - 197)) | (1 << (PostgreSQLParser.KW_HEADER - 197)) | (1 << (PostgreSQLParser.KW_HOLD - 197)) | (1 << (PostgreSQLParser.KW_HOUR - 197)) | (1 << (PostgreSQLParser.KW_IDENTITY - 197)) | (1 << (PostgreSQLParser.KW_IF - 197)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 197)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 197)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 197)) | (1 << (PostgreSQLParser.KW_INCLUDING - 197)) | (1 << (PostgreSQLParser.KW_INCREMENT - 197)) | (1 << (PostgreSQLParser.KW_INDEX - 197)) | (1 << (PostgreSQLParser.KW_INDEXES - 197)) | (1 << (PostgreSQLParser.KW_INHERIT - 197)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (PostgreSQLParser.KW_INHERITS - 238)) | (1 << (PostgreSQLParser.KW_INLINE - 238)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 238)) | (1 << (PostgreSQLParser.KW_INSERT - 238)) | (1 << (PostgreSQLParser.KW_INSTEAD - 238)) | (1 << (PostgreSQLParser.KW_INVOKER - 238)) | (1 << (PostgreSQLParser.KW_ISOLATION - 238)) | (1 << (PostgreSQLParser.KW_KEY - 238)) | (1 << (PostgreSQLParser.KW_LABEL - 238)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 238)) | (1 << (PostgreSQLParser.KW_LARGE - 238)) | (1 << (PostgreSQLParser.KW_LAST - 238)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 238)) | (1 << (PostgreSQLParser.KW_LEVEL - 238)) | (1 << (PostgreSQLParser.KW_LISTEN - 238)) | (1 << (PostgreSQLParser.KW_LOAD - 238)) | (1 << (PostgreSQLParser.KW_LOCAL - 238)) | (1 << (PostgreSQLParser.KW_LOCATION - 238)) | (1 << (PostgreSQLParser.KW_LOCK - 238)) | (1 << (PostgreSQLParser.KW_MAPPING - 238)) | (1 << (PostgreSQLParser.KW_MATCH - 238)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 238)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 238)) | (1 << (PostgreSQLParser.KW_MINUTE - 238)) | (1 << (PostgreSQLParser.KW_MINVALUE - 238)) | (1 << (PostgreSQLParser.KW_MODE - 238)) | (1 << (PostgreSQLParser.KW_MONTH - 238)) | (1 << (PostgreSQLParser.KW_MOVE - 238)) | (1 << (PostgreSQLParser.KW_NAME - 238)) | (1 << (PostgreSQLParser.KW_NAMES - 238)) | (1 << (PostgreSQLParser.KW_NEXT - 238)) | (1 << (PostgreSQLParser.KW_NO - 238)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (PostgreSQLParser.KW_NOTHING - 270)) | (1 << (PostgreSQLParser.KW_NOTIFY - 270)) | (1 << (PostgreSQLParser.KW_NOWAIT - 270)) | (1 << (PostgreSQLParser.KW_NULLS - 270)) | (1 << (PostgreSQLParser.KW_OBJECT - 270)) | (1 << (PostgreSQLParser.KW_OF - 270)) | (1 << (PostgreSQLParser.KW_OFF - 270)) | (1 << (PostgreSQLParser.KW_OIDS - 270)) | (1 << (PostgreSQLParser.KW_OPERATOR - 270)) | (1 << (PostgreSQLParser.KW_OPTION - 270)) | (1 << (PostgreSQLParser.KW_OPTIONS - 270)) | (1 << (PostgreSQLParser.KW_OWNED - 270)) | (1 << (PostgreSQLParser.KW_OWNER - 270)) | (1 << (PostgreSQLParser.KW_PARSER - 270)) | (1 << (PostgreSQLParser.KW_PARTIAL - 270)) | (1 << (PostgreSQLParser.KW_PARTITION - 270)) | (1 << (PostgreSQLParser.KW_PASSING - 270)) | (1 << (PostgreSQLParser.KW_PASSWORD - 270)) | (1 << (PostgreSQLParser.KW_PLANS - 270)) | (1 << (PostgreSQLParser.KW_PRECEDING - 270)) | (1 << (PostgreSQLParser.KW_PREPARE - 270)) | (1 << (PostgreSQLParser.KW_PREPARED - 270)) | (1 << (PostgreSQLParser.KW_PRESERVE - 270)) | (1 << (PostgreSQLParser.KW_PRIOR - 270)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 270)) | (1 << (PostgreSQLParser.KW_PROGRAM - 270)) | (1 << (PostgreSQLParser.KW_QUOTE - 270)) | (1 << (PostgreSQLParser.KW_RANGE - 270)) | (1 << (PostgreSQLParser.KW_READ - 270)) | (1 << (PostgreSQLParser.KW_REASSIGN - 270)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (PostgreSQLParser.KW_RECHECK - 302)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 302)) | (1 << (PostgreSQLParser.KW_REF - 302)) | (1 << (PostgreSQLParser.KW_REFRESH - 302)) | (1 << (PostgreSQLParser.KW_REINDEX - 302)) | (1 << (PostgreSQLParser.KW_RELATIVE - 302)) | (1 << (PostgreSQLParser.KW_RELEASE - 302)) | (1 << (PostgreSQLParser.KW_RENAME - 302)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 302)) | (1 << (PostgreSQLParser.KW_REPLACE - 302)) | (1 << (PostgreSQLParser.KW_REPLICA - 302)) | (1 << (PostgreSQLParser.KW_RESET - 302)) | (1 << (PostgreSQLParser.KW_RESTART - 302)) | (1 << (PostgreSQLParser.KW_RESTRICT - 302)) | (1 << (PostgreSQLParser.KW_RETURNS - 302)) | (1 << (PostgreSQLParser.KW_REVOKE - 302)) | (1 << (PostgreSQLParser.KW_ROLE - 302)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 302)) | (1 << (PostgreSQLParser.KW_ROWS - 302)) | (1 << (PostgreSQLParser.KW_RULE - 302)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 302)) | (1 << (PostgreSQLParser.KW_SCHEMA - 302)) | (1 << (PostgreSQLParser.KW_SCROLL - 302)) | (1 << (PostgreSQLParser.KW_SEARCH - 302)) | (1 << (PostgreSQLParser.KW_SECOND - 302)) | (1 << (PostgreSQLParser.KW_SECURITY - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 302)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 302)) | (1 << (PostgreSQLParser.KW_SERVER - 302)) | (1 << (PostgreSQLParser.KW_SESSION - 302)) | (1 << (PostgreSQLParser.KW_SET - 302)))) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & ((1 << (PostgreSQLParser.KW_SHARE - 334)) | (1 << (PostgreSQLParser.KW_SHOW - 334)) | (1 << (PostgreSQLParser.KW_SIMPLE - 334)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 334)) | (1 << (PostgreSQLParser.KW_STABLE - 334)) | (1 << (PostgreSQLParser.KW_STANDALONE - 334)) | (1 << (PostgreSQLParser.KW_START - 334)) | (1 << (PostgreSQLParser.KW_STATEMENT - 334)) | (1 << (PostgreSQLParser.KW_STATISTICS - 334)) | (1 << (PostgreSQLParser.KW_STDIN - 334)) | (1 << (PostgreSQLParser.KW_STDOUT - 334)) | (1 << (PostgreSQLParser.KW_STORAGE - 334)) | (1 << (PostgreSQLParser.KW_STRICT - 334)) | (1 << (PostgreSQLParser.KW_STRIP - 334)) | (1 << (PostgreSQLParser.KW_SYSID - 334)) | (1 << (PostgreSQLParser.KW_SYSTEM - 334)) | (1 << (PostgreSQLParser.KW_TABLES - 334)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 334)) | (1 << (PostgreSQLParser.KW_TEMP - 334)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 334)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 334)) | (1 << (PostgreSQLParser.KW_TEXT - 334)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 334)) | (1 << (PostgreSQLParser.KW_TRIGGER - 334)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 334)) | (1 << (PostgreSQLParser.KW_TRUSTED - 334)) | (1 << (PostgreSQLParser.KW_TYPE - 334)) | (1 << (PostgreSQLParser.KW_TYPES - 334)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 334)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 334)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 334)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 334)))) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & ((1 << (PostgreSQLParser.KW_UNLISTEN - 366)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 366)) | (1 << (PostgreSQLParser.KW_UNTIL - 366)) | (1 << (PostgreSQLParser.KW_UPDATE - 366)) | (1 << (PostgreSQLParser.KW_VACUUM - 366)) | (1 << (PostgreSQLParser.KW_VALID - 366)) | (1 << (PostgreSQLParser.KW_VALIDATE - 366)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 366)) | (1 << (PostgreSQLParser.KW_VARYING - 366)) | (1 << (PostgreSQLParser.KW_VERSION - 366)) | (1 << (PostgreSQLParser.KW_VIEW - 366)) | (1 << (PostgreSQLParser.KW_VOLATILE - 366)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 366)) | (1 << (PostgreSQLParser.KW_WITHOUT - 366)) | (1 << (PostgreSQLParser.KW_WORK - 366)) | (1 << (PostgreSQLParser.KW_WRAPPER - 366)) | (1 << (PostgreSQLParser.KW_WRITE - 366)) | (1 << (PostgreSQLParser.KW_XML - 366)) | (1 << (PostgreSQLParser.KW_YEAR - 366)) | (1 << (PostgreSQLParser.KW_YES - 366)) | (1 << (PostgreSQLParser.KW_ZONE - 366)) | (1 << (PostgreSQLParser.KW_BETWEEN - 366)) | (1 << (PostgreSQLParser.KW_BIGINT - 366)) | (1 << (PostgreSQLParser.KW_BIT - 366)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 366)) | (1 << (PostgreSQLParser.KW_CHAR - 366)) | (1 << (PostgreSQLParser.KW_CHARACTER - 366)) | (1 << (PostgreSQLParser.KW_COALESCE - 366)) | (1 << (PostgreSQLParser.KW_DEC - 366)) | (1 << (PostgreSQLParser.KW_DECIMAL - 366)) | (1 << (PostgreSQLParser.KW_EXISTS - 366)) | (1 << (PostgreSQLParser.KW_EXTRACT - 366)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PostgreSQLParser.KW_FLOAT - 398)) | (1 << (PostgreSQLParser.KW_GREATEST - 398)) | (1 << (PostgreSQLParser.KW_INOUT - 398)) | (1 << (PostgreSQLParser.KW_INT - 398)) | (1 << (PostgreSQLParser.KW_INTEGER - 398)) | (1 << (PostgreSQLParser.KW_INTERVAL - 398)) | (1 << (PostgreSQLParser.KW_LEAST - 398)) | (1 << (PostgreSQLParser.KW_NATIONAL - 398)) | (1 << (PostgreSQLParser.KW_NCHAR - 398)) | (1 << (PostgreSQLParser.KW_NONE - 398)) | (1 << (PostgreSQLParser.KW_NULLIF - 398)) | (1 << (PostgreSQLParser.KW_NUMERIC - 398)) | (1 << (PostgreSQLParser.KW_OVERLAY - 398)) | (1 << (PostgreSQLParser.KW_POSITION - 398)) | (1 << (PostgreSQLParser.KW_PRECISION - 398)) | (1 << (PostgreSQLParser.KW_REAL - 398)) | (1 << (PostgreSQLParser.KW_ROW - 398)) | (1 << (PostgreSQLParser.KW_SETOF - 398)) | (1 << (PostgreSQLParser.KW_SMALLINT - 398)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 398)) | (1 << (PostgreSQLParser.KW_TIME - 398)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 398)) | (1 << (PostgreSQLParser.KW_TREAT - 398)) | (1 << (PostgreSQLParser.KW_TRIM - 398)) | (1 << (PostgreSQLParser.KW_VALUES - 398)) | (1 << (PostgreSQLParser.KW_VARCHAR - 398)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 398)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 398)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 398)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 398)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 398)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 398)))) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & ((1 << (PostgreSQLParser.KW_XMLPI - 430)) | (1 << (PostgreSQLParser.KW_XMLROOT - 430)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 430)) | (1 << (PostgreSQLParser.KW_CALL - 430)) | (1 << (PostgreSQLParser.KW_CURRENT - 430)) | (1 << (PostgreSQLParser.KW_ATTACH - 430)) | (1 << (PostgreSQLParser.KW_DETACH - 430)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 430)) | (1 << (PostgreSQLParser.KW_GENERATED - 430)) | (1 << (PostgreSQLParser.KW_LOGGED - 430)) | (1 << (PostgreSQLParser.KW_STORED - 430)) | (1 << (PostgreSQLParser.KW_INCLUDE - 430)) | (1 << (PostgreSQLParser.KW_ROUTINE - 430)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 430)) | (1 << (PostgreSQLParser.KW_IMPORT - 430)) | (1 << (PostgreSQLParser.KW_POLICY - 430)) | (1 << (PostgreSQLParser.KW_METHOD - 430)) | (1 << (PostgreSQLParser.KW_REFERENCING - 430)) | (1 << (PostgreSQLParser.KW_NEW - 430)) | (1 << (PostgreSQLParser.KW_OLD - 430)) | (1 << (PostgreSQLParser.KW_VALUE - 430)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 430)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 430)) | (1 << (PostgreSQLParser.KW_OUT - 430)) | (1 << (PostgreSQLParser.KW_ROUTINES - 430)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 430)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 430)) | (1 << (PostgreSQLParser.KW_INPUT - 430)) | (1 << (PostgreSQLParser.KW_SUPPORT - 430)) | (1 << (PostgreSQLParser.KW_PARALLEL - 430)) | (1 << (PostgreSQLParser.KW_SQL - 430)))) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & ((1 << (PostgreSQLParser.KW_DEPENDS - 462)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 462)) | (1 << (PostgreSQLParser.KW_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_SKIP - 462)) | (1 << (PostgreSQLParser.KW_LOCKED - 462)) | (1 << (PostgreSQLParser.KW_TIES - 462)) | (1 << (PostgreSQLParser.KW_ROLLUP - 462)) | (1 << (PostgreSQLParser.KW_CUBE - 462)) | (1 << (PostgreSQLParser.KW_GROUPING - 462)) | (1 << (PostgreSQLParser.KW_SETS - 462)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 462)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 462)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 462)) | (1 << (PostgreSQLParser.KW_COLUMNS - 462)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 462)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 462)) | (1 << (PostgreSQLParser.KW_WITHIN - 462)) | (1 << (PostgreSQLParser.KW_FILTER - 462)) | (1 << (PostgreSQLParser.KW_GROUPS - 462)) | (1 << (PostgreSQLParser.KW_OTHERS - 462)) | (1 << (PostgreSQLParser.KW_NFC - 462)) | (1 << (PostgreSQLParser.KW_NFD - 462)) | (1 << (PostgreSQLParser.KW_NFKC - 462)) | (1 << (PostgreSQLParser.KW_NFKD - 462)) | (1 << (PostgreSQLParser.KW_UESCAPE - 462)) | (1 << (PostgreSQLParser.KW_VIEWS - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 462)) | (1 << (PostgreSQLParser.KW_DUMP - 462)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 462)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_ERROR - 462)))) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (PostgreSQLParser.KW_USE_VARIABLE - 494)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 494)) | (1 << (PostgreSQLParser.KW_ALIAS - 494)) | (1 << (PostgreSQLParser.KW_CONSTANT - 494)) | (1 << (PostgreSQLParser.KW_PERFORM - 494)) | (1 << (PostgreSQLParser.KW_GET - 494)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 494)) | (1 << (PostgreSQLParser.KW_STACKED - 494)) | (1 << (PostgreSQLParser.KW_ELSIF - 494)) | (1 << (PostgreSQLParser.KW_REVERSE - 494)) | (1 << (PostgreSQLParser.KW_SLICE - 494)) | (1 << (PostgreSQLParser.KW_EXIT - 494)) | (1 << (PostgreSQLParser.KW_RETURN - 494)) | (1 << (PostgreSQLParser.KW_QUERY - 494)) | (1 << (PostgreSQLParser.KW_RAISE - 494)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 494)) | (1 << (PostgreSQLParser.KW_DEBUG - 494)) | (1 << (PostgreSQLParser.KW_LOG - 494)) | (1 << (PostgreSQLParser.KW_INFO - 494)) | (1 << (PostgreSQLParser.KW_NOTICE - 494)) | (1 << (PostgreSQLParser.KW_WARNING - 494)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 494)) | (1 << (PostgreSQLParser.KW_ASSERT - 494)) | (1 << (PostgreSQLParser.KW_OPEN - 494)) | (1 << (PostgreSQLParser.Identifier - 494)))) !== 0) || ((((_la - 526)) & ~0x1F) === 0 && ((1 << (_la - 526)) & ((1 << (PostgreSQLParser.QuotedIdentifier - 526)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 526)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 526)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 526)))) !== 0)) {
				{
				this.state = 5730;
				this.func_args_list();
				}
			}

			this.state = 5733;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_args_list(): Func_args_listContext {
		let _localctx: Func_args_listContext = new Func_args_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 634, PostgreSQLParser.RULE_func_args_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5735;
			this.func_arg();
			this.state = 5740;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5736;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5737;
				this.func_arg();
				}
				}
				this.state = 5742;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_with_argtypes_list(): Function_with_argtypes_listContext {
		let _localctx: Function_with_argtypes_listContext = new Function_with_argtypes_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 636, PostgreSQLParser.RULE_function_with_argtypes_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5743;
			this.function_with_argtypes();
			this.state = 5748;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5744;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5745;
				this.function_with_argtypes();
				}
				}
				this.state = 5750;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public function_with_argtypes(): Function_with_argtypesContext {
		let _localctx: Function_with_argtypesContext = new Function_with_argtypesContext(this._ctx, this.state);
		this.enterRule(_localctx, 638, PostgreSQLParser.RULE_function_with_argtypes);
		let _la: number;
		try {
			this.state = 5759;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 484, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5751;
				this.func_name();
				this.state = 5752;
				this.func_args();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5754;
				this.type_func_name_keyword();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5755;
				this.colid();
				this.state = 5757;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_BRACKET || _la === PostgreSQLParser.DOT) {
					{
					this.state = 5756;
					this.indirection();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_args_with_defaults(): Func_args_with_defaultsContext {
		let _localctx: Func_args_with_defaultsContext = new Func_args_with_defaultsContext(this._ctx, this.state);
		this.enterRule(_localctx, 640, PostgreSQLParser.RULE_func_args_with_defaults);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5761;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 5763;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || _la === PostgreSQLParser.KW_IN || _la === PostgreSQLParser.KW_TABLE || ((((_la - 101)) & ~0x1F) === 0 && ((1 << (_la - 101)) & ((1 << (PostgreSQLParser.KW_VARIADIC - 101)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 101)) | (1 << (PostgreSQLParser.KW_BINARY - 101)) | (1 << (PostgreSQLParser.KW_COLLATION - 101)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 101)) | (1 << (PostgreSQLParser.KW_CROSS - 101)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 101)) | (1 << (PostgreSQLParser.KW_FREEZE - 101)) | (1 << (PostgreSQLParser.KW_FULL - 101)) | (1 << (PostgreSQLParser.KW_ILIKE - 101)) | (1 << (PostgreSQLParser.KW_INNER - 101)) | (1 << (PostgreSQLParser.KW_IS - 101)) | (1 << (PostgreSQLParser.KW_ISNULL - 101)) | (1 << (PostgreSQLParser.KW_JOIN - 101)) | (1 << (PostgreSQLParser.KW_LEFT - 101)) | (1 << (PostgreSQLParser.KW_LIKE - 101)) | (1 << (PostgreSQLParser.KW_NATURAL - 101)) | (1 << (PostgreSQLParser.KW_NOTNULL - 101)) | (1 << (PostgreSQLParser.KW_OUTER - 101)) | (1 << (PostgreSQLParser.KW_OVER - 101)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 101)) | (1 << (PostgreSQLParser.KW_RIGHT - 101)) | (1 << (PostgreSQLParser.KW_SIMILAR - 101)) | (1 << (PostgreSQLParser.KW_VERBOSE - 101)) | (1 << (PostgreSQLParser.KW_ABORT - 101)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 101)) | (1 << (PostgreSQLParser.KW_ACCESS - 101)) | (1 << (PostgreSQLParser.KW_ACTION - 101)))) !== 0) || ((((_la - 133)) & ~0x1F) === 0 && ((1 << (_la - 133)) & ((1 << (PostgreSQLParser.KW_ADD - 133)) | (1 << (PostgreSQLParser.KW_ADMIN - 133)) | (1 << (PostgreSQLParser.KW_AFTER - 133)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 133)) | (1 << (PostgreSQLParser.KW_ALSO - 133)) | (1 << (PostgreSQLParser.KW_ALTER - 133)) | (1 << (PostgreSQLParser.KW_ALWAYS - 133)) | (1 << (PostgreSQLParser.KW_ASSERTION - 133)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 133)) | (1 << (PostgreSQLParser.KW_AT - 133)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 133)) | (1 << (PostgreSQLParser.KW_BACKWARD - 133)) | (1 << (PostgreSQLParser.KW_BEFORE - 133)) | (1 << (PostgreSQLParser.KW_BEGIN - 133)) | (1 << (PostgreSQLParser.KW_BY - 133)) | (1 << (PostgreSQLParser.KW_CACHE - 133)) | (1 << (PostgreSQLParser.KW_CALLED - 133)) | (1 << (PostgreSQLParser.KW_CASCADE - 133)) | (1 << (PostgreSQLParser.KW_CASCADED - 133)) | (1 << (PostgreSQLParser.KW_CATALOG - 133)) | (1 << (PostgreSQLParser.KW_CHAIN - 133)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 133)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 133)) | (1 << (PostgreSQLParser.KW_CLASS - 133)) | (1 << (PostgreSQLParser.KW_CLOSE - 133)) | (1 << (PostgreSQLParser.KW_CLUSTER - 133)) | (1 << (PostgreSQLParser.KW_COMMENT - 133)) | (1 << (PostgreSQLParser.KW_COMMENTS - 133)) | (1 << (PostgreSQLParser.KW_COMMIT - 133)) | (1 << (PostgreSQLParser.KW_COMMITTED - 133)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 133)) | (1 << (PostgreSQLParser.KW_CONNECTION - 133)))) !== 0) || ((((_la - 165)) & ~0x1F) === 0 && ((1 << (_la - 165)) & ((1 << (PostgreSQLParser.KW_CONSTRAINTS - 165)) | (1 << (PostgreSQLParser.KW_CONTENT - 165)) | (1 << (PostgreSQLParser.KW_CONTINUE - 165)) | (1 << (PostgreSQLParser.KW_CONVERSION - 165)) | (1 << (PostgreSQLParser.KW_COPY - 165)) | (1 << (PostgreSQLParser.KW_COST - 165)) | (1 << (PostgreSQLParser.KW_CSV - 165)) | (1 << (PostgreSQLParser.KW_CURSOR - 165)) | (1 << (PostgreSQLParser.KW_CYCLE - 165)) | (1 << (PostgreSQLParser.KW_DATA - 165)) | (1 << (PostgreSQLParser.KW_DATABASE - 165)) | (1 << (PostgreSQLParser.KW_DAY - 165)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 165)) | (1 << (PostgreSQLParser.KW_DECLARE - 165)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 165)) | (1 << (PostgreSQLParser.KW_DEFERRED - 165)) | (1 << (PostgreSQLParser.KW_DEFINER - 165)) | (1 << (PostgreSQLParser.KW_DELETE - 165)) | (1 << (PostgreSQLParser.KW_DELIMITER - 165)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 165)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 165)) | (1 << (PostgreSQLParser.KW_DISABLE - 165)) | (1 << (PostgreSQLParser.KW_DISCARD - 165)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 165)) | (1 << (PostgreSQLParser.KW_DOMAIN - 165)) | (1 << (PostgreSQLParser.KW_DOUBLE - 165)) | (1 << (PostgreSQLParser.KW_DROP - 165)) | (1 << (PostgreSQLParser.KW_EACH - 165)) | (1 << (PostgreSQLParser.KW_ENABLE - 165)) | (1 << (PostgreSQLParser.KW_ENCODING - 165)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 165)) | (1 << (PostgreSQLParser.KW_ENUM - 165)))) !== 0) || ((((_la - 197)) & ~0x1F) === 0 && ((1 << (_la - 197)) & ((1 << (PostgreSQLParser.KW_ESCAPE - 197)) | (1 << (PostgreSQLParser.KW_EVENT - 197)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 197)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 197)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 197)) | (1 << (PostgreSQLParser.KW_EXECUTE - 197)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 197)) | (1 << (PostgreSQLParser.KW_EXTENSION - 197)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 197)) | (1 << (PostgreSQLParser.KW_FAMILY - 197)) | (1 << (PostgreSQLParser.KW_FIRST - 197)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 197)) | (1 << (PostgreSQLParser.KW_FORCE - 197)) | (1 << (PostgreSQLParser.KW_FORWARD - 197)) | (1 << (PostgreSQLParser.KW_FUNCTION - 197)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 197)) | (1 << (PostgreSQLParser.KW_GLOBAL - 197)) | (1 << (PostgreSQLParser.KW_GRANTED - 197)) | (1 << (PostgreSQLParser.KW_HANDLER - 197)) | (1 << (PostgreSQLParser.KW_HEADER - 197)) | (1 << (PostgreSQLParser.KW_HOLD - 197)) | (1 << (PostgreSQLParser.KW_HOUR - 197)) | (1 << (PostgreSQLParser.KW_IDENTITY - 197)) | (1 << (PostgreSQLParser.KW_IF - 197)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 197)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 197)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 197)) | (1 << (PostgreSQLParser.KW_INCLUDING - 197)) | (1 << (PostgreSQLParser.KW_INCREMENT - 197)) | (1 << (PostgreSQLParser.KW_INDEX - 197)) | (1 << (PostgreSQLParser.KW_INDEXES - 197)) | (1 << (PostgreSQLParser.KW_INHERIT - 197)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (PostgreSQLParser.KW_INHERITS - 238)) | (1 << (PostgreSQLParser.KW_INLINE - 238)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 238)) | (1 << (PostgreSQLParser.KW_INSERT - 238)) | (1 << (PostgreSQLParser.KW_INSTEAD - 238)) | (1 << (PostgreSQLParser.KW_INVOKER - 238)) | (1 << (PostgreSQLParser.KW_ISOLATION - 238)) | (1 << (PostgreSQLParser.KW_KEY - 238)) | (1 << (PostgreSQLParser.KW_LABEL - 238)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 238)) | (1 << (PostgreSQLParser.KW_LARGE - 238)) | (1 << (PostgreSQLParser.KW_LAST - 238)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 238)) | (1 << (PostgreSQLParser.KW_LEVEL - 238)) | (1 << (PostgreSQLParser.KW_LISTEN - 238)) | (1 << (PostgreSQLParser.KW_LOAD - 238)) | (1 << (PostgreSQLParser.KW_LOCAL - 238)) | (1 << (PostgreSQLParser.KW_LOCATION - 238)) | (1 << (PostgreSQLParser.KW_LOCK - 238)) | (1 << (PostgreSQLParser.KW_MAPPING - 238)) | (1 << (PostgreSQLParser.KW_MATCH - 238)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 238)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 238)) | (1 << (PostgreSQLParser.KW_MINUTE - 238)) | (1 << (PostgreSQLParser.KW_MINVALUE - 238)) | (1 << (PostgreSQLParser.KW_MODE - 238)) | (1 << (PostgreSQLParser.KW_MONTH - 238)) | (1 << (PostgreSQLParser.KW_MOVE - 238)) | (1 << (PostgreSQLParser.KW_NAME - 238)) | (1 << (PostgreSQLParser.KW_NAMES - 238)) | (1 << (PostgreSQLParser.KW_NEXT - 238)) | (1 << (PostgreSQLParser.KW_NO - 238)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (PostgreSQLParser.KW_NOTHING - 270)) | (1 << (PostgreSQLParser.KW_NOTIFY - 270)) | (1 << (PostgreSQLParser.KW_NOWAIT - 270)) | (1 << (PostgreSQLParser.KW_NULLS - 270)) | (1 << (PostgreSQLParser.KW_OBJECT - 270)) | (1 << (PostgreSQLParser.KW_OF - 270)) | (1 << (PostgreSQLParser.KW_OFF - 270)) | (1 << (PostgreSQLParser.KW_OIDS - 270)) | (1 << (PostgreSQLParser.KW_OPERATOR - 270)) | (1 << (PostgreSQLParser.KW_OPTION - 270)) | (1 << (PostgreSQLParser.KW_OPTIONS - 270)) | (1 << (PostgreSQLParser.KW_OWNED - 270)) | (1 << (PostgreSQLParser.KW_OWNER - 270)) | (1 << (PostgreSQLParser.KW_PARSER - 270)) | (1 << (PostgreSQLParser.KW_PARTIAL - 270)) | (1 << (PostgreSQLParser.KW_PARTITION - 270)) | (1 << (PostgreSQLParser.KW_PASSING - 270)) | (1 << (PostgreSQLParser.KW_PASSWORD - 270)) | (1 << (PostgreSQLParser.KW_PLANS - 270)) | (1 << (PostgreSQLParser.KW_PRECEDING - 270)) | (1 << (PostgreSQLParser.KW_PREPARE - 270)) | (1 << (PostgreSQLParser.KW_PREPARED - 270)) | (1 << (PostgreSQLParser.KW_PRESERVE - 270)) | (1 << (PostgreSQLParser.KW_PRIOR - 270)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 270)) | (1 << (PostgreSQLParser.KW_PROGRAM - 270)) | (1 << (PostgreSQLParser.KW_QUOTE - 270)) | (1 << (PostgreSQLParser.KW_RANGE - 270)) | (1 << (PostgreSQLParser.KW_READ - 270)) | (1 << (PostgreSQLParser.KW_REASSIGN - 270)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (PostgreSQLParser.KW_RECHECK - 302)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 302)) | (1 << (PostgreSQLParser.KW_REF - 302)) | (1 << (PostgreSQLParser.KW_REFRESH - 302)) | (1 << (PostgreSQLParser.KW_REINDEX - 302)) | (1 << (PostgreSQLParser.KW_RELATIVE - 302)) | (1 << (PostgreSQLParser.KW_RELEASE - 302)) | (1 << (PostgreSQLParser.KW_RENAME - 302)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 302)) | (1 << (PostgreSQLParser.KW_REPLACE - 302)) | (1 << (PostgreSQLParser.KW_REPLICA - 302)) | (1 << (PostgreSQLParser.KW_RESET - 302)) | (1 << (PostgreSQLParser.KW_RESTART - 302)) | (1 << (PostgreSQLParser.KW_RESTRICT - 302)) | (1 << (PostgreSQLParser.KW_RETURNS - 302)) | (1 << (PostgreSQLParser.KW_REVOKE - 302)) | (1 << (PostgreSQLParser.KW_ROLE - 302)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 302)) | (1 << (PostgreSQLParser.KW_ROWS - 302)) | (1 << (PostgreSQLParser.KW_RULE - 302)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 302)) | (1 << (PostgreSQLParser.KW_SCHEMA - 302)) | (1 << (PostgreSQLParser.KW_SCROLL - 302)) | (1 << (PostgreSQLParser.KW_SEARCH - 302)) | (1 << (PostgreSQLParser.KW_SECOND - 302)) | (1 << (PostgreSQLParser.KW_SECURITY - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 302)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 302)) | (1 << (PostgreSQLParser.KW_SERVER - 302)) | (1 << (PostgreSQLParser.KW_SESSION - 302)) | (1 << (PostgreSQLParser.KW_SET - 302)))) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & ((1 << (PostgreSQLParser.KW_SHARE - 334)) | (1 << (PostgreSQLParser.KW_SHOW - 334)) | (1 << (PostgreSQLParser.KW_SIMPLE - 334)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 334)) | (1 << (PostgreSQLParser.KW_STABLE - 334)) | (1 << (PostgreSQLParser.KW_STANDALONE - 334)) | (1 << (PostgreSQLParser.KW_START - 334)) | (1 << (PostgreSQLParser.KW_STATEMENT - 334)) | (1 << (PostgreSQLParser.KW_STATISTICS - 334)) | (1 << (PostgreSQLParser.KW_STDIN - 334)) | (1 << (PostgreSQLParser.KW_STDOUT - 334)) | (1 << (PostgreSQLParser.KW_STORAGE - 334)) | (1 << (PostgreSQLParser.KW_STRICT - 334)) | (1 << (PostgreSQLParser.KW_STRIP - 334)) | (1 << (PostgreSQLParser.KW_SYSID - 334)) | (1 << (PostgreSQLParser.KW_SYSTEM - 334)) | (1 << (PostgreSQLParser.KW_TABLES - 334)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 334)) | (1 << (PostgreSQLParser.KW_TEMP - 334)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 334)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 334)) | (1 << (PostgreSQLParser.KW_TEXT - 334)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 334)) | (1 << (PostgreSQLParser.KW_TRIGGER - 334)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 334)) | (1 << (PostgreSQLParser.KW_TRUSTED - 334)) | (1 << (PostgreSQLParser.KW_TYPE - 334)) | (1 << (PostgreSQLParser.KW_TYPES - 334)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 334)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 334)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 334)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 334)))) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & ((1 << (PostgreSQLParser.KW_UNLISTEN - 366)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 366)) | (1 << (PostgreSQLParser.KW_UNTIL - 366)) | (1 << (PostgreSQLParser.KW_UPDATE - 366)) | (1 << (PostgreSQLParser.KW_VACUUM - 366)) | (1 << (PostgreSQLParser.KW_VALID - 366)) | (1 << (PostgreSQLParser.KW_VALIDATE - 366)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 366)) | (1 << (PostgreSQLParser.KW_VARYING - 366)) | (1 << (PostgreSQLParser.KW_VERSION - 366)) | (1 << (PostgreSQLParser.KW_VIEW - 366)) | (1 << (PostgreSQLParser.KW_VOLATILE - 366)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 366)) | (1 << (PostgreSQLParser.KW_WITHOUT - 366)) | (1 << (PostgreSQLParser.KW_WORK - 366)) | (1 << (PostgreSQLParser.KW_WRAPPER - 366)) | (1 << (PostgreSQLParser.KW_WRITE - 366)) | (1 << (PostgreSQLParser.KW_XML - 366)) | (1 << (PostgreSQLParser.KW_YEAR - 366)) | (1 << (PostgreSQLParser.KW_YES - 366)) | (1 << (PostgreSQLParser.KW_ZONE - 366)) | (1 << (PostgreSQLParser.KW_BETWEEN - 366)) | (1 << (PostgreSQLParser.KW_BIGINT - 366)) | (1 << (PostgreSQLParser.KW_BIT - 366)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 366)) | (1 << (PostgreSQLParser.KW_CHAR - 366)) | (1 << (PostgreSQLParser.KW_CHARACTER - 366)) | (1 << (PostgreSQLParser.KW_COALESCE - 366)) | (1 << (PostgreSQLParser.KW_DEC - 366)) | (1 << (PostgreSQLParser.KW_DECIMAL - 366)) | (1 << (PostgreSQLParser.KW_EXISTS - 366)) | (1 << (PostgreSQLParser.KW_EXTRACT - 366)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PostgreSQLParser.KW_FLOAT - 398)) | (1 << (PostgreSQLParser.KW_GREATEST - 398)) | (1 << (PostgreSQLParser.KW_INOUT - 398)) | (1 << (PostgreSQLParser.KW_INT - 398)) | (1 << (PostgreSQLParser.KW_INTEGER - 398)) | (1 << (PostgreSQLParser.KW_INTERVAL - 398)) | (1 << (PostgreSQLParser.KW_LEAST - 398)) | (1 << (PostgreSQLParser.KW_NATIONAL - 398)) | (1 << (PostgreSQLParser.KW_NCHAR - 398)) | (1 << (PostgreSQLParser.KW_NONE - 398)) | (1 << (PostgreSQLParser.KW_NULLIF - 398)) | (1 << (PostgreSQLParser.KW_NUMERIC - 398)) | (1 << (PostgreSQLParser.KW_OVERLAY - 398)) | (1 << (PostgreSQLParser.KW_POSITION - 398)) | (1 << (PostgreSQLParser.KW_PRECISION - 398)) | (1 << (PostgreSQLParser.KW_REAL - 398)) | (1 << (PostgreSQLParser.KW_ROW - 398)) | (1 << (PostgreSQLParser.KW_SETOF - 398)) | (1 << (PostgreSQLParser.KW_SMALLINT - 398)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 398)) | (1 << (PostgreSQLParser.KW_TIME - 398)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 398)) | (1 << (PostgreSQLParser.KW_TREAT - 398)) | (1 << (PostgreSQLParser.KW_TRIM - 398)) | (1 << (PostgreSQLParser.KW_VALUES - 398)) | (1 << (PostgreSQLParser.KW_VARCHAR - 398)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 398)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 398)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 398)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 398)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 398)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 398)))) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & ((1 << (PostgreSQLParser.KW_XMLPI - 430)) | (1 << (PostgreSQLParser.KW_XMLROOT - 430)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 430)) | (1 << (PostgreSQLParser.KW_CALL - 430)) | (1 << (PostgreSQLParser.KW_CURRENT - 430)) | (1 << (PostgreSQLParser.KW_ATTACH - 430)) | (1 << (PostgreSQLParser.KW_DETACH - 430)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 430)) | (1 << (PostgreSQLParser.KW_GENERATED - 430)) | (1 << (PostgreSQLParser.KW_LOGGED - 430)) | (1 << (PostgreSQLParser.KW_STORED - 430)) | (1 << (PostgreSQLParser.KW_INCLUDE - 430)) | (1 << (PostgreSQLParser.KW_ROUTINE - 430)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 430)) | (1 << (PostgreSQLParser.KW_IMPORT - 430)) | (1 << (PostgreSQLParser.KW_POLICY - 430)) | (1 << (PostgreSQLParser.KW_METHOD - 430)) | (1 << (PostgreSQLParser.KW_REFERENCING - 430)) | (1 << (PostgreSQLParser.KW_NEW - 430)) | (1 << (PostgreSQLParser.KW_OLD - 430)) | (1 << (PostgreSQLParser.KW_VALUE - 430)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 430)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 430)) | (1 << (PostgreSQLParser.KW_OUT - 430)) | (1 << (PostgreSQLParser.KW_ROUTINES - 430)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 430)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 430)) | (1 << (PostgreSQLParser.KW_INPUT - 430)) | (1 << (PostgreSQLParser.KW_SUPPORT - 430)) | (1 << (PostgreSQLParser.KW_PARALLEL - 430)) | (1 << (PostgreSQLParser.KW_SQL - 430)))) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & ((1 << (PostgreSQLParser.KW_DEPENDS - 462)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 462)) | (1 << (PostgreSQLParser.KW_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_SKIP - 462)) | (1 << (PostgreSQLParser.KW_LOCKED - 462)) | (1 << (PostgreSQLParser.KW_TIES - 462)) | (1 << (PostgreSQLParser.KW_ROLLUP - 462)) | (1 << (PostgreSQLParser.KW_CUBE - 462)) | (1 << (PostgreSQLParser.KW_GROUPING - 462)) | (1 << (PostgreSQLParser.KW_SETS - 462)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 462)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 462)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 462)) | (1 << (PostgreSQLParser.KW_COLUMNS - 462)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 462)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 462)) | (1 << (PostgreSQLParser.KW_WITHIN - 462)) | (1 << (PostgreSQLParser.KW_FILTER - 462)) | (1 << (PostgreSQLParser.KW_GROUPS - 462)) | (1 << (PostgreSQLParser.KW_OTHERS - 462)) | (1 << (PostgreSQLParser.KW_NFC - 462)) | (1 << (PostgreSQLParser.KW_NFD - 462)) | (1 << (PostgreSQLParser.KW_NFKC - 462)) | (1 << (PostgreSQLParser.KW_NFKD - 462)) | (1 << (PostgreSQLParser.KW_UESCAPE - 462)) | (1 << (PostgreSQLParser.KW_VIEWS - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 462)) | (1 << (PostgreSQLParser.KW_DUMP - 462)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 462)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_ERROR - 462)))) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (PostgreSQLParser.KW_USE_VARIABLE - 494)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 494)) | (1 << (PostgreSQLParser.KW_ALIAS - 494)) | (1 << (PostgreSQLParser.KW_CONSTANT - 494)) | (1 << (PostgreSQLParser.KW_PERFORM - 494)) | (1 << (PostgreSQLParser.KW_GET - 494)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 494)) | (1 << (PostgreSQLParser.KW_STACKED - 494)) | (1 << (PostgreSQLParser.KW_ELSIF - 494)) | (1 << (PostgreSQLParser.KW_REVERSE - 494)) | (1 << (PostgreSQLParser.KW_SLICE - 494)) | (1 << (PostgreSQLParser.KW_EXIT - 494)) | (1 << (PostgreSQLParser.KW_RETURN - 494)) | (1 << (PostgreSQLParser.KW_QUERY - 494)) | (1 << (PostgreSQLParser.KW_RAISE - 494)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 494)) | (1 << (PostgreSQLParser.KW_DEBUG - 494)) | (1 << (PostgreSQLParser.KW_LOG - 494)) | (1 << (PostgreSQLParser.KW_INFO - 494)) | (1 << (PostgreSQLParser.KW_NOTICE - 494)) | (1 << (PostgreSQLParser.KW_WARNING - 494)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 494)) | (1 << (PostgreSQLParser.KW_ASSERT - 494)) | (1 << (PostgreSQLParser.KW_OPEN - 494)) | (1 << (PostgreSQLParser.Identifier - 494)))) !== 0) || ((((_la - 526)) & ~0x1F) === 0 && ((1 << (_la - 526)) & ((1 << (PostgreSQLParser.QuotedIdentifier - 526)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 526)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 526)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 526)))) !== 0)) {
				{
				this.state = 5762;
				this.func_args_with_defaults_list();
				}
			}

			this.state = 5765;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_args_with_defaults_list(): Func_args_with_defaults_listContext {
		let _localctx: Func_args_with_defaults_listContext = new Func_args_with_defaults_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 642, PostgreSQLParser.RULE_func_args_with_defaults_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5767;
			this.func_arg_with_default();
			this.state = 5772;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5768;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5769;
				this.func_arg_with_default();
				}
				}
				this.state = 5774;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_arg(): Func_argContext {
		let _localctx: Func_argContext = new Func_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 644, PostgreSQLParser.RULE_func_arg);
		try {
			this.state = 5788;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 489, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5775;
				this.arg_class();
				this.state = 5777;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 487, this._ctx) ) {
				case 1:
					{
					this.state = 5776;
					this.param_name();
					}
					break;
				}
				this.state = 5779;
				this.func_type();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5781;
				this.param_name();
				this.state = 5783;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 488, this._ctx) ) {
				case 1:
					{
					this.state = 5782;
					this.arg_class();
					}
					break;
				}
				this.state = 5785;
				this.func_type();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5787;
				this.func_type();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arg_class(): Arg_classContext {
		let _localctx: Arg_classContext = new Arg_classContext(this._ctx, this.state);
		this.enterRule(_localctx, 646, PostgreSQLParser.RULE_arg_class);
		try {
			this.state = 5797;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_IN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5790;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 5792;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 490, this._ctx) ) {
				case 1:
					{
					this.state = 5791;
					this.match(PostgreSQLParser.KW_OUT);
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_OUT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5794;
				this.match(PostgreSQLParser.KW_OUT);
				}
				break;
			case PostgreSQLParser.KW_INOUT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5795;
				this.match(PostgreSQLParser.KW_INOUT);
				}
				break;
			case PostgreSQLParser.KW_VARIADIC:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5796;
				this.match(PostgreSQLParser.KW_VARIADIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public param_name(): Param_nameContext {
		let _localctx: Param_nameContext = new Param_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 648, PostgreSQLParser.RULE_param_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5799;
			this.type_function_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_return(): Func_returnContext {
		let _localctx: Func_returnContext = new Func_returnContext(this._ctx, this.state);
		this.enterRule(_localctx, 650, PostgreSQLParser.RULE_func_return);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5801;
			this.func_type();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_type(): Func_typeContext {
		let _localctx: Func_typeContext = new Func_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 652, PostgreSQLParser.RULE_func_type);
		try {
			this.state = 5815;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 492, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5803;
				this.typename();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5804;
				this.type_function_name();
				this.state = 5805;
				this.attrs();
				this.state = 5806;
				this.match(PostgreSQLParser.PERCENT);
				this.state = 5807;
				this.match(PostgreSQLParser.KW_TYPE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5809;
				this.match(PostgreSQLParser.KW_SETOF);
				this.state = 5810;
				this.type_function_name();
				this.state = 5811;
				this.attrs();
				this.state = 5812;
				this.match(PostgreSQLParser.PERCENT);
				this.state = 5813;
				this.match(PostgreSQLParser.KW_TYPE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_arg_with_default(): Func_arg_with_defaultContext {
		let _localctx: Func_arg_with_defaultContext = new Func_arg_with_defaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 654, PostgreSQLParser.RULE_func_arg_with_default);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5817;
			this.func_arg();
			this.state = 5820;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.EQUAL || _la === PostgreSQLParser.KW_DEFAULT) {
				{
				this.state = 5818;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.EQUAL || _la === PostgreSQLParser.KW_DEFAULT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 5819;
				this.a_expr();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggr_arg(): Aggr_argContext {
		let _localctx: Aggr_argContext = new Aggr_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 656, PostgreSQLParser.RULE_aggr_arg);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5822;
			this.func_arg();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggr_args(): Aggr_argsContext {
		let _localctx: Aggr_argsContext = new Aggr_argsContext(this._ctx, this.state);
		this.enterRule(_localctx, 658, PostgreSQLParser.RULE_aggr_args);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5824;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 5835;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 494, this._ctx) ) {
			case 1:
				{
				this.state = 5825;
				this.match(PostgreSQLParser.STAR);
				}
				break;

			case 2:
				{
				this.state = 5826;
				this.aggr_args_list();
				}
				break;

			case 3:
				{
				this.state = 5827;
				this.match(PostgreSQLParser.KW_ORDER);
				this.state = 5828;
				this.match(PostgreSQLParser.KW_BY);
				this.state = 5829;
				this.aggr_args_list();
				}
				break;

			case 4:
				{
				this.state = 5830;
				this.aggr_args_list();
				this.state = 5831;
				this.match(PostgreSQLParser.KW_ORDER);
				this.state = 5832;
				this.match(PostgreSQLParser.KW_BY);
				this.state = 5833;
				this.aggr_args_list();
				}
				break;
			}
			this.state = 5837;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggr_args_list(): Aggr_args_listContext {
		let _localctx: Aggr_args_listContext = new Aggr_args_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 660, PostgreSQLParser.RULE_aggr_args_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5839;
			this.aggr_arg();
			this.state = 5844;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5840;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5841;
				this.aggr_arg();
				}
				}
				this.state = 5846;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggregate_with_argtypes(): Aggregate_with_argtypesContext {
		let _localctx: Aggregate_with_argtypesContext = new Aggregate_with_argtypesContext(this._ctx, this.state);
		this.enterRule(_localctx, 662, PostgreSQLParser.RULE_aggregate_with_argtypes);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5847;
			this.func_name();
			this.state = 5848;
			this.aggr_args();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aggregate_with_argtypes_list(): Aggregate_with_argtypes_listContext {
		let _localctx: Aggregate_with_argtypes_listContext = new Aggregate_with_argtypes_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 664, PostgreSQLParser.RULE_aggregate_with_argtypes_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5850;
			this.aggregate_with_argtypes();
			this.state = 5855;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5851;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5852;
				this.aggregate_with_argtypes();
				}
				}
				this.state = 5857;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createfunc_opt_list(): Createfunc_opt_listContext {
		let _localctx: Createfunc_opt_listContext = new Createfunc_opt_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 666, PostgreSQLParser.RULE_createfunc_opt_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5859;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5858;
					this.createfunc_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5861;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 497, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public common_func_opt_item(): Common_func_opt_itemContext {
		let _localctx: Common_func_opt_itemContext = new Common_func_opt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 668, PostgreSQLParser.RULE_common_func_opt_item);
		try {
			this.state = 5898;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 498, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5863;
				this.match(PostgreSQLParser.KW_CALLED);
				this.state = 5864;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5865;
				this.match(PostgreSQLParser.KW_NULL);
				this.state = 5866;
				this.match(PostgreSQLParser.KW_INPUT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5867;
				this.match(PostgreSQLParser.KW_RETURNS);
				this.state = 5868;
				this.match(PostgreSQLParser.KW_NULL);
				this.state = 5869;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 5870;
				this.match(PostgreSQLParser.KW_NULL);
				this.state = 5871;
				this.match(PostgreSQLParser.KW_INPUT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5872;
				this.match(PostgreSQLParser.KW_STRICT);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5873;
				this.match(PostgreSQLParser.KW_IMMUTABLE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5874;
				this.match(PostgreSQLParser.KW_STABLE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5875;
				this.match(PostgreSQLParser.KW_VOLATILE);
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 5876;
				this.match(PostgreSQLParser.KW_EXTERNAL);
				this.state = 5877;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5878;
				this.match(PostgreSQLParser.KW_DEFINER);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 5879;
				this.match(PostgreSQLParser.KW_EXTERNAL);
				this.state = 5880;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5881;
				this.match(PostgreSQLParser.KW_INVOKER);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 5882;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5883;
				this.match(PostgreSQLParser.KW_DEFINER);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 5884;
				this.match(PostgreSQLParser.KW_SECURITY);
				this.state = 5885;
				this.match(PostgreSQLParser.KW_INVOKER);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 5886;
				this.match(PostgreSQLParser.KW_LEAKPROOF);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 5887;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 5888;
				this.match(PostgreSQLParser.KW_LEAKPROOF);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 5889;
				this.match(PostgreSQLParser.KW_COST);
				this.state = 5890;
				this.numericonly();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 5891;
				this.match(PostgreSQLParser.KW_ROWS);
				this.state = 5892;
				this.numericonly();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 5893;
				this.match(PostgreSQLParser.KW_SUPPORT);
				this.state = 5894;
				this.any_name();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 5895;
				this.functionsetresetclause();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 5896;
				this.match(PostgreSQLParser.KW_PARALLEL);
				this.state = 5897;
				this.colid();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createfunc_opt_item(): Createfunc_opt_itemContext {
		let _localctx: Createfunc_opt_itemContext = new Createfunc_opt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 670, PostgreSQLParser.RULE_createfunc_opt_item);
		try {
			this.state = 5908;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5900;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 5901;
				this.func_as();
				}
				break;
			case PostgreSQLParser.KW_LANGUAGE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5902;
				this.match(PostgreSQLParser.KW_LANGUAGE);
				this.state = 5903;
				this.nonreservedword_or_sconst();
				}
				break;
			case PostgreSQLParser.KW_TRANSFORM:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5904;
				this.match(PostgreSQLParser.KW_TRANSFORM);
				this.state = 5905;
				this.transform_type_list();
				}
				break;
			case PostgreSQLParser.KW_WINDOW:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5906;
				this.match(PostgreSQLParser.KW_WINDOW);
				}
				break;
			case PostgreSQLParser.KW_NOT:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5907;
				this.common_func_opt_item();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_as(): Func_asContext {
		let _localctx: Func_asContext = new Func_asContext(this._ctx, this.state);
		this.enterRule(_localctx, 672, PostgreSQLParser.RULE_func_as);
		try {
			this.state = 5915;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 500, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5910;
				_localctx._def = this.sconst();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5911;
				this.sconst();
				this.state = 5912;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5913;
				this.sconst();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transform_type_list(): Transform_type_listContext {
		let _localctx: Transform_type_listContext = new Transform_type_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 674, PostgreSQLParser.RULE_transform_type_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5917;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 5918;
			this.match(PostgreSQLParser.KW_TYPE);
			this.state = 5919;
			this.typename();
			this.state = 5926;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5920;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5921;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 5922;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 5923;
				this.typename();
				}
				}
				this.state = 5928;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_definition(): Opt_definitionContext {
		let _localctx: Opt_definitionContext = new Opt_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 676, PostgreSQLParser.RULE_opt_definition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5929;
			this.match(PostgreSQLParser.KW_WITH);
			this.state = 5930;
			this.definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_func_column(): Table_func_columnContext {
		let _localctx: Table_func_columnContext = new Table_func_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 678, PostgreSQLParser.RULE_table_func_column);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5932;
			this.param_name();
			this.state = 5933;
			this.func_type();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_func_column_list(): Table_func_column_listContext {
		let _localctx: Table_func_column_listContext = new Table_func_column_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 680, PostgreSQLParser.RULE_table_func_column_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5935;
			this.table_func_column();
			this.state = 5940;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 5936;
				this.match(PostgreSQLParser.COMMA);
				this.state = 5937;
				this.table_func_column();
				}
				}
				this.state = 5942;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterfunctionstmt(): AlterfunctionstmtContext {
		let _localctx: AlterfunctionstmtContext = new AlterfunctionstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 682, PostgreSQLParser.RULE_alterfunctionstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5943;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 5944;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_FUNCTION || _la === PostgreSQLParser.KW_PROCEDURE || _la === PostgreSQLParser.KW_ROUTINE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 5945;
			this.function_with_argtypes();
			this.state = 5946;
			this.alterfunc_opt_list();
			this.state = 5948;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_RESTRICT) {
				{
				this.state = 5947;
				this.opt_restrict();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterfunc_opt_list(): Alterfunc_opt_listContext {
		let _localctx: Alterfunc_opt_listContext = new Alterfunc_opt_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 684, PostgreSQLParser.RULE_alterfunc_opt_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5951;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 5950;
					this.common_func_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 5953;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 504, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_restrict(): Opt_restrictContext {
		let _localctx: Opt_restrictContext = new Opt_restrictContext(this._ctx, this.state);
		this.enterRule(_localctx, 686, PostgreSQLParser.RULE_opt_restrict);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 5955;
			this.match(PostgreSQLParser.KW_RESTRICT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public removefuncstmt(): RemovefuncstmtContext {
		let _localctx: RemovefuncstmtContext = new RemovefuncstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 688, PostgreSQLParser.RULE_removefuncstmt);
		let _la: number;
		try {
			this.state = 5999;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 511, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 5957;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 5958;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 5959;
				this.function_with_argtypes_list();
				this.state = 5961;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5960;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 5963;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 5964;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 5965;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 5966;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 5967;
				this.function_with_argtypes_list();
				this.state = 5969;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5968;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 5971;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 5972;
				this.match(PostgreSQLParser.KW_PROCEDURE);
				this.state = 5973;
				this.function_with_argtypes_list();
				this.state = 5975;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5974;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 5977;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 5978;
				this.match(PostgreSQLParser.KW_PROCEDURE);
				this.state = 5979;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 5980;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 5981;
				this.function_with_argtypes_list();
				this.state = 5983;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5982;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 5985;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 5986;
				this.match(PostgreSQLParser.KW_ROUTINE);
				this.state = 5987;
				this.function_with_argtypes_list();
				this.state = 5989;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5988;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 5991;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 5992;
				this.match(PostgreSQLParser.KW_ROUTINE);
				this.state = 5993;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 5994;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 5995;
				this.function_with_argtypes_list();
				this.state = 5997;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 5996;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public removeaggrstmt(): RemoveaggrstmtContext {
		let _localctx: RemoveaggrstmtContext = new RemoveaggrstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 690, PostgreSQLParser.RULE_removeaggrstmt);
		let _la: number;
		try {
			this.state = 6015;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 514, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6001;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 6002;
				this.match(PostgreSQLParser.KW_AGGREGATE);
				this.state = 6003;
				this.aggregate_with_argtypes_list();
				this.state = 6005;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 6004;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6007;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 6008;
				this.match(PostgreSQLParser.KW_AGGREGATE);
				this.state = 6009;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6010;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6011;
				this.aggregate_with_argtypes_list();
				this.state = 6013;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 6012;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public removeoperstmt(): RemoveoperstmtContext {
		let _localctx: RemoveoperstmtContext = new RemoveoperstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 692, PostgreSQLParser.RULE_removeoperstmt);
		let _la: number;
		try {
			this.state = 6031;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 517, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6017;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 6018;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 6019;
				this.operator_with_argtypes_list();
				this.state = 6021;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 6020;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6023;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 6024;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 6025;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6026;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6027;
				this.operator_with_argtypes_list();
				this.state = 6029;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 6028;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public oper_argtypes(): Oper_argtypesContext {
		let _localctx: Oper_argtypesContext = new Oper_argtypesContext(this._ctx, this.state);
		this.enterRule(_localctx, 694, PostgreSQLParser.RULE_oper_argtypes);
		try {
			this.state = 6055;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 518, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6033;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 6034;
				this.typename();
				this.state = 6035;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6037;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 6038;
				this.typename();
				this.state = 6039;
				this.match(PostgreSQLParser.COMMA);
				this.state = 6040;
				this.typename();
				this.state = 6041;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6043;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 6044;
				this.match(PostgreSQLParser.KW_NONE);
				this.state = 6045;
				this.match(PostgreSQLParser.COMMA);
				this.state = 6046;
				this.typename();
				this.state = 6047;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6049;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 6050;
				this.typename();
				this.state = 6051;
				this.match(PostgreSQLParser.COMMA);
				this.state = 6052;
				this.match(PostgreSQLParser.KW_NONE);
				this.state = 6053;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public any_operator(): Any_operatorContext {
		let _localctx: Any_operatorContext = new Any_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 696, PostgreSQLParser.RULE_any_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6062;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 92)) & ~0x1F) === 0 && ((1 << (_la - 92)) & ((1 << (PostgreSQLParser.KW_TABLE - 92)) | (1 << (PostgreSQLParser.KW_IS - 92)) | (1 << (PostgreSQLParser.KW_OUTER - 92)))) !== 0) || ((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (PostgreSQLParser.KW_OVER - 124)) | (1 << (PostgreSQLParser.KW_ABORT - 124)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 124)) | (1 << (PostgreSQLParser.KW_ACCESS - 124)) | (1 << (PostgreSQLParser.KW_ACTION - 124)) | (1 << (PostgreSQLParser.KW_ADD - 124)) | (1 << (PostgreSQLParser.KW_ADMIN - 124)) | (1 << (PostgreSQLParser.KW_AFTER - 124)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 124)) | (1 << (PostgreSQLParser.KW_ALSO - 124)) | (1 << (PostgreSQLParser.KW_ALTER - 124)) | (1 << (PostgreSQLParser.KW_ALWAYS - 124)) | (1 << (PostgreSQLParser.KW_ASSERTION - 124)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 124)) | (1 << (PostgreSQLParser.KW_AT - 124)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 124)) | (1 << (PostgreSQLParser.KW_BACKWARD - 124)) | (1 << (PostgreSQLParser.KW_BEFORE - 124)) | (1 << (PostgreSQLParser.KW_BEGIN - 124)) | (1 << (PostgreSQLParser.KW_BY - 124)) | (1 << (PostgreSQLParser.KW_CACHE - 124)) | (1 << (PostgreSQLParser.KW_CALLED - 124)) | (1 << (PostgreSQLParser.KW_CASCADE - 124)) | (1 << (PostgreSQLParser.KW_CASCADED - 124)) | (1 << (PostgreSQLParser.KW_CATALOG - 124)) | (1 << (PostgreSQLParser.KW_CHAIN - 124)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 124)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 124)))) !== 0) || ((((_la - 156)) & ~0x1F) === 0 && ((1 << (_la - 156)) & ((1 << (PostgreSQLParser.KW_CLASS - 156)) | (1 << (PostgreSQLParser.KW_CLOSE - 156)) | (1 << (PostgreSQLParser.KW_CLUSTER - 156)) | (1 << (PostgreSQLParser.KW_COMMENT - 156)) | (1 << (PostgreSQLParser.KW_COMMENTS - 156)) | (1 << (PostgreSQLParser.KW_COMMIT - 156)) | (1 << (PostgreSQLParser.KW_COMMITTED - 156)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 156)) | (1 << (PostgreSQLParser.KW_CONNECTION - 156)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 156)) | (1 << (PostgreSQLParser.KW_CONTENT - 156)) | (1 << (PostgreSQLParser.KW_CONTINUE - 156)) | (1 << (PostgreSQLParser.KW_CONVERSION - 156)) | (1 << (PostgreSQLParser.KW_COPY - 156)) | (1 << (PostgreSQLParser.KW_COST - 156)) | (1 << (PostgreSQLParser.KW_CSV - 156)) | (1 << (PostgreSQLParser.KW_CURSOR - 156)) | (1 << (PostgreSQLParser.KW_CYCLE - 156)) | (1 << (PostgreSQLParser.KW_DATA - 156)) | (1 << (PostgreSQLParser.KW_DATABASE - 156)) | (1 << (PostgreSQLParser.KW_DAY - 156)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 156)) | (1 << (PostgreSQLParser.KW_DECLARE - 156)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 156)) | (1 << (PostgreSQLParser.KW_DEFERRED - 156)) | (1 << (PostgreSQLParser.KW_DEFINER - 156)) | (1 << (PostgreSQLParser.KW_DELETE - 156)) | (1 << (PostgreSQLParser.KW_DELIMITER - 156)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 156)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 156)) | (1 << (PostgreSQLParser.KW_DISABLE - 156)) | (1 << (PostgreSQLParser.KW_DISCARD - 156)))) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (PostgreSQLParser.KW_DOCUMENT - 188)) | (1 << (PostgreSQLParser.KW_DOMAIN - 188)) | (1 << (PostgreSQLParser.KW_DOUBLE - 188)) | (1 << (PostgreSQLParser.KW_DROP - 188)) | (1 << (PostgreSQLParser.KW_EACH - 188)) | (1 << (PostgreSQLParser.KW_ENABLE - 188)) | (1 << (PostgreSQLParser.KW_ENCODING - 188)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 188)) | (1 << (PostgreSQLParser.KW_ENUM - 188)) | (1 << (PostgreSQLParser.KW_ESCAPE - 188)) | (1 << (PostgreSQLParser.KW_EVENT - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 188)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 188)) | (1 << (PostgreSQLParser.KW_EXECUTE - 188)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 188)) | (1 << (PostgreSQLParser.KW_EXTENSION - 188)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 188)) | (1 << (PostgreSQLParser.KW_FAMILY - 188)) | (1 << (PostgreSQLParser.KW_FIRST - 188)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 188)) | (1 << (PostgreSQLParser.KW_FORCE - 188)) | (1 << (PostgreSQLParser.KW_FORWARD - 188)) | (1 << (PostgreSQLParser.KW_FUNCTION - 188)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 188)) | (1 << (PostgreSQLParser.KW_GLOBAL - 188)) | (1 << (PostgreSQLParser.KW_GRANTED - 188)) | (1 << (PostgreSQLParser.KW_HANDLER - 188)) | (1 << (PostgreSQLParser.KW_HEADER - 188)) | (1 << (PostgreSQLParser.KW_HOLD - 188)) | (1 << (PostgreSQLParser.KW_HOUR - 188)) | (1 << (PostgreSQLParser.KW_IDENTITY - 188)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (PostgreSQLParser.KW_IF - 220)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 220)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 220)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 220)) | (1 << (PostgreSQLParser.KW_INCLUDING - 220)) | (1 << (PostgreSQLParser.KW_INCREMENT - 220)) | (1 << (PostgreSQLParser.KW_INDEX - 220)) | (1 << (PostgreSQLParser.KW_INDEXES - 220)) | (1 << (PostgreSQLParser.KW_INHERIT - 220)) | (1 << (PostgreSQLParser.KW_INHERITS - 220)) | (1 << (PostgreSQLParser.KW_INLINE - 220)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 220)) | (1 << (PostgreSQLParser.KW_INSERT - 220)) | (1 << (PostgreSQLParser.KW_INSTEAD - 220)) | (1 << (PostgreSQLParser.KW_INVOKER - 220)) | (1 << (PostgreSQLParser.KW_ISOLATION - 220)) | (1 << (PostgreSQLParser.KW_KEY - 220)) | (1 << (PostgreSQLParser.KW_LABEL - 220)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 220)) | (1 << (PostgreSQLParser.KW_LARGE - 220)) | (1 << (PostgreSQLParser.KW_LAST - 220)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 220)) | (1 << (PostgreSQLParser.KW_LEVEL - 220)))) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & ((1 << (PostgreSQLParser.KW_LISTEN - 252)) | (1 << (PostgreSQLParser.KW_LOAD - 252)) | (1 << (PostgreSQLParser.KW_LOCAL - 252)) | (1 << (PostgreSQLParser.KW_LOCATION - 252)) | (1 << (PostgreSQLParser.KW_LOCK - 252)) | (1 << (PostgreSQLParser.KW_MAPPING - 252)) | (1 << (PostgreSQLParser.KW_MATCH - 252)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 252)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 252)) | (1 << (PostgreSQLParser.KW_MINUTE - 252)) | (1 << (PostgreSQLParser.KW_MINVALUE - 252)) | (1 << (PostgreSQLParser.KW_MODE - 252)) | (1 << (PostgreSQLParser.KW_MONTH - 252)) | (1 << (PostgreSQLParser.KW_MOVE - 252)) | (1 << (PostgreSQLParser.KW_NAME - 252)) | (1 << (PostgreSQLParser.KW_NAMES - 252)) | (1 << (PostgreSQLParser.KW_NEXT - 252)) | (1 << (PostgreSQLParser.KW_NO - 252)) | (1 << (PostgreSQLParser.KW_NOTHING - 252)) | (1 << (PostgreSQLParser.KW_NOTIFY - 252)) | (1 << (PostgreSQLParser.KW_NOWAIT - 252)) | (1 << (PostgreSQLParser.KW_NULLS - 252)) | (1 << (PostgreSQLParser.KW_OBJECT - 252)) | (1 << (PostgreSQLParser.KW_OF - 252)) | (1 << (PostgreSQLParser.KW_OFF - 252)) | (1 << (PostgreSQLParser.KW_OIDS - 252)) | (1 << (PostgreSQLParser.KW_OPERATOR - 252)) | (1 << (PostgreSQLParser.KW_OPTION - 252)) | (1 << (PostgreSQLParser.KW_OPTIONS - 252)) | (1 << (PostgreSQLParser.KW_OWNED - 252)) | (1 << (PostgreSQLParser.KW_OWNER - 252)) | (1 << (PostgreSQLParser.KW_PARSER - 252)))) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & ((1 << (PostgreSQLParser.KW_PARTIAL - 284)) | (1 << (PostgreSQLParser.KW_PARTITION - 284)) | (1 << (PostgreSQLParser.KW_PASSING - 284)) | (1 << (PostgreSQLParser.KW_PASSWORD - 284)) | (1 << (PostgreSQLParser.KW_PLANS - 284)) | (1 << (PostgreSQLParser.KW_PRECEDING - 284)) | (1 << (PostgreSQLParser.KW_PREPARE - 284)) | (1 << (PostgreSQLParser.KW_PREPARED - 284)) | (1 << (PostgreSQLParser.KW_PRESERVE - 284)) | (1 << (PostgreSQLParser.KW_PRIOR - 284)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 284)) | (1 << (PostgreSQLParser.KW_PROGRAM - 284)) | (1 << (PostgreSQLParser.KW_QUOTE - 284)) | (1 << (PostgreSQLParser.KW_RANGE - 284)) | (1 << (PostgreSQLParser.KW_READ - 284)) | (1 << (PostgreSQLParser.KW_REASSIGN - 284)) | (1 << (PostgreSQLParser.KW_RECHECK - 284)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 284)) | (1 << (PostgreSQLParser.KW_REF - 284)) | (1 << (PostgreSQLParser.KW_REFRESH - 284)) | (1 << (PostgreSQLParser.KW_REINDEX - 284)) | (1 << (PostgreSQLParser.KW_RELATIVE - 284)) | (1 << (PostgreSQLParser.KW_RELEASE - 284)) | (1 << (PostgreSQLParser.KW_RENAME - 284)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 284)) | (1 << (PostgreSQLParser.KW_REPLACE - 284)) | (1 << (PostgreSQLParser.KW_REPLICA - 284)) | (1 << (PostgreSQLParser.KW_RESET - 284)) | (1 << (PostgreSQLParser.KW_RESTART - 284)) | (1 << (PostgreSQLParser.KW_RESTRICT - 284)))) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & ((1 << (PostgreSQLParser.KW_RETURNS - 316)) | (1 << (PostgreSQLParser.KW_REVOKE - 316)) | (1 << (PostgreSQLParser.KW_ROLE - 316)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 316)) | (1 << (PostgreSQLParser.KW_ROWS - 316)) | (1 << (PostgreSQLParser.KW_RULE - 316)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 316)) | (1 << (PostgreSQLParser.KW_SCHEMA - 316)) | (1 << (PostgreSQLParser.KW_SCROLL - 316)) | (1 << (PostgreSQLParser.KW_SEARCH - 316)) | (1 << (PostgreSQLParser.KW_SECOND - 316)) | (1 << (PostgreSQLParser.KW_SECURITY - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 316)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 316)) | (1 << (PostgreSQLParser.KW_SERVER - 316)) | (1 << (PostgreSQLParser.KW_SESSION - 316)) | (1 << (PostgreSQLParser.KW_SET - 316)) | (1 << (PostgreSQLParser.KW_SHARE - 316)) | (1 << (PostgreSQLParser.KW_SHOW - 316)) | (1 << (PostgreSQLParser.KW_SIMPLE - 316)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 316)) | (1 << (PostgreSQLParser.KW_STABLE - 316)) | (1 << (PostgreSQLParser.KW_STANDALONE - 316)) | (1 << (PostgreSQLParser.KW_START - 316)) | (1 << (PostgreSQLParser.KW_STATEMENT - 316)) | (1 << (PostgreSQLParser.KW_STATISTICS - 316)) | (1 << (PostgreSQLParser.KW_STDIN - 316)) | (1 << (PostgreSQLParser.KW_STDOUT - 316)) | (1 << (PostgreSQLParser.KW_STORAGE - 316)) | (1 << (PostgreSQLParser.KW_STRICT - 316)) | (1 << (PostgreSQLParser.KW_STRIP - 316)))) !== 0) || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (PostgreSQLParser.KW_SYSID - 348)) | (1 << (PostgreSQLParser.KW_SYSTEM - 348)) | (1 << (PostgreSQLParser.KW_TABLES - 348)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 348)) | (1 << (PostgreSQLParser.KW_TEMP - 348)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 348)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 348)) | (1 << (PostgreSQLParser.KW_TEXT - 348)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 348)) | (1 << (PostgreSQLParser.KW_TRIGGER - 348)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 348)) | (1 << (PostgreSQLParser.KW_TRUSTED - 348)) | (1 << (PostgreSQLParser.KW_TYPE - 348)) | (1 << (PostgreSQLParser.KW_TYPES - 348)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 348)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 348)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 348)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 348)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 348)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 348)) | (1 << (PostgreSQLParser.KW_UNTIL - 348)) | (1 << (PostgreSQLParser.KW_UPDATE - 348)) | (1 << (PostgreSQLParser.KW_VACUUM - 348)) | (1 << (PostgreSQLParser.KW_VALID - 348)) | (1 << (PostgreSQLParser.KW_VALIDATE - 348)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 348)) | (1 << (PostgreSQLParser.KW_VARYING - 348)) | (1 << (PostgreSQLParser.KW_VERSION - 348)) | (1 << (PostgreSQLParser.KW_VIEW - 348)) | (1 << (PostgreSQLParser.KW_VOLATILE - 348)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 348)) | (1 << (PostgreSQLParser.KW_WITHOUT - 348)))) !== 0) || ((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (PostgreSQLParser.KW_WORK - 380)) | (1 << (PostgreSQLParser.KW_WRAPPER - 380)) | (1 << (PostgreSQLParser.KW_WRITE - 380)) | (1 << (PostgreSQLParser.KW_XML - 380)) | (1 << (PostgreSQLParser.KW_YEAR - 380)) | (1 << (PostgreSQLParser.KW_YES - 380)) | (1 << (PostgreSQLParser.KW_ZONE - 380)) | (1 << (PostgreSQLParser.KW_BETWEEN - 380)) | (1 << (PostgreSQLParser.KW_BIGINT - 380)) | (1 << (PostgreSQLParser.KW_BIT - 380)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 380)) | (1 << (PostgreSQLParser.KW_CHAR - 380)) | (1 << (PostgreSQLParser.KW_CHARACTER - 380)) | (1 << (PostgreSQLParser.KW_COALESCE - 380)) | (1 << (PostgreSQLParser.KW_DEC - 380)) | (1 << (PostgreSQLParser.KW_DECIMAL - 380)) | (1 << (PostgreSQLParser.KW_EXISTS - 380)) | (1 << (PostgreSQLParser.KW_EXTRACT - 380)) | (1 << (PostgreSQLParser.KW_FLOAT - 380)) | (1 << (PostgreSQLParser.KW_GREATEST - 380)) | (1 << (PostgreSQLParser.KW_INOUT - 380)) | (1 << (PostgreSQLParser.KW_INT - 380)) | (1 << (PostgreSQLParser.KW_INTEGER - 380)) | (1 << (PostgreSQLParser.KW_INTERVAL - 380)) | (1 << (PostgreSQLParser.KW_LEAST - 380)) | (1 << (PostgreSQLParser.KW_NATIONAL - 380)) | (1 << (PostgreSQLParser.KW_NCHAR - 380)) | (1 << (PostgreSQLParser.KW_NONE - 380)) | (1 << (PostgreSQLParser.KW_NULLIF - 380)) | (1 << (PostgreSQLParser.KW_NUMERIC - 380)) | (1 << (PostgreSQLParser.KW_OVERLAY - 380)) | (1 << (PostgreSQLParser.KW_POSITION - 380)))) !== 0) || ((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & ((1 << (PostgreSQLParser.KW_PRECISION - 412)) | (1 << (PostgreSQLParser.KW_REAL - 412)) | (1 << (PostgreSQLParser.KW_ROW - 412)) | (1 << (PostgreSQLParser.KW_SETOF - 412)) | (1 << (PostgreSQLParser.KW_SMALLINT - 412)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 412)) | (1 << (PostgreSQLParser.KW_TIME - 412)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 412)) | (1 << (PostgreSQLParser.KW_TREAT - 412)) | (1 << (PostgreSQLParser.KW_TRIM - 412)) | (1 << (PostgreSQLParser.KW_VALUES - 412)) | (1 << (PostgreSQLParser.KW_VARCHAR - 412)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 412)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 412)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 412)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 412)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 412)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 412)) | (1 << (PostgreSQLParser.KW_XMLPI - 412)) | (1 << (PostgreSQLParser.KW_XMLROOT - 412)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 412)) | (1 << (PostgreSQLParser.KW_CALL - 412)) | (1 << (PostgreSQLParser.KW_CURRENT - 412)) | (1 << (PostgreSQLParser.KW_ATTACH - 412)) | (1 << (PostgreSQLParser.KW_DETACH - 412)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 412)) | (1 << (PostgreSQLParser.KW_GENERATED - 412)) | (1 << (PostgreSQLParser.KW_LOGGED - 412)) | (1 << (PostgreSQLParser.KW_STORED - 412)) | (1 << (PostgreSQLParser.KW_INCLUDE - 412)) | (1 << (PostgreSQLParser.KW_ROUTINE - 412)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 412)))) !== 0) || ((((_la - 444)) & ~0x1F) === 0 && ((1 << (_la - 444)) & ((1 << (PostgreSQLParser.KW_IMPORT - 444)) | (1 << (PostgreSQLParser.KW_POLICY - 444)) | (1 << (PostgreSQLParser.KW_METHOD - 444)) | (1 << (PostgreSQLParser.KW_REFERENCING - 444)) | (1 << (PostgreSQLParser.KW_NEW - 444)) | (1 << (PostgreSQLParser.KW_OLD - 444)) | (1 << (PostgreSQLParser.KW_VALUE - 444)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 444)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 444)) | (1 << (PostgreSQLParser.KW_OUT - 444)) | (1 << (PostgreSQLParser.KW_ROUTINES - 444)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 444)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 444)) | (1 << (PostgreSQLParser.KW_INPUT - 444)) | (1 << (PostgreSQLParser.KW_SUPPORT - 444)) | (1 << (PostgreSQLParser.KW_PARALLEL - 444)) | (1 << (PostgreSQLParser.KW_SQL - 444)) | (1 << (PostgreSQLParser.KW_DEPENDS - 444)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 444)) | (1 << (PostgreSQLParser.KW_CONFLICT - 444)) | (1 << (PostgreSQLParser.KW_SKIP - 444)) | (1 << (PostgreSQLParser.KW_LOCKED - 444)) | (1 << (PostgreSQLParser.KW_TIES - 444)) | (1 << (PostgreSQLParser.KW_ROLLUP - 444)) | (1 << (PostgreSQLParser.KW_CUBE - 444)) | (1 << (PostgreSQLParser.KW_GROUPING - 444)) | (1 << (PostgreSQLParser.KW_SETS - 444)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 444)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 444)) | (1 << (PostgreSQLParser.KW_COLUMNS - 444)))) !== 0) || ((((_la - 476)) & ~0x1F) === 0 && ((1 << (_la - 476)) & ((1 << (PostgreSQLParser.KW_XMLNAMESPACES - 476)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 476)) | (1 << (PostgreSQLParser.KW_WITHIN - 476)) | (1 << (PostgreSQLParser.KW_FILTER - 476)) | (1 << (PostgreSQLParser.KW_GROUPS - 476)) | (1 << (PostgreSQLParser.KW_OTHERS - 476)) | (1 << (PostgreSQLParser.KW_NFC - 476)) | (1 << (PostgreSQLParser.KW_NFD - 476)) | (1 << (PostgreSQLParser.KW_NFKC - 476)) | (1 << (PostgreSQLParser.KW_NFKD - 476)) | (1 << (PostgreSQLParser.KW_UESCAPE - 476)) | (1 << (PostgreSQLParser.KW_VIEWS - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 476)) | (1 << (PostgreSQLParser.KW_DUMP - 476)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 476)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 476)) | (1 << (PostgreSQLParser.KW_ERROR - 476)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 476)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 476)) | (1 << (PostgreSQLParser.KW_ALIAS - 476)) | (1 << (PostgreSQLParser.KW_CONSTANT - 476)) | (1 << (PostgreSQLParser.KW_PERFORM - 476)) | (1 << (PostgreSQLParser.KW_GET - 476)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 476)) | (1 << (PostgreSQLParser.KW_STACKED - 476)) | (1 << (PostgreSQLParser.KW_ELSIF - 476)) | (1 << (PostgreSQLParser.KW_REVERSE - 476)) | (1 << (PostgreSQLParser.KW_SLICE - 476)) | (1 << (PostgreSQLParser.KW_EXIT - 476)))) !== 0) || ((((_la - 508)) & ~0x1F) === 0 && ((1 << (_la - 508)) & ((1 << (PostgreSQLParser.KW_RETURN - 508)) | (1 << (PostgreSQLParser.KW_QUERY - 508)) | (1 << (PostgreSQLParser.KW_RAISE - 508)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 508)) | (1 << (PostgreSQLParser.KW_DEBUG - 508)) | (1 << (PostgreSQLParser.KW_LOG - 508)) | (1 << (PostgreSQLParser.KW_INFO - 508)) | (1 << (PostgreSQLParser.KW_NOTICE - 508)) | (1 << (PostgreSQLParser.KW_WARNING - 508)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 508)) | (1 << (PostgreSQLParser.KW_ASSERT - 508)) | (1 << (PostgreSQLParser.KW_OPEN - 508)) | (1 << (PostgreSQLParser.Identifier - 508)) | (1 << (PostgreSQLParser.QuotedIdentifier - 508)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 508)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
				{
				{
				this.state = 6057;
				this.colid();
				this.state = 6058;
				this.match(PostgreSQLParser.DOT);
				}
				}
				this.state = 6064;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 6065;
			this.all_op();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public operator_with_argtypes_list(): Operator_with_argtypes_listContext {
		let _localctx: Operator_with_argtypes_listContext = new Operator_with_argtypes_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 698, PostgreSQLParser.RULE_operator_with_argtypes_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6067;
			this.operator_with_argtypes();
			this.state = 6072;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 6068;
				this.match(PostgreSQLParser.COMMA);
				this.state = 6069;
				this.operator_with_argtypes();
				}
				}
				this.state = 6074;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public operator_with_argtypes(): Operator_with_argtypesContext {
		let _localctx: Operator_with_argtypesContext = new Operator_with_argtypesContext(this._ctx, this.state);
		this.enterRule(_localctx, 700, PostgreSQLParser.RULE_operator_with_argtypes);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6075;
			this.any_operator();
			this.state = 6076;
			this.oper_argtypes();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dostmt(): DostmtContext {
		let _localctx: DostmtContext = new DostmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 702, PostgreSQLParser.RULE_dostmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6078;
			this.match(PostgreSQLParser.KW_DO);
			this.state = 6079;
			this.dostmt_opt_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dostmt_opt_list(): Dostmt_opt_listContext {
		let _localctx: Dostmt_opt_listContext = new Dostmt_opt_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 704, PostgreSQLParser.RULE_dostmt_opt_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6082;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 6081;
				this.dostmt_opt_item();
				}
				}
				this.state = 6084;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PostgreSQLParser.KW_LANGUAGE || ((((_la - 534)) & ~0x1F) === 0 && ((1 << (_la - 534)) & ((1 << (PostgreSQLParser.StringConstant - 534)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 534)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 534)) | (1 << (PostgreSQLParser.EscapeStringConstant - 534)))) !== 0));
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dostmt_opt_item(): Dostmt_opt_itemContext {
		let _localctx: Dostmt_opt_itemContext = new Dostmt_opt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 706, PostgreSQLParser.RULE_dostmt_opt_item);
		try {
			this.state = 6089;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6086;
				this.sconst();
				}
				break;
			case PostgreSQLParser.KW_LANGUAGE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6087;
				this.match(PostgreSQLParser.KW_LANGUAGE);
				this.state = 6088;
				this.nonreservedword_or_sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createcaststmt(): CreatecaststmtContext {
		let _localctx: CreatecaststmtContext = new CreatecaststmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 708, PostgreSQLParser.RULE_createcaststmt);
		let _la: number;
		try {
			this.state = 6128;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 526, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6091;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 6092;
				this.match(PostgreSQLParser.KW_CAST);
				this.state = 6093;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 6094;
				this.typename();
				this.state = 6095;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 6096;
				this.typename();
				this.state = 6097;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 6098;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 6099;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 6100;
				this.function_with_argtypes();
				this.state = 6102;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AS) {
					{
					this.state = 6101;
					this.cast_context();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6104;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 6105;
				this.match(PostgreSQLParser.KW_CAST);
				this.state = 6106;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 6107;
				this.typename();
				this.state = 6108;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 6109;
				this.typename();
				this.state = 6110;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 6111;
				this.match(PostgreSQLParser.KW_WITHOUT);
				this.state = 6112;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 6114;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AS) {
					{
					this.state = 6113;
					this.cast_context();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6116;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 6117;
				this.match(PostgreSQLParser.KW_CAST);
				this.state = 6118;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 6119;
				this.typename();
				this.state = 6120;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 6121;
				this.typename();
				this.state = 6122;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 6123;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 6124;
				this.match(PostgreSQLParser.KW_INOUT);
				this.state = 6126;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AS) {
					{
					this.state = 6125;
					this.cast_context();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cast_context(): Cast_contextContext {
		let _localctx: Cast_contextContext = new Cast_contextContext(this._ctx, this.state);
		this.enterRule(_localctx, 710, PostgreSQLParser.RULE_cast_context);
		try {
			this.state = 6134;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 527, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6130;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 6131;
				this.match(PostgreSQLParser.KW_IMPLICIT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6132;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 6133;
				this.match(PostgreSQLParser.KW_ASSIGNMENT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropcaststmt(): DropcaststmtContext {
		let _localctx: DropcaststmtContext = new DropcaststmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 712, PostgreSQLParser.RULE_dropcaststmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6136;
			this.match(PostgreSQLParser.KW_DROP);
			this.state = 6137;
			this.match(PostgreSQLParser.KW_CAST);
			this.state = 6139;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_IF) {
				{
				this.state = 6138;
				this.opt_if_exists();
				}
			}

			this.state = 6141;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 6142;
			this.typename();
			this.state = 6143;
			this.match(PostgreSQLParser.KW_AS);
			this.state = 6144;
			this.typename();
			this.state = 6145;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			this.state = 6147;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
				{
				this.state = 6146;
				this.opt_drop_behavior();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_if_exists(): Opt_if_existsContext {
		let _localctx: Opt_if_existsContext = new Opt_if_existsContext(this._ctx, this.state);
		this.enterRule(_localctx, 714, PostgreSQLParser.RULE_opt_if_exists);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6149;
			this.match(PostgreSQLParser.KW_IF);
			this.state = 6150;
			this.match(PostgreSQLParser.KW_EXISTS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createtransformstmt(): CreatetransformstmtContext {
		let _localctx: CreatetransformstmtContext = new CreatetransformstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 716, PostgreSQLParser.RULE_createtransformstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6152;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 6154;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_OR) {
				{
				this.state = 6153;
				this.opt_or_replace();
				}
			}

			this.state = 6156;
			this.match(PostgreSQLParser.KW_TRANSFORM);
			this.state = 6157;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 6158;
			this.typename();
			this.state = 6159;
			this.match(PostgreSQLParser.KW_LANGUAGE);
			this.state = 6160;
			this.name();
			this.state = 6161;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 6162;
			this.transform_element_list();
			this.state = 6163;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transform_element_list(): Transform_element_listContext {
		let _localctx: Transform_element_listContext = new Transform_element_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 718, PostgreSQLParser.RULE_transform_element_list);
		try {
			this.state = 6199;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 531, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6165;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 6166;
				this.match(PostgreSQLParser.KW_SQL);
				this.state = 6167;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 6168;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 6169;
				this.function_with_argtypes();
				this.state = 6170;
				this.match(PostgreSQLParser.COMMA);
				this.state = 6171;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6172;
				this.match(PostgreSQLParser.KW_SQL);
				this.state = 6173;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 6174;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 6175;
				this.function_with_argtypes();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6177;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6178;
				this.match(PostgreSQLParser.KW_SQL);
				this.state = 6179;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 6180;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 6181;
				this.function_with_argtypes();
				this.state = 6182;
				this.match(PostgreSQLParser.COMMA);
				this.state = 6183;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 6184;
				this.match(PostgreSQLParser.KW_SQL);
				this.state = 6185;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 6186;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 6187;
				this.function_with_argtypes();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6189;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 6190;
				this.match(PostgreSQLParser.KW_SQL);
				this.state = 6191;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 6192;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 6193;
				this.function_with_argtypes();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6194;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6195;
				this.match(PostgreSQLParser.KW_SQL);
				this.state = 6196;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 6197;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 6198;
				this.function_with_argtypes();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public droptransformstmt(): DroptransformstmtContext {
		let _localctx: DroptransformstmtContext = new DroptransformstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 720, PostgreSQLParser.RULE_droptransformstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6201;
			this.match(PostgreSQLParser.KW_DROP);
			this.state = 6202;
			this.match(PostgreSQLParser.KW_TRANSFORM);
			this.state = 6204;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_IF) {
				{
				this.state = 6203;
				this.opt_if_exists();
				}
			}

			this.state = 6206;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 6207;
			this.typename();
			this.state = 6208;
			this.match(PostgreSQLParser.KW_LANGUAGE);
			this.state = 6209;
			this.name();
			this.state = 6211;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
				{
				this.state = 6210;
				this.opt_drop_behavior();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reindexstmt(): ReindexstmtContext {
		let _localctx: ReindexstmtContext = new ReindexstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 722, PostgreSQLParser.RULE_reindexstmt);
		let _la: number;
		try {
			this.state = 6247;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 538, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6213;
				this.match(PostgreSQLParser.KW_REINDEX);
				this.state = 6214;
				this.reindex_target_type();
				this.state = 6216;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CONCURRENTLY) {
					{
					this.state = 6215;
					this.opt_concurrently();
					}
				}

				this.state = 6218;
				this.qualified_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6220;
				this.match(PostgreSQLParser.KW_REINDEX);
				this.state = 6221;
				this.reindex_target_multitable();
				this.state = 6223;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CONCURRENTLY) {
					{
					this.state = 6222;
					this.opt_concurrently();
					}
				}

				this.state = 6225;
				this.name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6227;
				this.match(PostgreSQLParser.KW_REINDEX);
				this.state = 6228;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 6229;
				this.reindex_option_list();
				this.state = 6230;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 6231;
				this.reindex_target_type();
				this.state = 6233;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CONCURRENTLY) {
					{
					this.state = 6232;
					this.opt_concurrently();
					}
				}

				this.state = 6235;
				this.qualified_name();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6237;
				this.match(PostgreSQLParser.KW_REINDEX);
				this.state = 6238;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 6239;
				this.reindex_option_list();
				this.state = 6240;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 6241;
				this.reindex_target_multitable();
				this.state = 6243;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CONCURRENTLY) {
					{
					this.state = 6242;
					this.opt_concurrently();
					}
				}

				this.state = 6245;
				this.name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reindex_target_type(): Reindex_target_typeContext {
		let _localctx: Reindex_target_typeContext = new Reindex_target_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 724, PostgreSQLParser.RULE_reindex_target_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6249;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_TABLE || _la === PostgreSQLParser.KW_INDEX)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reindex_target_multitable(): Reindex_target_multitableContext {
		let _localctx: Reindex_target_multitableContext = new Reindex_target_multitableContext(this._ctx, this.state);
		this.enterRule(_localctx, 726, PostgreSQLParser.RULE_reindex_target_multitable);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6251;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_DATABASE || _la === PostgreSQLParser.KW_SCHEMA || _la === PostgreSQLParser.KW_SYSTEM)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reindex_option_list(): Reindex_option_listContext {
		let _localctx: Reindex_option_listContext = new Reindex_option_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 728, PostgreSQLParser.RULE_reindex_option_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6253;
			this.reindex_option_elem();
			this.state = 6258;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 6254;
				this.match(PostgreSQLParser.COMMA);
				this.state = 6255;
				this.reindex_option_elem();
				}
				}
				this.state = 6260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reindex_option_elem(): Reindex_option_elemContext {
		let _localctx: Reindex_option_elemContext = new Reindex_option_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 730, PostgreSQLParser.RULE_reindex_option_elem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6261;
			this.match(PostgreSQLParser.KW_VERBOSE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public altertblspcstmt(): AltertblspcstmtContext {
		let _localctx: AltertblspcstmtContext = new AltertblspcstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 732, PostgreSQLParser.RULE_altertblspcstmt);
		try {
			this.state = 6275;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 540, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6263;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6264;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 6265;
				this.name();
				this.state = 6266;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6267;
				this.reloptions();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6269;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6270;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 6271;
				this.name();
				this.state = 6272;
				this.match(PostgreSQLParser.KW_RESET);
				this.state = 6273;
				this.reloptions();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renamestmt(): RenamestmtContext {
		let _localctx: RenamestmtContext = new RenamestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 734, PostgreSQLParser.RULE_renamestmt);
		let _la: number;
		try {
			this.state = 6764;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 551, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6277;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6278;
				this.match(PostgreSQLParser.KW_AGGREGATE);
				this.state = 6279;
				this.aggregate_with_argtypes();
				this.state = 6280;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6281;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6282;
				this.name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6284;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6285;
				this.match(PostgreSQLParser.KW_COLLATION);
				this.state = 6286;
				this.any_name();
				this.state = 6287;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6288;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6289;
				this.name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6291;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6292;
				this.match(PostgreSQLParser.KW_CONVERSION);
				this.state = 6293;
				this.any_name();
				this.state = 6294;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6295;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6296;
				this.name();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6298;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6299;
				this.match(PostgreSQLParser.KW_DATABASE);
				this.state = 6300;
				this.name();
				this.state = 6301;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6302;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6303;
				this.name();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6305;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6306;
				this.match(PostgreSQLParser.KW_DOMAIN);
				this.state = 6307;
				this.any_name();
				this.state = 6308;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6309;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6310;
				this.name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6312;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6313;
				this.match(PostgreSQLParser.KW_DOMAIN);
				this.state = 6314;
				this.any_name();
				this.state = 6315;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6316;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 6317;
				this.name();
				this.state = 6318;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6319;
				this.name();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6321;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6322;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 6323;
				this.match(PostgreSQLParser.KW_DATA);
				this.state = 6324;
				this.match(PostgreSQLParser.KW_WRAPPER);
				this.state = 6325;
				this.name();
				this.state = 6326;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6327;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6328;
				this.name();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6330;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6331;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 6332;
				this.function_with_argtypes();
				this.state = 6333;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6334;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6335;
				this.name();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6337;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6338;
				this.match(PostgreSQLParser.KW_GROUP);
				this.state = 6339;
				this.roleid();
				this.state = 6340;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6341;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6342;
				this.roleid();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6344;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6346;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_PROCEDURAL) {
					{
					this.state = 6345;
					this.opt_procedural();
					}
				}

				this.state = 6348;
				this.match(PostgreSQLParser.KW_LANGUAGE);
				this.state = 6349;
				this.name();
				this.state = 6350;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6351;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6352;
				this.name();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6354;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6355;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 6356;
				this.match(PostgreSQLParser.KW_CLASS);
				this.state = 6357;
				this.any_name();
				this.state = 6358;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 6359;
				this.name();
				this.state = 6360;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6361;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6362;
				this.name();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6364;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6365;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 6366;
				this.match(PostgreSQLParser.KW_FAMILY);
				this.state = 6367;
				this.any_name();
				this.state = 6368;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 6369;
				this.name();
				this.state = 6370;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6371;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6372;
				this.name();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6374;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6375;
				this.match(PostgreSQLParser.KW_POLICY);
				this.state = 6376;
				this.name();
				this.state = 6377;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 6378;
				this.qualified_name();
				this.state = 6379;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6380;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6381;
				this.name();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 6383;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6384;
				this.match(PostgreSQLParser.KW_POLICY);
				this.state = 6385;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6386;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6387;
				this.name();
				this.state = 6388;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 6389;
				this.qualified_name();
				this.state = 6390;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6391;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6392;
				this.name();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 6394;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6395;
				this.match(PostgreSQLParser.KW_PROCEDURE);
				this.state = 6396;
				this.function_with_argtypes();
				this.state = 6397;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6398;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6399;
				this.name();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 6401;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6402;
				this.match(PostgreSQLParser.KW_PUBLICATION);
				this.state = 6403;
				this.name();
				this.state = 6404;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6405;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6406;
				this.name();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 6408;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6409;
				this.match(PostgreSQLParser.KW_ROUTINE);
				this.state = 6410;
				this.function_with_argtypes();
				this.state = 6411;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6412;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6413;
				this.name();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 6415;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6416;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6417;
				this.name();
				this.state = 6418;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6419;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6420;
				this.name();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 6422;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6423;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 6424;
				this.name();
				this.state = 6425;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6426;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6427;
				this.name();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 6429;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6430;
				this.match(PostgreSQLParser.KW_SUBSCRIPTION);
				this.state = 6431;
				this.name();
				this.state = 6432;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6433;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6434;
				this.name();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 6436;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6437;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6438;
				this.relation_expr();
				this.state = 6439;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6440;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6441;
				this.name();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 6443;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6444;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6445;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6446;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6447;
				this.relation_expr();
				this.state = 6448;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6449;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6450;
				this.name();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 6452;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6453;
				this.match(PostgreSQLParser.KW_SEQUENCE);
				this.state = 6454;
				this.qualified_name();
				this.state = 6455;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6456;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6457;
				this.name();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 6459;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6460;
				this.match(PostgreSQLParser.KW_SEQUENCE);
				this.state = 6461;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6462;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6463;
				this.qualified_name();
				this.state = 6464;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6465;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6466;
				this.name();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 6468;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6469;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 6470;
				this.qualified_name();
				this.state = 6471;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6472;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6473;
				this.name();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 6475;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6476;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 6477;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6478;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6479;
				this.qualified_name();
				this.state = 6480;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6481;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6482;
				this.name();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 6484;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6485;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				this.state = 6486;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 6487;
				this.qualified_name();
				this.state = 6488;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6489;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6490;
				this.name();
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 6492;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6493;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				this.state = 6494;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 6495;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6496;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6497;
				this.qualified_name();
				this.state = 6498;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6499;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6500;
				this.name();
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 6502;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6503;
				this.match(PostgreSQLParser.KW_INDEX);
				this.state = 6504;
				this.qualified_name();
				this.state = 6505;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6506;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6507;
				this.name();
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 6509;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6510;
				this.match(PostgreSQLParser.KW_INDEX);
				this.state = 6511;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6512;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6513;
				this.qualified_name();
				this.state = 6514;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6515;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6516;
				this.name();
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 6518;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6519;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 6520;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6521;
				this.relation_expr();
				this.state = 6522;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6523;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6524;
				this.name();
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 6526;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6527;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 6528;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6529;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6530;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6531;
				this.relation_expr();
				this.state = 6532;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6533;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6534;
				this.name();
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 6536;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6537;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6538;
				this.relation_expr();
				this.state = 6539;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6541;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 542, this._ctx) ) {
				case 1:
					{
					this.state = 6540;
					this.opt_column();
					}
					break;
				}
				this.state = 6543;
				this.name();
				this.state = 6544;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6545;
				this.name();
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 6547;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6548;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6549;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6550;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6551;
				this.relation_expr();
				this.state = 6552;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6554;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 543, this._ctx) ) {
				case 1:
					{
					this.state = 6553;
					this.opt_column();
					}
					break;
				}
				this.state = 6556;
				this.name();
				this.state = 6557;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6558;
				this.name();
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 6560;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6561;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 6562;
				this.qualified_name();
				this.state = 6563;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6565;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 544, this._ctx) ) {
				case 1:
					{
					this.state = 6564;
					this.opt_column();
					}
					break;
				}
				this.state = 6567;
				this.name();
				this.state = 6568;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6569;
				this.name();
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 6571;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6572;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 6573;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6574;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6575;
				this.qualified_name();
				this.state = 6576;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6578;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 545, this._ctx) ) {
				case 1:
					{
					this.state = 6577;
					this.opt_column();
					}
					break;
				}
				this.state = 6580;
				this.name();
				this.state = 6581;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6582;
				this.name();
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 6584;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6585;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				this.state = 6586;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 6587;
				this.qualified_name();
				this.state = 6588;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6590;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 546, this._ctx) ) {
				case 1:
					{
					this.state = 6589;
					this.opt_column();
					}
					break;
				}
				this.state = 6592;
				this.name();
				this.state = 6593;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6594;
				this.name();
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 6596;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6597;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				this.state = 6598;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 6599;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6600;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6601;
				this.qualified_name();
				this.state = 6602;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6604;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 547, this._ctx) ) {
				case 1:
					{
					this.state = 6603;
					this.opt_column();
					}
					break;
				}
				this.state = 6606;
				this.name();
				this.state = 6607;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6608;
				this.name();
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 6610;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6611;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6612;
				this.relation_expr();
				this.state = 6613;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6614;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 6615;
				this.name();
				this.state = 6616;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6617;
				this.name();
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 6619;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6620;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6621;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6622;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6623;
				this.relation_expr();
				this.state = 6624;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6625;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 6626;
				this.name();
				this.state = 6627;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6628;
				this.name();
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 6630;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6631;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 6632;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6633;
				this.relation_expr();
				this.state = 6634;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6636;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 548, this._ctx) ) {
				case 1:
					{
					this.state = 6635;
					this.opt_column();
					}
					break;
				}
				this.state = 6638;
				this.name();
				this.state = 6639;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6640;
				this.name();
				}
				break;

			case 42:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 6642;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6643;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 6644;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6645;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6646;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6647;
				this.relation_expr();
				this.state = 6648;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6650;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 549, this._ctx) ) {
				case 1:
					{
					this.state = 6649;
					this.opt_column();
					}
					break;
				}
				this.state = 6652;
				this.name();
				this.state = 6653;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6654;
				this.name();
				}
				break;

			case 43:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 6656;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6657;
				this.match(PostgreSQLParser.KW_RULE);
				this.state = 6658;
				this.name();
				this.state = 6659;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 6660;
				this.qualified_name();
				this.state = 6661;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6662;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6663;
				this.name();
				}
				break;

			case 44:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 6665;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6666;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 6667;
				this.name();
				this.state = 6668;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 6669;
				this.qualified_name();
				this.state = 6670;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6671;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6672;
				this.name();
				}
				break;

			case 45:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 6674;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6675;
				this.match(PostgreSQLParser.KW_EVENT);
				this.state = 6676;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 6677;
				this.name();
				this.state = 6678;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6679;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6680;
				this.name();
				}
				break;

			case 46:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 6682;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6683;
				this.match(PostgreSQLParser.KW_ROLE);
				this.state = 6684;
				this.roleid();
				this.state = 6685;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6686;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6687;
				this.roleid();
				}
				break;

			case 47:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 6689;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6690;
				this.match(PostgreSQLParser.KW_USER);
				this.state = 6691;
				this.roleid();
				this.state = 6692;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6693;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6694;
				this.roleid();
				}
				break;

			case 48:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 6696;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6697;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 6698;
				this.name();
				this.state = 6699;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6700;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6701;
				this.name();
				}
				break;

			case 49:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 6703;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6704;
				this.match(PostgreSQLParser.KW_STATISTICS);
				this.state = 6705;
				this.any_name();
				this.state = 6706;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6707;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6708;
				this.name();
				}
				break;

			case 50:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 6710;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6711;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 6712;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 6713;
				this.match(PostgreSQLParser.KW_PARSER);
				this.state = 6714;
				this.any_name();
				this.state = 6715;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6716;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6717;
				this.name();
				}
				break;

			case 51:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 6719;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6720;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 6721;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 6722;
				this.match(PostgreSQLParser.KW_DICTIONARY);
				this.state = 6723;
				this.any_name();
				this.state = 6724;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6725;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6726;
				this.name();
				}
				break;

			case 52:
				this.enterOuterAlt(_localctx, 52);
				{
				this.state = 6728;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6729;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 6730;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 6731;
				this.match(PostgreSQLParser.KW_TEMPLATE);
				this.state = 6732;
				this.any_name();
				this.state = 6733;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6734;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6735;
				this.name();
				}
				break;

			case 53:
				this.enterOuterAlt(_localctx, 53);
				{
				this.state = 6737;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6738;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 6739;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 6740;
				this.match(PostgreSQLParser.KW_CONFIGURATION);
				this.state = 6741;
				this.any_name();
				this.state = 6742;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6743;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6744;
				this.name();
				}
				break;

			case 54:
				this.enterOuterAlt(_localctx, 54);
				{
				this.state = 6746;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6747;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 6748;
				this.any_name();
				this.state = 6749;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6750;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6751;
				this.name();
				}
				break;

			case 55:
				this.enterOuterAlt(_localctx, 55);
				{
				this.state = 6753;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6754;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 6755;
				this.any_name();
				this.state = 6756;
				this.match(PostgreSQLParser.KW_RENAME);
				this.state = 6757;
				this.match(PostgreSQLParser.KW_ATTRIBUTE);
				this.state = 6758;
				this.name();
				this.state = 6759;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 6760;
				this.name();
				this.state = 6762;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 6761;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_column(): Opt_columnContext {
		let _localctx: Opt_columnContext = new Opt_columnContext(this._ctx, this.state);
		this.enterRule(_localctx, 736, PostgreSQLParser.RULE_opt_column);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6766;
			this.match(PostgreSQLParser.KW_COLUMN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_set_data(): Opt_set_dataContext {
		let _localctx: Opt_set_dataContext = new Opt_set_dataContext(this._ctx, this.state);
		this.enterRule(_localctx, 738, PostgreSQLParser.RULE_opt_set_data);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6768;
			this.match(PostgreSQLParser.KW_SET);
			this.state = 6769;
			this.match(PostgreSQLParser.KW_DATA);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterobjectdependsstmt(): AlterobjectdependsstmtContext {
		let _localctx: AlterobjectdependsstmtContext = new AlterobjectdependsstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 740, PostgreSQLParser.RULE_alterobjectdependsstmt);
		let _la: number;
		try {
			this.state = 6840;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 558, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6771;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6772;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 6773;
				this.function_with_argtypes();
				this.state = 6775;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NO) {
					{
					this.state = 6774;
					this.opt_no();
					}
				}

				this.state = 6777;
				this.match(PostgreSQLParser.KW_DEPENDS);
				this.state = 6778;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 6779;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 6780;
				this.name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6782;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6783;
				this.match(PostgreSQLParser.KW_PROCEDURE);
				this.state = 6784;
				this.function_with_argtypes();
				this.state = 6786;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NO) {
					{
					this.state = 6785;
					this.opt_no();
					}
				}

				this.state = 6788;
				this.match(PostgreSQLParser.KW_DEPENDS);
				this.state = 6789;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 6790;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 6791;
				this.name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6793;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6794;
				this.match(PostgreSQLParser.KW_ROUTINE);
				this.state = 6795;
				this.function_with_argtypes();
				this.state = 6797;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NO) {
					{
					this.state = 6796;
					this.opt_no();
					}
				}

				this.state = 6799;
				this.match(PostgreSQLParser.KW_DEPENDS);
				this.state = 6800;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 6801;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 6802;
				this.name();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6804;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6805;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 6806;
				this.name();
				this.state = 6807;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 6808;
				this.qualified_name();
				this.state = 6810;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NO) {
					{
					this.state = 6809;
					this.opt_no();
					}
				}

				this.state = 6812;
				this.match(PostgreSQLParser.KW_DEPENDS);
				this.state = 6813;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 6814;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 6815;
				this.name();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6817;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6818;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				this.state = 6819;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 6820;
				this.qualified_name();
				this.state = 6822;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NO) {
					{
					this.state = 6821;
					this.opt_no();
					}
				}

				this.state = 6824;
				this.match(PostgreSQLParser.KW_DEPENDS);
				this.state = 6825;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 6826;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 6827;
				this.name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6829;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6830;
				this.match(PostgreSQLParser.KW_INDEX);
				this.state = 6831;
				this.qualified_name();
				this.state = 6833;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NO) {
					{
					this.state = 6832;
					this.opt_no();
					}
				}

				this.state = 6835;
				this.match(PostgreSQLParser.KW_DEPENDS);
				this.state = 6836;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 6837;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 6838;
				this.name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_no(): Opt_noContext {
		let _localctx: Opt_noContext = new Opt_noContext(this._ctx, this.state);
		this.enterRule(_localctx, 742, PostgreSQLParser.RULE_opt_no);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 6842;
			this.match(PostgreSQLParser.KW_NO);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterobjectschemastmt(): AlterobjectschemastmtContext {
		let _localctx: AlterobjectschemastmtContext = new AlterobjectschemastmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 744, PostgreSQLParser.RULE_alterobjectschemastmt);
		try {
			this.state = 7061;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 559, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 6844;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6845;
				this.match(PostgreSQLParser.KW_AGGREGATE);
				this.state = 6846;
				this.aggregate_with_argtypes();
				this.state = 6847;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6848;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6849;
				this.name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 6851;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6852;
				this.match(PostgreSQLParser.KW_COLLATION);
				this.state = 6853;
				this.any_name();
				this.state = 6854;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6855;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6856;
				this.name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 6858;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6859;
				this.match(PostgreSQLParser.KW_CONVERSION);
				this.state = 6860;
				this.any_name();
				this.state = 6861;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6862;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6863;
				this.name();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 6865;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6866;
				this.match(PostgreSQLParser.KW_DOMAIN);
				this.state = 6867;
				this.any_name();
				this.state = 6868;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6869;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6870;
				this.name();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 6872;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6873;
				this.match(PostgreSQLParser.KW_EXTENSION);
				this.state = 6874;
				this.name();
				this.state = 6875;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6876;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6877;
				this.name();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 6879;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6880;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 6881;
				this.function_with_argtypes();
				this.state = 6882;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6883;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6884;
				this.name();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 6886;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6887;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 6888;
				this.operator_with_argtypes();
				this.state = 6889;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6890;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6891;
				this.name();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 6893;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6894;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 6895;
				this.match(PostgreSQLParser.KW_CLASS);
				this.state = 6896;
				this.any_name();
				this.state = 6897;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 6898;
				this.name();
				this.state = 6899;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6900;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6901;
				this.name();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 6903;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6904;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 6905;
				this.match(PostgreSQLParser.KW_FAMILY);
				this.state = 6906;
				this.any_name();
				this.state = 6907;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 6908;
				this.name();
				this.state = 6909;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6910;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6911;
				this.name();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 6913;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6914;
				this.match(PostgreSQLParser.KW_PROCEDURE);
				this.state = 6915;
				this.function_with_argtypes();
				this.state = 6916;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6917;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6918;
				this.name();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 6920;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6921;
				this.match(PostgreSQLParser.KW_ROUTINE);
				this.state = 6922;
				this.function_with_argtypes();
				this.state = 6923;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6924;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6925;
				this.name();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 6927;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6928;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6929;
				this.relation_expr();
				this.state = 6930;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6931;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6932;
				this.name();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 6934;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6935;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 6936;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6937;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6938;
				this.relation_expr();
				this.state = 6939;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6940;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6941;
				this.name();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 6943;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6944;
				this.match(PostgreSQLParser.KW_STATISTICS);
				this.state = 6945;
				this.any_name();
				this.state = 6946;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6947;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6948;
				this.name();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 6950;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6951;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 6952;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 6953;
				this.match(PostgreSQLParser.KW_PARSER);
				this.state = 6954;
				this.any_name();
				this.state = 6955;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6956;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6957;
				this.name();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 6959;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6960;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 6961;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 6962;
				this.match(PostgreSQLParser.KW_DICTIONARY);
				this.state = 6963;
				this.any_name();
				this.state = 6964;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6965;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6966;
				this.name();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 6968;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6969;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 6970;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 6971;
				this.match(PostgreSQLParser.KW_TEMPLATE);
				this.state = 6972;
				this.any_name();
				this.state = 6973;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6974;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6975;
				this.name();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 6977;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6978;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 6979;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 6980;
				this.match(PostgreSQLParser.KW_CONFIGURATION);
				this.state = 6981;
				this.any_name();
				this.state = 6982;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6983;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6984;
				this.name();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 6986;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6987;
				this.match(PostgreSQLParser.KW_SEQUENCE);
				this.state = 6988;
				this.qualified_name();
				this.state = 6989;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6990;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 6991;
				this.name();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 6993;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 6994;
				this.match(PostgreSQLParser.KW_SEQUENCE);
				this.state = 6995;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 6996;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 6997;
				this.qualified_name();
				this.state = 6998;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 6999;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 7000;
				this.name();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 7002;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7003;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 7004;
				this.qualified_name();
				this.state = 7005;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7006;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 7007;
				this.name();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 7009;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7010;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 7011;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 7012;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 7013;
				this.qualified_name();
				this.state = 7014;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7015;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 7016;
				this.name();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 7018;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7019;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				this.state = 7020;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 7021;
				this.qualified_name();
				this.state = 7022;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7023;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 7024;
				this.name();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 7026;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7027;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				this.state = 7028;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 7029;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 7030;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 7031;
				this.qualified_name();
				this.state = 7032;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7033;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 7034;
				this.name();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 7036;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7037;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 7038;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 7039;
				this.relation_expr();
				this.state = 7040;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7041;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 7042;
				this.name();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 7044;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7045;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 7046;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 7047;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 7048;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 7049;
				this.relation_expr();
				this.state = 7050;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7051;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 7052;
				this.name();
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 7054;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7055;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 7056;
				this.any_name();
				this.state = 7057;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7058;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 7059;
				this.name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alteroperatorstmt(): AlteroperatorstmtContext {
		let _localctx: AlteroperatorstmtContext = new AlteroperatorstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 746, PostgreSQLParser.RULE_alteroperatorstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7063;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 7064;
			this.match(PostgreSQLParser.KW_OPERATOR);
			this.state = 7065;
			this.operator_with_argtypes();
			this.state = 7066;
			this.match(PostgreSQLParser.KW_SET);
			this.state = 7067;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 7068;
			this.operator_def_list();
			this.state = 7069;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public operator_def_list(): Operator_def_listContext {
		let _localctx: Operator_def_listContext = new Operator_def_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 748, PostgreSQLParser.RULE_operator_def_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7071;
			this.operator_def_elem();
			this.state = 7076;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 7072;
				this.match(PostgreSQLParser.COMMA);
				this.state = 7073;
				this.operator_def_elem();
				}
				}
				this.state = 7078;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public operator_def_elem(): Operator_def_elemContext {
		let _localctx: Operator_def_elemContext = new Operator_def_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 750, PostgreSQLParser.RULE_operator_def_elem);
		try {
			this.state = 7087;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 561, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7079;
				this.collabel();
				this.state = 7080;
				this.match(PostgreSQLParser.EQUAL);
				this.state = 7081;
				this.match(PostgreSQLParser.KW_NONE);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7083;
				this.collabel();
				this.state = 7084;
				this.match(PostgreSQLParser.EQUAL);
				this.state = 7085;
				this.operator_def_arg();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public operator_def_arg(): Operator_def_argContext {
		let _localctx: Operator_def_argContext = new Operator_def_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 752, PostgreSQLParser.RULE_operator_def_arg);
		try {
			this.state = 7094;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 562, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7089;
				this.func_type();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7090;
				this.reserved_keyword();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7091;
				this.qual_all_op();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7092;
				this.numericonly();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7093;
				this.sconst();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public altertypestmt(): AltertypestmtContext {
		let _localctx: AltertypestmtContext = new AltertypestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 754, PostgreSQLParser.RULE_altertypestmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7096;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 7097;
			this.match(PostgreSQLParser.KW_TYPE);
			this.state = 7098;
			this.any_name();
			this.state = 7099;
			this.match(PostgreSQLParser.KW_SET);
			this.state = 7100;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 7101;
			this.operator_def_list();
			this.state = 7102;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterownerstmt(): AlterownerstmtContext {
		let _localctx: AlterownerstmtContext = new AlterownerstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 756, PostgreSQLParser.RULE_alterownerstmt);
		let _la: number;
		try {
			this.state = 7289;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 564, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7104;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7105;
				this.match(PostgreSQLParser.KW_AGGREGATE);
				this.state = 7106;
				this.aggregate_with_argtypes();
				this.state = 7107;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7108;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7109;
				this.rolespec();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7111;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7112;
				this.match(PostgreSQLParser.KW_COLLATION);
				this.state = 7113;
				this.any_name();
				this.state = 7114;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7115;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7116;
				this.rolespec();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7118;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7119;
				this.match(PostgreSQLParser.KW_CONVERSION);
				this.state = 7120;
				this.any_name();
				this.state = 7121;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7122;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7123;
				this.rolespec();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7125;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7126;
				this.match(PostgreSQLParser.KW_DATABASE);
				this.state = 7127;
				this.name();
				this.state = 7128;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7129;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7130;
				this.rolespec();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7132;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7133;
				this.match(PostgreSQLParser.KW_DOMAIN);
				this.state = 7134;
				this.any_name();
				this.state = 7135;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7136;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7137;
				this.rolespec();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7139;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7140;
				this.match(PostgreSQLParser.KW_FUNCTION);
				this.state = 7141;
				this.function_with_argtypes();
				this.state = 7142;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7143;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7144;
				this.rolespec();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7146;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7148;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_PROCEDURAL) {
					{
					this.state = 7147;
					this.opt_procedural();
					}
				}

				this.state = 7150;
				this.match(PostgreSQLParser.KW_LANGUAGE);
				this.state = 7151;
				this.name();
				this.state = 7152;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7153;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7154;
				this.rolespec();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7156;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7157;
				this.match(PostgreSQLParser.KW_LARGE);
				this.state = 7158;
				this.match(PostgreSQLParser.KW_OBJECT);
				this.state = 7159;
				this.numericonly();
				this.state = 7160;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7161;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7162;
				this.rolespec();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 7164;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7165;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 7166;
				this.operator_with_argtypes();
				this.state = 7167;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7168;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7169;
				this.rolespec();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 7171;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7172;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 7173;
				this.match(PostgreSQLParser.KW_CLASS);
				this.state = 7174;
				this.any_name();
				this.state = 7175;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 7176;
				this.name();
				this.state = 7177;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7178;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7179;
				this.rolespec();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 7181;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7182;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 7183;
				this.match(PostgreSQLParser.KW_FAMILY);
				this.state = 7184;
				this.any_name();
				this.state = 7185;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 7186;
				this.name();
				this.state = 7187;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7188;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7189;
				this.rolespec();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 7191;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7192;
				this.match(PostgreSQLParser.KW_PROCEDURE);
				this.state = 7193;
				this.function_with_argtypes();
				this.state = 7194;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7195;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7196;
				this.rolespec();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 7198;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7199;
				this.match(PostgreSQLParser.KW_ROUTINE);
				this.state = 7200;
				this.function_with_argtypes();
				this.state = 7201;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7202;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7203;
				this.rolespec();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 7205;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7206;
				this.match(PostgreSQLParser.KW_SCHEMA);
				this.state = 7207;
				this.name();
				this.state = 7208;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7209;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7210;
				this.rolespec();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 7212;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7213;
				this.match(PostgreSQLParser.KW_TYPE);
				this.state = 7214;
				this.any_name();
				this.state = 7215;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7216;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7217;
				this.rolespec();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 7219;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7220;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 7221;
				this.name();
				this.state = 7222;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7223;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7224;
				this.rolespec();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 7226;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7227;
				this.match(PostgreSQLParser.KW_STATISTICS);
				this.state = 7228;
				this.any_name();
				this.state = 7229;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7230;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7231;
				this.rolespec();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 7233;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7234;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 7235;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 7236;
				this.match(PostgreSQLParser.KW_DICTIONARY);
				this.state = 7237;
				this.any_name();
				this.state = 7238;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7239;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7240;
				this.rolespec();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 7242;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7243;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 7244;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 7245;
				this.match(PostgreSQLParser.KW_CONFIGURATION);
				this.state = 7246;
				this.any_name();
				this.state = 7247;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7248;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7249;
				this.rolespec();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 7251;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7252;
				this.match(PostgreSQLParser.KW_FOREIGN);
				this.state = 7253;
				this.match(PostgreSQLParser.KW_DATA);
				this.state = 7254;
				this.match(PostgreSQLParser.KW_WRAPPER);
				this.state = 7255;
				this.name();
				this.state = 7256;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7257;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7258;
				this.rolespec();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 7260;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7261;
				this.match(PostgreSQLParser.KW_SERVER);
				this.state = 7262;
				this.name();
				this.state = 7263;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7264;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7265;
				this.rolespec();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 7267;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7268;
				this.match(PostgreSQLParser.KW_EVENT);
				this.state = 7269;
				this.match(PostgreSQLParser.KW_TRIGGER);
				this.state = 7270;
				this.name();
				this.state = 7271;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7272;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7273;
				this.rolespec();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 7275;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7276;
				this.match(PostgreSQLParser.KW_PUBLICATION);
				this.state = 7277;
				this.name();
				this.state = 7278;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7279;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7280;
				this.rolespec();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 7282;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7283;
				this.match(PostgreSQLParser.KW_SUBSCRIPTION);
				this.state = 7284;
				this.name();
				this.state = 7285;
				this.match(PostgreSQLParser.KW_OWNER);
				this.state = 7286;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7287;
				this.rolespec();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createpublicationstmt(): CreatepublicationstmtContext {
		let _localctx: CreatepublicationstmtContext = new CreatepublicationstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 758, PostgreSQLParser.RULE_createpublicationstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7291;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 7292;
			this.match(PostgreSQLParser.KW_PUBLICATION);
			this.state = 7293;
			this.name();
			this.state = 7295;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_FOR) {
				{
				this.state = 7294;
				this.opt_publication_for_tables();
				}
			}

			this.state = 7298;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 566, this._ctx) ) {
			case 1:
				{
				this.state = 7297;
				this.opt_definition();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_publication_for_tables(): Opt_publication_for_tablesContext {
		let _localctx: Opt_publication_for_tablesContext = new Opt_publication_for_tablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 760, PostgreSQLParser.RULE_opt_publication_for_tables);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7300;
			this.publication_for_tables();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public publication_for_tables(): Publication_for_tablesContext {
		let _localctx: Publication_for_tablesContext = new Publication_for_tablesContext(this._ctx, this.state);
		this.enterRule(_localctx, 762, PostgreSQLParser.RULE_publication_for_tables);
		try {
			this.state = 7308;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 567, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7302;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 7303;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 7304;
				this.relation_expr_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7305;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 7306;
				this.match(PostgreSQLParser.KW_ALL);
				this.state = 7307;
				this.match(PostgreSQLParser.KW_TABLES);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterpublicationstmt(): AlterpublicationstmtContext {
		let _localctx: AlterpublicationstmtContext = new AlterpublicationstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 764, PostgreSQLParser.RULE_alterpublicationstmt);
		try {
			this.state = 7337;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 568, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7310;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7311;
				this.match(PostgreSQLParser.KW_PUBLICATION);
				this.state = 7312;
				this.name();
				this.state = 7313;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7314;
				this.definition();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7316;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7317;
				this.match(PostgreSQLParser.KW_PUBLICATION);
				this.state = 7318;
				this.name();
				this.state = 7319;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 7320;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 7321;
				this.relation_expr_list();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7323;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7324;
				this.match(PostgreSQLParser.KW_PUBLICATION);
				this.state = 7325;
				this.name();
				this.state = 7326;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7327;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 7328;
				this.relation_expr_list();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7330;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7331;
				this.match(PostgreSQLParser.KW_PUBLICATION);
				this.state = 7332;
				this.name();
				this.state = 7333;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 7334;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 7335;
				this.relation_expr_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createsubscriptionstmt(): CreatesubscriptionstmtContext {
		let _localctx: CreatesubscriptionstmtContext = new CreatesubscriptionstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 766, PostgreSQLParser.RULE_createsubscriptionstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7339;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 7340;
			this.match(PostgreSQLParser.KW_SUBSCRIPTION);
			this.state = 7341;
			this.name();
			this.state = 7342;
			this.match(PostgreSQLParser.KW_CONNECTION);
			this.state = 7343;
			this.sconst();
			this.state = 7344;
			this.match(PostgreSQLParser.KW_PUBLICATION);
			this.state = 7345;
			this.publication_name_list();
			this.state = 7347;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 569, this._ctx) ) {
			case 1:
				{
				this.state = 7346;
				this.opt_definition();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public publication_name_list(): Publication_name_listContext {
		let _localctx: Publication_name_listContext = new Publication_name_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 768, PostgreSQLParser.RULE_publication_name_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7349;
			this.publication_name_item();
			this.state = 7354;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 7350;
				this.match(PostgreSQLParser.COMMA);
				this.state = 7351;
				this.publication_name_item();
				}
				}
				this.state = 7356;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public publication_name_item(): Publication_name_itemContext {
		let _localctx: Publication_name_itemContext = new Publication_name_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 770, PostgreSQLParser.RULE_publication_name_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7357;
			this.collabel();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public altersubscriptionstmt(): AltersubscriptionstmtContext {
		let _localctx: AltersubscriptionstmtContext = new AltersubscriptionstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 772, PostgreSQLParser.RULE_altersubscriptionstmt);
		try {
			this.state = 7398;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 573, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7359;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7360;
				this.match(PostgreSQLParser.KW_SUBSCRIPTION);
				this.state = 7361;
				this.name();
				this.state = 7362;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7363;
				this.definition();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7365;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7366;
				this.match(PostgreSQLParser.KW_SUBSCRIPTION);
				this.state = 7367;
				this.name();
				this.state = 7368;
				this.match(PostgreSQLParser.KW_CONNECTION);
				this.state = 7369;
				this.sconst();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7371;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7372;
				this.match(PostgreSQLParser.KW_SUBSCRIPTION);
				this.state = 7373;
				this.name();
				this.state = 7374;
				this.match(PostgreSQLParser.KW_REFRESH);
				this.state = 7375;
				this.match(PostgreSQLParser.KW_PUBLICATION);
				this.state = 7377;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 571, this._ctx) ) {
				case 1:
					{
					this.state = 7376;
					this.opt_definition();
					}
					break;
				}
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7379;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7380;
				this.match(PostgreSQLParser.KW_SUBSCRIPTION);
				this.state = 7381;
				this.name();
				this.state = 7382;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7383;
				this.match(PostgreSQLParser.KW_PUBLICATION);
				this.state = 7384;
				this.publication_name_list();
				this.state = 7386;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 572, this._ctx) ) {
				case 1:
					{
					this.state = 7385;
					this.opt_definition();
					}
					break;
				}
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7388;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7389;
				this.match(PostgreSQLParser.KW_SUBSCRIPTION);
				this.state = 7390;
				this.name();
				this.state = 7391;
				this.match(PostgreSQLParser.KW_ENABLE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7393;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7394;
				this.match(PostgreSQLParser.KW_SUBSCRIPTION);
				this.state = 7395;
				this.name();
				this.state = 7396;
				this.match(PostgreSQLParser.KW_DISABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropsubscriptionstmt(): DropsubscriptionstmtContext {
		let _localctx: DropsubscriptionstmtContext = new DropsubscriptionstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 774, PostgreSQLParser.RULE_dropsubscriptionstmt);
		let _la: number;
		try {
			this.state = 7414;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 576, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7400;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 7401;
				this.match(PostgreSQLParser.KW_SUBSCRIPTION);
				this.state = 7402;
				this.name();
				this.state = 7404;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 7403;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7406;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 7407;
				this.match(PostgreSQLParser.KW_SUBSCRIPTION);
				this.state = 7408;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 7409;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 7410;
				this.name();
				this.state = 7412;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 7411;
					this.opt_drop_behavior();
					}
				}

				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rulestmt(): RulestmtContext {
		let _localctx: RulestmtContext = new RulestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 776, PostgreSQLParser.RULE_rulestmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7416;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 7418;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_OR) {
				{
				this.state = 7417;
				this.opt_or_replace();
				}
			}

			this.state = 7420;
			this.match(PostgreSQLParser.KW_RULE);
			this.state = 7421;
			this.name();
			this.state = 7422;
			this.match(PostgreSQLParser.KW_AS);
			this.state = 7423;
			this.match(PostgreSQLParser.KW_ON);
			this.state = 7424;
			this.event();
			this.state = 7425;
			this.match(PostgreSQLParser.KW_TO);
			this.state = 7426;
			this.qualified_name();
			this.state = 7428;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WHERE) {
				{
				this.state = 7427;
				this.where_clause();
				}
			}

			this.state = 7430;
			this.match(PostgreSQLParser.KW_DO);
			this.state = 7432;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_ALSO || _la === PostgreSQLParser.KW_INSTEAD) {
				{
				this.state = 7431;
				this.opt_instead();
				}
			}

			this.state = 7434;
			this.ruleactionlist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ruleactionlist(): RuleactionlistContext {
		let _localctx: RuleactionlistContext = new RuleactionlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 778, PostgreSQLParser.RULE_ruleactionlist);
		try {
			this.state = 7442;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 580, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7436;
				this.match(PostgreSQLParser.KW_NOTHING);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7437;
				this.ruleactionstmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7438;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 7439;
				this.ruleactionmulti();
				this.state = 7440;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ruleactionmulti(): RuleactionmultiContext {
		let _localctx: RuleactionmultiContext = new RuleactionmultiContext(this._ctx, this.state);
		this.enterRule(_localctx, 780, PostgreSQLParser.RULE_ruleactionmulti);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7445;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.OPEN_PAREN || ((((_la - 88)) & ~0x1F) === 0 && ((1 << (_la - 88)) & ((1 << (PostgreSQLParser.KW_SELECT - 88)) | (1 << (PostgreSQLParser.KW_TABLE - 88)) | (1 << (PostgreSQLParser.KW_WITH - 88)))) !== 0) || _la === PostgreSQLParser.KW_DELETE || _la === PostgreSQLParser.KW_INSERT || _la === PostgreSQLParser.KW_NOTIFY || _la === PostgreSQLParser.KW_UPDATE || _la === PostgreSQLParser.KW_VALUES) {
				{
				this.state = 7444;
				this.ruleactionstmtOrEmpty();
				}
			}

			this.state = 7453;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.SEMI) {
				{
				{
				this.state = 7447;
				this.match(PostgreSQLParser.SEMI);
				this.state = 7449;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_PAREN || ((((_la - 88)) & ~0x1F) === 0 && ((1 << (_la - 88)) & ((1 << (PostgreSQLParser.KW_SELECT - 88)) | (1 << (PostgreSQLParser.KW_TABLE - 88)) | (1 << (PostgreSQLParser.KW_WITH - 88)))) !== 0) || _la === PostgreSQLParser.KW_DELETE || _la === PostgreSQLParser.KW_INSERT || _la === PostgreSQLParser.KW_NOTIFY || _la === PostgreSQLParser.KW_UPDATE || _la === PostgreSQLParser.KW_VALUES) {
					{
					this.state = 7448;
					this.ruleactionstmtOrEmpty();
					}
				}

				}
				}
				this.state = 7455;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ruleactionstmt(): RuleactionstmtContext {
		let _localctx: RuleactionstmtContext = new RuleactionstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 782, PostgreSQLParser.RULE_ruleactionstmt);
		try {
			this.state = 7461;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 584, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7456;
				this.selectstmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7457;
				this.insertstmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7458;
				this.updatestmt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7459;
				this.deletestmt();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7460;
				this.notifystmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public ruleactionstmtOrEmpty(): RuleactionstmtOrEmptyContext {
		let _localctx: RuleactionstmtOrEmptyContext = new RuleactionstmtOrEmptyContext(this._ctx, this.state);
		this.enterRule(_localctx, 784, PostgreSQLParser.RULE_ruleactionstmtOrEmpty);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7463;
			this.ruleactionstmt();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public event(): EventContext {
		let _localctx: EventContext = new EventContext(this._ctx, this.state);
		this.enterRule(_localctx, 786, PostgreSQLParser.RULE_event);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7465;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_SELECT || _la === PostgreSQLParser.KW_DELETE || _la === PostgreSQLParser.KW_INSERT || _la === PostgreSQLParser.KW_UPDATE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_instead(): Opt_insteadContext {
		let _localctx: Opt_insteadContext = new Opt_insteadContext(this._ctx, this.state);
		this.enterRule(_localctx, 788, PostgreSQLParser.RULE_opt_instead);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7467;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_ALSO || _la === PostgreSQLParser.KW_INSTEAD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public notifystmt(): NotifystmtContext {
		let _localctx: NotifystmtContext = new NotifystmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 790, PostgreSQLParser.RULE_notifystmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7469;
			this.match(PostgreSQLParser.KW_NOTIFY);
			this.state = 7470;
			this.colid();
			this.state = 7472;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.COMMA) {
				{
				this.state = 7471;
				this.notify_payload();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public notify_payload(): Notify_payloadContext {
		let _localctx: Notify_payloadContext = new Notify_payloadContext(this._ctx, this.state);
		this.enterRule(_localctx, 792, PostgreSQLParser.RULE_notify_payload);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7474;
			this.match(PostgreSQLParser.COMMA);
			this.state = 7475;
			this.sconst();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public listenstmt(): ListenstmtContext {
		let _localctx: ListenstmtContext = new ListenstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 794, PostgreSQLParser.RULE_listenstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7477;
			this.match(PostgreSQLParser.KW_LISTEN);
			this.state = 7478;
			this.colid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unlistenstmt(): UnlistenstmtContext {
		let _localctx: UnlistenstmtContext = new UnlistenstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 796, PostgreSQLParser.RULE_unlistenstmt);
		try {
			this.state = 7484;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 586, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7480;
				this.match(PostgreSQLParser.KW_UNLISTEN);
				this.state = 7481;
				this.colid();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7482;
				this.match(PostgreSQLParser.KW_UNLISTEN);
				this.state = 7483;
				this.match(PostgreSQLParser.STAR);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transactionstmt(): TransactionstmtContext {
		let _localctx: TransactionstmtContext = new TransactionstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 798, PostgreSQLParser.RULE_transactionstmt);
		let _la: number;
		try {
			this.state = 7555;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 600, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7486;
				this.match(PostgreSQLParser.KW_ABORT);
				this.state = 7488;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TRANSACTION || _la === PostgreSQLParser.KW_WORK) {
					{
					this.state = 7487;
					this.opt_transaction();
					}
				}

				this.state = 7491;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AND) {
					{
					this.state = 7490;
					this.opt_transaction_chain();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7493;
				this.match(PostgreSQLParser.KW_BEGIN);
				this.state = 7495;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TRANSACTION || _la === PostgreSQLParser.KW_WORK) {
					{
					this.state = 7494;
					this.opt_transaction();
					}
				}

				this.state = 7498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_DEFERRABLE || _la === PostgreSQLParser.KW_NOT || _la === PostgreSQLParser.KW_ISOLATION || _la === PostgreSQLParser.KW_READ) {
					{
					this.state = 7497;
					this.transaction_mode_list_or_empty();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7500;
				this.match(PostgreSQLParser.KW_START);
				this.state = 7501;
				this.match(PostgreSQLParser.KW_TRANSACTION);
				this.state = 7503;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_DEFERRABLE || _la === PostgreSQLParser.KW_NOT || _la === PostgreSQLParser.KW_ISOLATION || _la === PostgreSQLParser.KW_READ) {
					{
					this.state = 7502;
					this.transaction_mode_list_or_empty();
					}
				}

				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7505;
				this.match(PostgreSQLParser.KW_COMMIT);
				this.state = 7507;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TRANSACTION || _la === PostgreSQLParser.KW_WORK) {
					{
					this.state = 7506;
					this.opt_transaction();
					}
				}

				this.state = 7510;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AND) {
					{
					this.state = 7509;
					this.opt_transaction_chain();
					}
				}

				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7512;
				this.match(PostgreSQLParser.KW_END);
				this.state = 7514;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TRANSACTION || _la === PostgreSQLParser.KW_WORK) {
					{
					this.state = 7513;
					this.opt_transaction();
					}
				}

				this.state = 7517;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AND) {
					{
					this.state = 7516;
					this.opt_transaction_chain();
					}
				}

				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7519;
				this.match(PostgreSQLParser.KW_ROLLBACK);
				this.state = 7521;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TRANSACTION || _la === PostgreSQLParser.KW_WORK) {
					{
					this.state = 7520;
					this.opt_transaction();
					}
				}

				this.state = 7524;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AND) {
					{
					this.state = 7523;
					this.opt_transaction_chain();
					}
				}

				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7526;
				this.match(PostgreSQLParser.KW_SAVEPOINT);
				this.state = 7527;
				this.colid();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 7528;
				this.match(PostgreSQLParser.KW_RELEASE);
				this.state = 7529;
				this.match(PostgreSQLParser.KW_SAVEPOINT);
				this.state = 7530;
				this.colid();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 7531;
				this.match(PostgreSQLParser.KW_RELEASE);
				this.state = 7532;
				this.colid();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 7533;
				this.match(PostgreSQLParser.KW_ROLLBACK);
				this.state = 7535;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TRANSACTION || _la === PostgreSQLParser.KW_WORK) {
					{
					this.state = 7534;
					this.opt_transaction();
					}
				}

				this.state = 7537;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7538;
				this.match(PostgreSQLParser.KW_SAVEPOINT);
				this.state = 7539;
				this.colid();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 7540;
				this.match(PostgreSQLParser.KW_ROLLBACK);
				this.state = 7542;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TRANSACTION || _la === PostgreSQLParser.KW_WORK) {
					{
					this.state = 7541;
					this.opt_transaction();
					}
				}

				this.state = 7544;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 7545;
				this.colid();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 7546;
				this.match(PostgreSQLParser.KW_PREPARE);
				this.state = 7547;
				this.match(PostgreSQLParser.KW_TRANSACTION);
				this.state = 7548;
				this.sconst();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 7549;
				this.match(PostgreSQLParser.KW_COMMIT);
				this.state = 7550;
				this.match(PostgreSQLParser.KW_PREPARED);
				this.state = 7551;
				this.sconst();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 7552;
				this.match(PostgreSQLParser.KW_ROLLBACK);
				this.state = 7553;
				this.match(PostgreSQLParser.KW_PREPARED);
				this.state = 7554;
				this.sconst();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_transaction(): Opt_transactionContext {
		let _localctx: Opt_transactionContext = new Opt_transactionContext(this._ctx, this.state);
		this.enterRule(_localctx, 800, PostgreSQLParser.RULE_opt_transaction);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7557;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_TRANSACTION || _la === PostgreSQLParser.KW_WORK)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transaction_mode_item(): Transaction_mode_itemContext {
		let _localctx: Transaction_mode_itemContext = new Transaction_mode_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 802, PostgreSQLParser.RULE_transaction_mode_item);
		try {
			this.state = 7569;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 601, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7559;
				this.match(PostgreSQLParser.KW_ISOLATION);
				this.state = 7560;
				this.match(PostgreSQLParser.KW_LEVEL);
				this.state = 7561;
				this.iso_level();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7562;
				this.match(PostgreSQLParser.KW_READ);
				this.state = 7563;
				this.match(PostgreSQLParser.KW_ONLY);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7564;
				this.match(PostgreSQLParser.KW_READ);
				this.state = 7565;
				this.match(PostgreSQLParser.KW_WRITE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7566;
				this.match(PostgreSQLParser.KW_DEFERRABLE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7567;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 7568;
				this.match(PostgreSQLParser.KW_DEFERRABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transaction_mode_list(): Transaction_mode_listContext {
		let _localctx: Transaction_mode_listContext = new Transaction_mode_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 804, PostgreSQLParser.RULE_transaction_mode_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7571;
			this.transaction_mode_item();
			this.state = 7578;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA || _la === PostgreSQLParser.KW_DEFERRABLE || _la === PostgreSQLParser.KW_NOT || _la === PostgreSQLParser.KW_ISOLATION || _la === PostgreSQLParser.KW_READ) {
				{
				{
				this.state = 7573;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.COMMA) {
					{
					this.state = 7572;
					this.match(PostgreSQLParser.COMMA);
					}
				}

				this.state = 7575;
				this.transaction_mode_item();
				}
				}
				this.state = 7580;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public transaction_mode_list_or_empty(): Transaction_mode_list_or_emptyContext {
		let _localctx: Transaction_mode_list_or_emptyContext = new Transaction_mode_list_or_emptyContext(this._ctx, this.state);
		this.enterRule(_localctx, 806, PostgreSQLParser.RULE_transaction_mode_list_or_empty);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7581;
			this.transaction_mode_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_transaction_chain(): Opt_transaction_chainContext {
		let _localctx: Opt_transaction_chainContext = new Opt_transaction_chainContext(this._ctx, this.state);
		this.enterRule(_localctx, 808, PostgreSQLParser.RULE_opt_transaction_chain);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7583;
			this.match(PostgreSQLParser.KW_AND);
			this.state = 7585;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_NO) {
				{
				this.state = 7584;
				this.match(PostgreSQLParser.KW_NO);
				}
			}

			this.state = 7587;
			this.match(PostgreSQLParser.KW_CHAIN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public viewstmt(): ViewstmtContext {
		let _localctx: ViewstmtContext = new ViewstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 810, PostgreSQLParser.RULE_viewstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7589;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 7592;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_OR) {
				{
				this.state = 7590;
				this.match(PostgreSQLParser.KW_OR);
				this.state = 7591;
				this.match(PostgreSQLParser.KW_REPLACE);
				}
			}

			this.state = 7595;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_GLOBAL || _la === PostgreSQLParser.KW_LOCAL || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PostgreSQLParser.KW_TEMP - 352)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 352)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 352)))) !== 0)) {
				{
				this.state = 7594;
				this.opttemp();
				}
			}

			this.state = 7614;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_VIEW:
				{
				this.state = 7597;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 7598;
				this.qualified_name();
				this.state = 7600;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_PAREN) {
					{
					this.state = 7599;
					this.opt_column_list();
					}
				}

				this.state = 7603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WITH) {
					{
					this.state = 7602;
					this.opt_reloptions();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_RECURSIVE:
				{
				this.state = 7605;
				this.match(PostgreSQLParser.KW_RECURSIVE);
				this.state = 7606;
				this.match(PostgreSQLParser.KW_VIEW);
				this.state = 7607;
				this.qualified_name();
				this.state = 7608;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 7609;
				this.columnlist();
				this.state = 7610;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 7612;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WITH) {
					{
					this.state = 7611;
					this.opt_reloptions();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 7616;
			this.match(PostgreSQLParser.KW_AS);
			this.state = 7617;
			this.selectstmt();
			this.state = 7619;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 611, this._ctx) ) {
			case 1:
				{
				this.state = 7618;
				this.opt_check_option();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_check_option(): Opt_check_optionContext {
		let _localctx: Opt_check_optionContext = new Opt_check_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 812, PostgreSQLParser.RULE_opt_check_option);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7621;
			this.match(PostgreSQLParser.KW_WITH);
			this.state = 7623;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_CASCADED || _la === PostgreSQLParser.KW_LOCAL) {
				{
				this.state = 7622;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_CASCADED || _la === PostgreSQLParser.KW_LOCAL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 7625;
			this.match(PostgreSQLParser.KW_CHECK);
			this.state = 7626;
			this.match(PostgreSQLParser.KW_OPTION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadstmt(): LoadstmtContext {
		let _localctx: LoadstmtContext = new LoadstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 814, PostgreSQLParser.RULE_loadstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7628;
			this.match(PostgreSQLParser.KW_LOAD);
			this.state = 7629;
			this.file_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createdbstmt(): CreatedbstmtContext {
		let _localctx: CreatedbstmtContext = new CreatedbstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 816, PostgreSQLParser.RULE_createdbstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7631;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 7632;
			this.match(PostgreSQLParser.KW_DATABASE);
			this.state = 7633;
			this.name();
			this.state = 7635;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 613, this._ctx) ) {
			case 1:
				{
				this.state = 7634;
				this.opt_with();
				}
				break;
			}
			this.state = 7638;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 614, this._ctx) ) {
			case 1:
				{
				this.state = 7637;
				this.createdb_opt_list();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createdb_opt_list(): Createdb_opt_listContext {
		let _localctx: Createdb_opt_listContext = new Createdb_opt_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 818, PostgreSQLParser.RULE_createdb_opt_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7640;
			this.createdb_opt_items();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createdb_opt_items(): Createdb_opt_itemsContext {
		let _localctx: Createdb_opt_itemsContext = new Createdb_opt_itemsContext(this._ctx, this.state);
		this.enterRule(_localctx, 820, PostgreSQLParser.RULE_createdb_opt_items);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7643;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 7642;
					this.createdb_opt_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 7645;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 615, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createdb_opt_item(): Createdb_opt_itemContext {
		let _localctx: Createdb_opt_itemContext = new Createdb_opt_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 822, PostgreSQLParser.RULE_createdb_opt_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7647;
			this.createdb_opt_name();
			this.state = 7649;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.EQUAL) {
				{
				this.state = 7648;
				this.opt_equal();
				}
			}

			this.state = 7654;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 617, this._ctx) ) {
			case 1:
				{
				this.state = 7651;
				this.signediconst();
				}
				break;

			case 2:
				{
				this.state = 7652;
				this.opt_boolean_or_string();
				}
				break;

			case 3:
				{
				this.state = 7653;
				this.match(PostgreSQLParser.KW_DEFAULT);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createdb_opt_name(): Createdb_opt_nameContext {
		let _localctx: Createdb_opt_nameContext = new Createdb_opt_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 824, PostgreSQLParser.RULE_createdb_opt_name);
		try {
			this.state = 7664;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7656;
				this.identifier();
				}
				break;
			case PostgreSQLParser.KW_CONNECTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7657;
				this.match(PostgreSQLParser.KW_CONNECTION);
				this.state = 7658;
				this.match(PostgreSQLParser.KW_LIMIT);
				}
				break;
			case PostgreSQLParser.KW_ENCODING:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7659;
				this.match(PostgreSQLParser.KW_ENCODING);
				}
				break;
			case PostgreSQLParser.KW_LOCATION:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7660;
				this.match(PostgreSQLParser.KW_LOCATION);
				}
				break;
			case PostgreSQLParser.KW_OWNER:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7661;
				this.match(PostgreSQLParser.KW_OWNER);
				}
				break;
			case PostgreSQLParser.KW_TABLESPACE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7662;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				}
				break;
			case PostgreSQLParser.KW_TEMPLATE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7663;
				this.match(PostgreSQLParser.KW_TEMPLATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_equal(): Opt_equalContext {
		let _localctx: Opt_equalContext = new Opt_equalContext(this._ctx, this.state);
		this.enterRule(_localctx, 826, PostgreSQLParser.RULE_opt_equal);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7666;
			this.match(PostgreSQLParser.EQUAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterdatabasestmt(): AlterdatabasestmtContext {
		let _localctx: AlterdatabasestmtContext = new AlterdatabasestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 828, PostgreSQLParser.RULE_alterdatabasestmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7668;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 7669;
			this.match(PostgreSQLParser.KW_DATABASE);
			this.state = 7670;
			this.name();
			this.state = 7681;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 621, this._ctx) ) {
			case 1:
				{
				this.state = 7671;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 7673;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 619, this._ctx) ) {
				case 1:
					{
					this.state = 7672;
					this.createdb_opt_list();
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 7676;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 620, this._ctx) ) {
				case 1:
					{
					this.state = 7675;
					this.createdb_opt_list();
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 7678;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7679;
				this.match(PostgreSQLParser.KW_TABLESPACE);
				this.state = 7680;
				this.name();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterdatabasesetstmt(): AlterdatabasesetstmtContext {
		let _localctx: AlterdatabasesetstmtContext = new AlterdatabasesetstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 830, PostgreSQLParser.RULE_alterdatabasesetstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7683;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 7684;
			this.match(PostgreSQLParser.KW_DATABASE);
			this.state = 7685;
			this.name();
			this.state = 7686;
			this.setresetclause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropdbstmt(): DropdbstmtContext {
		let _localctx: DropdbstmtContext = new DropdbstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 832, PostgreSQLParser.RULE_dropdbstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7688;
			this.match(PostgreSQLParser.KW_DROP);
			this.state = 7689;
			this.match(PostgreSQLParser.KW_DATABASE);
			this.state = 7692;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 622, this._ctx) ) {
			case 1:
				{
				this.state = 7690;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 7691;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;
			}
			this.state = 7694;
			this.name();
			this.state = 7702;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 624, this._ctx) ) {
			case 1:
				{
				this.state = 7696;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WITH) {
					{
					this.state = 7695;
					this.opt_with();
					}
				}

				this.state = 7698;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 7699;
				this.drop_option_list();
				this.state = 7700;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_option_list(): Drop_option_listContext {
		let _localctx: Drop_option_listContext = new Drop_option_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 834, PostgreSQLParser.RULE_drop_option_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7704;
			this.drop_option();
			this.state = 7709;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 7705;
				this.match(PostgreSQLParser.COMMA);
				this.state = 7706;
				this.drop_option();
				}
				}
				this.state = 7711;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public drop_option(): Drop_optionContext {
		let _localctx: Drop_optionContext = new Drop_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 836, PostgreSQLParser.RULE_drop_option);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7712;
			this.match(PostgreSQLParser.KW_FORCE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public altercollationstmt(): AltercollationstmtContext {
		let _localctx: AltercollationstmtContext = new AltercollationstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 838, PostgreSQLParser.RULE_altercollationstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7714;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 7715;
			this.match(PostgreSQLParser.KW_COLLATION);
			this.state = 7716;
			this.any_name();
			this.state = 7717;
			this.match(PostgreSQLParser.KW_REFRESH);
			this.state = 7718;
			this.match(PostgreSQLParser.KW_VERSION);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public altersystemstmt(): AltersystemstmtContext {
		let _localctx: AltersystemstmtContext = new AltersystemstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 840, PostgreSQLParser.RULE_altersystemstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7720;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 7721;
			this.match(PostgreSQLParser.KW_SYSTEM);
			this.state = 7722;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_RESET || _la === PostgreSQLParser.KW_SET)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 7723;
			this.generic_set();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createdomainstmt(): CreatedomainstmtContext {
		let _localctx: CreatedomainstmtContext = new CreatedomainstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 842, PostgreSQLParser.RULE_createdomainstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7725;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 7726;
			this.match(PostgreSQLParser.KW_DOMAIN);
			this.state = 7727;
			this.any_name();
			this.state = 7729;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_AS) {
				{
				this.state = 7728;
				this.opt_as();
				}
			}

			this.state = 7731;
			this.typename();
			this.state = 7732;
			this.colquallist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterdomainstmt(): AlterdomainstmtContext {
		let _localctx: AlterdomainstmtContext = new AlterdomainstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 844, PostgreSQLParser.RULE_alterdomainstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7734;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 7735;
			this.match(PostgreSQLParser.KW_DOMAIN);
			this.state = 7736;
			this.any_name();
			this.state = 7759;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 629, this._ctx) ) {
			case 1:
				{
				this.state = 7737;
				this.alter_column_default();
				}
				break;

			case 2:
				{
				this.state = 7738;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 7739;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 7740;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;

			case 3:
				{
				this.state = 7741;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 7742;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 7743;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;

			case 4:
				{
				this.state = 7744;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 7745;
				this.tableconstraint();
				}
				break;

			case 5:
				{
				this.state = 7746;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 7747;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 7750;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 627, this._ctx) ) {
				case 1:
					{
					this.state = 7748;
					this.match(PostgreSQLParser.KW_IF);
					this.state = 7749;
					this.match(PostgreSQLParser.KW_EXISTS);
					}
					break;
				}
				this.state = 7752;
				this.name();
				this.state = 7754;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_CASCADE || _la === PostgreSQLParser.KW_RESTRICT) {
					{
					this.state = 7753;
					this.opt_drop_behavior();
					}
				}

				}
				break;

			case 6:
				{
				this.state = 7756;
				this.match(PostgreSQLParser.KW_VALIDATE);
				this.state = 7757;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 7758;
				this.name();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_as(): Opt_asContext {
		let _localctx: Opt_asContext = new Opt_asContext(this._ctx, this.state);
		this.enterRule(_localctx, 846, PostgreSQLParser.RULE_opt_as);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7761;
			this.match(PostgreSQLParser.KW_AS);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public altertsdictionarystmt(): AltertsdictionarystmtContext {
		let _localctx: AltertsdictionarystmtContext = new AltertsdictionarystmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 848, PostgreSQLParser.RULE_altertsdictionarystmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7763;
			this.match(PostgreSQLParser.KW_ALTER);
			this.state = 7764;
			this.match(PostgreSQLParser.KW_TEXT);
			this.state = 7765;
			this.match(PostgreSQLParser.KW_SEARCH);
			this.state = 7766;
			this.match(PostgreSQLParser.KW_DICTIONARY);
			this.state = 7767;
			this.any_name();
			this.state = 7768;
			this.definition();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public altertsconfigurationstmt(): AltertsconfigurationstmtContext {
		let _localctx: AltertsconfigurationstmtContext = new AltertsconfigurationstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 850, PostgreSQLParser.RULE_altertsconfigurationstmt);
		try {
			this.state = 7842;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 630, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7770;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7771;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 7772;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 7773;
				this.match(PostgreSQLParser.KW_CONFIGURATION);
				this.state = 7774;
				this.any_name();
				this.state = 7775;
				this.match(PostgreSQLParser.KW_ADD);
				this.state = 7776;
				this.match(PostgreSQLParser.KW_MAPPING);
				this.state = 7777;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 7778;
				this.name_list();
				this.state = 7779;
				this.any_with();
				this.state = 7780;
				this.any_name_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7782;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7783;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 7784;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 7785;
				this.match(PostgreSQLParser.KW_CONFIGURATION);
				this.state = 7786;
				this.any_name();
				this.state = 7787;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7788;
				this.match(PostgreSQLParser.KW_MAPPING);
				this.state = 7789;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 7790;
				this.name_list();
				this.state = 7791;
				this.any_with();
				this.state = 7792;
				this.any_name_list();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7794;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7795;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 7796;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 7797;
				this.match(PostgreSQLParser.KW_CONFIGURATION);
				this.state = 7798;
				this.any_name();
				this.state = 7799;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7800;
				this.match(PostgreSQLParser.KW_MAPPING);
				this.state = 7801;
				this.match(PostgreSQLParser.KW_REPLACE);
				this.state = 7802;
				this.any_name();
				this.state = 7803;
				this.any_with();
				this.state = 7804;
				this.any_name();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7806;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7807;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 7808;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 7809;
				this.match(PostgreSQLParser.KW_CONFIGURATION);
				this.state = 7810;
				this.any_name();
				this.state = 7811;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7812;
				this.match(PostgreSQLParser.KW_MAPPING);
				this.state = 7813;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 7814;
				this.name_list();
				this.state = 7815;
				this.match(PostgreSQLParser.KW_REPLACE);
				this.state = 7816;
				this.any_name();
				this.state = 7817;
				this.any_with();
				this.state = 7818;
				this.any_name();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7820;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7821;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 7822;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 7823;
				this.match(PostgreSQLParser.KW_CONFIGURATION);
				this.state = 7824;
				this.any_name();
				this.state = 7825;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 7826;
				this.match(PostgreSQLParser.KW_MAPPING);
				this.state = 7827;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 7828;
				this.name_list();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7830;
				this.match(PostgreSQLParser.KW_ALTER);
				this.state = 7831;
				this.match(PostgreSQLParser.KW_TEXT);
				this.state = 7832;
				this.match(PostgreSQLParser.KW_SEARCH);
				this.state = 7833;
				this.match(PostgreSQLParser.KW_CONFIGURATION);
				this.state = 7834;
				this.any_name();
				this.state = 7835;
				this.match(PostgreSQLParser.KW_DROP);
				this.state = 7836;
				this.match(PostgreSQLParser.KW_MAPPING);
				this.state = 7837;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 7838;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 7839;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 7840;
				this.name_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public any_with(): Any_withContext {
		let _localctx: Any_withContext = new Any_withContext(this._ctx, this.state);
		this.enterRule(_localctx, 852, PostgreSQLParser.RULE_any_with);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7844;
			this.match(PostgreSQLParser.KW_WITH);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createconversionstmt(): CreateconversionstmtContext {
		let _localctx: CreateconversionstmtContext = new CreateconversionstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 854, PostgreSQLParser.RULE_createconversionstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7846;
			this.match(PostgreSQLParser.KW_CREATE);
			this.state = 7848;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_DEFAULT) {
				{
				this.state = 7847;
				this.opt_default();
				}
			}

			this.state = 7850;
			this.match(PostgreSQLParser.KW_CONVERSION);
			this.state = 7851;
			this.any_name();
			this.state = 7852;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 7853;
			this.sconst();
			this.state = 7854;
			this.match(PostgreSQLParser.KW_TO);
			this.state = 7855;
			this.sconst();
			this.state = 7856;
			this.match(PostgreSQLParser.KW_FROM);
			this.state = 7857;
			this.any_name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clusterstmt(): ClusterstmtContext {
		let _localctx: ClusterstmtContext = new ClusterstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 856, PostgreSQLParser.RULE_clusterstmt);
		let _la: number;
		try {
			this.state = 7879;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 636, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7859;
				this.match(PostgreSQLParser.KW_CLUSTER);
				this.state = 7861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_VERBOSE) {
					{
					this.state = 7860;
					this.opt_verbose();
					}
				}

				this.state = 7863;
				this.qualified_name();
				this.state = 7865;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_USING) {
					{
					this.state = 7864;
					this.cluster_index_specification();
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7867;
				this.match(PostgreSQLParser.KW_CLUSTER);
				this.state = 7869;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_VERBOSE) {
					{
					this.state = 7868;
					this.opt_verbose();
					}
				}

				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7871;
				this.match(PostgreSQLParser.KW_CLUSTER);
				this.state = 7873;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_VERBOSE) {
					{
					this.state = 7872;
					this.opt_verbose();
					}
				}

				this.state = 7875;
				this.name();
				this.state = 7876;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 7877;
				this.qualified_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cluster_index_specification(): Cluster_index_specificationContext {
		let _localctx: Cluster_index_specificationContext = new Cluster_index_specificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 858, PostgreSQLParser.RULE_cluster_index_specification);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7881;
			this.match(PostgreSQLParser.KW_USING);
			this.state = 7882;
			this.name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vacuumstmt(): VacuumstmtContext {
		let _localctx: VacuumstmtContext = new VacuumstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 860, PostgreSQLParser.RULE_vacuumstmt);
		let _la: number;
		try {
			this.state = 7907;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 643, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7884;
				this.match(PostgreSQLParser.KW_VACUUM);
				this.state = 7886;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FULL) {
					{
					this.state = 7885;
					this.opt_full();
					}
				}

				this.state = 7889;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FREEZE) {
					{
					this.state = 7888;
					this.opt_freeze();
					}
				}

				this.state = 7892;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_VERBOSE) {
					{
					this.state = 7891;
					this.opt_verbose();
					}
				}

				this.state = 7895;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 640, this._ctx) ) {
				case 1:
					{
					this.state = 7894;
					this.opt_analyze();
					}
					break;
				}
				this.state = 7898;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 641, this._ctx) ) {
				case 1:
					{
					this.state = 7897;
					this.opt_vacuum_relation_list();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7900;
				this.match(PostgreSQLParser.KW_VACUUM);
				this.state = 7901;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 7902;
				this.vac_analyze_option_list();
				this.state = 7903;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 7905;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 642, this._ctx) ) {
				case 1:
					{
					this.state = 7904;
					this.opt_vacuum_relation_list();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analyzestmt(): AnalyzestmtContext {
		let _localctx: AnalyzestmtContext = new AnalyzestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 862, PostgreSQLParser.RULE_analyzestmt);
		let _la: number;
		try {
			this.state = 7923;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 647, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7909;
				this.analyze_keyword();
				this.state = 7911;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_VERBOSE) {
					{
					this.state = 7910;
					this.opt_verbose();
					}
				}

				this.state = 7914;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 645, this._ctx) ) {
				case 1:
					{
					this.state = 7913;
					this.opt_vacuum_relation_list();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7916;
				this.analyze_keyword();
				this.state = 7917;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 7918;
				this.vac_analyze_option_list();
				this.state = 7919;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 7921;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 646, this._ctx) ) {
				case 1:
					{
					this.state = 7920;
					this.opt_vacuum_relation_list();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vac_analyze_option_list(): Vac_analyze_option_listContext {
		let _localctx: Vac_analyze_option_listContext = new Vac_analyze_option_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 864, PostgreSQLParser.RULE_vac_analyze_option_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7925;
			this.vac_analyze_option_elem();
			this.state = 7930;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 7926;
				this.match(PostgreSQLParser.COMMA);
				this.state = 7927;
				this.vac_analyze_option_elem();
				}
				}
				this.state = 7932;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public analyze_keyword(): Analyze_keywordContext {
		let _localctx: Analyze_keywordContext = new Analyze_keywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 866, PostgreSQLParser.RULE_analyze_keyword);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7933;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_ANALYSE || _la === PostgreSQLParser.KW_ANALYZE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vac_analyze_option_elem(): Vac_analyze_option_elemContext {
		let _localctx: Vac_analyze_option_elemContext = new Vac_analyze_option_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 868, PostgreSQLParser.RULE_vac_analyze_option_elem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7935;
			this.vac_analyze_option_name();
			this.state = 7937;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.PLUS || _la === PostgreSQLParser.MINUS || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FALSE - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 80)) & ~0x1F) === 0 && ((1 << (_la - 80)) & ((1 << (PostgreSQLParser.KW_ON - 80)) | (1 << (PostgreSQLParser.KW_TABLE - 80)) | (1 << (PostgreSQLParser.KW_TRUE - 80)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 80)) | (1 << (PostgreSQLParser.KW_BINARY - 80)) | (1 << (PostgreSQLParser.KW_COLLATION - 80)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 80)) | (1 << (PostgreSQLParser.KW_CROSS - 80)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 80)))) !== 0) || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & ((1 << (PostgreSQLParser.KW_FREEZE - 112)) | (1 << (PostgreSQLParser.KW_FULL - 112)) | (1 << (PostgreSQLParser.KW_ILIKE - 112)) | (1 << (PostgreSQLParser.KW_INNER - 112)) | (1 << (PostgreSQLParser.KW_IS - 112)) | (1 << (PostgreSQLParser.KW_ISNULL - 112)) | (1 << (PostgreSQLParser.KW_JOIN - 112)) | (1 << (PostgreSQLParser.KW_LEFT - 112)) | (1 << (PostgreSQLParser.KW_LIKE - 112)) | (1 << (PostgreSQLParser.KW_NATURAL - 112)) | (1 << (PostgreSQLParser.KW_NOTNULL - 112)) | (1 << (PostgreSQLParser.KW_OUTER - 112)) | (1 << (PostgreSQLParser.KW_OVER - 112)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 112)) | (1 << (PostgreSQLParser.KW_RIGHT - 112)) | (1 << (PostgreSQLParser.KW_SIMILAR - 112)) | (1 << (PostgreSQLParser.KW_VERBOSE - 112)) | (1 << (PostgreSQLParser.KW_ABORT - 112)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 112)) | (1 << (PostgreSQLParser.KW_ACCESS - 112)) | (1 << (PostgreSQLParser.KW_ACTION - 112)) | (1 << (PostgreSQLParser.KW_ADD - 112)) | (1 << (PostgreSQLParser.KW_ADMIN - 112)) | (1 << (PostgreSQLParser.KW_AFTER - 112)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 112)) | (1 << (PostgreSQLParser.KW_ALSO - 112)) | (1 << (PostgreSQLParser.KW_ALTER - 112)) | (1 << (PostgreSQLParser.KW_ALWAYS - 112)) | (1 << (PostgreSQLParser.KW_ASSERTION - 112)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 112)) | (1 << (PostgreSQLParser.KW_AT - 112)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 112)))) !== 0) || ((((_la - 144)) & ~0x1F) === 0 && ((1 << (_la - 144)) & ((1 << (PostgreSQLParser.KW_BACKWARD - 144)) | (1 << (PostgreSQLParser.KW_BEFORE - 144)) | (1 << (PostgreSQLParser.KW_BEGIN - 144)) | (1 << (PostgreSQLParser.KW_BY - 144)) | (1 << (PostgreSQLParser.KW_CACHE - 144)) | (1 << (PostgreSQLParser.KW_CALLED - 144)) | (1 << (PostgreSQLParser.KW_CASCADE - 144)) | (1 << (PostgreSQLParser.KW_CASCADED - 144)) | (1 << (PostgreSQLParser.KW_CATALOG - 144)) | (1 << (PostgreSQLParser.KW_CHAIN - 144)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 144)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 144)) | (1 << (PostgreSQLParser.KW_CLASS - 144)) | (1 << (PostgreSQLParser.KW_CLOSE - 144)) | (1 << (PostgreSQLParser.KW_CLUSTER - 144)) | (1 << (PostgreSQLParser.KW_COMMENT - 144)) | (1 << (PostgreSQLParser.KW_COMMENTS - 144)) | (1 << (PostgreSQLParser.KW_COMMIT - 144)) | (1 << (PostgreSQLParser.KW_COMMITTED - 144)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 144)) | (1 << (PostgreSQLParser.KW_CONNECTION - 144)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 144)) | (1 << (PostgreSQLParser.KW_CONTENT - 144)) | (1 << (PostgreSQLParser.KW_CONTINUE - 144)) | (1 << (PostgreSQLParser.KW_CONVERSION - 144)) | (1 << (PostgreSQLParser.KW_COPY - 144)) | (1 << (PostgreSQLParser.KW_COST - 144)) | (1 << (PostgreSQLParser.KW_CSV - 144)) | (1 << (PostgreSQLParser.KW_CURSOR - 144)) | (1 << (PostgreSQLParser.KW_CYCLE - 144)) | (1 << (PostgreSQLParser.KW_DATA - 144)) | (1 << (PostgreSQLParser.KW_DATABASE - 144)))) !== 0) || ((((_la - 176)) & ~0x1F) === 0 && ((1 << (_la - 176)) & ((1 << (PostgreSQLParser.KW_DAY - 176)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 176)) | (1 << (PostgreSQLParser.KW_DECLARE - 176)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 176)) | (1 << (PostgreSQLParser.KW_DEFERRED - 176)) | (1 << (PostgreSQLParser.KW_DEFINER - 176)) | (1 << (PostgreSQLParser.KW_DELETE - 176)) | (1 << (PostgreSQLParser.KW_DELIMITER - 176)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 176)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 176)) | (1 << (PostgreSQLParser.KW_DISABLE - 176)) | (1 << (PostgreSQLParser.KW_DISCARD - 176)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 176)) | (1 << (PostgreSQLParser.KW_DOMAIN - 176)) | (1 << (PostgreSQLParser.KW_DOUBLE - 176)) | (1 << (PostgreSQLParser.KW_DROP - 176)) | (1 << (PostgreSQLParser.KW_EACH - 176)) | (1 << (PostgreSQLParser.KW_ENABLE - 176)) | (1 << (PostgreSQLParser.KW_ENCODING - 176)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 176)) | (1 << (PostgreSQLParser.KW_ENUM - 176)) | (1 << (PostgreSQLParser.KW_ESCAPE - 176)) | (1 << (PostgreSQLParser.KW_EVENT - 176)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 176)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 176)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 176)) | (1 << (PostgreSQLParser.KW_EXECUTE - 176)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 176)) | (1 << (PostgreSQLParser.KW_EXTENSION - 176)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 176)) | (1 << (PostgreSQLParser.KW_FAMILY - 176)) | (1 << (PostgreSQLParser.KW_FIRST - 176)))) !== 0) || ((((_la - 208)) & ~0x1F) === 0 && ((1 << (_la - 208)) & ((1 << (PostgreSQLParser.KW_FOLLOWING - 208)) | (1 << (PostgreSQLParser.KW_FORCE - 208)) | (1 << (PostgreSQLParser.KW_FORWARD - 208)) | (1 << (PostgreSQLParser.KW_FUNCTION - 208)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 208)) | (1 << (PostgreSQLParser.KW_GLOBAL - 208)) | (1 << (PostgreSQLParser.KW_GRANTED - 208)) | (1 << (PostgreSQLParser.KW_HANDLER - 208)) | (1 << (PostgreSQLParser.KW_HEADER - 208)) | (1 << (PostgreSQLParser.KW_HOLD - 208)) | (1 << (PostgreSQLParser.KW_HOUR - 208)) | (1 << (PostgreSQLParser.KW_IDENTITY - 208)) | (1 << (PostgreSQLParser.KW_IF - 208)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 208)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 208)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 208)) | (1 << (PostgreSQLParser.KW_INCLUDING - 208)) | (1 << (PostgreSQLParser.KW_INCREMENT - 208)) | (1 << (PostgreSQLParser.KW_INDEX - 208)) | (1 << (PostgreSQLParser.KW_INDEXES - 208)) | (1 << (PostgreSQLParser.KW_INHERIT - 208)) | (1 << (PostgreSQLParser.KW_INHERITS - 208)) | (1 << (PostgreSQLParser.KW_INLINE - 208)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (PostgreSQLParser.KW_INSENSITIVE - 240)) | (1 << (PostgreSQLParser.KW_INSERT - 240)) | (1 << (PostgreSQLParser.KW_INSTEAD - 240)) | (1 << (PostgreSQLParser.KW_INVOKER - 240)) | (1 << (PostgreSQLParser.KW_ISOLATION - 240)) | (1 << (PostgreSQLParser.KW_KEY - 240)) | (1 << (PostgreSQLParser.KW_LABEL - 240)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 240)) | (1 << (PostgreSQLParser.KW_LARGE - 240)) | (1 << (PostgreSQLParser.KW_LAST - 240)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 240)) | (1 << (PostgreSQLParser.KW_LEVEL - 240)) | (1 << (PostgreSQLParser.KW_LISTEN - 240)) | (1 << (PostgreSQLParser.KW_LOAD - 240)) | (1 << (PostgreSQLParser.KW_LOCAL - 240)) | (1 << (PostgreSQLParser.KW_LOCATION - 240)) | (1 << (PostgreSQLParser.KW_LOCK - 240)) | (1 << (PostgreSQLParser.KW_MAPPING - 240)) | (1 << (PostgreSQLParser.KW_MATCH - 240)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 240)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 240)) | (1 << (PostgreSQLParser.KW_MINUTE - 240)) | (1 << (PostgreSQLParser.KW_MINVALUE - 240)) | (1 << (PostgreSQLParser.KW_MODE - 240)) | (1 << (PostgreSQLParser.KW_MONTH - 240)) | (1 << (PostgreSQLParser.KW_MOVE - 240)) | (1 << (PostgreSQLParser.KW_NAME - 240)) | (1 << (PostgreSQLParser.KW_NAMES - 240)) | (1 << (PostgreSQLParser.KW_NEXT - 240)) | (1 << (PostgreSQLParser.KW_NO - 240)) | (1 << (PostgreSQLParser.KW_NOTHING - 240)) | (1 << (PostgreSQLParser.KW_NOTIFY - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (PostgreSQLParser.KW_NOWAIT - 272)) | (1 << (PostgreSQLParser.KW_NULLS - 272)) | (1 << (PostgreSQLParser.KW_OBJECT - 272)) | (1 << (PostgreSQLParser.KW_OF - 272)) | (1 << (PostgreSQLParser.KW_OFF - 272)) | (1 << (PostgreSQLParser.KW_OIDS - 272)) | (1 << (PostgreSQLParser.KW_OPERATOR - 272)) | (1 << (PostgreSQLParser.KW_OPTION - 272)) | (1 << (PostgreSQLParser.KW_OPTIONS - 272)) | (1 << (PostgreSQLParser.KW_OWNED - 272)) | (1 << (PostgreSQLParser.KW_OWNER - 272)) | (1 << (PostgreSQLParser.KW_PARSER - 272)) | (1 << (PostgreSQLParser.KW_PARTIAL - 272)) | (1 << (PostgreSQLParser.KW_PARTITION - 272)) | (1 << (PostgreSQLParser.KW_PASSING - 272)) | (1 << (PostgreSQLParser.KW_PASSWORD - 272)) | (1 << (PostgreSQLParser.KW_PLANS - 272)) | (1 << (PostgreSQLParser.KW_PRECEDING - 272)) | (1 << (PostgreSQLParser.KW_PREPARE - 272)) | (1 << (PostgreSQLParser.KW_PREPARED - 272)) | (1 << (PostgreSQLParser.KW_PRESERVE - 272)) | (1 << (PostgreSQLParser.KW_PRIOR - 272)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 272)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 272)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 272)) | (1 << (PostgreSQLParser.KW_PROGRAM - 272)) | (1 << (PostgreSQLParser.KW_QUOTE - 272)) | (1 << (PostgreSQLParser.KW_RANGE - 272)) | (1 << (PostgreSQLParser.KW_READ - 272)) | (1 << (PostgreSQLParser.KW_REASSIGN - 272)) | (1 << (PostgreSQLParser.KW_RECHECK - 272)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (PostgreSQLParser.KW_REF - 304)) | (1 << (PostgreSQLParser.KW_REFRESH - 304)) | (1 << (PostgreSQLParser.KW_REINDEX - 304)) | (1 << (PostgreSQLParser.KW_RELATIVE - 304)) | (1 << (PostgreSQLParser.KW_RELEASE - 304)) | (1 << (PostgreSQLParser.KW_RENAME - 304)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 304)) | (1 << (PostgreSQLParser.KW_REPLACE - 304)) | (1 << (PostgreSQLParser.KW_REPLICA - 304)) | (1 << (PostgreSQLParser.KW_RESET - 304)) | (1 << (PostgreSQLParser.KW_RESTART - 304)) | (1 << (PostgreSQLParser.KW_RESTRICT - 304)) | (1 << (PostgreSQLParser.KW_RETURNS - 304)) | (1 << (PostgreSQLParser.KW_REVOKE - 304)) | (1 << (PostgreSQLParser.KW_ROLE - 304)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 304)) | (1 << (PostgreSQLParser.KW_ROWS - 304)) | (1 << (PostgreSQLParser.KW_RULE - 304)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 304)) | (1 << (PostgreSQLParser.KW_SCHEMA - 304)) | (1 << (PostgreSQLParser.KW_SCROLL - 304)) | (1 << (PostgreSQLParser.KW_SEARCH - 304)) | (1 << (PostgreSQLParser.KW_SECOND - 304)) | (1 << (PostgreSQLParser.KW_SECURITY - 304)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 304)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 304)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 304)) | (1 << (PostgreSQLParser.KW_SERVER - 304)) | (1 << (PostgreSQLParser.KW_SESSION - 304)) | (1 << (PostgreSQLParser.KW_SET - 304)) | (1 << (PostgreSQLParser.KW_SHARE - 304)) | (1 << (PostgreSQLParser.KW_SHOW - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (PostgreSQLParser.KW_SIMPLE - 336)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 336)) | (1 << (PostgreSQLParser.KW_STABLE - 336)) | (1 << (PostgreSQLParser.KW_STANDALONE - 336)) | (1 << (PostgreSQLParser.KW_START - 336)) | (1 << (PostgreSQLParser.KW_STATEMENT - 336)) | (1 << (PostgreSQLParser.KW_STATISTICS - 336)) | (1 << (PostgreSQLParser.KW_STDIN - 336)) | (1 << (PostgreSQLParser.KW_STDOUT - 336)) | (1 << (PostgreSQLParser.KW_STORAGE - 336)) | (1 << (PostgreSQLParser.KW_STRICT - 336)) | (1 << (PostgreSQLParser.KW_STRIP - 336)) | (1 << (PostgreSQLParser.KW_SYSID - 336)) | (1 << (PostgreSQLParser.KW_SYSTEM - 336)) | (1 << (PostgreSQLParser.KW_TABLES - 336)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 336)) | (1 << (PostgreSQLParser.KW_TEMP - 336)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 336)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 336)) | (1 << (PostgreSQLParser.KW_TEXT - 336)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 336)) | (1 << (PostgreSQLParser.KW_TRIGGER - 336)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 336)) | (1 << (PostgreSQLParser.KW_TRUSTED - 336)) | (1 << (PostgreSQLParser.KW_TYPE - 336)) | (1 << (PostgreSQLParser.KW_TYPES - 336)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 336)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 336)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 336)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 336)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 336)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (PostgreSQLParser.KW_UNTIL - 368)) | (1 << (PostgreSQLParser.KW_UPDATE - 368)) | (1 << (PostgreSQLParser.KW_VACUUM - 368)) | (1 << (PostgreSQLParser.KW_VALID - 368)) | (1 << (PostgreSQLParser.KW_VALIDATE - 368)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 368)) | (1 << (PostgreSQLParser.KW_VARYING - 368)) | (1 << (PostgreSQLParser.KW_VERSION - 368)) | (1 << (PostgreSQLParser.KW_VIEW - 368)) | (1 << (PostgreSQLParser.KW_VOLATILE - 368)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 368)) | (1 << (PostgreSQLParser.KW_WITHOUT - 368)) | (1 << (PostgreSQLParser.KW_WORK - 368)) | (1 << (PostgreSQLParser.KW_WRAPPER - 368)) | (1 << (PostgreSQLParser.KW_WRITE - 368)) | (1 << (PostgreSQLParser.KW_XML - 368)) | (1 << (PostgreSQLParser.KW_YEAR - 368)) | (1 << (PostgreSQLParser.KW_YES - 368)) | (1 << (PostgreSQLParser.KW_ZONE - 368)) | (1 << (PostgreSQLParser.KW_BETWEEN - 368)) | (1 << (PostgreSQLParser.KW_BIGINT - 368)) | (1 << (PostgreSQLParser.KW_BIT - 368)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 368)) | (1 << (PostgreSQLParser.KW_CHAR - 368)) | (1 << (PostgreSQLParser.KW_CHARACTER - 368)) | (1 << (PostgreSQLParser.KW_COALESCE - 368)) | (1 << (PostgreSQLParser.KW_DEC - 368)) | (1 << (PostgreSQLParser.KW_DECIMAL - 368)) | (1 << (PostgreSQLParser.KW_EXISTS - 368)) | (1 << (PostgreSQLParser.KW_EXTRACT - 368)) | (1 << (PostgreSQLParser.KW_FLOAT - 368)) | (1 << (PostgreSQLParser.KW_GREATEST - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (PostgreSQLParser.KW_INOUT - 400)) | (1 << (PostgreSQLParser.KW_INT - 400)) | (1 << (PostgreSQLParser.KW_INTEGER - 400)) | (1 << (PostgreSQLParser.KW_INTERVAL - 400)) | (1 << (PostgreSQLParser.KW_LEAST - 400)) | (1 << (PostgreSQLParser.KW_NATIONAL - 400)) | (1 << (PostgreSQLParser.KW_NCHAR - 400)) | (1 << (PostgreSQLParser.KW_NONE - 400)) | (1 << (PostgreSQLParser.KW_NULLIF - 400)) | (1 << (PostgreSQLParser.KW_NUMERIC - 400)) | (1 << (PostgreSQLParser.KW_OVERLAY - 400)) | (1 << (PostgreSQLParser.KW_POSITION - 400)) | (1 << (PostgreSQLParser.KW_PRECISION - 400)) | (1 << (PostgreSQLParser.KW_REAL - 400)) | (1 << (PostgreSQLParser.KW_ROW - 400)) | (1 << (PostgreSQLParser.KW_SETOF - 400)) | (1 << (PostgreSQLParser.KW_SMALLINT - 400)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 400)) | (1 << (PostgreSQLParser.KW_TIME - 400)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 400)) | (1 << (PostgreSQLParser.KW_TREAT - 400)) | (1 << (PostgreSQLParser.KW_TRIM - 400)) | (1 << (PostgreSQLParser.KW_VALUES - 400)) | (1 << (PostgreSQLParser.KW_VARCHAR - 400)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 400)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 400)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 400)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 400)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 400)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 400)) | (1 << (PostgreSQLParser.KW_XMLPI - 400)) | (1 << (PostgreSQLParser.KW_XMLROOT - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (PostgreSQLParser.KW_XMLSERIALIZE - 432)) | (1 << (PostgreSQLParser.KW_CALL - 432)) | (1 << (PostgreSQLParser.KW_CURRENT - 432)) | (1 << (PostgreSQLParser.KW_ATTACH - 432)) | (1 << (PostgreSQLParser.KW_DETACH - 432)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 432)) | (1 << (PostgreSQLParser.KW_GENERATED - 432)) | (1 << (PostgreSQLParser.KW_LOGGED - 432)) | (1 << (PostgreSQLParser.KW_STORED - 432)) | (1 << (PostgreSQLParser.KW_INCLUDE - 432)) | (1 << (PostgreSQLParser.KW_ROUTINE - 432)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 432)) | (1 << (PostgreSQLParser.KW_IMPORT - 432)) | (1 << (PostgreSQLParser.KW_POLICY - 432)) | (1 << (PostgreSQLParser.KW_METHOD - 432)) | (1 << (PostgreSQLParser.KW_REFERENCING - 432)) | (1 << (PostgreSQLParser.KW_NEW - 432)) | (1 << (PostgreSQLParser.KW_OLD - 432)) | (1 << (PostgreSQLParser.KW_VALUE - 432)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 432)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 432)) | (1 << (PostgreSQLParser.KW_OUT - 432)) | (1 << (PostgreSQLParser.KW_ROUTINES - 432)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 432)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 432)) | (1 << (PostgreSQLParser.KW_INPUT - 432)) | (1 << (PostgreSQLParser.KW_SUPPORT - 432)) | (1 << (PostgreSQLParser.KW_PARALLEL - 432)) | (1 << (PostgreSQLParser.KW_SQL - 432)) | (1 << (PostgreSQLParser.KW_DEPENDS - 432)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (PostgreSQLParser.KW_CONFLICT - 464)) | (1 << (PostgreSQLParser.KW_SKIP - 464)) | (1 << (PostgreSQLParser.KW_LOCKED - 464)) | (1 << (PostgreSQLParser.KW_TIES - 464)) | (1 << (PostgreSQLParser.KW_ROLLUP - 464)) | (1 << (PostgreSQLParser.KW_CUBE - 464)) | (1 << (PostgreSQLParser.KW_GROUPING - 464)) | (1 << (PostgreSQLParser.KW_SETS - 464)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 464)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 464)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 464)) | (1 << (PostgreSQLParser.KW_COLUMNS - 464)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 464)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 464)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 464)) | (1 << (PostgreSQLParser.KW_WITHIN - 464)) | (1 << (PostgreSQLParser.KW_FILTER - 464)) | (1 << (PostgreSQLParser.KW_GROUPS - 464)) | (1 << (PostgreSQLParser.KW_OTHERS - 464)) | (1 << (PostgreSQLParser.KW_NFC - 464)) | (1 << (PostgreSQLParser.KW_NFD - 464)) | (1 << (PostgreSQLParser.KW_NFKC - 464)) | (1 << (PostgreSQLParser.KW_NFKD - 464)) | (1 << (PostgreSQLParser.KW_UESCAPE - 464)) | (1 << (PostgreSQLParser.KW_VIEWS - 464)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 464)) | (1 << (PostgreSQLParser.KW_DUMP - 464)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 464)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 464)) | (1 << (PostgreSQLParser.KW_ERROR - 464)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 464)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (PostgreSQLParser.KW_ALIAS - 496)) | (1 << (PostgreSQLParser.KW_CONSTANT - 496)) | (1 << (PostgreSQLParser.KW_PERFORM - 496)) | (1 << (PostgreSQLParser.KW_GET - 496)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 496)) | (1 << (PostgreSQLParser.KW_STACKED - 496)) | (1 << (PostgreSQLParser.KW_ELSIF - 496)) | (1 << (PostgreSQLParser.KW_REVERSE - 496)) | (1 << (PostgreSQLParser.KW_SLICE - 496)) | (1 << (PostgreSQLParser.KW_EXIT - 496)) | (1 << (PostgreSQLParser.KW_RETURN - 496)) | (1 << (PostgreSQLParser.KW_QUERY - 496)) | (1 << (PostgreSQLParser.KW_RAISE - 496)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 496)) | (1 << (PostgreSQLParser.KW_DEBUG - 496)) | (1 << (PostgreSQLParser.KW_LOG - 496)) | (1 << (PostgreSQLParser.KW_INFO - 496)) | (1 << (PostgreSQLParser.KW_NOTICE - 496)) | (1 << (PostgreSQLParser.KW_WARNING - 496)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 496)) | (1 << (PostgreSQLParser.KW_ASSERT - 496)) | (1 << (PostgreSQLParser.KW_OPEN - 496)) | (1 << (PostgreSQLParser.Identifier - 496)) | (1 << (PostgreSQLParser.QuotedIdentifier - 496)))) !== 0) || ((((_la - 530)) & ~0x1F) === 0 && ((1 << (_la - 530)) & ((1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 530)) | (1 << (PostgreSQLParser.StringConstant - 530)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 530)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 530)) | (1 << (PostgreSQLParser.Integral - 530)) | (1 << (PostgreSQLParser.Numeric - 530)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 530)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 530)) | (1 << (PostgreSQLParser.EscapeStringConstant - 530)))) !== 0)) {
				{
				this.state = 7936;
				this.vac_analyze_option_arg();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vac_analyze_option_name(): Vac_analyze_option_nameContext {
		let _localctx: Vac_analyze_option_nameContext = new Vac_analyze_option_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 870, PostgreSQLParser.RULE_vac_analyze_option_name);
		try {
			this.state = 7941;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7939;
				this.nonreservedword();
				}
				break;
			case PostgreSQLParser.KW_ANALYSE:
			case PostgreSQLParser.KW_ANALYZE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7940;
				this.analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vac_analyze_option_arg(): Vac_analyze_option_argContext {
		let _localctx: Vac_analyze_option_argContext = new Vac_analyze_option_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 872, PostgreSQLParser.RULE_vac_analyze_option_arg);
		try {
			this.state = 7945;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_ON:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7943;
				this.opt_boolean_or_string();
				}
				break;
			case PostgreSQLParser.PLUS:
			case PostgreSQLParser.MINUS:
			case PostgreSQLParser.Integral:
			case PostgreSQLParser.Numeric:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7944;
				this.numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_analyze(): Opt_analyzeContext {
		let _localctx: Opt_analyzeContext = new Opt_analyzeContext(this._ctx, this.state);
		this.enterRule(_localctx, 874, PostgreSQLParser.RULE_opt_analyze);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7947;
			this.analyze_keyword();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_verbose(): Opt_verboseContext {
		let _localctx: Opt_verboseContext = new Opt_verboseContext(this._ctx, this.state);
		this.enterRule(_localctx, 876, PostgreSQLParser.RULE_opt_verbose);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7949;
			this.match(PostgreSQLParser.KW_VERBOSE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_full(): Opt_fullContext {
		let _localctx: Opt_fullContext = new Opt_fullContext(this._ctx, this.state);
		this.enterRule(_localctx, 878, PostgreSQLParser.RULE_opt_full);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7951;
			this.match(PostgreSQLParser.KW_FULL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_freeze(): Opt_freezeContext {
		let _localctx: Opt_freezeContext = new Opt_freezeContext(this._ctx, this.state);
		this.enterRule(_localctx, 880, PostgreSQLParser.RULE_opt_freeze);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7953;
			this.match(PostgreSQLParser.KW_FREEZE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_name_list(): Opt_name_listContext {
		let _localctx: Opt_name_listContext = new Opt_name_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 882, PostgreSQLParser.RULE_opt_name_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7955;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 7956;
			this.name_list();
			this.state = 7957;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vacuum_relation(): Vacuum_relationContext {
		let _localctx: Vacuum_relationContext = new Vacuum_relationContext(this._ctx, this.state);
		this.enterRule(_localctx, 884, PostgreSQLParser.RULE_vacuum_relation);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7959;
			this.qualified_name();
			this.state = 7961;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 652, this._ctx) ) {
			case 1:
				{
				this.state = 7960;
				this.opt_name_list();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public vacuum_relation_list(): Vacuum_relation_listContext {
		let _localctx: Vacuum_relation_listContext = new Vacuum_relation_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 886, PostgreSQLParser.RULE_vacuum_relation_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7963;
			this.vacuum_relation();
			this.state = 7968;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 7964;
				this.match(PostgreSQLParser.COMMA);
				this.state = 7965;
				this.vacuum_relation();
				}
				}
				this.state = 7970;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_vacuum_relation_list(): Opt_vacuum_relation_listContext {
		let _localctx: Opt_vacuum_relation_listContext = new Opt_vacuum_relation_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 888, PostgreSQLParser.RULE_opt_vacuum_relation_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 7971;
			this.vacuum_relation_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explainstmt(): ExplainstmtContext {
		let _localctx: ExplainstmtContext = new ExplainstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 890, PostgreSQLParser.RULE_explainstmt);
		let _la: number;
		try {
			this.state = 7991;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 655, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7973;
				this.match(PostgreSQLParser.KW_EXPLAIN);
				this.state = 7974;
				this.explainablestmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7975;
				this.match(PostgreSQLParser.KW_EXPLAIN);
				this.state = 7976;
				this.analyze_keyword();
				this.state = 7978;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_VERBOSE) {
					{
					this.state = 7977;
					this.opt_verbose();
					}
				}

				this.state = 7980;
				this.explainablestmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7982;
				this.match(PostgreSQLParser.KW_EXPLAIN);
				this.state = 7983;
				this.match(PostgreSQLParser.KW_VERBOSE);
				this.state = 7984;
				this.explainablestmt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7985;
				this.match(PostgreSQLParser.KW_EXPLAIN);
				this.state = 7986;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 7987;
				this.explain_option_list();
				this.state = 7988;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 7989;
				this.explainablestmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explainablestmt(): ExplainablestmtContext {
		let _localctx: ExplainablestmtContext = new ExplainablestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 892, PostgreSQLParser.RULE_explainablestmt);
		try {
			this.state = 8002;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 656, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 7993;
				this.selectstmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 7994;
				this.insertstmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 7995;
				this.updatestmt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 7996;
				this.deletestmt();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 7997;
				this.declarecursorstmt();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 7998;
				this.createasstmt();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 7999;
				this.creatematviewstmt();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 8000;
				this.refreshmatviewstmt();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 8001;
				this.executestmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explain_option_list(): Explain_option_listContext {
		let _localctx: Explain_option_listContext = new Explain_option_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 894, PostgreSQLParser.RULE_explain_option_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8004;
			this.explain_option_elem();
			this.state = 8009;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8005;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8006;
				this.explain_option_elem();
				}
				}
				this.state = 8011;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explain_option_elem(): Explain_option_elemContext {
		let _localctx: Explain_option_elemContext = new Explain_option_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 896, PostgreSQLParser.RULE_explain_option_elem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8012;
			this.explain_option_name();
			this.state = 8014;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.PLUS || _la === PostgreSQLParser.MINUS || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FALSE - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 80)) & ~0x1F) === 0 && ((1 << (_la - 80)) & ((1 << (PostgreSQLParser.KW_ON - 80)) | (1 << (PostgreSQLParser.KW_TABLE - 80)) | (1 << (PostgreSQLParser.KW_TRUE - 80)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 80)) | (1 << (PostgreSQLParser.KW_BINARY - 80)) | (1 << (PostgreSQLParser.KW_COLLATION - 80)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 80)) | (1 << (PostgreSQLParser.KW_CROSS - 80)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 80)))) !== 0) || ((((_la - 112)) & ~0x1F) === 0 && ((1 << (_la - 112)) & ((1 << (PostgreSQLParser.KW_FREEZE - 112)) | (1 << (PostgreSQLParser.KW_FULL - 112)) | (1 << (PostgreSQLParser.KW_ILIKE - 112)) | (1 << (PostgreSQLParser.KW_INNER - 112)) | (1 << (PostgreSQLParser.KW_IS - 112)) | (1 << (PostgreSQLParser.KW_ISNULL - 112)) | (1 << (PostgreSQLParser.KW_JOIN - 112)) | (1 << (PostgreSQLParser.KW_LEFT - 112)) | (1 << (PostgreSQLParser.KW_LIKE - 112)) | (1 << (PostgreSQLParser.KW_NATURAL - 112)) | (1 << (PostgreSQLParser.KW_NOTNULL - 112)) | (1 << (PostgreSQLParser.KW_OUTER - 112)) | (1 << (PostgreSQLParser.KW_OVER - 112)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 112)) | (1 << (PostgreSQLParser.KW_RIGHT - 112)) | (1 << (PostgreSQLParser.KW_SIMILAR - 112)) | (1 << (PostgreSQLParser.KW_VERBOSE - 112)) | (1 << (PostgreSQLParser.KW_ABORT - 112)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 112)) | (1 << (PostgreSQLParser.KW_ACCESS - 112)) | (1 << (PostgreSQLParser.KW_ACTION - 112)) | (1 << (PostgreSQLParser.KW_ADD - 112)) | (1 << (PostgreSQLParser.KW_ADMIN - 112)) | (1 << (PostgreSQLParser.KW_AFTER - 112)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 112)) | (1 << (PostgreSQLParser.KW_ALSO - 112)) | (1 << (PostgreSQLParser.KW_ALTER - 112)) | (1 << (PostgreSQLParser.KW_ALWAYS - 112)) | (1 << (PostgreSQLParser.KW_ASSERTION - 112)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 112)) | (1 << (PostgreSQLParser.KW_AT - 112)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 112)))) !== 0) || ((((_la - 144)) & ~0x1F) === 0 && ((1 << (_la - 144)) & ((1 << (PostgreSQLParser.KW_BACKWARD - 144)) | (1 << (PostgreSQLParser.KW_BEFORE - 144)) | (1 << (PostgreSQLParser.KW_BEGIN - 144)) | (1 << (PostgreSQLParser.KW_BY - 144)) | (1 << (PostgreSQLParser.KW_CACHE - 144)) | (1 << (PostgreSQLParser.KW_CALLED - 144)) | (1 << (PostgreSQLParser.KW_CASCADE - 144)) | (1 << (PostgreSQLParser.KW_CASCADED - 144)) | (1 << (PostgreSQLParser.KW_CATALOG - 144)) | (1 << (PostgreSQLParser.KW_CHAIN - 144)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 144)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 144)) | (1 << (PostgreSQLParser.KW_CLASS - 144)) | (1 << (PostgreSQLParser.KW_CLOSE - 144)) | (1 << (PostgreSQLParser.KW_CLUSTER - 144)) | (1 << (PostgreSQLParser.KW_COMMENT - 144)) | (1 << (PostgreSQLParser.KW_COMMENTS - 144)) | (1 << (PostgreSQLParser.KW_COMMIT - 144)) | (1 << (PostgreSQLParser.KW_COMMITTED - 144)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 144)) | (1 << (PostgreSQLParser.KW_CONNECTION - 144)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 144)) | (1 << (PostgreSQLParser.KW_CONTENT - 144)) | (1 << (PostgreSQLParser.KW_CONTINUE - 144)) | (1 << (PostgreSQLParser.KW_CONVERSION - 144)) | (1 << (PostgreSQLParser.KW_COPY - 144)) | (1 << (PostgreSQLParser.KW_COST - 144)) | (1 << (PostgreSQLParser.KW_CSV - 144)) | (1 << (PostgreSQLParser.KW_CURSOR - 144)) | (1 << (PostgreSQLParser.KW_CYCLE - 144)) | (1 << (PostgreSQLParser.KW_DATA - 144)) | (1 << (PostgreSQLParser.KW_DATABASE - 144)))) !== 0) || ((((_la - 176)) & ~0x1F) === 0 && ((1 << (_la - 176)) & ((1 << (PostgreSQLParser.KW_DAY - 176)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 176)) | (1 << (PostgreSQLParser.KW_DECLARE - 176)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 176)) | (1 << (PostgreSQLParser.KW_DEFERRED - 176)) | (1 << (PostgreSQLParser.KW_DEFINER - 176)) | (1 << (PostgreSQLParser.KW_DELETE - 176)) | (1 << (PostgreSQLParser.KW_DELIMITER - 176)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 176)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 176)) | (1 << (PostgreSQLParser.KW_DISABLE - 176)) | (1 << (PostgreSQLParser.KW_DISCARD - 176)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 176)) | (1 << (PostgreSQLParser.KW_DOMAIN - 176)) | (1 << (PostgreSQLParser.KW_DOUBLE - 176)) | (1 << (PostgreSQLParser.KW_DROP - 176)) | (1 << (PostgreSQLParser.KW_EACH - 176)) | (1 << (PostgreSQLParser.KW_ENABLE - 176)) | (1 << (PostgreSQLParser.KW_ENCODING - 176)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 176)) | (1 << (PostgreSQLParser.KW_ENUM - 176)) | (1 << (PostgreSQLParser.KW_ESCAPE - 176)) | (1 << (PostgreSQLParser.KW_EVENT - 176)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 176)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 176)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 176)) | (1 << (PostgreSQLParser.KW_EXECUTE - 176)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 176)) | (1 << (PostgreSQLParser.KW_EXTENSION - 176)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 176)) | (1 << (PostgreSQLParser.KW_FAMILY - 176)) | (1 << (PostgreSQLParser.KW_FIRST - 176)))) !== 0) || ((((_la - 208)) & ~0x1F) === 0 && ((1 << (_la - 208)) & ((1 << (PostgreSQLParser.KW_FOLLOWING - 208)) | (1 << (PostgreSQLParser.KW_FORCE - 208)) | (1 << (PostgreSQLParser.KW_FORWARD - 208)) | (1 << (PostgreSQLParser.KW_FUNCTION - 208)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 208)) | (1 << (PostgreSQLParser.KW_GLOBAL - 208)) | (1 << (PostgreSQLParser.KW_GRANTED - 208)) | (1 << (PostgreSQLParser.KW_HANDLER - 208)) | (1 << (PostgreSQLParser.KW_HEADER - 208)) | (1 << (PostgreSQLParser.KW_HOLD - 208)) | (1 << (PostgreSQLParser.KW_HOUR - 208)) | (1 << (PostgreSQLParser.KW_IDENTITY - 208)) | (1 << (PostgreSQLParser.KW_IF - 208)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 208)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 208)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 208)) | (1 << (PostgreSQLParser.KW_INCLUDING - 208)) | (1 << (PostgreSQLParser.KW_INCREMENT - 208)) | (1 << (PostgreSQLParser.KW_INDEX - 208)) | (1 << (PostgreSQLParser.KW_INDEXES - 208)) | (1 << (PostgreSQLParser.KW_INHERIT - 208)) | (1 << (PostgreSQLParser.KW_INHERITS - 208)) | (1 << (PostgreSQLParser.KW_INLINE - 208)))) !== 0) || ((((_la - 240)) & ~0x1F) === 0 && ((1 << (_la - 240)) & ((1 << (PostgreSQLParser.KW_INSENSITIVE - 240)) | (1 << (PostgreSQLParser.KW_INSERT - 240)) | (1 << (PostgreSQLParser.KW_INSTEAD - 240)) | (1 << (PostgreSQLParser.KW_INVOKER - 240)) | (1 << (PostgreSQLParser.KW_ISOLATION - 240)) | (1 << (PostgreSQLParser.KW_KEY - 240)) | (1 << (PostgreSQLParser.KW_LABEL - 240)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 240)) | (1 << (PostgreSQLParser.KW_LARGE - 240)) | (1 << (PostgreSQLParser.KW_LAST - 240)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 240)) | (1 << (PostgreSQLParser.KW_LEVEL - 240)) | (1 << (PostgreSQLParser.KW_LISTEN - 240)) | (1 << (PostgreSQLParser.KW_LOAD - 240)) | (1 << (PostgreSQLParser.KW_LOCAL - 240)) | (1 << (PostgreSQLParser.KW_LOCATION - 240)) | (1 << (PostgreSQLParser.KW_LOCK - 240)) | (1 << (PostgreSQLParser.KW_MAPPING - 240)) | (1 << (PostgreSQLParser.KW_MATCH - 240)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 240)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 240)) | (1 << (PostgreSQLParser.KW_MINUTE - 240)) | (1 << (PostgreSQLParser.KW_MINVALUE - 240)) | (1 << (PostgreSQLParser.KW_MODE - 240)) | (1 << (PostgreSQLParser.KW_MONTH - 240)) | (1 << (PostgreSQLParser.KW_MOVE - 240)) | (1 << (PostgreSQLParser.KW_NAME - 240)) | (1 << (PostgreSQLParser.KW_NAMES - 240)) | (1 << (PostgreSQLParser.KW_NEXT - 240)) | (1 << (PostgreSQLParser.KW_NO - 240)) | (1 << (PostgreSQLParser.KW_NOTHING - 240)) | (1 << (PostgreSQLParser.KW_NOTIFY - 240)))) !== 0) || ((((_la - 272)) & ~0x1F) === 0 && ((1 << (_la - 272)) & ((1 << (PostgreSQLParser.KW_NOWAIT - 272)) | (1 << (PostgreSQLParser.KW_NULLS - 272)) | (1 << (PostgreSQLParser.KW_OBJECT - 272)) | (1 << (PostgreSQLParser.KW_OF - 272)) | (1 << (PostgreSQLParser.KW_OFF - 272)) | (1 << (PostgreSQLParser.KW_OIDS - 272)) | (1 << (PostgreSQLParser.KW_OPERATOR - 272)) | (1 << (PostgreSQLParser.KW_OPTION - 272)) | (1 << (PostgreSQLParser.KW_OPTIONS - 272)) | (1 << (PostgreSQLParser.KW_OWNED - 272)) | (1 << (PostgreSQLParser.KW_OWNER - 272)) | (1 << (PostgreSQLParser.KW_PARSER - 272)) | (1 << (PostgreSQLParser.KW_PARTIAL - 272)) | (1 << (PostgreSQLParser.KW_PARTITION - 272)) | (1 << (PostgreSQLParser.KW_PASSING - 272)) | (1 << (PostgreSQLParser.KW_PASSWORD - 272)) | (1 << (PostgreSQLParser.KW_PLANS - 272)) | (1 << (PostgreSQLParser.KW_PRECEDING - 272)) | (1 << (PostgreSQLParser.KW_PREPARE - 272)) | (1 << (PostgreSQLParser.KW_PREPARED - 272)) | (1 << (PostgreSQLParser.KW_PRESERVE - 272)) | (1 << (PostgreSQLParser.KW_PRIOR - 272)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 272)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 272)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 272)) | (1 << (PostgreSQLParser.KW_PROGRAM - 272)) | (1 << (PostgreSQLParser.KW_QUOTE - 272)) | (1 << (PostgreSQLParser.KW_RANGE - 272)) | (1 << (PostgreSQLParser.KW_READ - 272)) | (1 << (PostgreSQLParser.KW_REASSIGN - 272)) | (1 << (PostgreSQLParser.KW_RECHECK - 272)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 272)))) !== 0) || ((((_la - 304)) & ~0x1F) === 0 && ((1 << (_la - 304)) & ((1 << (PostgreSQLParser.KW_REF - 304)) | (1 << (PostgreSQLParser.KW_REFRESH - 304)) | (1 << (PostgreSQLParser.KW_REINDEX - 304)) | (1 << (PostgreSQLParser.KW_RELATIVE - 304)) | (1 << (PostgreSQLParser.KW_RELEASE - 304)) | (1 << (PostgreSQLParser.KW_RENAME - 304)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 304)) | (1 << (PostgreSQLParser.KW_REPLACE - 304)) | (1 << (PostgreSQLParser.KW_REPLICA - 304)) | (1 << (PostgreSQLParser.KW_RESET - 304)) | (1 << (PostgreSQLParser.KW_RESTART - 304)) | (1 << (PostgreSQLParser.KW_RESTRICT - 304)) | (1 << (PostgreSQLParser.KW_RETURNS - 304)) | (1 << (PostgreSQLParser.KW_REVOKE - 304)) | (1 << (PostgreSQLParser.KW_ROLE - 304)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 304)) | (1 << (PostgreSQLParser.KW_ROWS - 304)) | (1 << (PostgreSQLParser.KW_RULE - 304)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 304)) | (1 << (PostgreSQLParser.KW_SCHEMA - 304)) | (1 << (PostgreSQLParser.KW_SCROLL - 304)) | (1 << (PostgreSQLParser.KW_SEARCH - 304)) | (1 << (PostgreSQLParser.KW_SECOND - 304)) | (1 << (PostgreSQLParser.KW_SECURITY - 304)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 304)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 304)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 304)) | (1 << (PostgreSQLParser.KW_SERVER - 304)) | (1 << (PostgreSQLParser.KW_SESSION - 304)) | (1 << (PostgreSQLParser.KW_SET - 304)) | (1 << (PostgreSQLParser.KW_SHARE - 304)) | (1 << (PostgreSQLParser.KW_SHOW - 304)))) !== 0) || ((((_la - 336)) & ~0x1F) === 0 && ((1 << (_la - 336)) & ((1 << (PostgreSQLParser.KW_SIMPLE - 336)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 336)) | (1 << (PostgreSQLParser.KW_STABLE - 336)) | (1 << (PostgreSQLParser.KW_STANDALONE - 336)) | (1 << (PostgreSQLParser.KW_START - 336)) | (1 << (PostgreSQLParser.KW_STATEMENT - 336)) | (1 << (PostgreSQLParser.KW_STATISTICS - 336)) | (1 << (PostgreSQLParser.KW_STDIN - 336)) | (1 << (PostgreSQLParser.KW_STDOUT - 336)) | (1 << (PostgreSQLParser.KW_STORAGE - 336)) | (1 << (PostgreSQLParser.KW_STRICT - 336)) | (1 << (PostgreSQLParser.KW_STRIP - 336)) | (1 << (PostgreSQLParser.KW_SYSID - 336)) | (1 << (PostgreSQLParser.KW_SYSTEM - 336)) | (1 << (PostgreSQLParser.KW_TABLES - 336)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 336)) | (1 << (PostgreSQLParser.KW_TEMP - 336)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 336)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 336)) | (1 << (PostgreSQLParser.KW_TEXT - 336)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 336)) | (1 << (PostgreSQLParser.KW_TRIGGER - 336)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 336)) | (1 << (PostgreSQLParser.KW_TRUSTED - 336)) | (1 << (PostgreSQLParser.KW_TYPE - 336)) | (1 << (PostgreSQLParser.KW_TYPES - 336)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 336)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 336)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 336)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 336)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 336)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 336)))) !== 0) || ((((_la - 368)) & ~0x1F) === 0 && ((1 << (_la - 368)) & ((1 << (PostgreSQLParser.KW_UNTIL - 368)) | (1 << (PostgreSQLParser.KW_UPDATE - 368)) | (1 << (PostgreSQLParser.KW_VACUUM - 368)) | (1 << (PostgreSQLParser.KW_VALID - 368)) | (1 << (PostgreSQLParser.KW_VALIDATE - 368)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 368)) | (1 << (PostgreSQLParser.KW_VARYING - 368)) | (1 << (PostgreSQLParser.KW_VERSION - 368)) | (1 << (PostgreSQLParser.KW_VIEW - 368)) | (1 << (PostgreSQLParser.KW_VOLATILE - 368)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 368)) | (1 << (PostgreSQLParser.KW_WITHOUT - 368)) | (1 << (PostgreSQLParser.KW_WORK - 368)) | (1 << (PostgreSQLParser.KW_WRAPPER - 368)) | (1 << (PostgreSQLParser.KW_WRITE - 368)) | (1 << (PostgreSQLParser.KW_XML - 368)) | (1 << (PostgreSQLParser.KW_YEAR - 368)) | (1 << (PostgreSQLParser.KW_YES - 368)) | (1 << (PostgreSQLParser.KW_ZONE - 368)) | (1 << (PostgreSQLParser.KW_BETWEEN - 368)) | (1 << (PostgreSQLParser.KW_BIGINT - 368)) | (1 << (PostgreSQLParser.KW_BIT - 368)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 368)) | (1 << (PostgreSQLParser.KW_CHAR - 368)) | (1 << (PostgreSQLParser.KW_CHARACTER - 368)) | (1 << (PostgreSQLParser.KW_COALESCE - 368)) | (1 << (PostgreSQLParser.KW_DEC - 368)) | (1 << (PostgreSQLParser.KW_DECIMAL - 368)) | (1 << (PostgreSQLParser.KW_EXISTS - 368)) | (1 << (PostgreSQLParser.KW_EXTRACT - 368)) | (1 << (PostgreSQLParser.KW_FLOAT - 368)) | (1 << (PostgreSQLParser.KW_GREATEST - 368)))) !== 0) || ((((_la - 400)) & ~0x1F) === 0 && ((1 << (_la - 400)) & ((1 << (PostgreSQLParser.KW_INOUT - 400)) | (1 << (PostgreSQLParser.KW_INT - 400)) | (1 << (PostgreSQLParser.KW_INTEGER - 400)) | (1 << (PostgreSQLParser.KW_INTERVAL - 400)) | (1 << (PostgreSQLParser.KW_LEAST - 400)) | (1 << (PostgreSQLParser.KW_NATIONAL - 400)) | (1 << (PostgreSQLParser.KW_NCHAR - 400)) | (1 << (PostgreSQLParser.KW_NONE - 400)) | (1 << (PostgreSQLParser.KW_NULLIF - 400)) | (1 << (PostgreSQLParser.KW_NUMERIC - 400)) | (1 << (PostgreSQLParser.KW_OVERLAY - 400)) | (1 << (PostgreSQLParser.KW_POSITION - 400)) | (1 << (PostgreSQLParser.KW_PRECISION - 400)) | (1 << (PostgreSQLParser.KW_REAL - 400)) | (1 << (PostgreSQLParser.KW_ROW - 400)) | (1 << (PostgreSQLParser.KW_SETOF - 400)) | (1 << (PostgreSQLParser.KW_SMALLINT - 400)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 400)) | (1 << (PostgreSQLParser.KW_TIME - 400)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 400)) | (1 << (PostgreSQLParser.KW_TREAT - 400)) | (1 << (PostgreSQLParser.KW_TRIM - 400)) | (1 << (PostgreSQLParser.KW_VALUES - 400)) | (1 << (PostgreSQLParser.KW_VARCHAR - 400)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 400)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 400)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 400)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 400)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 400)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 400)) | (1 << (PostgreSQLParser.KW_XMLPI - 400)) | (1 << (PostgreSQLParser.KW_XMLROOT - 400)))) !== 0) || ((((_la - 432)) & ~0x1F) === 0 && ((1 << (_la - 432)) & ((1 << (PostgreSQLParser.KW_XMLSERIALIZE - 432)) | (1 << (PostgreSQLParser.KW_CALL - 432)) | (1 << (PostgreSQLParser.KW_CURRENT - 432)) | (1 << (PostgreSQLParser.KW_ATTACH - 432)) | (1 << (PostgreSQLParser.KW_DETACH - 432)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 432)) | (1 << (PostgreSQLParser.KW_GENERATED - 432)) | (1 << (PostgreSQLParser.KW_LOGGED - 432)) | (1 << (PostgreSQLParser.KW_STORED - 432)) | (1 << (PostgreSQLParser.KW_INCLUDE - 432)) | (1 << (PostgreSQLParser.KW_ROUTINE - 432)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 432)) | (1 << (PostgreSQLParser.KW_IMPORT - 432)) | (1 << (PostgreSQLParser.KW_POLICY - 432)) | (1 << (PostgreSQLParser.KW_METHOD - 432)) | (1 << (PostgreSQLParser.KW_REFERENCING - 432)) | (1 << (PostgreSQLParser.KW_NEW - 432)) | (1 << (PostgreSQLParser.KW_OLD - 432)) | (1 << (PostgreSQLParser.KW_VALUE - 432)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 432)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 432)) | (1 << (PostgreSQLParser.KW_OUT - 432)) | (1 << (PostgreSQLParser.KW_ROUTINES - 432)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 432)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 432)) | (1 << (PostgreSQLParser.KW_INPUT - 432)) | (1 << (PostgreSQLParser.KW_SUPPORT - 432)) | (1 << (PostgreSQLParser.KW_PARALLEL - 432)) | (1 << (PostgreSQLParser.KW_SQL - 432)) | (1 << (PostgreSQLParser.KW_DEPENDS - 432)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 432)))) !== 0) || ((((_la - 464)) & ~0x1F) === 0 && ((1 << (_la - 464)) & ((1 << (PostgreSQLParser.KW_CONFLICT - 464)) | (1 << (PostgreSQLParser.KW_SKIP - 464)) | (1 << (PostgreSQLParser.KW_LOCKED - 464)) | (1 << (PostgreSQLParser.KW_TIES - 464)) | (1 << (PostgreSQLParser.KW_ROLLUP - 464)) | (1 << (PostgreSQLParser.KW_CUBE - 464)) | (1 << (PostgreSQLParser.KW_GROUPING - 464)) | (1 << (PostgreSQLParser.KW_SETS - 464)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 464)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 464)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 464)) | (1 << (PostgreSQLParser.KW_COLUMNS - 464)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 464)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 464)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 464)) | (1 << (PostgreSQLParser.KW_WITHIN - 464)) | (1 << (PostgreSQLParser.KW_FILTER - 464)) | (1 << (PostgreSQLParser.KW_GROUPS - 464)) | (1 << (PostgreSQLParser.KW_OTHERS - 464)) | (1 << (PostgreSQLParser.KW_NFC - 464)) | (1 << (PostgreSQLParser.KW_NFD - 464)) | (1 << (PostgreSQLParser.KW_NFKC - 464)) | (1 << (PostgreSQLParser.KW_NFKD - 464)) | (1 << (PostgreSQLParser.KW_UESCAPE - 464)) | (1 << (PostgreSQLParser.KW_VIEWS - 464)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 464)) | (1 << (PostgreSQLParser.KW_DUMP - 464)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 464)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 464)) | (1 << (PostgreSQLParser.KW_ERROR - 464)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 464)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 464)))) !== 0) || ((((_la - 496)) & ~0x1F) === 0 && ((1 << (_la - 496)) & ((1 << (PostgreSQLParser.KW_ALIAS - 496)) | (1 << (PostgreSQLParser.KW_CONSTANT - 496)) | (1 << (PostgreSQLParser.KW_PERFORM - 496)) | (1 << (PostgreSQLParser.KW_GET - 496)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 496)) | (1 << (PostgreSQLParser.KW_STACKED - 496)) | (1 << (PostgreSQLParser.KW_ELSIF - 496)) | (1 << (PostgreSQLParser.KW_REVERSE - 496)) | (1 << (PostgreSQLParser.KW_SLICE - 496)) | (1 << (PostgreSQLParser.KW_EXIT - 496)) | (1 << (PostgreSQLParser.KW_RETURN - 496)) | (1 << (PostgreSQLParser.KW_QUERY - 496)) | (1 << (PostgreSQLParser.KW_RAISE - 496)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 496)) | (1 << (PostgreSQLParser.KW_DEBUG - 496)) | (1 << (PostgreSQLParser.KW_LOG - 496)) | (1 << (PostgreSQLParser.KW_INFO - 496)) | (1 << (PostgreSQLParser.KW_NOTICE - 496)) | (1 << (PostgreSQLParser.KW_WARNING - 496)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 496)) | (1 << (PostgreSQLParser.KW_ASSERT - 496)) | (1 << (PostgreSQLParser.KW_OPEN - 496)) | (1 << (PostgreSQLParser.Identifier - 496)) | (1 << (PostgreSQLParser.QuotedIdentifier - 496)))) !== 0) || ((((_la - 530)) & ~0x1F) === 0 && ((1 << (_la - 530)) & ((1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 530)) | (1 << (PostgreSQLParser.StringConstant - 530)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 530)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 530)) | (1 << (PostgreSQLParser.Integral - 530)) | (1 << (PostgreSQLParser.Numeric - 530)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 530)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 530)) | (1 << (PostgreSQLParser.EscapeStringConstant - 530)))) !== 0)) {
				{
				this.state = 8013;
				this.explain_option_arg();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explain_option_name(): Explain_option_nameContext {
		let _localctx: Explain_option_nameContext = new Explain_option_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 898, PostgreSQLParser.RULE_explain_option_name);
		try {
			this.state = 8018;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8016;
				this.nonreservedword();
				}
				break;
			case PostgreSQLParser.KW_ANALYSE:
			case PostgreSQLParser.KW_ANALYZE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8017;
				this.analyze_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explain_option_arg(): Explain_option_argContext {
		let _localctx: Explain_option_argContext = new Explain_option_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 900, PostgreSQLParser.RULE_explain_option_arg);
		try {
			this.state = 8022;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_ON:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8020;
				this.opt_boolean_or_string();
				}
				break;
			case PostgreSQLParser.PLUS:
			case PostgreSQLParser.MINUS:
			case PostgreSQLParser.Integral:
			case PostgreSQLParser.Numeric:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8021;
				this.numericonly();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preparestmt(): PreparestmtContext {
		let _localctx: PreparestmtContext = new PreparestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 902, PostgreSQLParser.RULE_preparestmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8024;
			this.match(PostgreSQLParser.KW_PREPARE);
			this.state = 8025;
			this.name();
			this.state = 8027;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.OPEN_PAREN) {
				{
				this.state = 8026;
				this.prep_type_clause();
				}
			}

			this.state = 8029;
			this.match(PostgreSQLParser.KW_AS);
			this.state = 8030;
			this.preparablestmt();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public prep_type_clause(): Prep_type_clauseContext {
		let _localctx: Prep_type_clauseContext = new Prep_type_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 904, PostgreSQLParser.RULE_prep_type_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8032;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8033;
			this.type_list();
			this.state = 8034;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public preparablestmt(): PreparablestmtContext {
		let _localctx: PreparablestmtContext = new PreparablestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 906, PostgreSQLParser.RULE_preparablestmt);
		try {
			this.state = 8040;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 662, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8036;
				this.selectstmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8037;
				this.insertstmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8038;
				this.updatestmt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8039;
				this.deletestmt();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public executestmt(): ExecutestmtContext {
		let _localctx: ExecutestmtContext = new ExecutestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 908, PostgreSQLParser.RULE_executestmt);
		let _la: number;
		try {
			this.state = 8080;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 670, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8042;
				this.match(PostgreSQLParser.KW_EXECUTE);
				this.state = 8043;
				this.name();
				this.state = 8045;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 663, this._ctx) ) {
				case 1:
					{
					this.state = 8044;
					this.execute_param_clause();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8047;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 8049;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_GLOBAL || _la === PostgreSQLParser.KW_LOCAL || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PostgreSQLParser.KW_TEMP - 352)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 352)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 352)))) !== 0)) {
					{
					this.state = 8048;
					this.opttemp();
					}
				}

				this.state = 8051;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 8052;
				this.create_as_target();
				this.state = 8053;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 8054;
				this.match(PostgreSQLParser.KW_EXECUTE);
				this.state = 8055;
				this.name();
				this.state = 8057;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 665, this._ctx) ) {
				case 1:
					{
					this.state = 8056;
					this.execute_param_clause();
					}
					break;
				}
				this.state = 8060;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 666, this._ctx) ) {
				case 1:
					{
					this.state = 8059;
					this.opt_with_data();
					}
					break;
				}
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8062;
				this.match(PostgreSQLParser.KW_CREATE);
				this.state = 8064;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_GLOBAL || _la === PostgreSQLParser.KW_LOCAL || ((((_la - 352)) & ~0x1F) === 0 && ((1 << (_la - 352)) & ((1 << (PostgreSQLParser.KW_TEMP - 352)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 352)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 352)))) !== 0)) {
					{
					this.state = 8063;
					this.opttemp();
					}
				}

				this.state = 8066;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 8067;
				this.match(PostgreSQLParser.KW_IF);
				this.state = 8068;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 8069;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 8070;
				this.create_as_target();
				this.state = 8071;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 8072;
				this.match(PostgreSQLParser.KW_EXECUTE);
				this.state = 8073;
				this.name();
				this.state = 8075;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 668, this._ctx) ) {
				case 1:
					{
					this.state = 8074;
					this.execute_param_clause();
					}
					break;
				}
				this.state = 8078;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 669, this._ctx) ) {
				case 1:
					{
					this.state = 8077;
					this.opt_with_data();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public execute_param_clause(): Execute_param_clauseContext {
		let _localctx: Execute_param_clauseContext = new Execute_param_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 910, PostgreSQLParser.RULE_execute_param_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8082;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8083;
			this.expr_list();
			this.state = 8084;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deallocatestmt(): DeallocatestmtContext {
		let _localctx: DeallocatestmtContext = new DeallocatestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 912, PostgreSQLParser.RULE_deallocatestmt);
		try {
			this.state = 8096;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 671, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8086;
				this.match(PostgreSQLParser.KW_DEALLOCATE);
				this.state = 8087;
				this.name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8088;
				this.match(PostgreSQLParser.KW_DEALLOCATE);
				this.state = 8089;
				this.match(PostgreSQLParser.KW_PREPARE);
				this.state = 8090;
				this.name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8091;
				this.match(PostgreSQLParser.KW_DEALLOCATE);
				this.state = 8092;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8093;
				this.match(PostgreSQLParser.KW_DEALLOCATE);
				this.state = 8094;
				this.match(PostgreSQLParser.KW_PREPARE);
				this.state = 8095;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insertstmt(): InsertstmtContext {
		let _localctx: InsertstmtContext = new InsertstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 914, PostgreSQLParser.RULE_insertstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8099;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WITH) {
				{
				this.state = 8098;
				this.opt_with_clause();
				}
			}

			this.state = 8101;
			this.match(PostgreSQLParser.KW_INSERT);
			this.state = 8102;
			this.match(PostgreSQLParser.KW_INTO);
			this.state = 8103;
			this.insert_target();
			this.state = 8104;
			this.insert_rest();
			this.state = 8106;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_ON) {
				{
				this.state = 8105;
				this.opt_on_conflict();
				}
			}

			this.state = 8109;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_RETURNING) {
				{
				this.state = 8108;
				this.returning_clause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_target(): Insert_targetContext {
		let _localctx: Insert_targetContext = new Insert_targetContext(this._ctx, this.state);
		this.enterRule(_localctx, 916, PostgreSQLParser.RULE_insert_target);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8111;
			this.qualified_name();
			this.state = 8114;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_AS) {
				{
				this.state = 8112;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 8113;
				this.colid();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_rest(): Insert_restContext {
		let _localctx: Insert_restContext = new Insert_restContext(this._ctx, this.state);
		this.enterRule(_localctx, 918, PostgreSQLParser.RULE_insert_rest);
		let _la: number;
		try {
			this.state = 8135;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 677, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8116;
				this.selectstmt();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8117;
				this.match(PostgreSQLParser.KW_OVERRIDING);
				this.state = 8118;
				this.override_kind();
				this.state = 8119;
				this.match(PostgreSQLParser.KW_VALUE);
				this.state = 8120;
				this.selectstmt();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8122;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8123;
				this.insert_column_list();
				this.state = 8124;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 8129;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OVERRIDING) {
					{
					this.state = 8125;
					this.match(PostgreSQLParser.KW_OVERRIDING);
					this.state = 8126;
					this.override_kind();
					this.state = 8127;
					this.match(PostgreSQLParser.KW_VALUE);
					}
				}

				this.state = 8131;
				this.selectstmt();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8133;
				this.match(PostgreSQLParser.KW_DEFAULT);
				this.state = 8134;
				this.match(PostgreSQLParser.KW_VALUES);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public override_kind(): Override_kindContext {
		let _localctx: Override_kindContext = new Override_kindContext(this._ctx, this.state);
		this.enterRule(_localctx, 920, PostgreSQLParser.RULE_override_kind);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8137;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_USER || _la === PostgreSQLParser.KW_SYSTEM)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_column_list(): Insert_column_listContext {
		let _localctx: Insert_column_listContext = new Insert_column_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 922, PostgreSQLParser.RULE_insert_column_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8139;
			this.insert_column_item();
			this.state = 8144;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8140;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8141;
				this.insert_column_item();
				}
				}
				this.state = 8146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public insert_column_item(): Insert_column_itemContext {
		let _localctx: Insert_column_itemContext = new Insert_column_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 924, PostgreSQLParser.RULE_insert_column_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8147;
			this.colid();
			this.state = 8148;
			this.opt_indirection();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_on_conflict(): Opt_on_conflictContext {
		let _localctx: Opt_on_conflictContext = new Opt_on_conflictContext(this._ctx, this.state);
		this.enterRule(_localctx, 926, PostgreSQLParser.RULE_opt_on_conflict);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8150;
			this.match(PostgreSQLParser.KW_ON);
			this.state = 8151;
			this.match(PostgreSQLParser.KW_CONFLICT);
			this.state = 8153;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.OPEN_PAREN || _la === PostgreSQLParser.KW_ON) {
				{
				this.state = 8152;
				this.opt_conf_expr();
				}
			}

			this.state = 8155;
			this.match(PostgreSQLParser.KW_DO);
			this.state = 8163;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_UPDATE:
				{
				this.state = 8156;
				this.match(PostgreSQLParser.KW_UPDATE);
				this.state = 8157;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 8158;
				this.set_clause_list();
				this.state = 8160;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WHERE) {
					{
					this.state = 8159;
					this.where_clause();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_NOTHING:
				{
				this.state = 8162;
				this.match(PostgreSQLParser.KW_NOTHING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_conf_expr(): Opt_conf_exprContext {
		let _localctx: Opt_conf_exprContext = new Opt_conf_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 928, PostgreSQLParser.RULE_opt_conf_expr);
		let _la: number;
		try {
			this.state = 8174;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.OPEN_PAREN:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8165;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8166;
				this.index_params();
				this.state = 8167;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 8169;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WHERE) {
					{
					this.state = 8168;
					this.where_clause();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_ON:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8171;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 8172;
				this.match(PostgreSQLParser.KW_CONSTRAINT);
				this.state = 8173;
				this.name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returning_clause(): Returning_clauseContext {
		let _localctx: Returning_clauseContext = new Returning_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 930, PostgreSQLParser.RULE_returning_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8176;
			this.match(PostgreSQLParser.KW_RETURNING);
			this.state = 8177;
			this.target_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deletestmt(): DeletestmtContext {
		let _localctx: DeletestmtContext = new DeletestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 932, PostgreSQLParser.RULE_deletestmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8180;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WITH) {
				{
				this.state = 8179;
				this.opt_with_clause();
				}
			}

			this.state = 8182;
			this.match(PostgreSQLParser.KW_DELETE);
			this.state = 8183;
			this.match(PostgreSQLParser.KW_FROM);
			this.state = 8184;
			this.relation_expr_opt_alias();
			this.state = 8186;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_USING) {
				{
				this.state = 8185;
				this.using_clause();
				}
			}

			this.state = 8189;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WHERE) {
				{
				this.state = 8188;
				this.where_or_current_clause();
				}
			}

			this.state = 8192;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_RETURNING) {
				{
				this.state = 8191;
				this.returning_clause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public using_clause(): Using_clauseContext {
		let _localctx: Using_clauseContext = new Using_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 934, PostgreSQLParser.RULE_using_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8194;
			this.match(PostgreSQLParser.KW_USING);
			this.state = 8195;
			this.from_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lockstmt(): LockstmtContext {
		let _localctx: LockstmtContext = new LockstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 936, PostgreSQLParser.RULE_lockstmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8197;
			this.match(PostgreSQLParser.KW_LOCK);
			this.state = 8199;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 688, this._ctx) ) {
			case 1:
				{
				this.state = 8198;
				this.opt_table();
				}
				break;
			}
			this.state = 8201;
			this.relation_expr_list();
			this.state = 8203;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_IN) {
				{
				this.state = 8202;
				this.opt_lock();
				}
			}

			this.state = 8206;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_NOWAIT) {
				{
				this.state = 8205;
				this.opt_nowait();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_lock(): Opt_lockContext {
		let _localctx: Opt_lockContext = new Opt_lockContext(this._ctx, this.state);
		this.enterRule(_localctx, 938, PostgreSQLParser.RULE_opt_lock);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8208;
			this.match(PostgreSQLParser.KW_IN);
			this.state = 8209;
			this.lock_type();
			this.state = 8210;
			this.match(PostgreSQLParser.KW_MODE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public lock_type(): Lock_typeContext {
		let _localctx: Lock_typeContext = new Lock_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 940, PostgreSQLParser.RULE_lock_type);
		let _la: number;
		try {
			this.state = 8224;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_ACCESS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8212;
				this.match(PostgreSQLParser.KW_ACCESS);
				this.state = 8213;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_EXCLUSIVE || _la === PostgreSQLParser.KW_SHARE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParser.KW_ROW:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8214;
				this.match(PostgreSQLParser.KW_ROW);
				this.state = 8215;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_EXCLUSIVE || _la === PostgreSQLParser.KW_SHARE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case PostgreSQLParser.KW_SHARE:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8216;
				this.match(PostgreSQLParser.KW_SHARE);
				this.state = 8221;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_UPDATE:
					{
					this.state = 8217;
					this.match(PostgreSQLParser.KW_UPDATE);
					this.state = 8218;
					this.match(PostgreSQLParser.KW_EXCLUSIVE);
					}
					break;
				case PostgreSQLParser.KW_ROW:
					{
					this.state = 8219;
					this.match(PostgreSQLParser.KW_ROW);
					this.state = 8220;
					this.match(PostgreSQLParser.KW_EXCLUSIVE);
					}
					break;
				case PostgreSQLParser.KW_MODE:
					break;
				default:
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_EXCLUSIVE:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8223;
				this.match(PostgreSQLParser.KW_EXCLUSIVE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_nowait(): Opt_nowaitContext {
		let _localctx: Opt_nowaitContext = new Opt_nowaitContext(this._ctx, this.state);
		this.enterRule(_localctx, 942, PostgreSQLParser.RULE_opt_nowait);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8226;
			this.match(PostgreSQLParser.KW_NOWAIT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_nowait_or_skip(): Opt_nowait_or_skipContext {
		let _localctx: Opt_nowait_or_skipContext = new Opt_nowait_or_skipContext(this._ctx, this.state);
		this.enterRule(_localctx, 944, PostgreSQLParser.RULE_opt_nowait_or_skip);
		try {
			this.state = 8231;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_NOWAIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8228;
				this.match(PostgreSQLParser.KW_NOWAIT);
				}
				break;
			case PostgreSQLParser.KW_SKIP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8229;
				this.match(PostgreSQLParser.KW_SKIP);
				this.state = 8230;
				this.match(PostgreSQLParser.KW_LOCKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public updatestmt(): UpdatestmtContext {
		let _localctx: UpdatestmtContext = new UpdatestmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 946, PostgreSQLParser.RULE_updatestmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8234;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WITH) {
				{
				this.state = 8233;
				this.opt_with_clause();
				}
			}

			this.state = 8236;
			this.match(PostgreSQLParser.KW_UPDATE);
			this.state = 8237;
			this.relation_expr_opt_alias();
			this.state = 8238;
			this.match(PostgreSQLParser.KW_SET);
			this.state = 8239;
			this.set_clause_list();
			this.state = 8241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_FROM) {
				{
				this.state = 8240;
				this.from_clause();
				}
			}

			this.state = 8244;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WHERE) {
				{
				this.state = 8243;
				this.where_or_current_clause();
				}
			}

			this.state = 8247;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_RETURNING) {
				{
				this.state = 8246;
				this.returning_clause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_clause_list(): Set_clause_listContext {
		let _localctx: Set_clause_listContext = new Set_clause_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 948, PostgreSQLParser.RULE_set_clause_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8249;
			this.set_clause();
			this.state = 8254;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8250;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8251;
				this.set_clause();
				}
				}
				this.state = 8256;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_clause(): Set_clauseContext {
		let _localctx: Set_clauseContext = new Set_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 950, PostgreSQLParser.RULE_set_clause);
		try {
			this.state = 8267;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8257;
				this.set_target();
				this.state = 8258;
				this.match(PostgreSQLParser.EQUAL);
				this.state = 8259;
				this.a_expr();
				}
				break;
			case PostgreSQLParser.OPEN_PAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8261;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8262;
				this.set_target_list();
				this.state = 8263;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 8264;
				this.match(PostgreSQLParser.EQUAL);
				this.state = 8265;
				this.a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_target(): Set_targetContext {
		let _localctx: Set_targetContext = new Set_targetContext(this._ctx, this.state);
		this.enterRule(_localctx, 952, PostgreSQLParser.RULE_set_target);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8269;
			this.colid();
			this.state = 8270;
			this.opt_indirection();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_target_list(): Set_target_listContext {
		let _localctx: Set_target_listContext = new Set_target_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 954, PostgreSQLParser.RULE_set_target_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8272;
			this.set_target();
			this.state = 8277;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8273;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8274;
				this.set_target();
				}
				}
				this.state = 8279;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public declarecursorstmt(): DeclarecursorstmtContext {
		let _localctx: DeclarecursorstmtContext = new DeclarecursorstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 956, PostgreSQLParser.RULE_declarecursorstmt);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8280;
			this.match(PostgreSQLParser.KW_DECLARE);
			this.state = 8281;
			this.cursor_name();
			this.state = 8282;
			this.cursor_options();
			this.state = 8283;
			this.match(PostgreSQLParser.KW_CURSOR);
			this.state = 8284;
			this.opt_hold();
			this.state = 8285;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 8286;
			this.selectstmt();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursor_name(): Cursor_nameContext {
		let _localctx: Cursor_nameContext = new Cursor_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 958, PostgreSQLParser.RULE_cursor_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8288;
			this.name();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursor_options(): Cursor_optionsContext {
		let _localctx: Cursor_optionsContext = new Cursor_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 960, PostgreSQLParser.RULE_cursor_options);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8297;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.KW_BINARY || _la === PostgreSQLParser.KW_INSENSITIVE || _la === PostgreSQLParser.KW_NO || _la === PostgreSQLParser.KW_SCROLL) {
				{
				this.state = 8295;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_NO:
					{
					this.state = 8290;
					this.match(PostgreSQLParser.KW_NO);
					this.state = 8291;
					this.match(PostgreSQLParser.KW_SCROLL);
					}
					break;
				case PostgreSQLParser.KW_SCROLL:
					{
					this.state = 8292;
					this.match(PostgreSQLParser.KW_SCROLL);
					}
					break;
				case PostgreSQLParser.KW_BINARY:
					{
					this.state = 8293;
					this.match(PostgreSQLParser.KW_BINARY);
					}
					break;
				case PostgreSQLParser.KW_INSENSITIVE:
					{
					this.state = 8294;
					this.match(PostgreSQLParser.KW_INSENSITIVE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 8299;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_hold(): Opt_holdContext {
		let _localctx: Opt_holdContext = new Opt_holdContext(this._ctx, this.state);
		this.enterRule(_localctx, 962, PostgreSQLParser.RULE_opt_hold);
		try {
			this.state = 8305;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_FOR:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_WITH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8301;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 8302;
				this.match(PostgreSQLParser.KW_HOLD);
				}
				break;
			case PostgreSQLParser.KW_WITHOUT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8303;
				this.match(PostgreSQLParser.KW_WITHOUT);
				this.state = 8304;
				this.match(PostgreSQLParser.KW_HOLD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public selectstmt(): SelectstmtContext {
		let _localctx: SelectstmtContext = new SelectstmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 964, PostgreSQLParser.RULE_selectstmt);
		try {
			this.state = 8309;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 704, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8307;
				this.select_no_parens();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8308;
				this.select_with_parens();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_with_parens(): Select_with_parensContext {
		let _localctx: Select_with_parensContext = new Select_with_parensContext(this._ctx, this.state);
		this.enterRule(_localctx, 966, PostgreSQLParser.RULE_select_with_parens);
		try {
			this.state = 8319;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 705, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8311;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8312;
				this.select_no_parens();
				this.state = 8313;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8315;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8316;
				this.select_with_parens();
				this.state = 8317;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_no_parens(): Select_no_parensContext {
		let _localctx: Select_no_parensContext = new Select_no_parensContext(this._ctx, this.state);
		this.enterRule(_localctx, 968, PostgreSQLParser.RULE_select_no_parens);
		let _la: number;
		try {
			this.state = 8350;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.OPEN_PAREN:
			case PostgreSQLParser.KW_SELECT:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_VALUES:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8321;
				this.select_clause();
				this.state = 8323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ORDER) {
					{
					this.state = 8322;
					this.opt_sort_clause();
					}
				}

				this.state = 8333;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 709, this._ctx) ) {
				case 1:
					{
					this.state = 8325;
					this.for_locking_clause();
					this.state = 8327;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 707, this._ctx) ) {
					case 1:
						{
						this.state = 8326;
						this.opt_select_limit();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 8329;
					this.select_limit();
					this.state = 8331;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.KW_FOR) {
						{
						this.state = 8330;
						this.opt_for_locking_clause();
						}
					}

					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_WITH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8335;
				this.with_clause();
				this.state = 8336;
				this.select_clause();
				this.state = 8338;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ORDER) {
					{
					this.state = 8337;
					this.opt_sort_clause();
					}
				}

				this.state = 8348;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 713, this._ctx) ) {
				case 1:
					{
					this.state = 8340;
					this.for_locking_clause();
					this.state = 8342;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 711, this._ctx) ) {
					case 1:
						{
						this.state = 8341;
						this.opt_select_limit();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 8344;
					this.select_limit();
					this.state = 8346;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.KW_FOR) {
						{
						this.state = 8345;
						this.opt_for_locking_clause();
						}
					}

					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_clause(): Select_clauseContext {
		let _localctx: Select_clauseContext = new Select_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 970, PostgreSQLParser.RULE_select_clause);
		try {
			this.state = 8354;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 715, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8352;
				this.simple_select();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8353;
				this.select_with_parens();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simple_select(): Simple_selectContext {
		let _localctx: Simple_selectContext = new Simple_selectContext(this._ctx, this.state);
		this.enterRule(_localctx, 972, PostgreSQLParser.RULE_simple_select);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8401;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_SELECT:
				{
				this.state = 8356;
				this.match(PostgreSQLParser.KW_SELECT);
				this.state = 8372;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 721, this._ctx) ) {
				case 1:
					{
					this.state = 8358;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.KW_ALL) {
						{
						this.state = 8357;
						this.opt_all_clause();
						}
					}

					this.state = 8361;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 717, this._ctx) ) {
					case 1:
						{
						this.state = 8360;
						this.into_clause();
						}
						break;
					}
					this.state = 8364;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 718, this._ctx) ) {
					case 1:
						{
						this.state = 8363;
						this.opt_target_list();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 8367;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.KW_DISTINCT) {
						{
						this.state = 8366;
						this.distinct_clause();
						}
					}

					this.state = 8370;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 720, this._ctx) ) {
					case 1:
						{
						this.state = 8369;
						this.target_list();
						}
						break;
					}
					}
					break;
				}
				this.state = 8375;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 722, this._ctx) ) {
				case 1:
					{
					this.state = 8374;
					this.into_clause();
					}
					break;
				}
				this.state = 8378;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_FROM) {
					{
					this.state = 8377;
					this.from_clause();
					}
				}

				this.state = 8381;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WHERE) {
					{
					this.state = 8380;
					this.where_clause();
					}
				}

				this.state = 8384;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_GROUP) {
					{
					this.state = 8383;
					this.group_clause();
					}
				}

				this.state = 8387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_HAVING) {
					{
					this.state = 8386;
					this.having_clause();
					}
				}

				this.state = 8390;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_WINDOW) {
					{
					this.state = 8389;
					this.window_clause();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_VALUES:
				{
				this.state = 8392;
				this.values_clause();
				}
				break;
			case PostgreSQLParser.KW_TABLE:
				{
				this.state = 8393;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 8394;
				this.relation_expr();
				}
				break;
			case PostgreSQLParser.OPEN_PAREN:
				{
				this.state = 8395;
				this.select_with_parens();
				this.state = 8396;
				this.set_operator_with_all_or_distinct();
				this.state = 8399;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 728, this._ctx) ) {
				case 1:
					{
					this.state = 8397;
					this.simple_select();
					}
					break;

				case 2:
					{
					this.state = 8398;
					this.select_with_parens();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 8410;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 731, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8403;
					this.set_operator_with_all_or_distinct();
					this.state = 8406;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 730, this._ctx) ) {
					case 1:
						{
						this.state = 8404;
						this.simple_select();
						}
						break;

					case 2:
						{
						this.state = 8405;
						this.select_with_parens();
						}
						break;
					}
					}
					}
				}
				this.state = 8412;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 731, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_operator(): Set_operatorContext {
		let _localctx: Set_operatorContext = new Set_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 974, PostgreSQLParser.RULE_set_operator);
		try {
			this.state = 8416;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_UNION:
				_localctx = new UnionContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8413;
				this.match(PostgreSQLParser.KW_UNION);
				}
				break;
			case PostgreSQLParser.KW_INTERSECT:
				_localctx = new IntersectContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8414;
				this.match(PostgreSQLParser.KW_INTERSECT);
				}
				break;
			case PostgreSQLParser.KW_EXCEPT:
				_localctx = new ExceptContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8415;
				this.match(PostgreSQLParser.KW_EXCEPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public set_operator_with_all_or_distinct(): Set_operator_with_all_or_distinctContext {
		let _localctx: Set_operator_with_all_or_distinctContext = new Set_operator_with_all_or_distinctContext(this._ctx, this.state);
		this.enterRule(_localctx, 976, PostgreSQLParser.RULE_set_operator_with_all_or_distinct);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8418;
			this.set_operator();
			this.state = 8420;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_ALL || _la === PostgreSQLParser.KW_DISTINCT) {
				{
				this.state = 8419;
				this.all_or_distinct();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public with_clause(): With_clauseContext {
		let _localctx: With_clauseContext = new With_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 978, PostgreSQLParser.RULE_with_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8422;
			this.match(PostgreSQLParser.KW_WITH);
			this.state = 8424;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 734, this._ctx) ) {
			case 1:
				{
				this.state = 8423;
				this.match(PostgreSQLParser.KW_RECURSIVE);
				}
				break;
			}
			this.state = 8426;
			this.cte_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cte_list(): Cte_listContext {
		let _localctx: Cte_listContext = new Cte_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 980, PostgreSQLParser.RULE_cte_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8428;
			this.common_table_expr();
			this.state = 8433;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8429;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8430;
				this.common_table_expr();
				}
				}
				this.state = 8435;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public common_table_expr(): Common_table_exprContext {
		let _localctx: Common_table_exprContext = new Common_table_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 982, PostgreSQLParser.RULE_common_table_expr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8436;
			this.name();
			this.state = 8438;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.OPEN_PAREN) {
				{
				this.state = 8437;
				this.opt_name_list();
				}
			}

			this.state = 8440;
			this.match(PostgreSQLParser.KW_AS);
			this.state = 8442;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_NOT || _la === PostgreSQLParser.KW_MATERIALIZED) {
				{
				this.state = 8441;
				this.opt_materialized();
				}
			}

			this.state = 8444;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8445;
			this.preparablestmt();
			this.state = 8446;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_materialized(): Opt_materializedContext {
		let _localctx: Opt_materializedContext = new Opt_materializedContext(this._ctx, this.state);
		this.enterRule(_localctx, 984, PostgreSQLParser.RULE_opt_materialized);
		try {
			this.state = 8451;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_MATERIALIZED:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8448;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				}
				break;
			case PostgreSQLParser.KW_NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8449;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 8450;
				this.match(PostgreSQLParser.KW_MATERIALIZED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_with_clause(): Opt_with_clauseContext {
		let _localctx: Opt_with_clauseContext = new Opt_with_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 986, PostgreSQLParser.RULE_opt_with_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8453;
			this.with_clause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public into_clause(): Into_clauseContext {
		let _localctx: Into_clauseContext = new Into_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 988, PostgreSQLParser.RULE_into_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8455;
			this.match(PostgreSQLParser.KW_INTO);
			this.state = 8460;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 739, this._ctx) ) {
			case 1:
				{
				this.state = 8456;
				this.opt_strict();
				this.state = 8457;
				this.opttempTableName();
				}
				break;

			case 2:
				{
				this.state = 8459;
				this.into_target();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_strict(): Opt_strictContext {
		let _localctx: Opt_strictContext = new Opt_strictContext(this._ctx, this.state);
		this.enterRule(_localctx, 990, PostgreSQLParser.RULE_opt_strict);
		try {
			this.state = 8464;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 740, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8463;
				this.match(PostgreSQLParser.KW_STRICT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opttempTableName(): OpttempTableNameContext {
		let _localctx: OpttempTableNameContext = new OpttempTableNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 992, PostgreSQLParser.RULE_opttempTableName);
		let _la: number;
		try {
			this.state = 8482;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 744, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8467;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_GLOBAL || _la === PostgreSQLParser.KW_LOCAL) {
					{
					this.state = 8466;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParser.KW_GLOBAL || _la === PostgreSQLParser.KW_LOCAL)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 8469;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_TEMP || _la === PostgreSQLParser.KW_TEMPORARY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 8471;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 742, this._ctx) ) {
				case 1:
					{
					this.state = 8470;
					this.opt_table();
					}
					break;
				}
				this.state = 8473;
				this.qualified_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8474;
				this.match(PostgreSQLParser.KW_UNLOGGED);
				this.state = 8476;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 743, this._ctx) ) {
				case 1:
					{
					this.state = 8475;
					this.opt_table();
					}
					break;
				}
				this.state = 8478;
				this.qualified_name();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8479;
				this.match(PostgreSQLParser.KW_TABLE);
				this.state = 8480;
				this.qualified_name();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8481;
				this.qualified_name();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_table(): Opt_tableContext {
		let _localctx: Opt_tableContext = new Opt_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 994, PostgreSQLParser.RULE_opt_table);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8484;
			this.match(PostgreSQLParser.KW_TABLE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public all_or_distinct(): All_or_distinctContext {
		let _localctx: All_or_distinctContext = new All_or_distinctContext(this._ctx, this.state);
		this.enterRule(_localctx, 996, PostgreSQLParser.RULE_all_or_distinct);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8486;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_ALL || _la === PostgreSQLParser.KW_DISTINCT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public distinct_clause(): Distinct_clauseContext {
		let _localctx: Distinct_clauseContext = new Distinct_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 998, PostgreSQLParser.RULE_distinct_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8488;
			this.match(PostgreSQLParser.KW_DISTINCT);
			this.state = 8494;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 745, this._ctx) ) {
			case 1:
				{
				this.state = 8489;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 8490;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8491;
				this.expr_list();
				this.state = 8492;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_all_clause(): Opt_all_clauseContext {
		let _localctx: Opt_all_clauseContext = new Opt_all_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1000, PostgreSQLParser.RULE_opt_all_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8496;
			this.match(PostgreSQLParser.KW_ALL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_sort_clause(): Opt_sort_clauseContext {
		let _localctx: Opt_sort_clauseContext = new Opt_sort_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1002, PostgreSQLParser.RULE_opt_sort_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8498;
			this.sort_clause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sort_clause(): Sort_clauseContext {
		let _localctx: Sort_clauseContext = new Sort_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1004, PostgreSQLParser.RULE_sort_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8500;
			this.match(PostgreSQLParser.KW_ORDER);
			this.state = 8501;
			this.match(PostgreSQLParser.KW_BY);
			this.state = 8502;
			this.sortby_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortby_list(): Sortby_listContext {
		let _localctx: Sortby_listContext = new Sortby_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1006, PostgreSQLParser.RULE_sortby_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8504;
			this.sortby();
			this.state = 8509;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8505;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8506;
				this.sortby();
				}
				}
				this.state = 8511;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sortby(): SortbyContext {
		let _localctx: SortbyContext = new SortbyContext(this._ctx, this.state);
		this.enterRule(_localctx, 1008, PostgreSQLParser.RULE_sortby);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8512;
			this.a_expr();
			this.state = 8516;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_USING:
				{
				this.state = 8513;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 8514;
				this.qual_all_op();
				}
				break;
			case PostgreSQLParser.KW_ASC:
			case PostgreSQLParser.KW_DESC:
				{
				this.state = 8515;
				this.opt_asc_desc();
				}
				break;
			case PostgreSQLParser.EOF:
			case PostgreSQLParser.OPEN_PAREN:
			case PostgreSQLParser.CLOSE_PAREN:
			case PostgreSQLParser.COMMA:
			case PostgreSQLParser.SEMI:
			case PostgreSQLParser.KW_ANALYSE:
			case PostgreSQLParser.KW_ANALYZE:
			case PostgreSQLParser.KW_CREATE:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_FOR:
			case PostgreSQLParser.KW_GRANT:
			case PostgreSQLParser.KW_INTO:
			case PostgreSQLParser.KW_LIMIT:
			case PostgreSQLParser.KW_OFFSET:
			case PostgreSQLParser.KW_ON:
			case PostgreSQLParser.KW_RETURNING:
			case PostgreSQLParser.KW_SELECT:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_WITH:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_END:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_LOOP:
			case PostgreSQLParser.MetaCommand:
				break;
			default:
				break;
			}
			this.state = 8519;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_NULLS) {
				{
				this.state = 8518;
				this.opt_nulls_order();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_limit(): Select_limitContext {
		let _localctx: Select_limitContext = new Select_limitContext(this._ctx, this.state);
		this.enterRule(_localctx, 1010, PostgreSQLParser.RULE_select_limit);
		let _la: number;
		try {
			this.state = 8529;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_LIMIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8521;
				this.limit_clause();
				this.state = 8523;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_OFFSET) {
					{
					this.state = 8522;
					this.offset_clause();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_OFFSET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8525;
				this.offset_clause();
				this.state = 8527;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 750, this._ctx) ) {
				case 1:
					{
					this.state = 8526;
					this.limit_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_select_limit(): Opt_select_limitContext {
		let _localctx: Opt_select_limitContext = new Opt_select_limitContext(this._ctx, this.state);
		this.enterRule(_localctx, 1012, PostgreSQLParser.RULE_opt_select_limit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8531;
			this.select_limit();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limit_clause(): Limit_clauseContext {
		let _localctx: Limit_clauseContext = new Limit_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1014, PostgreSQLParser.RULE_limit_clause);
		let _la: number;
		try {
			this.state = 8556;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_LIMIT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8533;
				this.match(PostgreSQLParser.KW_LIMIT);
				this.state = 8534;
				this.select_limit_value();
				this.state = 8537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.COMMA) {
					{
					this.state = 8535;
					this.match(PostgreSQLParser.COMMA);
					this.state = 8536;
					this.select_offset_value();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_FETCH:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8539;
				this.match(PostgreSQLParser.KW_FETCH);
				this.state = 8540;
				this.first_or_next();
				this.state = 8554;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 755, this._ctx) ) {
				case 1:
					{
					this.state = 8541;
					this.select_fetch_first_value();
					this.state = 8542;
					this.row_or_rows();
					this.state = 8546;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PostgreSQLParser.KW_ONLY:
						{
						this.state = 8543;
						this.match(PostgreSQLParser.KW_ONLY);
						}
						break;
					case PostgreSQLParser.KW_WITH:
						{
						this.state = 8544;
						this.match(PostgreSQLParser.KW_WITH);
						this.state = 8545;
						this.match(PostgreSQLParser.KW_TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;

				case 2:
					{
					this.state = 8548;
					this.row_or_rows();
					this.state = 8552;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PostgreSQLParser.KW_ONLY:
						{
						this.state = 8549;
						this.match(PostgreSQLParser.KW_ONLY);
						}
						break;
					case PostgreSQLParser.KW_WITH:
						{
						this.state = 8550;
						this.match(PostgreSQLParser.KW_WITH);
						this.state = 8551;
						this.match(PostgreSQLParser.KW_TIES);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public offset_clause(): Offset_clauseContext {
		let _localctx: Offset_clauseContext = new Offset_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1016, PostgreSQLParser.RULE_offset_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8558;
			this.match(PostgreSQLParser.KW_OFFSET);
			this.state = 8563;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 757, this._ctx) ) {
			case 1:
				{
				this.state = 8559;
				this.select_offset_value();
				}
				break;

			case 2:
				{
				this.state = 8560;
				this.select_fetch_first_value();
				this.state = 8561;
				this.row_or_rows();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_limit_value(): Select_limit_valueContext {
		let _localctx: Select_limit_valueContext = new Select_limit_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 1018, PostgreSQLParser.RULE_select_limit_value);
		try {
			this.state = 8567;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.OPEN_PAREN:
			case PostgreSQLParser.PLUS:
			case PostgreSQLParser.MINUS:
			case PostgreSQLParser.PARAM:
			case PostgreSQLParser.Operator:
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_CASE:
			case PostgreSQLParser.KW_CAST:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_CURRENT_CATALOG:
			case PostgreSQLParser.KW_CURRENT_DATE:
			case PostgreSQLParser.KW_CURRENT_ROLE:
			case PostgreSQLParser.KW_CURRENT_TIME:
			case PostgreSQLParser.KW_CURRENT_TIMESTAMP:
			case PostgreSQLParser.KW_CURRENT_USER:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_LOCALTIME:
			case PostgreSQLParser.KW_LOCALTIMESTAMP:
			case PostgreSQLParser.KW_NOT:
			case PostgreSQLParser.KW_NULL:
			case PostgreSQLParser.KW_SESSION_USER:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_UNIQUE:
			case PostgreSQLParser.KW_USER:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.BinaryStringConstant:
			case PostgreSQLParser.HexadecimalStringConstant:
			case PostgreSQLParser.Integral:
			case PostgreSQLParser.Numeric:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8565;
				this.a_expr();
				}
				break;
			case PostgreSQLParser.KW_ALL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8566;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_offset_value(): Select_offset_valueContext {
		let _localctx: Select_offset_valueContext = new Select_offset_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 1020, PostgreSQLParser.RULE_select_offset_value);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8569;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public select_fetch_first_value(): Select_fetch_first_valueContext {
		let _localctx: Select_fetch_first_valueContext = new Select_fetch_first_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 1022, PostgreSQLParser.RULE_select_fetch_first_value);
		try {
			this.state = 8576;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.OPEN_PAREN:
			case PostgreSQLParser.PARAM:
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_CASE:
			case PostgreSQLParser.KW_CAST:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_CURRENT_CATALOG:
			case PostgreSQLParser.KW_CURRENT_DATE:
			case PostgreSQLParser.KW_CURRENT_ROLE:
			case PostgreSQLParser.KW_CURRENT_TIME:
			case PostgreSQLParser.KW_CURRENT_TIMESTAMP:
			case PostgreSQLParser.KW_CURRENT_USER:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_LOCALTIME:
			case PostgreSQLParser.KW_LOCALTIMESTAMP:
			case PostgreSQLParser.KW_NULL:
			case PostgreSQLParser.KW_SESSION_USER:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_UNIQUE:
			case PostgreSQLParser.KW_USER:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.BinaryStringConstant:
			case PostgreSQLParser.HexadecimalStringConstant:
			case PostgreSQLParser.Integral:
			case PostgreSQLParser.Numeric:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8571;
				this.c_expr();
				}
				break;
			case PostgreSQLParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8572;
				this.match(PostgreSQLParser.PLUS);
				this.state = 8573;
				this.i_or_f_const();
				}
				break;
			case PostgreSQLParser.MINUS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8574;
				this.match(PostgreSQLParser.MINUS);
				this.state = 8575;
				this.i_or_f_const();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public i_or_f_const(): I_or_f_constContext {
		let _localctx: I_or_f_constContext = new I_or_f_constContext(this._ctx, this.state);
		this.enterRule(_localctx, 1024, PostgreSQLParser.RULE_i_or_f_const);
		try {
			this.state = 8580;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.Integral:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8578;
				this.iconst();
				}
				break;
			case PostgreSQLParser.Numeric:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8579;
				this.fconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public row_or_rows(): Row_or_rowsContext {
		let _localctx: Row_or_rowsContext = new Row_or_rowsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1026, PostgreSQLParser.RULE_row_or_rows);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8582;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_ROWS || _la === PostgreSQLParser.KW_ROW)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public first_or_next(): First_or_nextContext {
		let _localctx: First_or_nextContext = new First_or_nextContext(this._ctx, this.state);
		this.enterRule(_localctx, 1028, PostgreSQLParser.RULE_first_or_next);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8584;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_FIRST || _la === PostgreSQLParser.KW_NEXT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_clause(): Group_clauseContext {
		let _localctx: Group_clauseContext = new Group_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1030, PostgreSQLParser.RULE_group_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8586;
			this.match(PostgreSQLParser.KW_GROUP);
			this.state = 8587;
			this.match(PostgreSQLParser.KW_BY);
			this.state = 8588;
			this.group_by_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_by_list(): Group_by_listContext {
		let _localctx: Group_by_listContext = new Group_by_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1032, PostgreSQLParser.RULE_group_by_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8590;
			this.group_by_item();
			this.state = 8595;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 761, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8591;
					this.match(PostgreSQLParser.COMMA);
					this.state = 8592;
					this.group_by_item();
					}
					}
				}
				this.state = 8597;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 761, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public group_by_item(): Group_by_itemContext {
		let _localctx: Group_by_itemContext = new Group_by_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 1034, PostgreSQLParser.RULE_group_by_item);
		try {
			this.state = 8603;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 762, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8598;
				this.a_expr();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8599;
				this.empty_grouping_set();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8600;
				this.cube_clause();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8601;
				this.rollup_clause();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 8602;
				this.grouping_sets_clause();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public empty_grouping_set(): Empty_grouping_setContext {
		let _localctx: Empty_grouping_setContext = new Empty_grouping_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 1036, PostgreSQLParser.RULE_empty_grouping_set);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8605;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8606;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rollup_clause(): Rollup_clauseContext {
		let _localctx: Rollup_clauseContext = new Rollup_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1038, PostgreSQLParser.RULE_rollup_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8608;
			this.match(PostgreSQLParser.KW_ROLLUP);
			this.state = 8609;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8610;
			this.expr_list();
			this.state = 8611;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cube_clause(): Cube_clauseContext {
		let _localctx: Cube_clauseContext = new Cube_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1040, PostgreSQLParser.RULE_cube_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8613;
			this.match(PostgreSQLParser.KW_CUBE);
			this.state = 8614;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8615;
			this.expr_list();
			this.state = 8616;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grouping_sets_clause(): Grouping_sets_clauseContext {
		let _localctx: Grouping_sets_clauseContext = new Grouping_sets_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1042, PostgreSQLParser.RULE_grouping_sets_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8618;
			this.match(PostgreSQLParser.KW_GROUPING);
			this.state = 8619;
			this.match(PostgreSQLParser.KW_SETS);
			this.state = 8620;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8621;
			this.group_by_list();
			this.state = 8622;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public having_clause(): Having_clauseContext {
		let _localctx: Having_clauseContext = new Having_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1044, PostgreSQLParser.RULE_having_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8624;
			this.match(PostgreSQLParser.KW_HAVING);
			this.state = 8625;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_locking_clause(): For_locking_clauseContext {
		let _localctx: For_locking_clauseContext = new For_locking_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1046, PostgreSQLParser.RULE_for_locking_clause);
		try {
			this.state = 8631;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 763, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8627;
				this.for_locking_items();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8628;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 8629;
				this.match(PostgreSQLParser.KW_READ);
				this.state = 8630;
				this.match(PostgreSQLParser.KW_ONLY);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_for_locking_clause(): Opt_for_locking_clauseContext {
		let _localctx: Opt_for_locking_clauseContext = new Opt_for_locking_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1048, PostgreSQLParser.RULE_opt_for_locking_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8633;
			this.for_locking_clause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_locking_items(): For_locking_itemsContext {
		let _localctx: For_locking_itemsContext = new For_locking_itemsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1050, PostgreSQLParser.RULE_for_locking_items);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8636;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8635;
				this.for_locking_item();
				}
				}
				this.state = 8638;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PostgreSQLParser.KW_FOR);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_locking_item(): For_locking_itemContext {
		let _localctx: For_locking_itemContext = new For_locking_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 1052, PostgreSQLParser.RULE_for_locking_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8640;
			this.for_locking_strength();
			this.state = 8642;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_OF) {
				{
				this.state = 8641;
				this.locked_rels_list();
				}
			}

			this.state = 8645;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_NOWAIT || _la === PostgreSQLParser.KW_SKIP) {
				{
				this.state = 8644;
				this.opt_nowait_or_skip();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_locking_strength(): For_locking_strengthContext {
		let _localctx: For_locking_strengthContext = new For_locking_strengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 1054, PostgreSQLParser.RULE_for_locking_strength);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8647;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 8657;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_UPDATE:
				{
				this.state = 8650;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NO) {
					{
					this.state = 8648;
					this.match(PostgreSQLParser.KW_NO);
					this.state = 8649;
					this.match(PostgreSQLParser.KW_KEY);
					}
				}

				this.state = 8652;
				this.match(PostgreSQLParser.KW_UPDATE);
				}
				break;
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_SHARE:
				{
				this.state = 8654;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_KEY) {
					{
					this.state = 8653;
					this.match(PostgreSQLParser.KW_KEY);
					}
				}

				this.state = 8656;
				this.match(PostgreSQLParser.KW_SHARE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public locked_rels_list(): Locked_rels_listContext {
		let _localctx: Locked_rels_listContext = new Locked_rels_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1056, PostgreSQLParser.RULE_locked_rels_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8659;
			this.match(PostgreSQLParser.KW_OF);
			this.state = 8660;
			this.qualified_name_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public values_clause(): Values_clauseContext {
		let _localctx: Values_clauseContext = new Values_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1058, PostgreSQLParser.RULE_values_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8662;
			this.match(PostgreSQLParser.KW_VALUES);
			this.state = 8663;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8664;
			this.expr_list();
			this.state = 8665;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			this.state = 8673;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8666;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8667;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8668;
				this.expr_list();
				this.state = 8669;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				}
				this.state = 8675;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_clause(): From_clauseContext {
		let _localctx: From_clauseContext = new From_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1060, PostgreSQLParser.RULE_from_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8676;
			this.match(PostgreSQLParser.KW_FROM);
			this.state = 8677;
			this.from_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public from_list(): From_listContext {
		let _localctx: From_listContext = new From_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1062, PostgreSQLParser.RULE_from_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8679;
			this.table_ref();
			this.state = 8684;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 771, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 8680;
					this.match(PostgreSQLParser.COMMA);
					this.state = 8681;
					this.table_ref();
					}
					}
				}
				this.state = 8686;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 771, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_ref(): Table_refContext {
		let _localctx: Table_refContext = new Table_refContext(this._ctx, this.state);
		this.enterRule(_localctx, 1064, PostgreSQLParser.RULE_table_ref);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8745;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 785, this._ctx) ) {
			case 1:
				{
				this.state = 8687;
				this.relation_expr();
				this.state = 8689;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 772, this._ctx) ) {
				case 1:
					{
					this.state = 8688;
					this.opt_alias_clause();
					}
					break;
				}
				this.state = 8692;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_TABLESAMPLE) {
					{
					this.state = 8691;
					this.tablesample_clause();
					}
				}

				}
				break;

			case 2:
				{
				this.state = 8694;
				this.func_table();
				this.state = 8696;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 774, this._ctx) ) {
				case 1:
					{
					this.state = 8695;
					this.func_alias_clause();
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 8698;
				this.xmltable();
				this.state = 8700;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 775, this._ctx) ) {
				case 1:
					{
					this.state = 8699;
					this.opt_alias_clause();
					}
					break;
				}
				}
				break;

			case 4:
				{
				this.state = 8702;
				this.select_with_parens();
				this.state = 8704;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 776, this._ctx) ) {
				case 1:
					{
					this.state = 8703;
					this.opt_alias_clause();
					}
					break;
				}
				}
				break;

			case 5:
				{
				this.state = 8706;
				this.match(PostgreSQLParser.KW_LATERAL);
				this.state = 8719;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 780, this._ctx) ) {
				case 1:
					{
					this.state = 8707;
					this.xmltable();
					this.state = 8709;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 777, this._ctx) ) {
					case 1:
						{
						this.state = 8708;
						this.opt_alias_clause();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 8711;
					this.func_table();
					this.state = 8713;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 778, this._ctx) ) {
					case 1:
						{
						this.state = 8712;
						this.func_alias_clause();
						}
						break;
					}
					}
					break;

				case 3:
					{
					this.state = 8715;
					this.select_with_parens();
					this.state = 8717;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 779, this._ctx) ) {
					case 1:
						{
						this.state = 8716;
						this.opt_alias_clause();
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 6:
				{
				this.state = 8721;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8722;
				this.table_ref();
				this.state = 8739;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_CROSS:
					{
					this.state = 8723;
					this.match(PostgreSQLParser.KW_CROSS);
					this.state = 8724;
					this.match(PostgreSQLParser.KW_JOIN);
					this.state = 8725;
					this.table_ref();
					}
					break;
				case PostgreSQLParser.KW_NATURAL:
					{
					this.state = 8726;
					this.match(PostgreSQLParser.KW_NATURAL);
					this.state = 8728;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (PostgreSQLParser.KW_FULL - 113)) | (1 << (PostgreSQLParser.KW_INNER - 113)) | (1 << (PostgreSQLParser.KW_LEFT - 113)) | (1 << (PostgreSQLParser.KW_RIGHT - 113)))) !== 0)) {
						{
						this.state = 8727;
						this.join_type();
						}
					}

					this.state = 8730;
					this.match(PostgreSQLParser.KW_JOIN);
					this.state = 8731;
					this.table_ref();
					}
					break;
				case PostgreSQLParser.KW_FULL:
				case PostgreSQLParser.KW_INNER:
				case PostgreSQLParser.KW_JOIN:
				case PostgreSQLParser.KW_LEFT:
				case PostgreSQLParser.KW_RIGHT:
					{
					this.state = 8733;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (PostgreSQLParser.KW_FULL - 113)) | (1 << (PostgreSQLParser.KW_INNER - 113)) | (1 << (PostgreSQLParser.KW_LEFT - 113)) | (1 << (PostgreSQLParser.KW_RIGHT - 113)))) !== 0)) {
						{
						this.state = 8732;
						this.join_type();
						}
					}

					this.state = 8735;
					this.match(PostgreSQLParser.KW_JOIN);
					this.state = 8736;
					this.table_ref();
					this.state = 8737;
					this.join_qual();
					}
					break;
				case PostgreSQLParser.CLOSE_PAREN:
					break;
				default:
					break;
				}
				this.state = 8741;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 8743;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 784, this._ctx) ) {
				case 1:
					{
					this.state = 8742;
					this.opt_alias_clause();
					}
					break;
				}
				}
				break;
			}
			this.state = 8765;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 789, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 8763;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case PostgreSQLParser.KW_CROSS:
						{
						this.state = 8747;
						this.match(PostgreSQLParser.KW_CROSS);
						this.state = 8748;
						this.match(PostgreSQLParser.KW_JOIN);
						this.state = 8749;
						this.table_ref();
						}
						break;
					case PostgreSQLParser.KW_NATURAL:
						{
						this.state = 8750;
						this.match(PostgreSQLParser.KW_NATURAL);
						this.state = 8752;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (PostgreSQLParser.KW_FULL - 113)) | (1 << (PostgreSQLParser.KW_INNER - 113)) | (1 << (PostgreSQLParser.KW_LEFT - 113)) | (1 << (PostgreSQLParser.KW_RIGHT - 113)))) !== 0)) {
							{
							this.state = 8751;
							this.join_type();
							}
						}

						this.state = 8754;
						this.match(PostgreSQLParser.KW_JOIN);
						this.state = 8755;
						this.table_ref();
						}
						break;
					case PostgreSQLParser.KW_FULL:
					case PostgreSQLParser.KW_INNER:
					case PostgreSQLParser.KW_JOIN:
					case PostgreSQLParser.KW_LEFT:
					case PostgreSQLParser.KW_RIGHT:
						{
						this.state = 8757;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (PostgreSQLParser.KW_FULL - 113)) | (1 << (PostgreSQLParser.KW_INNER - 113)) | (1 << (PostgreSQLParser.KW_LEFT - 113)) | (1 << (PostgreSQLParser.KW_RIGHT - 113)))) !== 0)) {
							{
							this.state = 8756;
							this.join_type();
							}
						}

						this.state = 8759;
						this.match(PostgreSQLParser.KW_JOIN);
						this.state = 8760;
						this.table_ref();
						this.state = 8761;
						this.join_qual();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 8767;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 789, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alias_clause(): Alias_clauseContext {
		let _localctx: Alias_clauseContext = new Alias_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1066, PostgreSQLParser.RULE_alias_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_AS) {
				{
				this.state = 8768;
				this.match(PostgreSQLParser.KW_AS);
				}
			}

			this.state = 8771;
			this.colid();
			this.state = 8776;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 791, this._ctx) ) {
			case 1:
				{
				this.state = 8772;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8773;
				this.name_list();
				this.state = 8774;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_alias_clause(): Opt_alias_clauseContext {
		let _localctx: Opt_alias_clauseContext = new Opt_alias_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1068, PostgreSQLParser.RULE_opt_alias_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8778;
			this.alias_clause();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_alias_clause(): Func_alias_clauseContext {
		let _localctx: Func_alias_clauseContext = new Func_alias_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1070, PostgreSQLParser.RULE_func_alias_clause);
		let _la: number;
		try {
			this.state = 8792;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 794, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8780;
				this.alias_clause();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8786;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_AS:
					{
					this.state = 8781;
					this.match(PostgreSQLParser.KW_AS);
					this.state = 8783;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 92)) & ~0x1F) === 0 && ((1 << (_la - 92)) & ((1 << (PostgreSQLParser.KW_TABLE - 92)) | (1 << (PostgreSQLParser.KW_IS - 92)) | (1 << (PostgreSQLParser.KW_OUTER - 92)))) !== 0) || ((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (PostgreSQLParser.KW_OVER - 124)) | (1 << (PostgreSQLParser.KW_ABORT - 124)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 124)) | (1 << (PostgreSQLParser.KW_ACCESS - 124)) | (1 << (PostgreSQLParser.KW_ACTION - 124)) | (1 << (PostgreSQLParser.KW_ADD - 124)) | (1 << (PostgreSQLParser.KW_ADMIN - 124)) | (1 << (PostgreSQLParser.KW_AFTER - 124)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 124)) | (1 << (PostgreSQLParser.KW_ALSO - 124)) | (1 << (PostgreSQLParser.KW_ALTER - 124)) | (1 << (PostgreSQLParser.KW_ALWAYS - 124)) | (1 << (PostgreSQLParser.KW_ASSERTION - 124)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 124)) | (1 << (PostgreSQLParser.KW_AT - 124)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 124)) | (1 << (PostgreSQLParser.KW_BACKWARD - 124)) | (1 << (PostgreSQLParser.KW_BEFORE - 124)) | (1 << (PostgreSQLParser.KW_BEGIN - 124)) | (1 << (PostgreSQLParser.KW_BY - 124)) | (1 << (PostgreSQLParser.KW_CACHE - 124)) | (1 << (PostgreSQLParser.KW_CALLED - 124)) | (1 << (PostgreSQLParser.KW_CASCADE - 124)) | (1 << (PostgreSQLParser.KW_CASCADED - 124)) | (1 << (PostgreSQLParser.KW_CATALOG - 124)) | (1 << (PostgreSQLParser.KW_CHAIN - 124)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 124)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 124)))) !== 0) || ((((_la - 156)) & ~0x1F) === 0 && ((1 << (_la - 156)) & ((1 << (PostgreSQLParser.KW_CLASS - 156)) | (1 << (PostgreSQLParser.KW_CLOSE - 156)) | (1 << (PostgreSQLParser.KW_CLUSTER - 156)) | (1 << (PostgreSQLParser.KW_COMMENT - 156)) | (1 << (PostgreSQLParser.KW_COMMENTS - 156)) | (1 << (PostgreSQLParser.KW_COMMIT - 156)) | (1 << (PostgreSQLParser.KW_COMMITTED - 156)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 156)) | (1 << (PostgreSQLParser.KW_CONNECTION - 156)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 156)) | (1 << (PostgreSQLParser.KW_CONTENT - 156)) | (1 << (PostgreSQLParser.KW_CONTINUE - 156)) | (1 << (PostgreSQLParser.KW_CONVERSION - 156)) | (1 << (PostgreSQLParser.KW_COPY - 156)) | (1 << (PostgreSQLParser.KW_COST - 156)) | (1 << (PostgreSQLParser.KW_CSV - 156)) | (1 << (PostgreSQLParser.KW_CURSOR - 156)) | (1 << (PostgreSQLParser.KW_CYCLE - 156)) | (1 << (PostgreSQLParser.KW_DATA - 156)) | (1 << (PostgreSQLParser.KW_DATABASE - 156)) | (1 << (PostgreSQLParser.KW_DAY - 156)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 156)) | (1 << (PostgreSQLParser.KW_DECLARE - 156)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 156)) | (1 << (PostgreSQLParser.KW_DEFERRED - 156)) | (1 << (PostgreSQLParser.KW_DEFINER - 156)) | (1 << (PostgreSQLParser.KW_DELETE - 156)) | (1 << (PostgreSQLParser.KW_DELIMITER - 156)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 156)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 156)) | (1 << (PostgreSQLParser.KW_DISABLE - 156)) | (1 << (PostgreSQLParser.KW_DISCARD - 156)))) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (PostgreSQLParser.KW_DOCUMENT - 188)) | (1 << (PostgreSQLParser.KW_DOMAIN - 188)) | (1 << (PostgreSQLParser.KW_DOUBLE - 188)) | (1 << (PostgreSQLParser.KW_DROP - 188)) | (1 << (PostgreSQLParser.KW_EACH - 188)) | (1 << (PostgreSQLParser.KW_ENABLE - 188)) | (1 << (PostgreSQLParser.KW_ENCODING - 188)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 188)) | (1 << (PostgreSQLParser.KW_ENUM - 188)) | (1 << (PostgreSQLParser.KW_ESCAPE - 188)) | (1 << (PostgreSQLParser.KW_EVENT - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 188)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 188)) | (1 << (PostgreSQLParser.KW_EXECUTE - 188)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 188)) | (1 << (PostgreSQLParser.KW_EXTENSION - 188)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 188)) | (1 << (PostgreSQLParser.KW_FAMILY - 188)) | (1 << (PostgreSQLParser.KW_FIRST - 188)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 188)) | (1 << (PostgreSQLParser.KW_FORCE - 188)) | (1 << (PostgreSQLParser.KW_FORWARD - 188)) | (1 << (PostgreSQLParser.KW_FUNCTION - 188)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 188)) | (1 << (PostgreSQLParser.KW_GLOBAL - 188)) | (1 << (PostgreSQLParser.KW_GRANTED - 188)) | (1 << (PostgreSQLParser.KW_HANDLER - 188)) | (1 << (PostgreSQLParser.KW_HEADER - 188)) | (1 << (PostgreSQLParser.KW_HOLD - 188)) | (1 << (PostgreSQLParser.KW_HOUR - 188)) | (1 << (PostgreSQLParser.KW_IDENTITY - 188)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (PostgreSQLParser.KW_IF - 220)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 220)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 220)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 220)) | (1 << (PostgreSQLParser.KW_INCLUDING - 220)) | (1 << (PostgreSQLParser.KW_INCREMENT - 220)) | (1 << (PostgreSQLParser.KW_INDEX - 220)) | (1 << (PostgreSQLParser.KW_INDEXES - 220)) | (1 << (PostgreSQLParser.KW_INHERIT - 220)) | (1 << (PostgreSQLParser.KW_INHERITS - 220)) | (1 << (PostgreSQLParser.KW_INLINE - 220)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 220)) | (1 << (PostgreSQLParser.KW_INSERT - 220)) | (1 << (PostgreSQLParser.KW_INSTEAD - 220)) | (1 << (PostgreSQLParser.KW_INVOKER - 220)) | (1 << (PostgreSQLParser.KW_ISOLATION - 220)) | (1 << (PostgreSQLParser.KW_KEY - 220)) | (1 << (PostgreSQLParser.KW_LABEL - 220)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 220)) | (1 << (PostgreSQLParser.KW_LARGE - 220)) | (1 << (PostgreSQLParser.KW_LAST - 220)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 220)) | (1 << (PostgreSQLParser.KW_LEVEL - 220)))) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & ((1 << (PostgreSQLParser.KW_LISTEN - 252)) | (1 << (PostgreSQLParser.KW_LOAD - 252)) | (1 << (PostgreSQLParser.KW_LOCAL - 252)) | (1 << (PostgreSQLParser.KW_LOCATION - 252)) | (1 << (PostgreSQLParser.KW_LOCK - 252)) | (1 << (PostgreSQLParser.KW_MAPPING - 252)) | (1 << (PostgreSQLParser.KW_MATCH - 252)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 252)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 252)) | (1 << (PostgreSQLParser.KW_MINUTE - 252)) | (1 << (PostgreSQLParser.KW_MINVALUE - 252)) | (1 << (PostgreSQLParser.KW_MODE - 252)) | (1 << (PostgreSQLParser.KW_MONTH - 252)) | (1 << (PostgreSQLParser.KW_MOVE - 252)) | (1 << (PostgreSQLParser.KW_NAME - 252)) | (1 << (PostgreSQLParser.KW_NAMES - 252)) | (1 << (PostgreSQLParser.KW_NEXT - 252)) | (1 << (PostgreSQLParser.KW_NO - 252)) | (1 << (PostgreSQLParser.KW_NOTHING - 252)) | (1 << (PostgreSQLParser.KW_NOTIFY - 252)) | (1 << (PostgreSQLParser.KW_NOWAIT - 252)) | (1 << (PostgreSQLParser.KW_NULLS - 252)) | (1 << (PostgreSQLParser.KW_OBJECT - 252)) | (1 << (PostgreSQLParser.KW_OF - 252)) | (1 << (PostgreSQLParser.KW_OFF - 252)) | (1 << (PostgreSQLParser.KW_OIDS - 252)) | (1 << (PostgreSQLParser.KW_OPERATOR - 252)) | (1 << (PostgreSQLParser.KW_OPTION - 252)) | (1 << (PostgreSQLParser.KW_OPTIONS - 252)) | (1 << (PostgreSQLParser.KW_OWNED - 252)) | (1 << (PostgreSQLParser.KW_OWNER - 252)) | (1 << (PostgreSQLParser.KW_PARSER - 252)))) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & ((1 << (PostgreSQLParser.KW_PARTIAL - 284)) | (1 << (PostgreSQLParser.KW_PARTITION - 284)) | (1 << (PostgreSQLParser.KW_PASSING - 284)) | (1 << (PostgreSQLParser.KW_PASSWORD - 284)) | (1 << (PostgreSQLParser.KW_PLANS - 284)) | (1 << (PostgreSQLParser.KW_PRECEDING - 284)) | (1 << (PostgreSQLParser.KW_PREPARE - 284)) | (1 << (PostgreSQLParser.KW_PREPARED - 284)) | (1 << (PostgreSQLParser.KW_PRESERVE - 284)) | (1 << (PostgreSQLParser.KW_PRIOR - 284)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 284)) | (1 << (PostgreSQLParser.KW_PROGRAM - 284)) | (1 << (PostgreSQLParser.KW_QUOTE - 284)) | (1 << (PostgreSQLParser.KW_RANGE - 284)) | (1 << (PostgreSQLParser.KW_READ - 284)) | (1 << (PostgreSQLParser.KW_REASSIGN - 284)) | (1 << (PostgreSQLParser.KW_RECHECK - 284)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 284)) | (1 << (PostgreSQLParser.KW_REF - 284)) | (1 << (PostgreSQLParser.KW_REFRESH - 284)) | (1 << (PostgreSQLParser.KW_REINDEX - 284)) | (1 << (PostgreSQLParser.KW_RELATIVE - 284)) | (1 << (PostgreSQLParser.KW_RELEASE - 284)) | (1 << (PostgreSQLParser.KW_RENAME - 284)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 284)) | (1 << (PostgreSQLParser.KW_REPLACE - 284)) | (1 << (PostgreSQLParser.KW_REPLICA - 284)) | (1 << (PostgreSQLParser.KW_RESET - 284)) | (1 << (PostgreSQLParser.KW_RESTART - 284)) | (1 << (PostgreSQLParser.KW_RESTRICT - 284)))) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & ((1 << (PostgreSQLParser.KW_RETURNS - 316)) | (1 << (PostgreSQLParser.KW_REVOKE - 316)) | (1 << (PostgreSQLParser.KW_ROLE - 316)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 316)) | (1 << (PostgreSQLParser.KW_ROWS - 316)) | (1 << (PostgreSQLParser.KW_RULE - 316)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 316)) | (1 << (PostgreSQLParser.KW_SCHEMA - 316)) | (1 << (PostgreSQLParser.KW_SCROLL - 316)) | (1 << (PostgreSQLParser.KW_SEARCH - 316)) | (1 << (PostgreSQLParser.KW_SECOND - 316)) | (1 << (PostgreSQLParser.KW_SECURITY - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 316)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 316)) | (1 << (PostgreSQLParser.KW_SERVER - 316)) | (1 << (PostgreSQLParser.KW_SESSION - 316)) | (1 << (PostgreSQLParser.KW_SET - 316)) | (1 << (PostgreSQLParser.KW_SHARE - 316)) | (1 << (PostgreSQLParser.KW_SHOW - 316)) | (1 << (PostgreSQLParser.KW_SIMPLE - 316)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 316)) | (1 << (PostgreSQLParser.KW_STABLE - 316)) | (1 << (PostgreSQLParser.KW_STANDALONE - 316)) | (1 << (PostgreSQLParser.KW_START - 316)) | (1 << (PostgreSQLParser.KW_STATEMENT - 316)) | (1 << (PostgreSQLParser.KW_STATISTICS - 316)) | (1 << (PostgreSQLParser.KW_STDIN - 316)) | (1 << (PostgreSQLParser.KW_STDOUT - 316)) | (1 << (PostgreSQLParser.KW_STORAGE - 316)) | (1 << (PostgreSQLParser.KW_STRICT - 316)) | (1 << (PostgreSQLParser.KW_STRIP - 316)))) !== 0) || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (PostgreSQLParser.KW_SYSID - 348)) | (1 << (PostgreSQLParser.KW_SYSTEM - 348)) | (1 << (PostgreSQLParser.KW_TABLES - 348)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 348)) | (1 << (PostgreSQLParser.KW_TEMP - 348)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 348)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 348)) | (1 << (PostgreSQLParser.KW_TEXT - 348)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 348)) | (1 << (PostgreSQLParser.KW_TRIGGER - 348)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 348)) | (1 << (PostgreSQLParser.KW_TRUSTED - 348)) | (1 << (PostgreSQLParser.KW_TYPE - 348)) | (1 << (PostgreSQLParser.KW_TYPES - 348)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 348)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 348)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 348)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 348)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 348)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 348)) | (1 << (PostgreSQLParser.KW_UNTIL - 348)) | (1 << (PostgreSQLParser.KW_UPDATE - 348)) | (1 << (PostgreSQLParser.KW_VACUUM - 348)) | (1 << (PostgreSQLParser.KW_VALID - 348)) | (1 << (PostgreSQLParser.KW_VALIDATE - 348)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 348)) | (1 << (PostgreSQLParser.KW_VARYING - 348)) | (1 << (PostgreSQLParser.KW_VERSION - 348)) | (1 << (PostgreSQLParser.KW_VIEW - 348)) | (1 << (PostgreSQLParser.KW_VOLATILE - 348)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 348)) | (1 << (PostgreSQLParser.KW_WITHOUT - 348)))) !== 0) || ((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (PostgreSQLParser.KW_WORK - 380)) | (1 << (PostgreSQLParser.KW_WRAPPER - 380)) | (1 << (PostgreSQLParser.KW_WRITE - 380)) | (1 << (PostgreSQLParser.KW_XML - 380)) | (1 << (PostgreSQLParser.KW_YEAR - 380)) | (1 << (PostgreSQLParser.KW_YES - 380)) | (1 << (PostgreSQLParser.KW_ZONE - 380)) | (1 << (PostgreSQLParser.KW_BETWEEN - 380)) | (1 << (PostgreSQLParser.KW_BIGINT - 380)) | (1 << (PostgreSQLParser.KW_BIT - 380)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 380)) | (1 << (PostgreSQLParser.KW_CHAR - 380)) | (1 << (PostgreSQLParser.KW_CHARACTER - 380)) | (1 << (PostgreSQLParser.KW_COALESCE - 380)) | (1 << (PostgreSQLParser.KW_DEC - 380)) | (1 << (PostgreSQLParser.KW_DECIMAL - 380)) | (1 << (PostgreSQLParser.KW_EXISTS - 380)) | (1 << (PostgreSQLParser.KW_EXTRACT - 380)) | (1 << (PostgreSQLParser.KW_FLOAT - 380)) | (1 << (PostgreSQLParser.KW_GREATEST - 380)) | (1 << (PostgreSQLParser.KW_INOUT - 380)) | (1 << (PostgreSQLParser.KW_INT - 380)) | (1 << (PostgreSQLParser.KW_INTEGER - 380)) | (1 << (PostgreSQLParser.KW_INTERVAL - 380)) | (1 << (PostgreSQLParser.KW_LEAST - 380)) | (1 << (PostgreSQLParser.KW_NATIONAL - 380)) | (1 << (PostgreSQLParser.KW_NCHAR - 380)) | (1 << (PostgreSQLParser.KW_NONE - 380)) | (1 << (PostgreSQLParser.KW_NULLIF - 380)) | (1 << (PostgreSQLParser.KW_NUMERIC - 380)) | (1 << (PostgreSQLParser.KW_OVERLAY - 380)) | (1 << (PostgreSQLParser.KW_POSITION - 380)))) !== 0) || ((((_la - 412)) & ~0x1F) === 0 && ((1 << (_la - 412)) & ((1 << (PostgreSQLParser.KW_PRECISION - 412)) | (1 << (PostgreSQLParser.KW_REAL - 412)) | (1 << (PostgreSQLParser.KW_ROW - 412)) | (1 << (PostgreSQLParser.KW_SETOF - 412)) | (1 << (PostgreSQLParser.KW_SMALLINT - 412)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 412)) | (1 << (PostgreSQLParser.KW_TIME - 412)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 412)) | (1 << (PostgreSQLParser.KW_TREAT - 412)) | (1 << (PostgreSQLParser.KW_TRIM - 412)) | (1 << (PostgreSQLParser.KW_VALUES - 412)) | (1 << (PostgreSQLParser.KW_VARCHAR - 412)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 412)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 412)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 412)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 412)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 412)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 412)) | (1 << (PostgreSQLParser.KW_XMLPI - 412)) | (1 << (PostgreSQLParser.KW_XMLROOT - 412)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 412)) | (1 << (PostgreSQLParser.KW_CALL - 412)) | (1 << (PostgreSQLParser.KW_CURRENT - 412)) | (1 << (PostgreSQLParser.KW_ATTACH - 412)) | (1 << (PostgreSQLParser.KW_DETACH - 412)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 412)) | (1 << (PostgreSQLParser.KW_GENERATED - 412)) | (1 << (PostgreSQLParser.KW_LOGGED - 412)) | (1 << (PostgreSQLParser.KW_STORED - 412)) | (1 << (PostgreSQLParser.KW_INCLUDE - 412)) | (1 << (PostgreSQLParser.KW_ROUTINE - 412)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 412)))) !== 0) || ((((_la - 444)) & ~0x1F) === 0 && ((1 << (_la - 444)) & ((1 << (PostgreSQLParser.KW_IMPORT - 444)) | (1 << (PostgreSQLParser.KW_POLICY - 444)) | (1 << (PostgreSQLParser.KW_METHOD - 444)) | (1 << (PostgreSQLParser.KW_REFERENCING - 444)) | (1 << (PostgreSQLParser.KW_NEW - 444)) | (1 << (PostgreSQLParser.KW_OLD - 444)) | (1 << (PostgreSQLParser.KW_VALUE - 444)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 444)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 444)) | (1 << (PostgreSQLParser.KW_OUT - 444)) | (1 << (PostgreSQLParser.KW_ROUTINES - 444)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 444)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 444)) | (1 << (PostgreSQLParser.KW_INPUT - 444)) | (1 << (PostgreSQLParser.KW_SUPPORT - 444)) | (1 << (PostgreSQLParser.KW_PARALLEL - 444)) | (1 << (PostgreSQLParser.KW_SQL - 444)) | (1 << (PostgreSQLParser.KW_DEPENDS - 444)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 444)) | (1 << (PostgreSQLParser.KW_CONFLICT - 444)) | (1 << (PostgreSQLParser.KW_SKIP - 444)) | (1 << (PostgreSQLParser.KW_LOCKED - 444)) | (1 << (PostgreSQLParser.KW_TIES - 444)) | (1 << (PostgreSQLParser.KW_ROLLUP - 444)) | (1 << (PostgreSQLParser.KW_CUBE - 444)) | (1 << (PostgreSQLParser.KW_GROUPING - 444)) | (1 << (PostgreSQLParser.KW_SETS - 444)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 444)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 444)) | (1 << (PostgreSQLParser.KW_COLUMNS - 444)))) !== 0) || ((((_la - 476)) & ~0x1F) === 0 && ((1 << (_la - 476)) & ((1 << (PostgreSQLParser.KW_XMLNAMESPACES - 476)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 476)) | (1 << (PostgreSQLParser.KW_WITHIN - 476)) | (1 << (PostgreSQLParser.KW_FILTER - 476)) | (1 << (PostgreSQLParser.KW_GROUPS - 476)) | (1 << (PostgreSQLParser.KW_OTHERS - 476)) | (1 << (PostgreSQLParser.KW_NFC - 476)) | (1 << (PostgreSQLParser.KW_NFD - 476)) | (1 << (PostgreSQLParser.KW_NFKC - 476)) | (1 << (PostgreSQLParser.KW_NFKD - 476)) | (1 << (PostgreSQLParser.KW_UESCAPE - 476)) | (1 << (PostgreSQLParser.KW_VIEWS - 476)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 476)) | (1 << (PostgreSQLParser.KW_DUMP - 476)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 476)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 476)) | (1 << (PostgreSQLParser.KW_ERROR - 476)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 476)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 476)) | (1 << (PostgreSQLParser.KW_ALIAS - 476)) | (1 << (PostgreSQLParser.KW_CONSTANT - 476)) | (1 << (PostgreSQLParser.KW_PERFORM - 476)) | (1 << (PostgreSQLParser.KW_GET - 476)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 476)) | (1 << (PostgreSQLParser.KW_STACKED - 476)) | (1 << (PostgreSQLParser.KW_ELSIF - 476)) | (1 << (PostgreSQLParser.KW_REVERSE - 476)) | (1 << (PostgreSQLParser.KW_SLICE - 476)) | (1 << (PostgreSQLParser.KW_EXIT - 476)))) !== 0) || ((((_la - 508)) & ~0x1F) === 0 && ((1 << (_la - 508)) & ((1 << (PostgreSQLParser.KW_RETURN - 508)) | (1 << (PostgreSQLParser.KW_QUERY - 508)) | (1 << (PostgreSQLParser.KW_RAISE - 508)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 508)) | (1 << (PostgreSQLParser.KW_DEBUG - 508)) | (1 << (PostgreSQLParser.KW_LOG - 508)) | (1 << (PostgreSQLParser.KW_INFO - 508)) | (1 << (PostgreSQLParser.KW_NOTICE - 508)) | (1 << (PostgreSQLParser.KW_WARNING - 508)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 508)) | (1 << (PostgreSQLParser.KW_ASSERT - 508)) | (1 << (PostgreSQLParser.KW_OPEN - 508)) | (1 << (PostgreSQLParser.Identifier - 508)) | (1 << (PostgreSQLParser.QuotedIdentifier - 508)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 508)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
						{
						this.state = 8782;
						this.colid();
						}
					}

					}
					break;
				case PostgreSQLParser.KW_AND:
				case PostgreSQLParser.KW_ARRAY:
				case PostgreSQLParser.KW_COLLATE:
				case PostgreSQLParser.KW_COLUMN:
				case PostgreSQLParser.KW_CONSTRAINT:
				case PostgreSQLParser.KW_DEFAULT:
				case PostgreSQLParser.KW_DO:
				case PostgreSQLParser.KW_FETCH:
				case PostgreSQLParser.KW_TABLE:
				case PostgreSQLParser.KW_IS:
				case PostgreSQLParser.KW_OUTER:
				case PostgreSQLParser.KW_OVER:
				case PostgreSQLParser.KW_ABORT:
				case PostgreSQLParser.KW_ABSOLUTE:
				case PostgreSQLParser.KW_ACCESS:
				case PostgreSQLParser.KW_ACTION:
				case PostgreSQLParser.KW_ADD:
				case PostgreSQLParser.KW_ADMIN:
				case PostgreSQLParser.KW_AFTER:
				case PostgreSQLParser.KW_AGGREGATE:
				case PostgreSQLParser.KW_ALSO:
				case PostgreSQLParser.KW_ALTER:
				case PostgreSQLParser.KW_ALWAYS:
				case PostgreSQLParser.KW_ASSERTION:
				case PostgreSQLParser.KW_ASSIGNMENT:
				case PostgreSQLParser.KW_AT:
				case PostgreSQLParser.KW_ATTRIBUTE:
				case PostgreSQLParser.KW_BACKWARD:
				case PostgreSQLParser.KW_BEFORE:
				case PostgreSQLParser.KW_BEGIN:
				case PostgreSQLParser.KW_BY:
				case PostgreSQLParser.KW_CACHE:
				case PostgreSQLParser.KW_CALLED:
				case PostgreSQLParser.KW_CASCADE:
				case PostgreSQLParser.KW_CASCADED:
				case PostgreSQLParser.KW_CATALOG:
				case PostgreSQLParser.KW_CHAIN:
				case PostgreSQLParser.KW_CHARACTERISTICS:
				case PostgreSQLParser.KW_CHECKPOINT:
				case PostgreSQLParser.KW_CLASS:
				case PostgreSQLParser.KW_CLOSE:
				case PostgreSQLParser.KW_CLUSTER:
				case PostgreSQLParser.KW_COMMENT:
				case PostgreSQLParser.KW_COMMENTS:
				case PostgreSQLParser.KW_COMMIT:
				case PostgreSQLParser.KW_COMMITTED:
				case PostgreSQLParser.KW_CONFIGURATION:
				case PostgreSQLParser.KW_CONNECTION:
				case PostgreSQLParser.KW_CONSTRAINTS:
				case PostgreSQLParser.KW_CONTENT:
				case PostgreSQLParser.KW_CONTINUE:
				case PostgreSQLParser.KW_CONVERSION:
				case PostgreSQLParser.KW_COPY:
				case PostgreSQLParser.KW_COST:
				case PostgreSQLParser.KW_CSV:
				case PostgreSQLParser.KW_CURSOR:
				case PostgreSQLParser.KW_CYCLE:
				case PostgreSQLParser.KW_DATA:
				case PostgreSQLParser.KW_DATABASE:
				case PostgreSQLParser.KW_DAY:
				case PostgreSQLParser.KW_DEALLOCATE:
				case PostgreSQLParser.KW_DECLARE:
				case PostgreSQLParser.KW_DEFAULTS:
				case PostgreSQLParser.KW_DEFERRED:
				case PostgreSQLParser.KW_DEFINER:
				case PostgreSQLParser.KW_DELETE:
				case PostgreSQLParser.KW_DELIMITER:
				case PostgreSQLParser.KW_DELIMITERS:
				case PostgreSQLParser.KW_DICTIONARY:
				case PostgreSQLParser.KW_DISABLE:
				case PostgreSQLParser.KW_DISCARD:
				case PostgreSQLParser.KW_DOCUMENT:
				case PostgreSQLParser.KW_DOMAIN:
				case PostgreSQLParser.KW_DOUBLE:
				case PostgreSQLParser.KW_DROP:
				case PostgreSQLParser.KW_EACH:
				case PostgreSQLParser.KW_ENABLE:
				case PostgreSQLParser.KW_ENCODING:
				case PostgreSQLParser.KW_ENCRYPTED:
				case PostgreSQLParser.KW_ENUM:
				case PostgreSQLParser.KW_ESCAPE:
				case PostgreSQLParser.KW_EVENT:
				case PostgreSQLParser.KW_EXCLUDE:
				case PostgreSQLParser.KW_EXCLUDING:
				case PostgreSQLParser.KW_EXCLUSIVE:
				case PostgreSQLParser.KW_EXECUTE:
				case PostgreSQLParser.KW_EXPLAIN:
				case PostgreSQLParser.KW_EXTENSION:
				case PostgreSQLParser.KW_EXTERNAL:
				case PostgreSQLParser.KW_FAMILY:
				case PostgreSQLParser.KW_FIRST:
				case PostgreSQLParser.KW_FOLLOWING:
				case PostgreSQLParser.KW_FORCE:
				case PostgreSQLParser.KW_FORWARD:
				case PostgreSQLParser.KW_FUNCTION:
				case PostgreSQLParser.KW_FUNCTIONS:
				case PostgreSQLParser.KW_GLOBAL:
				case PostgreSQLParser.KW_GRANTED:
				case PostgreSQLParser.KW_HANDLER:
				case PostgreSQLParser.KW_HEADER:
				case PostgreSQLParser.KW_HOLD:
				case PostgreSQLParser.KW_HOUR:
				case PostgreSQLParser.KW_IDENTITY:
				case PostgreSQLParser.KW_IF:
				case PostgreSQLParser.KW_IMMEDIATE:
				case PostgreSQLParser.KW_IMMUTABLE:
				case PostgreSQLParser.KW_IMPLICIT:
				case PostgreSQLParser.KW_INCLUDING:
				case PostgreSQLParser.KW_INCREMENT:
				case PostgreSQLParser.KW_INDEX:
				case PostgreSQLParser.KW_INDEXES:
				case PostgreSQLParser.KW_INHERIT:
				case PostgreSQLParser.KW_INHERITS:
				case PostgreSQLParser.KW_INLINE:
				case PostgreSQLParser.KW_INSENSITIVE:
				case PostgreSQLParser.KW_INSERT:
				case PostgreSQLParser.KW_INSTEAD:
				case PostgreSQLParser.KW_INVOKER:
				case PostgreSQLParser.KW_ISOLATION:
				case PostgreSQLParser.KW_KEY:
				case PostgreSQLParser.KW_LABEL:
				case PostgreSQLParser.KW_LANGUAGE:
				case PostgreSQLParser.KW_LARGE:
				case PostgreSQLParser.KW_LAST:
				case PostgreSQLParser.KW_LEAKPROOF:
				case PostgreSQLParser.KW_LEVEL:
				case PostgreSQLParser.KW_LISTEN:
				case PostgreSQLParser.KW_LOAD:
				case PostgreSQLParser.KW_LOCAL:
				case PostgreSQLParser.KW_LOCATION:
				case PostgreSQLParser.KW_LOCK:
				case PostgreSQLParser.KW_MAPPING:
				case PostgreSQLParser.KW_MATCH:
				case PostgreSQLParser.KW_MATERIALIZED:
				case PostgreSQLParser.KW_MAXVALUE:
				case PostgreSQLParser.KW_MINUTE:
				case PostgreSQLParser.KW_MINVALUE:
				case PostgreSQLParser.KW_MODE:
				case PostgreSQLParser.KW_MONTH:
				case PostgreSQLParser.KW_MOVE:
				case PostgreSQLParser.KW_NAME:
				case PostgreSQLParser.KW_NAMES:
				case PostgreSQLParser.KW_NEXT:
				case PostgreSQLParser.KW_NO:
				case PostgreSQLParser.KW_NOTHING:
				case PostgreSQLParser.KW_NOTIFY:
				case PostgreSQLParser.KW_NOWAIT:
				case PostgreSQLParser.KW_NULLS:
				case PostgreSQLParser.KW_OBJECT:
				case PostgreSQLParser.KW_OF:
				case PostgreSQLParser.KW_OFF:
				case PostgreSQLParser.KW_OIDS:
				case PostgreSQLParser.KW_OPERATOR:
				case PostgreSQLParser.KW_OPTION:
				case PostgreSQLParser.KW_OPTIONS:
				case PostgreSQLParser.KW_OWNED:
				case PostgreSQLParser.KW_OWNER:
				case PostgreSQLParser.KW_PARSER:
				case PostgreSQLParser.KW_PARTIAL:
				case PostgreSQLParser.KW_PARTITION:
				case PostgreSQLParser.KW_PASSING:
				case PostgreSQLParser.KW_PASSWORD:
				case PostgreSQLParser.KW_PLANS:
				case PostgreSQLParser.KW_PRECEDING:
				case PostgreSQLParser.KW_PREPARE:
				case PostgreSQLParser.KW_PREPARED:
				case PostgreSQLParser.KW_PRESERVE:
				case PostgreSQLParser.KW_PRIOR:
				case PostgreSQLParser.KW_PRIVILEGES:
				case PostgreSQLParser.KW_PROCEDURAL:
				case PostgreSQLParser.KW_PROCEDURE:
				case PostgreSQLParser.KW_PROGRAM:
				case PostgreSQLParser.KW_QUOTE:
				case PostgreSQLParser.KW_RANGE:
				case PostgreSQLParser.KW_READ:
				case PostgreSQLParser.KW_REASSIGN:
				case PostgreSQLParser.KW_RECHECK:
				case PostgreSQLParser.KW_RECURSIVE:
				case PostgreSQLParser.KW_REF:
				case PostgreSQLParser.KW_REFRESH:
				case PostgreSQLParser.KW_REINDEX:
				case PostgreSQLParser.KW_RELATIVE:
				case PostgreSQLParser.KW_RELEASE:
				case PostgreSQLParser.KW_RENAME:
				case PostgreSQLParser.KW_REPEATABLE:
				case PostgreSQLParser.KW_REPLACE:
				case PostgreSQLParser.KW_REPLICA:
				case PostgreSQLParser.KW_RESET:
				case PostgreSQLParser.KW_RESTART:
				case PostgreSQLParser.KW_RESTRICT:
				case PostgreSQLParser.KW_RETURNS:
				case PostgreSQLParser.KW_REVOKE:
				case PostgreSQLParser.KW_ROLE:
				case PostgreSQLParser.KW_ROLLBACK:
				case PostgreSQLParser.KW_ROWS:
				case PostgreSQLParser.KW_RULE:
				case PostgreSQLParser.KW_SAVEPOINT:
				case PostgreSQLParser.KW_SCHEMA:
				case PostgreSQLParser.KW_SCROLL:
				case PostgreSQLParser.KW_SEARCH:
				case PostgreSQLParser.KW_SECOND:
				case PostgreSQLParser.KW_SECURITY:
				case PostgreSQLParser.KW_SEQUENCE:
				case PostgreSQLParser.KW_SEQUENCES:
				case PostgreSQLParser.KW_SERIALIZABLE:
				case PostgreSQLParser.KW_SERVER:
				case PostgreSQLParser.KW_SESSION:
				case PostgreSQLParser.KW_SET:
				case PostgreSQLParser.KW_SHARE:
				case PostgreSQLParser.KW_SHOW:
				case PostgreSQLParser.KW_SIMPLE:
				case PostgreSQLParser.KW_SNAPSHOT:
				case PostgreSQLParser.KW_STABLE:
				case PostgreSQLParser.KW_STANDALONE:
				case PostgreSQLParser.KW_START:
				case PostgreSQLParser.KW_STATEMENT:
				case PostgreSQLParser.KW_STATISTICS:
				case PostgreSQLParser.KW_STDIN:
				case PostgreSQLParser.KW_STDOUT:
				case PostgreSQLParser.KW_STORAGE:
				case PostgreSQLParser.KW_STRICT:
				case PostgreSQLParser.KW_STRIP:
				case PostgreSQLParser.KW_SYSID:
				case PostgreSQLParser.KW_SYSTEM:
				case PostgreSQLParser.KW_TABLES:
				case PostgreSQLParser.KW_TABLESPACE:
				case PostgreSQLParser.KW_TEMP:
				case PostgreSQLParser.KW_TEMPLATE:
				case PostgreSQLParser.KW_TEMPORARY:
				case PostgreSQLParser.KW_TEXT:
				case PostgreSQLParser.KW_TRANSACTION:
				case PostgreSQLParser.KW_TRIGGER:
				case PostgreSQLParser.KW_TRUNCATE:
				case PostgreSQLParser.KW_TRUSTED:
				case PostgreSQLParser.KW_TYPE:
				case PostgreSQLParser.KW_TYPES:
				case PostgreSQLParser.KW_UNBOUNDED:
				case PostgreSQLParser.KW_UNCOMMITTED:
				case PostgreSQLParser.KW_UNENCRYPTED:
				case PostgreSQLParser.KW_UNKNOWN:
				case PostgreSQLParser.KW_UNLISTEN:
				case PostgreSQLParser.KW_UNLOGGED:
				case PostgreSQLParser.KW_UNTIL:
				case PostgreSQLParser.KW_UPDATE:
				case PostgreSQLParser.KW_VACUUM:
				case PostgreSQLParser.KW_VALID:
				case PostgreSQLParser.KW_VALIDATE:
				case PostgreSQLParser.KW_VALIDATOR:
				case PostgreSQLParser.KW_VARYING:
				case PostgreSQLParser.KW_VERSION:
				case PostgreSQLParser.KW_VIEW:
				case PostgreSQLParser.KW_VOLATILE:
				case PostgreSQLParser.KW_WHITESPACE:
				case PostgreSQLParser.KW_WITHOUT:
				case PostgreSQLParser.KW_WORK:
				case PostgreSQLParser.KW_WRAPPER:
				case PostgreSQLParser.KW_WRITE:
				case PostgreSQLParser.KW_XML:
				case PostgreSQLParser.KW_YEAR:
				case PostgreSQLParser.KW_YES:
				case PostgreSQLParser.KW_ZONE:
				case PostgreSQLParser.KW_BETWEEN:
				case PostgreSQLParser.KW_BIGINT:
				case PostgreSQLParser.KW_BIT:
				case PostgreSQLParser.KW_BOOLEAN:
				case PostgreSQLParser.KW_CHAR:
				case PostgreSQLParser.KW_CHARACTER:
				case PostgreSQLParser.KW_COALESCE:
				case PostgreSQLParser.KW_DEC:
				case PostgreSQLParser.KW_DECIMAL:
				case PostgreSQLParser.KW_EXISTS:
				case PostgreSQLParser.KW_EXTRACT:
				case PostgreSQLParser.KW_FLOAT:
				case PostgreSQLParser.KW_GREATEST:
				case PostgreSQLParser.KW_INOUT:
				case PostgreSQLParser.KW_INT:
				case PostgreSQLParser.KW_INTEGER:
				case PostgreSQLParser.KW_INTERVAL:
				case PostgreSQLParser.KW_LEAST:
				case PostgreSQLParser.KW_NATIONAL:
				case PostgreSQLParser.KW_NCHAR:
				case PostgreSQLParser.KW_NONE:
				case PostgreSQLParser.KW_NULLIF:
				case PostgreSQLParser.KW_NUMERIC:
				case PostgreSQLParser.KW_OVERLAY:
				case PostgreSQLParser.KW_POSITION:
				case PostgreSQLParser.KW_PRECISION:
				case PostgreSQLParser.KW_REAL:
				case PostgreSQLParser.KW_ROW:
				case PostgreSQLParser.KW_SETOF:
				case PostgreSQLParser.KW_SMALLINT:
				case PostgreSQLParser.KW_SUBSTRING:
				case PostgreSQLParser.KW_TIME:
				case PostgreSQLParser.KW_TIMESTAMP:
				case PostgreSQLParser.KW_TREAT:
				case PostgreSQLParser.KW_TRIM:
				case PostgreSQLParser.KW_VALUES:
				case PostgreSQLParser.KW_VARCHAR:
				case PostgreSQLParser.KW_XMLATTRIBUTES:
				case PostgreSQLParser.KW_XMLCONCAT:
				case PostgreSQLParser.KW_XMLELEMENT:
				case PostgreSQLParser.KW_XMLEXISTS:
				case PostgreSQLParser.KW_XMLFOREST:
				case PostgreSQLParser.KW_XMLPARSE:
				case PostgreSQLParser.KW_XMLPI:
				case PostgreSQLParser.KW_XMLROOT:
				case PostgreSQLParser.KW_XMLSERIALIZE:
				case PostgreSQLParser.KW_CALL:
				case PostgreSQLParser.KW_CURRENT:
				case PostgreSQLParser.KW_ATTACH:
				case PostgreSQLParser.KW_DETACH:
				case PostgreSQLParser.KW_EXPRESSION:
				case PostgreSQLParser.KW_GENERATED:
				case PostgreSQLParser.KW_LOGGED:
				case PostgreSQLParser.KW_STORED:
				case PostgreSQLParser.KW_INCLUDE:
				case PostgreSQLParser.KW_ROUTINE:
				case PostgreSQLParser.KW_TRANSFORM:
				case PostgreSQLParser.KW_IMPORT:
				case PostgreSQLParser.KW_POLICY:
				case PostgreSQLParser.KW_METHOD:
				case PostgreSQLParser.KW_REFERENCING:
				case PostgreSQLParser.KW_NEW:
				case PostgreSQLParser.KW_OLD:
				case PostgreSQLParser.KW_VALUE:
				case PostgreSQLParser.KW_SUBSCRIPTION:
				case PostgreSQLParser.KW_PUBLICATION:
				case PostgreSQLParser.KW_OUT:
				case PostgreSQLParser.KW_ROUTINES:
				case PostgreSQLParser.KW_SCHEMAS:
				case PostgreSQLParser.KW_PROCEDURES:
				case PostgreSQLParser.KW_INPUT:
				case PostgreSQLParser.KW_SUPPORT:
				case PostgreSQLParser.KW_PARALLEL:
				case PostgreSQLParser.KW_SQL:
				case PostgreSQLParser.KW_DEPENDS:
				case PostgreSQLParser.KW_OVERRIDING:
				case PostgreSQLParser.KW_CONFLICT:
				case PostgreSQLParser.KW_SKIP:
				case PostgreSQLParser.KW_LOCKED:
				case PostgreSQLParser.KW_TIES:
				case PostgreSQLParser.KW_ROLLUP:
				case PostgreSQLParser.KW_CUBE:
				case PostgreSQLParser.KW_GROUPING:
				case PostgreSQLParser.KW_SETS:
				case PostgreSQLParser.KW_ORDINALITY:
				case PostgreSQLParser.KW_XMLTABLE:
				case PostgreSQLParser.KW_COLUMNS:
				case PostgreSQLParser.KW_XMLNAMESPACES:
				case PostgreSQLParser.KW_ROWTYPE:
				case PostgreSQLParser.KW_NORMALIZED:
				case PostgreSQLParser.KW_WITHIN:
				case PostgreSQLParser.KW_FILTER:
				case PostgreSQLParser.KW_GROUPS:
				case PostgreSQLParser.KW_OTHERS:
				case PostgreSQLParser.KW_NFC:
				case PostgreSQLParser.KW_NFD:
				case PostgreSQLParser.KW_NFKC:
				case PostgreSQLParser.KW_NFKD:
				case PostgreSQLParser.KW_UESCAPE:
				case PostgreSQLParser.KW_VIEWS:
				case PostgreSQLParser.KW_NORMALIZE:
				case PostgreSQLParser.KW_DUMP:
				case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
				case PostgreSQLParser.KW_VARIABLE_CONFLICT:
				case PostgreSQLParser.KW_ERROR:
				case PostgreSQLParser.KW_USE_VARIABLE:
				case PostgreSQLParser.KW_USE_COLUMN:
				case PostgreSQLParser.KW_ALIAS:
				case PostgreSQLParser.KW_CONSTANT:
				case PostgreSQLParser.KW_PERFORM:
				case PostgreSQLParser.KW_GET:
				case PostgreSQLParser.KW_DIAGNOSTICS:
				case PostgreSQLParser.KW_STACKED:
				case PostgreSQLParser.KW_ELSIF:
				case PostgreSQLParser.KW_REVERSE:
				case PostgreSQLParser.KW_SLICE:
				case PostgreSQLParser.KW_EXIT:
				case PostgreSQLParser.KW_RETURN:
				case PostgreSQLParser.KW_QUERY:
				case PostgreSQLParser.KW_RAISE:
				case PostgreSQLParser.KW_SQLSTATE:
				case PostgreSQLParser.KW_DEBUG:
				case PostgreSQLParser.KW_LOG:
				case PostgreSQLParser.KW_INFO:
				case PostgreSQLParser.KW_NOTICE:
				case PostgreSQLParser.KW_WARNING:
				case PostgreSQLParser.KW_EXCEPTION:
				case PostgreSQLParser.KW_ASSERT:
				case PostgreSQLParser.KW_OPEN:
				case PostgreSQLParser.Identifier:
				case PostgreSQLParser.QuotedIdentifier:
				case PostgreSQLParser.UnicodeQuotedIdentifier:
				case PostgreSQLParser.PLSQLVARIABLENAME:
				case PostgreSQLParser.PLSQLIDENTIFIER:
					{
					this.state = 8785;
					this.colid();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 8788;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8789;
				this.tablefuncelementlist();
				this.state = 8790;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public join_type(): Join_typeContext {
		let _localctx: Join_typeContext = new Join_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1072, PostgreSQLParser.RULE_join_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8794;
			_la = this._input.LA(1);
			if (!(((((_la - 113)) & ~0x1F) === 0 && ((1 << (_la - 113)) & ((1 << (PostgreSQLParser.KW_FULL - 113)) | (1 << (PostgreSQLParser.KW_INNER - 113)) | (1 << (PostgreSQLParser.KW_LEFT - 113)) | (1 << (PostgreSQLParser.KW_RIGHT - 113)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 8796;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_OUTER) {
				{
				this.state = 8795;
				this.match(PostgreSQLParser.KW_OUTER);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public join_qual(): Join_qualContext {
		let _localctx: Join_qualContext = new Join_qualContext(this._ctx, this.state);
		this.enterRule(_localctx, 1074, PostgreSQLParser.RULE_join_qual);
		try {
			this.state = 8805;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_USING:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8798;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 8799;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8800;
				this.name_list();
				this.state = 8801;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_ON:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8803;
				this.match(PostgreSQLParser.KW_ON);
				this.state = 8804;
				this.a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relation_expr(): Relation_exprContext {
		let _localctx: Relation_exprContext = new Relation_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 1076, PostgreSQLParser.RULE_relation_expr);
		let _la: number;
		try {
			this.state = 8822;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 800, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8808;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ONLY) {
					{
					this.state = 8807;
					this.match(PostgreSQLParser.KW_ONLY);
					}
				}

				this.state = 8810;
				this.qualified_name();
				this.state = 8812;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.STAR) {
					{
					this.state = 8811;
					this.match(PostgreSQLParser.STAR);
					}
				}

				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8814;
				this.match(PostgreSQLParser.KW_ONLY);
				this.state = 8820;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_AND:
				case PostgreSQLParser.KW_ARRAY:
				case PostgreSQLParser.KW_COLLATE:
				case PostgreSQLParser.KW_COLUMN:
				case PostgreSQLParser.KW_CONSTRAINT:
				case PostgreSQLParser.KW_DEFAULT:
				case PostgreSQLParser.KW_DO:
				case PostgreSQLParser.KW_FETCH:
				case PostgreSQLParser.KW_TABLE:
				case PostgreSQLParser.KW_IS:
				case PostgreSQLParser.KW_OUTER:
				case PostgreSQLParser.KW_OVER:
				case PostgreSQLParser.KW_ABORT:
				case PostgreSQLParser.KW_ABSOLUTE:
				case PostgreSQLParser.KW_ACCESS:
				case PostgreSQLParser.KW_ACTION:
				case PostgreSQLParser.KW_ADD:
				case PostgreSQLParser.KW_ADMIN:
				case PostgreSQLParser.KW_AFTER:
				case PostgreSQLParser.KW_AGGREGATE:
				case PostgreSQLParser.KW_ALSO:
				case PostgreSQLParser.KW_ALTER:
				case PostgreSQLParser.KW_ALWAYS:
				case PostgreSQLParser.KW_ASSERTION:
				case PostgreSQLParser.KW_ASSIGNMENT:
				case PostgreSQLParser.KW_AT:
				case PostgreSQLParser.KW_ATTRIBUTE:
				case PostgreSQLParser.KW_BACKWARD:
				case PostgreSQLParser.KW_BEFORE:
				case PostgreSQLParser.KW_BEGIN:
				case PostgreSQLParser.KW_BY:
				case PostgreSQLParser.KW_CACHE:
				case PostgreSQLParser.KW_CALLED:
				case PostgreSQLParser.KW_CASCADE:
				case PostgreSQLParser.KW_CASCADED:
				case PostgreSQLParser.KW_CATALOG:
				case PostgreSQLParser.KW_CHAIN:
				case PostgreSQLParser.KW_CHARACTERISTICS:
				case PostgreSQLParser.KW_CHECKPOINT:
				case PostgreSQLParser.KW_CLASS:
				case PostgreSQLParser.KW_CLOSE:
				case PostgreSQLParser.KW_CLUSTER:
				case PostgreSQLParser.KW_COMMENT:
				case PostgreSQLParser.KW_COMMENTS:
				case PostgreSQLParser.KW_COMMIT:
				case PostgreSQLParser.KW_COMMITTED:
				case PostgreSQLParser.KW_CONFIGURATION:
				case PostgreSQLParser.KW_CONNECTION:
				case PostgreSQLParser.KW_CONSTRAINTS:
				case PostgreSQLParser.KW_CONTENT:
				case PostgreSQLParser.KW_CONTINUE:
				case PostgreSQLParser.KW_CONVERSION:
				case PostgreSQLParser.KW_COPY:
				case PostgreSQLParser.KW_COST:
				case PostgreSQLParser.KW_CSV:
				case PostgreSQLParser.KW_CURSOR:
				case PostgreSQLParser.KW_CYCLE:
				case PostgreSQLParser.KW_DATA:
				case PostgreSQLParser.KW_DATABASE:
				case PostgreSQLParser.KW_DAY:
				case PostgreSQLParser.KW_DEALLOCATE:
				case PostgreSQLParser.KW_DECLARE:
				case PostgreSQLParser.KW_DEFAULTS:
				case PostgreSQLParser.KW_DEFERRED:
				case PostgreSQLParser.KW_DEFINER:
				case PostgreSQLParser.KW_DELETE:
				case PostgreSQLParser.KW_DELIMITER:
				case PostgreSQLParser.KW_DELIMITERS:
				case PostgreSQLParser.KW_DICTIONARY:
				case PostgreSQLParser.KW_DISABLE:
				case PostgreSQLParser.KW_DISCARD:
				case PostgreSQLParser.KW_DOCUMENT:
				case PostgreSQLParser.KW_DOMAIN:
				case PostgreSQLParser.KW_DOUBLE:
				case PostgreSQLParser.KW_DROP:
				case PostgreSQLParser.KW_EACH:
				case PostgreSQLParser.KW_ENABLE:
				case PostgreSQLParser.KW_ENCODING:
				case PostgreSQLParser.KW_ENCRYPTED:
				case PostgreSQLParser.KW_ENUM:
				case PostgreSQLParser.KW_ESCAPE:
				case PostgreSQLParser.KW_EVENT:
				case PostgreSQLParser.KW_EXCLUDE:
				case PostgreSQLParser.KW_EXCLUDING:
				case PostgreSQLParser.KW_EXCLUSIVE:
				case PostgreSQLParser.KW_EXECUTE:
				case PostgreSQLParser.KW_EXPLAIN:
				case PostgreSQLParser.KW_EXTENSION:
				case PostgreSQLParser.KW_EXTERNAL:
				case PostgreSQLParser.KW_FAMILY:
				case PostgreSQLParser.KW_FIRST:
				case PostgreSQLParser.KW_FOLLOWING:
				case PostgreSQLParser.KW_FORCE:
				case PostgreSQLParser.KW_FORWARD:
				case PostgreSQLParser.KW_FUNCTION:
				case PostgreSQLParser.KW_FUNCTIONS:
				case PostgreSQLParser.KW_GLOBAL:
				case PostgreSQLParser.KW_GRANTED:
				case PostgreSQLParser.KW_HANDLER:
				case PostgreSQLParser.KW_HEADER:
				case PostgreSQLParser.KW_HOLD:
				case PostgreSQLParser.KW_HOUR:
				case PostgreSQLParser.KW_IDENTITY:
				case PostgreSQLParser.KW_IF:
				case PostgreSQLParser.KW_IMMEDIATE:
				case PostgreSQLParser.KW_IMMUTABLE:
				case PostgreSQLParser.KW_IMPLICIT:
				case PostgreSQLParser.KW_INCLUDING:
				case PostgreSQLParser.KW_INCREMENT:
				case PostgreSQLParser.KW_INDEX:
				case PostgreSQLParser.KW_INDEXES:
				case PostgreSQLParser.KW_INHERIT:
				case PostgreSQLParser.KW_INHERITS:
				case PostgreSQLParser.KW_INLINE:
				case PostgreSQLParser.KW_INSENSITIVE:
				case PostgreSQLParser.KW_INSERT:
				case PostgreSQLParser.KW_INSTEAD:
				case PostgreSQLParser.KW_INVOKER:
				case PostgreSQLParser.KW_ISOLATION:
				case PostgreSQLParser.KW_KEY:
				case PostgreSQLParser.KW_LABEL:
				case PostgreSQLParser.KW_LANGUAGE:
				case PostgreSQLParser.KW_LARGE:
				case PostgreSQLParser.KW_LAST:
				case PostgreSQLParser.KW_LEAKPROOF:
				case PostgreSQLParser.KW_LEVEL:
				case PostgreSQLParser.KW_LISTEN:
				case PostgreSQLParser.KW_LOAD:
				case PostgreSQLParser.KW_LOCAL:
				case PostgreSQLParser.KW_LOCATION:
				case PostgreSQLParser.KW_LOCK:
				case PostgreSQLParser.KW_MAPPING:
				case PostgreSQLParser.KW_MATCH:
				case PostgreSQLParser.KW_MATERIALIZED:
				case PostgreSQLParser.KW_MAXVALUE:
				case PostgreSQLParser.KW_MINUTE:
				case PostgreSQLParser.KW_MINVALUE:
				case PostgreSQLParser.KW_MODE:
				case PostgreSQLParser.KW_MONTH:
				case PostgreSQLParser.KW_MOVE:
				case PostgreSQLParser.KW_NAME:
				case PostgreSQLParser.KW_NAMES:
				case PostgreSQLParser.KW_NEXT:
				case PostgreSQLParser.KW_NO:
				case PostgreSQLParser.KW_NOTHING:
				case PostgreSQLParser.KW_NOTIFY:
				case PostgreSQLParser.KW_NOWAIT:
				case PostgreSQLParser.KW_NULLS:
				case PostgreSQLParser.KW_OBJECT:
				case PostgreSQLParser.KW_OF:
				case PostgreSQLParser.KW_OFF:
				case PostgreSQLParser.KW_OIDS:
				case PostgreSQLParser.KW_OPERATOR:
				case PostgreSQLParser.KW_OPTION:
				case PostgreSQLParser.KW_OPTIONS:
				case PostgreSQLParser.KW_OWNED:
				case PostgreSQLParser.KW_OWNER:
				case PostgreSQLParser.KW_PARSER:
				case PostgreSQLParser.KW_PARTIAL:
				case PostgreSQLParser.KW_PARTITION:
				case PostgreSQLParser.KW_PASSING:
				case PostgreSQLParser.KW_PASSWORD:
				case PostgreSQLParser.KW_PLANS:
				case PostgreSQLParser.KW_PRECEDING:
				case PostgreSQLParser.KW_PREPARE:
				case PostgreSQLParser.KW_PREPARED:
				case PostgreSQLParser.KW_PRESERVE:
				case PostgreSQLParser.KW_PRIOR:
				case PostgreSQLParser.KW_PRIVILEGES:
				case PostgreSQLParser.KW_PROCEDURAL:
				case PostgreSQLParser.KW_PROCEDURE:
				case PostgreSQLParser.KW_PROGRAM:
				case PostgreSQLParser.KW_QUOTE:
				case PostgreSQLParser.KW_RANGE:
				case PostgreSQLParser.KW_READ:
				case PostgreSQLParser.KW_REASSIGN:
				case PostgreSQLParser.KW_RECHECK:
				case PostgreSQLParser.KW_RECURSIVE:
				case PostgreSQLParser.KW_REF:
				case PostgreSQLParser.KW_REFRESH:
				case PostgreSQLParser.KW_REINDEX:
				case PostgreSQLParser.KW_RELATIVE:
				case PostgreSQLParser.KW_RELEASE:
				case PostgreSQLParser.KW_RENAME:
				case PostgreSQLParser.KW_REPEATABLE:
				case PostgreSQLParser.KW_REPLACE:
				case PostgreSQLParser.KW_REPLICA:
				case PostgreSQLParser.KW_RESET:
				case PostgreSQLParser.KW_RESTART:
				case PostgreSQLParser.KW_RESTRICT:
				case PostgreSQLParser.KW_RETURNS:
				case PostgreSQLParser.KW_REVOKE:
				case PostgreSQLParser.KW_ROLE:
				case PostgreSQLParser.KW_ROLLBACK:
				case PostgreSQLParser.KW_ROWS:
				case PostgreSQLParser.KW_RULE:
				case PostgreSQLParser.KW_SAVEPOINT:
				case PostgreSQLParser.KW_SCHEMA:
				case PostgreSQLParser.KW_SCROLL:
				case PostgreSQLParser.KW_SEARCH:
				case PostgreSQLParser.KW_SECOND:
				case PostgreSQLParser.KW_SECURITY:
				case PostgreSQLParser.KW_SEQUENCE:
				case PostgreSQLParser.KW_SEQUENCES:
				case PostgreSQLParser.KW_SERIALIZABLE:
				case PostgreSQLParser.KW_SERVER:
				case PostgreSQLParser.KW_SESSION:
				case PostgreSQLParser.KW_SET:
				case PostgreSQLParser.KW_SHARE:
				case PostgreSQLParser.KW_SHOW:
				case PostgreSQLParser.KW_SIMPLE:
				case PostgreSQLParser.KW_SNAPSHOT:
				case PostgreSQLParser.KW_STABLE:
				case PostgreSQLParser.KW_STANDALONE:
				case PostgreSQLParser.KW_START:
				case PostgreSQLParser.KW_STATEMENT:
				case PostgreSQLParser.KW_STATISTICS:
				case PostgreSQLParser.KW_STDIN:
				case PostgreSQLParser.KW_STDOUT:
				case PostgreSQLParser.KW_STORAGE:
				case PostgreSQLParser.KW_STRICT:
				case PostgreSQLParser.KW_STRIP:
				case PostgreSQLParser.KW_SYSID:
				case PostgreSQLParser.KW_SYSTEM:
				case PostgreSQLParser.KW_TABLES:
				case PostgreSQLParser.KW_TABLESPACE:
				case PostgreSQLParser.KW_TEMP:
				case PostgreSQLParser.KW_TEMPLATE:
				case PostgreSQLParser.KW_TEMPORARY:
				case PostgreSQLParser.KW_TEXT:
				case PostgreSQLParser.KW_TRANSACTION:
				case PostgreSQLParser.KW_TRIGGER:
				case PostgreSQLParser.KW_TRUNCATE:
				case PostgreSQLParser.KW_TRUSTED:
				case PostgreSQLParser.KW_TYPE:
				case PostgreSQLParser.KW_TYPES:
				case PostgreSQLParser.KW_UNBOUNDED:
				case PostgreSQLParser.KW_UNCOMMITTED:
				case PostgreSQLParser.KW_UNENCRYPTED:
				case PostgreSQLParser.KW_UNKNOWN:
				case PostgreSQLParser.KW_UNLISTEN:
				case PostgreSQLParser.KW_UNLOGGED:
				case PostgreSQLParser.KW_UNTIL:
				case PostgreSQLParser.KW_UPDATE:
				case PostgreSQLParser.KW_VACUUM:
				case PostgreSQLParser.KW_VALID:
				case PostgreSQLParser.KW_VALIDATE:
				case PostgreSQLParser.KW_VALIDATOR:
				case PostgreSQLParser.KW_VARYING:
				case PostgreSQLParser.KW_VERSION:
				case PostgreSQLParser.KW_VIEW:
				case PostgreSQLParser.KW_VOLATILE:
				case PostgreSQLParser.KW_WHITESPACE:
				case PostgreSQLParser.KW_WITHOUT:
				case PostgreSQLParser.KW_WORK:
				case PostgreSQLParser.KW_WRAPPER:
				case PostgreSQLParser.KW_WRITE:
				case PostgreSQLParser.KW_XML:
				case PostgreSQLParser.KW_YEAR:
				case PostgreSQLParser.KW_YES:
				case PostgreSQLParser.KW_ZONE:
				case PostgreSQLParser.KW_BETWEEN:
				case PostgreSQLParser.KW_BIGINT:
				case PostgreSQLParser.KW_BIT:
				case PostgreSQLParser.KW_BOOLEAN:
				case PostgreSQLParser.KW_CHAR:
				case PostgreSQLParser.KW_CHARACTER:
				case PostgreSQLParser.KW_COALESCE:
				case PostgreSQLParser.KW_DEC:
				case PostgreSQLParser.KW_DECIMAL:
				case PostgreSQLParser.KW_EXISTS:
				case PostgreSQLParser.KW_EXTRACT:
				case PostgreSQLParser.KW_FLOAT:
				case PostgreSQLParser.KW_GREATEST:
				case PostgreSQLParser.KW_INOUT:
				case PostgreSQLParser.KW_INT:
				case PostgreSQLParser.KW_INTEGER:
				case PostgreSQLParser.KW_INTERVAL:
				case PostgreSQLParser.KW_LEAST:
				case PostgreSQLParser.KW_NATIONAL:
				case PostgreSQLParser.KW_NCHAR:
				case PostgreSQLParser.KW_NONE:
				case PostgreSQLParser.KW_NULLIF:
				case PostgreSQLParser.KW_NUMERIC:
				case PostgreSQLParser.KW_OVERLAY:
				case PostgreSQLParser.KW_POSITION:
				case PostgreSQLParser.KW_PRECISION:
				case PostgreSQLParser.KW_REAL:
				case PostgreSQLParser.KW_ROW:
				case PostgreSQLParser.KW_SETOF:
				case PostgreSQLParser.KW_SMALLINT:
				case PostgreSQLParser.KW_SUBSTRING:
				case PostgreSQLParser.KW_TIME:
				case PostgreSQLParser.KW_TIMESTAMP:
				case PostgreSQLParser.KW_TREAT:
				case PostgreSQLParser.KW_TRIM:
				case PostgreSQLParser.KW_VALUES:
				case PostgreSQLParser.KW_VARCHAR:
				case PostgreSQLParser.KW_XMLATTRIBUTES:
				case PostgreSQLParser.KW_XMLCONCAT:
				case PostgreSQLParser.KW_XMLELEMENT:
				case PostgreSQLParser.KW_XMLEXISTS:
				case PostgreSQLParser.KW_XMLFOREST:
				case PostgreSQLParser.KW_XMLPARSE:
				case PostgreSQLParser.KW_XMLPI:
				case PostgreSQLParser.KW_XMLROOT:
				case PostgreSQLParser.KW_XMLSERIALIZE:
				case PostgreSQLParser.KW_CALL:
				case PostgreSQLParser.KW_CURRENT:
				case PostgreSQLParser.KW_ATTACH:
				case PostgreSQLParser.KW_DETACH:
				case PostgreSQLParser.KW_EXPRESSION:
				case PostgreSQLParser.KW_GENERATED:
				case PostgreSQLParser.KW_LOGGED:
				case PostgreSQLParser.KW_STORED:
				case PostgreSQLParser.KW_INCLUDE:
				case PostgreSQLParser.KW_ROUTINE:
				case PostgreSQLParser.KW_TRANSFORM:
				case PostgreSQLParser.KW_IMPORT:
				case PostgreSQLParser.KW_POLICY:
				case PostgreSQLParser.KW_METHOD:
				case PostgreSQLParser.KW_REFERENCING:
				case PostgreSQLParser.KW_NEW:
				case PostgreSQLParser.KW_OLD:
				case PostgreSQLParser.KW_VALUE:
				case PostgreSQLParser.KW_SUBSCRIPTION:
				case PostgreSQLParser.KW_PUBLICATION:
				case PostgreSQLParser.KW_OUT:
				case PostgreSQLParser.KW_ROUTINES:
				case PostgreSQLParser.KW_SCHEMAS:
				case PostgreSQLParser.KW_PROCEDURES:
				case PostgreSQLParser.KW_INPUT:
				case PostgreSQLParser.KW_SUPPORT:
				case PostgreSQLParser.KW_PARALLEL:
				case PostgreSQLParser.KW_SQL:
				case PostgreSQLParser.KW_DEPENDS:
				case PostgreSQLParser.KW_OVERRIDING:
				case PostgreSQLParser.KW_CONFLICT:
				case PostgreSQLParser.KW_SKIP:
				case PostgreSQLParser.KW_LOCKED:
				case PostgreSQLParser.KW_TIES:
				case PostgreSQLParser.KW_ROLLUP:
				case PostgreSQLParser.KW_CUBE:
				case PostgreSQLParser.KW_GROUPING:
				case PostgreSQLParser.KW_SETS:
				case PostgreSQLParser.KW_ORDINALITY:
				case PostgreSQLParser.KW_XMLTABLE:
				case PostgreSQLParser.KW_COLUMNS:
				case PostgreSQLParser.KW_XMLNAMESPACES:
				case PostgreSQLParser.KW_ROWTYPE:
				case PostgreSQLParser.KW_NORMALIZED:
				case PostgreSQLParser.KW_WITHIN:
				case PostgreSQLParser.KW_FILTER:
				case PostgreSQLParser.KW_GROUPS:
				case PostgreSQLParser.KW_OTHERS:
				case PostgreSQLParser.KW_NFC:
				case PostgreSQLParser.KW_NFD:
				case PostgreSQLParser.KW_NFKC:
				case PostgreSQLParser.KW_NFKD:
				case PostgreSQLParser.KW_UESCAPE:
				case PostgreSQLParser.KW_VIEWS:
				case PostgreSQLParser.KW_NORMALIZE:
				case PostgreSQLParser.KW_DUMP:
				case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
				case PostgreSQLParser.KW_VARIABLE_CONFLICT:
				case PostgreSQLParser.KW_ERROR:
				case PostgreSQLParser.KW_USE_VARIABLE:
				case PostgreSQLParser.KW_USE_COLUMN:
				case PostgreSQLParser.KW_ALIAS:
				case PostgreSQLParser.KW_CONSTANT:
				case PostgreSQLParser.KW_PERFORM:
				case PostgreSQLParser.KW_GET:
				case PostgreSQLParser.KW_DIAGNOSTICS:
				case PostgreSQLParser.KW_STACKED:
				case PostgreSQLParser.KW_ELSIF:
				case PostgreSQLParser.KW_REVERSE:
				case PostgreSQLParser.KW_SLICE:
				case PostgreSQLParser.KW_EXIT:
				case PostgreSQLParser.KW_RETURN:
				case PostgreSQLParser.KW_QUERY:
				case PostgreSQLParser.KW_RAISE:
				case PostgreSQLParser.KW_SQLSTATE:
				case PostgreSQLParser.KW_DEBUG:
				case PostgreSQLParser.KW_LOG:
				case PostgreSQLParser.KW_INFO:
				case PostgreSQLParser.KW_NOTICE:
				case PostgreSQLParser.KW_WARNING:
				case PostgreSQLParser.KW_EXCEPTION:
				case PostgreSQLParser.KW_ASSERT:
				case PostgreSQLParser.KW_OPEN:
				case PostgreSQLParser.Identifier:
				case PostgreSQLParser.QuotedIdentifier:
				case PostgreSQLParser.UnicodeQuotedIdentifier:
				case PostgreSQLParser.PLSQLVARIABLENAME:
				case PostgreSQLParser.PLSQLIDENTIFIER:
					{
					this.state = 8815;
					this.qualified_name();
					}
					break;
				case PostgreSQLParser.OPEN_PAREN:
					{
					this.state = 8816;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 8817;
					this.qualified_name();
					this.state = 8818;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relation_expr_list(): Relation_expr_listContext {
		let _localctx: Relation_expr_listContext = new Relation_expr_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1078, PostgreSQLParser.RULE_relation_expr_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8824;
			this.relation_expr();
			this.state = 8829;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8825;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8826;
				this.relation_expr();
				}
				}
				this.state = 8831;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
		let _localctx: Relation_expr_opt_aliasContext = new Relation_expr_opt_aliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 1080, PostgreSQLParser.RULE_relation_expr_opt_alias);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8832;
			this.relation_expr();
			this.state = 8837;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 803, this._ctx) ) {
			case 1:
				{
				this.state = 8834;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_AS) {
					{
					this.state = 8833;
					this.match(PostgreSQLParser.KW_AS);
					}
				}

				this.state = 8836;
				this.colid();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablesample_clause(): Tablesample_clauseContext {
		let _localctx: Tablesample_clauseContext = new Tablesample_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1082, PostgreSQLParser.RULE_tablesample_clause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8839;
			this.match(PostgreSQLParser.KW_TABLESAMPLE);
			this.state = 8840;
			this.func_name();
			this.state = 8841;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8842;
			this.expr_list();
			this.state = 8843;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			this.state = 8845;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_REPEATABLE) {
				{
				this.state = 8844;
				this.opt_repeatable_clause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_repeatable_clause(): Opt_repeatable_clauseContext {
		let _localctx: Opt_repeatable_clauseContext = new Opt_repeatable_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1084, PostgreSQLParser.RULE_opt_repeatable_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8847;
			this.match(PostgreSQLParser.KW_REPEATABLE);
			this.state = 8848;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8849;
			this.a_expr();
			this.state = 8850;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_table(): Func_tableContext {
		let _localctx: Func_tableContext = new Func_tableContext(this._ctx, this.state);
		this.enterRule(_localctx, 1086, PostgreSQLParser.RULE_func_table);
		try {
			this.state = 8864;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 807, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8852;
				this.func_expr_windowless();
				this.state = 8854;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 805, this._ctx) ) {
				case 1:
					{
					this.state = 8853;
					this.opt_ordinality();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8856;
				this.match(PostgreSQLParser.KW_ROWS);
				this.state = 8857;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 8858;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8859;
				this.rowsfrom_list();
				this.state = 8860;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 8862;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 806, this._ctx) ) {
				case 1:
					{
					this.state = 8861;
					this.opt_ordinality();
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowsfrom_item(): Rowsfrom_itemContext {
		let _localctx: Rowsfrom_itemContext = new Rowsfrom_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 1088, PostgreSQLParser.RULE_rowsfrom_item);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8866;
			this.func_expr_windowless();
			this.state = 8868;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_AS) {
				{
				this.state = 8867;
				this.opt_col_def_list();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rowsfrom_list(): Rowsfrom_listContext {
		let _localctx: Rowsfrom_listContext = new Rowsfrom_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1090, PostgreSQLParser.RULE_rowsfrom_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8870;
			this.rowsfrom_item();
			this.state = 8875;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8871;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8872;
				this.rowsfrom_item();
				}
				}
				this.state = 8877;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_col_def_list(): Opt_col_def_listContext {
		let _localctx: Opt_col_def_listContext = new Opt_col_def_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1092, PostgreSQLParser.RULE_opt_col_def_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8878;
			this.match(PostgreSQLParser.KW_AS);
			this.state = 8879;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8880;
			this.tablefuncelementlist();
			this.state = 8881;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_ordinality(): Opt_ordinalityContext {
		let _localctx: Opt_ordinalityContext = new Opt_ordinalityContext(this._ctx, this.state);
		this.enterRule(_localctx, 1094, PostgreSQLParser.RULE_opt_ordinality);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8883;
			this.match(PostgreSQLParser.KW_WITH);
			this.state = 8884;
			this.match(PostgreSQLParser.KW_ORDINALITY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public where_clause(): Where_clauseContext {
		let _localctx: Where_clauseContext = new Where_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1096, PostgreSQLParser.RULE_where_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8886;
			this.match(PostgreSQLParser.KW_WHERE);
			this.state = 8887;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public where_or_current_clause(): Where_or_current_clauseContext {
		let _localctx: Where_or_current_clauseContext = new Where_or_current_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1098, PostgreSQLParser.RULE_where_or_current_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8889;
			this.match(PostgreSQLParser.KW_WHERE);
			this.state = 8894;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 810, this._ctx) ) {
			case 1:
				{
				this.state = 8890;
				this.match(PostgreSQLParser.KW_CURRENT);
				this.state = 8891;
				this.match(PostgreSQLParser.KW_OF);
				this.state = 8892;
				this.cursor_name();
				}
				break;

			case 2:
				{
				this.state = 8893;
				this.a_expr();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opttablefuncelementlist(): OpttablefuncelementlistContext {
		let _localctx: OpttablefuncelementlistContext = new OpttablefuncelementlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 1100, PostgreSQLParser.RULE_opttablefuncelementlist);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8896;
			this.tablefuncelementlist();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablefuncelementlist(): TablefuncelementlistContext {
		let _localctx: TablefuncelementlistContext = new TablefuncelementlistContext(this._ctx, this.state);
		this.enterRule(_localctx, 1102, PostgreSQLParser.RULE_tablefuncelementlist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8898;
			this.tablefuncelement();
			this.state = 8903;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8899;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8900;
				this.tablefuncelement();
				}
				}
				this.state = 8905;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public tablefuncelement(): TablefuncelementContext {
		let _localctx: TablefuncelementContext = new TablefuncelementContext(this._ctx, this.state);
		this.enterRule(_localctx, 1104, PostgreSQLParser.RULE_tablefuncelement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8906;
			this.colid();
			this.state = 8907;
			this.typename();
			this.state = 8909;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_COLLATE) {
				{
				this.state = 8908;
				this.opt_collate_clause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xmltable(): XmltableContext {
		let _localctx: XmltableContext = new XmltableContext(this._ctx, this.state);
		this.enterRule(_localctx, 1106, PostgreSQLParser.RULE_xmltable);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8911;
			this.match(PostgreSQLParser.KW_XMLTABLE);
			this.state = 8912;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 8928;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 813, this._ctx) ) {
			case 1:
				{
				this.state = 8913;
				this.c_expr();
				this.state = 8914;
				this.xmlexists_argument();
				this.state = 8915;
				this.match(PostgreSQLParser.KW_COLUMNS);
				this.state = 8916;
				this.xmltable_column_list();
				}
				break;

			case 2:
				{
				this.state = 8918;
				this.match(PostgreSQLParser.KW_XMLNAMESPACES);
				this.state = 8919;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 8920;
				this.xml_namespace_list();
				this.state = 8921;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 8922;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8923;
				this.c_expr();
				this.state = 8924;
				this.xmlexists_argument();
				this.state = 8925;
				this.match(PostgreSQLParser.KW_COLUMNS);
				this.state = 8926;
				this.xmltable_column_list();
				}
				break;
			}
			this.state = 8930;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xmltable_column_list(): Xmltable_column_listContext {
		let _localctx: Xmltable_column_listContext = new Xmltable_column_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1108, PostgreSQLParser.RULE_xmltable_column_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8932;
			this.xmltable_column_el();
			this.state = 8937;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8933;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8934;
				this.xmltable_column_el();
				}
				}
				this.state = 8939;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xmltable_column_el(): Xmltable_column_elContext {
		let _localctx: Xmltable_column_elContext = new Xmltable_column_elContext(this._ctx, this.state);
		this.enterRule(_localctx, 1110, PostgreSQLParser.RULE_xmltable_column_el);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8940;
			this.colid();
			this.state = 8947;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				{
				this.state = 8941;
				this.typename();
				this.state = 8943;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 77)) & ~0x1F) === 0 && ((1 << (_la - 77)) & ((1 << (PostgreSQLParser.KW_NOT - 77)) | (1 << (PostgreSQLParser.KW_NULL - 77)) | (1 << (PostgreSQLParser.KW_TABLE - 77)))) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & ((1 << (PostgreSQLParser.KW_IS - 116)) | (1 << (PostgreSQLParser.KW_OUTER - 116)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 116)) | (1 << (PostgreSQLParser.KW_BACKWARD - 116)))) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & ((1 << (PostgreSQLParser.KW_CHAIN - 153)) | (1 << (PostgreSQLParser.KW_CLOSE - 153)) | (1 << (PostgreSQLParser.KW_COMMIT - 153)) | (1 << (PostgreSQLParser.KW_CONTINUE - 153)) | (1 << (PostgreSQLParser.KW_CURSOR - 153)))) !== 0) || _la === PostgreSQLParser.KW_FIRST || _la === PostgreSQLParser.KW_FORWARD || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & ((1 << (PostgreSQLParser.KW_INSERT - 241)) | (1 << (PostgreSQLParser.KW_LAST - 241)) | (1 << (PostgreSQLParser.KW_MOVE - 241)) | (1 << (PostgreSQLParser.KW_NEXT - 241)) | (1 << (PostgreSQLParser.KW_NO - 241)))) !== 0) || ((((_la - 279)) & ~0x1F) === 0 && ((1 << (_la - 279)) & ((1 << (PostgreSQLParser.KW_OPTION - 279)) | (1 << (PostgreSQLParser.KW_PRIOR - 279)) | (1 << (PostgreSQLParser.KW_RELATIVE - 279)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (PostgreSQLParser.KW_RESET - 313)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 313)) | (1 << (PostgreSQLParser.KW_SCHEMA - 313)) | (1 << (PostgreSQLParser.KW_SCROLL - 313)) | (1 << (PostgreSQLParser.KW_SET - 313)))) !== 0) || _la === PostgreSQLParser.KW_TYPE || _la === PostgreSQLParser.KW_CALL || _la === PostgreSQLParser.KW_CURRENT || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & ((1 << (PostgreSQLParser.KW_ROWTYPE - 477)) | (1 << (PostgreSQLParser.KW_DUMP - 477)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 477)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 477)) | (1 << (PostgreSQLParser.KW_ERROR - 477)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 477)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 477)) | (1 << (PostgreSQLParser.KW_ALIAS - 477)) | (1 << (PostgreSQLParser.KW_CONSTANT - 477)) | (1 << (PostgreSQLParser.KW_PERFORM - 477)) | (1 << (PostgreSQLParser.KW_GET - 477)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 477)) | (1 << (PostgreSQLParser.KW_STACKED - 477)) | (1 << (PostgreSQLParser.KW_ELSIF - 477)) | (1 << (PostgreSQLParser.KW_REVERSE - 477)) | (1 << (PostgreSQLParser.KW_SLICE - 477)) | (1 << (PostgreSQLParser.KW_EXIT - 477)) | (1 << (PostgreSQLParser.KW_RETURN - 477)))) !== 0) || ((((_la - 509)) & ~0x1F) === 0 && ((1 << (_la - 509)) & ((1 << (PostgreSQLParser.KW_QUERY - 509)) | (1 << (PostgreSQLParser.KW_RAISE - 509)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 509)) | (1 << (PostgreSQLParser.KW_DEBUG - 509)) | (1 << (PostgreSQLParser.KW_LOG - 509)) | (1 << (PostgreSQLParser.KW_INFO - 509)) | (1 << (PostgreSQLParser.KW_NOTICE - 509)) | (1 << (PostgreSQLParser.KW_WARNING - 509)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 509)) | (1 << (PostgreSQLParser.KW_ASSERT - 509)) | (1 << (PostgreSQLParser.KW_OPEN - 509)) | (1 << (PostgreSQLParser.Identifier - 509)) | (1 << (PostgreSQLParser.QuotedIdentifier - 509)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 509)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER) {
					{
					this.state = 8942;
					this.xmltable_column_option_list();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_FOR:
				{
				this.state = 8945;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 8946;
				this.match(PostgreSQLParser.KW_ORDINALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xmltable_column_option_list(): Xmltable_column_option_listContext {
		let _localctx: Xmltable_column_option_listContext = new Xmltable_column_option_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1112, PostgreSQLParser.RULE_xmltable_column_option_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8950;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 8949;
				this.xmltable_column_option_el();
				}
				}
				this.state = 8952;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 77)) & ~0x1F) === 0 && ((1 << (_la - 77)) & ((1 << (PostgreSQLParser.KW_NOT - 77)) | (1 << (PostgreSQLParser.KW_NULL - 77)) | (1 << (PostgreSQLParser.KW_TABLE - 77)))) !== 0) || ((((_la - 116)) & ~0x1F) === 0 && ((1 << (_la - 116)) & ((1 << (PostgreSQLParser.KW_IS - 116)) | (1 << (PostgreSQLParser.KW_OUTER - 116)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 116)) | (1 << (PostgreSQLParser.KW_BACKWARD - 116)))) !== 0) || ((((_la - 153)) & ~0x1F) === 0 && ((1 << (_la - 153)) & ((1 << (PostgreSQLParser.KW_CHAIN - 153)) | (1 << (PostgreSQLParser.KW_CLOSE - 153)) | (1 << (PostgreSQLParser.KW_COMMIT - 153)) | (1 << (PostgreSQLParser.KW_CONTINUE - 153)) | (1 << (PostgreSQLParser.KW_CURSOR - 153)))) !== 0) || _la === PostgreSQLParser.KW_FIRST || _la === PostgreSQLParser.KW_FORWARD || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & ((1 << (PostgreSQLParser.KW_INSERT - 241)) | (1 << (PostgreSQLParser.KW_LAST - 241)) | (1 << (PostgreSQLParser.KW_MOVE - 241)) | (1 << (PostgreSQLParser.KW_NEXT - 241)) | (1 << (PostgreSQLParser.KW_NO - 241)))) !== 0) || ((((_la - 279)) & ~0x1F) === 0 && ((1 << (_la - 279)) & ((1 << (PostgreSQLParser.KW_OPTION - 279)) | (1 << (PostgreSQLParser.KW_PRIOR - 279)) | (1 << (PostgreSQLParser.KW_RELATIVE - 279)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (PostgreSQLParser.KW_RESET - 313)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 313)) | (1 << (PostgreSQLParser.KW_SCHEMA - 313)) | (1 << (PostgreSQLParser.KW_SCROLL - 313)) | (1 << (PostgreSQLParser.KW_SET - 313)))) !== 0) || _la === PostgreSQLParser.KW_TYPE || _la === PostgreSQLParser.KW_CALL || _la === PostgreSQLParser.KW_CURRENT || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & ((1 << (PostgreSQLParser.KW_ROWTYPE - 477)) | (1 << (PostgreSQLParser.KW_DUMP - 477)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 477)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 477)) | (1 << (PostgreSQLParser.KW_ERROR - 477)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 477)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 477)) | (1 << (PostgreSQLParser.KW_ALIAS - 477)) | (1 << (PostgreSQLParser.KW_CONSTANT - 477)) | (1 << (PostgreSQLParser.KW_PERFORM - 477)) | (1 << (PostgreSQLParser.KW_GET - 477)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 477)) | (1 << (PostgreSQLParser.KW_STACKED - 477)) | (1 << (PostgreSQLParser.KW_ELSIF - 477)) | (1 << (PostgreSQLParser.KW_REVERSE - 477)) | (1 << (PostgreSQLParser.KW_SLICE - 477)) | (1 << (PostgreSQLParser.KW_EXIT - 477)) | (1 << (PostgreSQLParser.KW_RETURN - 477)))) !== 0) || ((((_la - 509)) & ~0x1F) === 0 && ((1 << (_la - 509)) & ((1 << (PostgreSQLParser.KW_QUERY - 509)) | (1 << (PostgreSQLParser.KW_RAISE - 509)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 509)) | (1 << (PostgreSQLParser.KW_DEBUG - 509)) | (1 << (PostgreSQLParser.KW_LOG - 509)) | (1 << (PostgreSQLParser.KW_INFO - 509)) | (1 << (PostgreSQLParser.KW_NOTICE - 509)) | (1 << (PostgreSQLParser.KW_WARNING - 509)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 509)) | (1 << (PostgreSQLParser.KW_ASSERT - 509)) | (1 << (PostgreSQLParser.KW_OPEN - 509)) | (1 << (PostgreSQLParser.Identifier - 509)) | (1 << (PostgreSQLParser.QuotedIdentifier - 509)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 509)))) !== 0) || _la === PostgreSQLParser.PLSQLVARIABLENAME || _la === PostgreSQLParser.PLSQLIDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xmltable_column_option_el(): Xmltable_column_option_elContext {
		let _localctx: Xmltable_column_option_elContext = new Xmltable_column_option_elContext(this._ctx, this.state);
		this.enterRule(_localctx, 1114, PostgreSQLParser.RULE_xmltable_column_option_el);
		try {
			this.state = 8962;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 818, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8954;
				this.match(PostgreSQLParser.KW_DEFAULT);
				this.state = 8955;
				this.a_expr();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8956;
				this.identifier();
				this.state = 8957;
				this.a_expr();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 8959;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 8960;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 8961;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_namespace_list(): Xml_namespace_listContext {
		let _localctx: Xml_namespace_listContext = new Xml_namespace_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1116, PostgreSQLParser.RULE_xml_namespace_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 8964;
			this.xml_namespace_el();
			this.state = 8969;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 8965;
				this.match(PostgreSQLParser.COMMA);
				this.state = 8966;
				this.xml_namespace_el();
				}
				}
				this.state = 8971;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_namespace_el(): Xml_namespace_elContext {
		let _localctx: Xml_namespace_elContext = new Xml_namespace_elContext(this._ctx, this.state);
		this.enterRule(_localctx, 1118, PostgreSQLParser.RULE_xml_namespace_el);
		try {
			this.state = 8978;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 820, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8972;
				this.b_expr(0);
				this.state = 8973;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 8974;
				this.collabel();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8976;
				this.match(PostgreSQLParser.KW_DEFAULT);
				this.state = 8977;
				this.b_expr(0);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public typename(): TypenameContext {
		let _localctx: TypenameContext = new TypenameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1120, PostgreSQLParser.RULE_typename);
		let _la: number;
		try {
			this.state = 8998;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 824, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 8981;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_SETOF) {
					{
					this.state = 8980;
					this.match(PostgreSQLParser.KW_SETOF);
					}
				}

				this.state = 8983;
				this.simpletypename();
				this.state = 8992;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 823, this._ctx) ) {
				case 1:
					{
					this.state = 8984;
					this.opt_array_bounds();
					}
					break;

				case 2:
					{
					this.state = 8985;
					this.match(PostgreSQLParser.KW_ARRAY);
					this.state = 8990;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 822, this._ctx) ) {
					case 1:
						{
						this.state = 8986;
						this.match(PostgreSQLParser.OPEN_BRACKET);
						this.state = 8987;
						this.iconst();
						this.state = 8988;
						this.match(PostgreSQLParser.CLOSE_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 8994;
				this.qualified_name();
				this.state = 8995;
				this.match(PostgreSQLParser.PERCENT);
				this.state = 8996;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_TYPE || _la === PostgreSQLParser.KW_ROWTYPE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_array_bounds(): Opt_array_boundsContext {
		let _localctx: Opt_array_boundsContext = new Opt_array_boundsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1122, PostgreSQLParser.RULE_opt_array_bounds);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9007;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 826, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9000;
					this.match(PostgreSQLParser.OPEN_BRACKET);
					this.state = 9002;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.Integral) {
						{
						this.state = 9001;
						this.iconst();
						}
					}

					this.state = 9004;
					this.match(PostgreSQLParser.CLOSE_BRACKET);
					}
					}
				}
				this.state = 9009;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 826, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public simpletypename(): SimpletypenameContext {
		let _localctx: SimpletypenameContext = new SimpletypenameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1124, PostgreSQLParser.RULE_simpletypename);
		try {
			this.state = 9025;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 829, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9010;
				this.generictype();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9011;
				this.numeric();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9012;
				this.bit();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9013;
				this.character();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9014;
				this.constdatetime();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9015;
				this.constinterval();
				this.state = 9023;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 828, this._ctx) ) {
				case 1:
					{
					this.state = 9017;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 827, this._ctx) ) {
					case 1:
						{
						this.state = 9016;
						this.opt_interval();
						}
						break;
					}
					}
					break;

				case 2:
					{
					this.state = 9019;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 9020;
					this.iconst();
					this.state = 9021;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public consttypename(): ConsttypenameContext {
		let _localctx: ConsttypenameContext = new ConsttypenameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1126, PostgreSQLParser.RULE_consttypename);
		try {
			this.state = 9031;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_SMALLINT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9027;
				this.numeric();
				}
				break;
			case PostgreSQLParser.KW_BIT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9028;
				this.constbit();
				}
				break;
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_VARCHAR:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9029;
				this.constcharacter();
				}
				break;
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9030;
				this.constdatetime();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public generictype(): GenerictypeContext {
		let _localctx: GenerictypeContext = new GenerictypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1128, PostgreSQLParser.RULE_generictype);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9033;
			this.type_function_name();
			this.state = 9035;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 831, this._ctx) ) {
			case 1:
				{
				this.state = 9034;
				this.attrs();
				}
				break;
			}
			this.state = 9038;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 832, this._ctx) ) {
			case 1:
				{
				this.state = 9037;
				this.opt_type_modifiers();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_type_modifiers(): Opt_type_modifiersContext {
		let _localctx: Opt_type_modifiersContext = new Opt_type_modifiersContext(this._ctx, this.state);
		this.enterRule(_localctx, 1130, PostgreSQLParser.RULE_opt_type_modifiers);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9040;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 9041;
			this.expr_list();
			this.state = 9042;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public numeric(): NumericContext {
		let _localctx: NumericContext = new NumericContext(this._ctx, this.state);
		this.enterRule(_localctx, 1132, PostgreSQLParser.RULE_numeric);
		try {
			this.state = 9068;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_INT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9044;
				this.match(PostgreSQLParser.KW_INT);
				}
				break;
			case PostgreSQLParser.KW_INTEGER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9045;
				this.match(PostgreSQLParser.KW_INTEGER);
				}
				break;
			case PostgreSQLParser.KW_SMALLINT:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9046;
				this.match(PostgreSQLParser.KW_SMALLINT);
				}
				break;
			case PostgreSQLParser.KW_BIGINT:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9047;
				this.match(PostgreSQLParser.KW_BIGINT);
				}
				break;
			case PostgreSQLParser.KW_REAL:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9048;
				this.match(PostgreSQLParser.KW_REAL);
				}
				break;
			case PostgreSQLParser.KW_FLOAT:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9049;
				this.match(PostgreSQLParser.KW_FLOAT);
				this.state = 9051;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 833, this._ctx) ) {
				case 1:
					{
					this.state = 9050;
					this.opt_float();
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_DOUBLE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 9053;
				this.match(PostgreSQLParser.KW_DOUBLE);
				this.state = 9054;
				this.match(PostgreSQLParser.KW_PRECISION);
				}
				break;
			case PostgreSQLParser.KW_DECIMAL:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 9055;
				this.match(PostgreSQLParser.KW_DECIMAL);
				this.state = 9057;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 834, this._ctx) ) {
				case 1:
					{
					this.state = 9056;
					this.opt_type_modifiers();
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_DEC:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 9059;
				this.match(PostgreSQLParser.KW_DEC);
				this.state = 9061;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 835, this._ctx) ) {
				case 1:
					{
					this.state = 9060;
					this.opt_type_modifiers();
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_NUMERIC:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 9063;
				this.match(PostgreSQLParser.KW_NUMERIC);
				this.state = 9065;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 836, this._ctx) ) {
				case 1:
					{
					this.state = 9064;
					this.opt_type_modifiers();
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_BOOLEAN:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 9067;
				this.match(PostgreSQLParser.KW_BOOLEAN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_float(): Opt_floatContext {
		let _localctx: Opt_floatContext = new Opt_floatContext(this._ctx, this.state);
		this.enterRule(_localctx, 1134, PostgreSQLParser.RULE_opt_float);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9070;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 9071;
			this.iconst();
			this.state = 9072;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bit(): BitContext {
		let _localctx: BitContext = new BitContext(this._ctx, this.state);
		this.enterRule(_localctx, 1136, PostgreSQLParser.RULE_bit);
		try {
			this.state = 9076;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 838, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9074;
				this.bitwithlength();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9075;
				this.bitwithoutlength();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constbit(): ConstbitContext {
		let _localctx: ConstbitContext = new ConstbitContext(this._ctx, this.state);
		this.enterRule(_localctx, 1138, PostgreSQLParser.RULE_constbit);
		try {
			this.state = 9080;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 839, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9078;
				this.bitwithlength();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9079;
				this.bitwithoutlength();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bitwithlength(): BitwithlengthContext {
		let _localctx: BitwithlengthContext = new BitwithlengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 1140, PostgreSQLParser.RULE_bitwithlength);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9082;
			this.match(PostgreSQLParser.KW_BIT);
			this.state = 9084;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_VARYING) {
				{
				this.state = 9083;
				this.opt_varying();
				}
			}

			this.state = 9086;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 9087;
			this.expr_list();
			this.state = 9088;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bitwithoutlength(): BitwithoutlengthContext {
		let _localctx: BitwithoutlengthContext = new BitwithoutlengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 1142, PostgreSQLParser.RULE_bitwithoutlength);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9090;
			this.match(PostgreSQLParser.KW_BIT);
			this.state = 9092;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 841, this._ctx) ) {
			case 1:
				{
				this.state = 9091;
				this.opt_varying();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public character(): CharacterContext {
		let _localctx: CharacterContext = new CharacterContext(this._ctx, this.state);
		this.enterRule(_localctx, 1144, PostgreSQLParser.RULE_character);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9094;
			this.character_c();
			this.state = 9099;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 842, this._ctx) ) {
			case 1:
				{
				this.state = 9095;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9096;
				this.iconst();
				this.state = 9097;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constcharacter(): ConstcharacterContext {
		let _localctx: ConstcharacterContext = new ConstcharacterContext(this._ctx, this.state);
		this.enterRule(_localctx, 1146, PostgreSQLParser.RULE_constcharacter);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9101;
			this.character_c();
			this.state = 9106;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.OPEN_PAREN) {
				{
				this.state = 9102;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9103;
				this.iconst();
				this.state = 9104;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public character_c(): Character_cContext {
		let _localctx: Character_cContext = new Character_cContext(this._ctx, this.state);
		this.enterRule(_localctx, 1148, PostgreSQLParser.RULE_character_c);
		let _la: number;
		try {
			this.state = 9118;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_NCHAR:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9108;
				_la = this._input.LA(1);
				if (!(((((_la - 391)) & ~0x1F) === 0 && ((1 << (_la - 391)) & ((1 << (PostgreSQLParser.KW_CHAR - 391)) | (1 << (PostgreSQLParser.KW_CHARACTER - 391)) | (1 << (PostgreSQLParser.KW_NCHAR - 391)))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9110;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 844, this._ctx) ) {
				case 1:
					{
					this.state = 9109;
					this.opt_varying();
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_VARCHAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9112;
				this.match(PostgreSQLParser.KW_VARCHAR);
				}
				break;
			case PostgreSQLParser.KW_NATIONAL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9113;
				this.match(PostgreSQLParser.KW_NATIONAL);
				this.state = 9114;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_CHAR || _la === PostgreSQLParser.KW_CHARACTER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9116;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 845, this._ctx) ) {
				case 1:
					{
					this.state = 9115;
					this.opt_varying();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_varying(): Opt_varyingContext {
		let _localctx: Opt_varyingContext = new Opt_varyingContext(this._ctx, this.state);
		this.enterRule(_localctx, 1150, PostgreSQLParser.RULE_opt_varying);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9120;
			this.match(PostgreSQLParser.KW_VARYING);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constdatetime(): ConstdatetimeContext {
		let _localctx: ConstdatetimeContext = new ConstdatetimeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1152, PostgreSQLParser.RULE_constdatetime);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9122;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_TIME || _la === PostgreSQLParser.KW_TIMESTAMP)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 9127;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 847, this._ctx) ) {
			case 1:
				{
				this.state = 9123;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9124;
				this.iconst();
				this.state = 9125;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
			this.state = 9130;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 848, this._ctx) ) {
			case 1:
				{
				this.state = 9129;
				this.opt_timezone();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public constinterval(): ConstintervalContext {
		let _localctx: ConstintervalContext = new ConstintervalContext(this._ctx, this.state);
		this.enterRule(_localctx, 1154, PostgreSQLParser.RULE_constinterval);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9132;
			this.match(PostgreSQLParser.KW_INTERVAL);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_timezone(): Opt_timezoneContext {
		let _localctx: Opt_timezoneContext = new Opt_timezoneContext(this._ctx, this.state);
		this.enterRule(_localctx, 1156, PostgreSQLParser.RULE_opt_timezone);
		try {
			this.state = 9140;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_WITH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9134;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 9135;
				this.match(PostgreSQLParser.KW_TIME);
				this.state = 9136;
				this.match(PostgreSQLParser.KW_ZONE);
				}
				break;
			case PostgreSQLParser.KW_WITHOUT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9137;
				this.match(PostgreSQLParser.KW_WITHOUT);
				this.state = 9138;
				this.match(PostgreSQLParser.KW_TIME);
				this.state = 9139;
				this.match(PostgreSQLParser.KW_ZONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_interval(): Opt_intervalContext {
		let _localctx: Opt_intervalContext = new Opt_intervalContext(this._ctx, this.state);
		this.enterRule(_localctx, 1158, PostgreSQLParser.RULE_opt_interval);
		try {
			this.state = 9167;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 852, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9142;
				this.match(PostgreSQLParser.KW_YEAR);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9143;
				this.match(PostgreSQLParser.KW_MONTH);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9144;
				this.match(PostgreSQLParser.KW_DAY);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9145;
				this.match(PostgreSQLParser.KW_HOUR);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9146;
				this.match(PostgreSQLParser.KW_MINUTE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9147;
				this.interval_second();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 9148;
				this.match(PostgreSQLParser.KW_YEAR);
				this.state = 9149;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 9150;
				this.match(PostgreSQLParser.KW_MONTH);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 9151;
				this.match(PostgreSQLParser.KW_DAY);
				this.state = 9152;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 9156;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_HOUR:
					{
					this.state = 9153;
					this.match(PostgreSQLParser.KW_HOUR);
					}
					break;
				case PostgreSQLParser.KW_MINUTE:
					{
					this.state = 9154;
					this.match(PostgreSQLParser.KW_MINUTE);
					}
					break;
				case PostgreSQLParser.KW_SECOND:
					{
					this.state = 9155;
					this.interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 9158;
				this.match(PostgreSQLParser.KW_HOUR);
				this.state = 9159;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 9162;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_MINUTE:
					{
					this.state = 9160;
					this.match(PostgreSQLParser.KW_MINUTE);
					}
					break;
				case PostgreSQLParser.KW_SECOND:
					{
					this.state = 9161;
					this.interval_second();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 9164;
				this.match(PostgreSQLParser.KW_MINUTE);
				this.state = 9165;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 9166;
				this.interval_second();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public interval_second(): Interval_secondContext {
		let _localctx: Interval_secondContext = new Interval_secondContext(this._ctx, this.state);
		this.enterRule(_localctx, 1160, PostgreSQLParser.RULE_interval_second);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9169;
			this.match(PostgreSQLParser.KW_SECOND);
			this.state = 9174;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 853, this._ctx) ) {
			case 1:
				{
				this.state = 9170;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9171;
				this.iconst();
				this.state = 9172;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_escape(): Opt_escapeContext {
		let _localctx: Opt_escapeContext = new Opt_escapeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1162, PostgreSQLParser.RULE_opt_escape);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9176;
			this.match(PostgreSQLParser.KW_ESCAPE);
			this.state = 9177;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr(): A_exprContext {
		let _localctx: A_exprContext = new A_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 1164, PostgreSQLParser.RULE_a_expr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9179;
			this.a_expr_qual();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_qual(): A_expr_qualContext {
		let _localctx: A_expr_qualContext = new A_expr_qualContext(this._ctx, this.state);
		this.enterRule(_localctx, 1166, PostgreSQLParser.RULE_a_expr_qual);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9181;
			this.a_expr_lessless();
			this.state = 9183;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 854, this._ctx) ) {
			case 1:
				{
				this.state = 9182;
				this.qual_op();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_lessless(): A_expr_lesslessContext {
		let _localctx: A_expr_lesslessContext = new A_expr_lesslessContext(this._ctx, this.state);
		this.enterRule(_localctx, 1168, PostgreSQLParser.RULE_a_expr_lessless);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9185;
			this.a_expr_or();
			this.state = 9190;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 855, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9186;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParser.LESS_LESS || _la === PostgreSQLParser.GREATER_GREATER)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 9187;
					this.a_expr_or();
					}
					}
				}
				this.state = 9192;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 855, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_or(): A_expr_orContext {
		let _localctx: A_expr_orContext = new A_expr_orContext(this._ctx, this.state);
		this.enterRule(_localctx, 1170, PostgreSQLParser.RULE_a_expr_or);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9193;
			this.a_expr_and();
			this.state = 9198;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 856, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9194;
					this.match(PostgreSQLParser.KW_OR);
					this.state = 9195;
					this.a_expr_and();
					}
					}
				}
				this.state = 9200;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 856, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_and(): A_expr_andContext {
		let _localctx: A_expr_andContext = new A_expr_andContext(this._ctx, this.state);
		this.enterRule(_localctx, 1172, PostgreSQLParser.RULE_a_expr_and);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9201;
			this.a_expr_in();
			this.state = 9206;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 857, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9202;
					this.match(PostgreSQLParser.KW_AND);
					this.state = 9203;
					this.a_expr_in();
					}
					}
				}
				this.state = 9208;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 857, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_in(): A_expr_inContext {
		let _localctx: A_expr_inContext = new A_expr_inContext(this._ctx, this.state);
		this.enterRule(_localctx, 1174, PostgreSQLParser.RULE_a_expr_in);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9209;
			this.a_expr_unary_not();
			this.state = 9215;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 859, this._ctx) ) {
			case 1:
				{
				this.state = 9211;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NOT) {
					{
					this.state = 9210;
					this.match(PostgreSQLParser.KW_NOT);
					}
				}

				this.state = 9213;
				this.match(PostgreSQLParser.KW_IN);
				this.state = 9214;
				this.in_expr();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_unary_not(): A_expr_unary_notContext {
		let _localctx: A_expr_unary_notContext = new A_expr_unary_notContext(this._ctx, this.state);
		this.enterRule(_localctx, 1176, PostgreSQLParser.RULE_a_expr_unary_not);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9218;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_NOT) {
				{
				this.state = 9217;
				this.match(PostgreSQLParser.KW_NOT);
				}
			}

			this.state = 9220;
			this.a_expr_isnull();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_isnull(): A_expr_isnullContext {
		let _localctx: A_expr_isnullContext = new A_expr_isnullContext(this._ctx, this.state);
		this.enterRule(_localctx, 1178, PostgreSQLParser.RULE_a_expr_isnull);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9222;
			this.a_expr_is_not();
			this.state = 9224;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 861, this._ctx) ) {
			case 1:
				{
				this.state = 9223;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_ISNULL || _la === PostgreSQLParser.KW_NOTNULL)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_is_not(): A_expr_is_notContext {
		let _localctx: A_expr_is_notContext = new A_expr_is_notContext(this._ctx, this.state);
		this.enterRule(_localctx, 1180, PostgreSQLParser.RULE_a_expr_is_not);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9226;
			this.a_expr_compare();
			this.state = 9250;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 865, this._ctx) ) {
			case 1:
				{
				this.state = 9227;
				this.match(PostgreSQLParser.KW_IS);
				this.state = 9229;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NOT) {
					{
					this.state = 9228;
					this.match(PostgreSQLParser.KW_NOT);
					}
				}

				this.state = 9248;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_NULL:
					{
					this.state = 9231;
					this.match(PostgreSQLParser.KW_NULL);
					}
					break;
				case PostgreSQLParser.KW_TRUE:
					{
					this.state = 9232;
					this.match(PostgreSQLParser.KW_TRUE);
					}
					break;
				case PostgreSQLParser.KW_FALSE:
					{
					this.state = 9233;
					this.match(PostgreSQLParser.KW_FALSE);
					}
					break;
				case PostgreSQLParser.KW_UNKNOWN:
					{
					this.state = 9234;
					this.match(PostgreSQLParser.KW_UNKNOWN);
					}
					break;
				case PostgreSQLParser.KW_DISTINCT:
					{
					this.state = 9235;
					this.match(PostgreSQLParser.KW_DISTINCT);
					this.state = 9236;
					this.match(PostgreSQLParser.KW_FROM);
					this.state = 9237;
					this.a_expr();
					}
					break;
				case PostgreSQLParser.KW_OF:
					{
					this.state = 9238;
					this.match(PostgreSQLParser.KW_OF);
					this.state = 9239;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 9240;
					this.type_list();
					this.state = 9241;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					}
					break;
				case PostgreSQLParser.KW_DOCUMENT:
					{
					this.state = 9243;
					this.match(PostgreSQLParser.KW_DOCUMENT);
					}
					break;
				case PostgreSQLParser.KW_NORMALIZED:
				case PostgreSQLParser.KW_NFC:
				case PostgreSQLParser.KW_NFD:
				case PostgreSQLParser.KW_NFKC:
				case PostgreSQLParser.KW_NFKD:
					{
					this.state = 9245;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & ((1 << (PostgreSQLParser.KW_NFC - 483)) | (1 << (PostgreSQLParser.KW_NFD - 483)) | (1 << (PostgreSQLParser.KW_NFKC - 483)) | (1 << (PostgreSQLParser.KW_NFKD - 483)))) !== 0)) {
						{
						this.state = 9244;
						this.unicode_normal_form();
						}
					}

					this.state = 9247;
					this.match(PostgreSQLParser.KW_NORMALIZED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_compare(): A_expr_compareContext {
		let _localctx: A_expr_compareContext = new A_expr_compareContext(this._ctx, this.state);
		this.enterRule(_localctx, 1182, PostgreSQLParser.RULE_a_expr_compare);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9252;
			this.a_expr_like();
			this.state = 9264;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 867, this._ctx) ) {
			case 1:
				{
				this.state = 9253;
				_la = this._input.LA(1);
				if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.EQUAL) | (1 << PostgreSQLParser.LT) | (1 << PostgreSQLParser.GT) | (1 << PostgreSQLParser.LESS_EQUALS) | (1 << PostgreSQLParser.GREATER_EQUALS) | (1 << PostgreSQLParser.NOT_EQUALS))) !== 0))) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9254;
				this.a_expr_like();
				}
				break;

			case 2:
				{
				this.state = 9255;
				this.subquery_Op();
				this.state = 9256;
				this.sub_type();
				this.state = 9262;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 866, this._ctx) ) {
				case 1:
					{
					this.state = 9257;
					this.select_with_parens();
					}
					break;

				case 2:
					{
					this.state = 9258;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 9259;
					this.a_expr();
					this.state = 9260;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_like(): A_expr_likeContext {
		let _localctx: A_expr_likeContext = new A_expr_likeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1184, PostgreSQLParser.RULE_a_expr_like);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9266;
			this.a_expr_qual_op();
			this.state = 9284;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 872, this._ctx) ) {
			case 1:
				{
				this.state = 9268;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NOT) {
					{
					this.state = 9267;
					this.match(PostgreSQLParser.KW_NOT);
					}
				}

				this.state = 9278;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_LIKE:
					{
					this.state = 9270;
					this.match(PostgreSQLParser.KW_LIKE);
					}
					break;
				case PostgreSQLParser.KW_ILIKE:
					{
					this.state = 9271;
					this.match(PostgreSQLParser.KW_ILIKE);
					}
					break;
				case PostgreSQLParser.KW_SIMILAR:
					{
					this.state = 9272;
					this.match(PostgreSQLParser.KW_SIMILAR);
					this.state = 9273;
					this.match(PostgreSQLParser.KW_TO);
					}
					break;
				case PostgreSQLParser.KW_BETWEEN:
					{
					this.state = 9274;
					this.match(PostgreSQLParser.KW_BETWEEN);
					this.state = 9276;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.KW_SYMMETRIC) {
						{
						this.state = 9275;
						this.match(PostgreSQLParser.KW_SYMMETRIC);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 9280;
				this.a_expr_qual_op();
				this.state = 9282;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 871, this._ctx) ) {
				case 1:
					{
					this.state = 9281;
					this.opt_escape();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_qual_op(): A_expr_qual_opContext {
		let _localctx: A_expr_qual_opContext = new A_expr_qual_opContext(this._ctx, this.state);
		this.enterRule(_localctx, 1186, PostgreSQLParser.RULE_a_expr_qual_op);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9286;
			this.a_expr_unary_qualop();
			this.state = 9292;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 873, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9287;
					this.qual_op();
					this.state = 9288;
					this.a_expr_unary_qualop();
					}
					}
				}
				this.state = 9294;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 873, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_unary_qualop(): A_expr_unary_qualopContext {
		let _localctx: A_expr_unary_qualopContext = new A_expr_unary_qualopContext(this._ctx, this.state);
		this.enterRule(_localctx, 1188, PostgreSQLParser.RULE_a_expr_unary_qualop);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9296;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 874, this._ctx) ) {
			case 1:
				{
				this.state = 9295;
				this.qual_op();
				}
				break;
			}
			this.state = 9298;
			this.a_expr_add();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_add(): A_expr_addContext {
		let _localctx: A_expr_addContext = new A_expr_addContext(this._ctx, this.state);
		this.enterRule(_localctx, 1190, PostgreSQLParser.RULE_a_expr_add);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9300;
			this.a_expr_mul();
			this.state = 9305;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 875, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9301;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParser.PLUS || _la === PostgreSQLParser.MINUS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 9302;
					this.a_expr_mul();
					}
					}
				}
				this.state = 9307;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 875, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_mul(): A_expr_mulContext {
		let _localctx: A_expr_mulContext = new A_expr_mulContext(this._ctx, this.state);
		this.enterRule(_localctx, 1192, PostgreSQLParser.RULE_a_expr_mul);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9308;
			this.a_expr_caret();
			this.state = 9313;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 876, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9309;
					_la = this._input.LA(1);
					if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.STAR) | (1 << PostgreSQLParser.SLASH) | (1 << PostgreSQLParser.PERCENT))) !== 0))) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 9310;
					this.a_expr_caret();
					}
					}
				}
				this.state = 9315;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 876, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_caret(): A_expr_caretContext {
		let _localctx: A_expr_caretContext = new A_expr_caretContext(this._ctx, this.state);
		this.enterRule(_localctx, 1194, PostgreSQLParser.RULE_a_expr_caret);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9316;
			this.a_expr_unary_sign();
			this.state = 9319;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 877, this._ctx) ) {
			case 1:
				{
				this.state = 9317;
				this.match(PostgreSQLParser.CARET);
				this.state = 9318;
				this.a_expr();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_unary_sign(): A_expr_unary_signContext {
		let _localctx: A_expr_unary_signContext = new A_expr_unary_signContext(this._ctx, this.state);
		this.enterRule(_localctx, 1196, PostgreSQLParser.RULE_a_expr_unary_sign);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9322;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.PLUS || _la === PostgreSQLParser.MINUS) {
				{
				this.state = 9321;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.PLUS || _la === PostgreSQLParser.MINUS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 9324;
			this.a_expr_at_time_zone();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_at_time_zone(): A_expr_at_time_zoneContext {
		let _localctx: A_expr_at_time_zoneContext = new A_expr_at_time_zoneContext(this._ctx, this.state);
		this.enterRule(_localctx, 1198, PostgreSQLParser.RULE_a_expr_at_time_zone);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9326;
			this.a_expr_collate();
			this.state = 9331;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 879, this._ctx) ) {
			case 1:
				{
				this.state = 9327;
				this.match(PostgreSQLParser.KW_AT);
				this.state = 9328;
				this.match(PostgreSQLParser.KW_TIME);
				this.state = 9329;
				this.match(PostgreSQLParser.KW_ZONE);
				this.state = 9330;
				this.a_expr();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_collate(): A_expr_collateContext {
		let _localctx: A_expr_collateContext = new A_expr_collateContext(this._ctx, this.state);
		this.enterRule(_localctx, 1200, PostgreSQLParser.RULE_a_expr_collate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9333;
			this.a_expr_typecast();
			this.state = 9336;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 880, this._ctx) ) {
			case 1:
				{
				this.state = 9334;
				this.match(PostgreSQLParser.KW_COLLATE);
				this.state = 9335;
				this.any_name();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public a_expr_typecast(): A_expr_typecastContext {
		let _localctx: A_expr_typecastContext = new A_expr_typecastContext(this._ctx, this.state);
		this.enterRule(_localctx, 1202, PostgreSQLParser.RULE_a_expr_typecast);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9338;
			this.c_expr();
			this.state = 9343;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.TYPECAST) {
				{
				{
				this.state = 9339;
				this.match(PostgreSQLParser.TYPECAST);
				this.state = 9340;
				this.typename();
				}
				}
				this.state = 9345;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public b_expr(): B_exprContext;
	public b_expr(_p: number): B_exprContext;
	// @RuleVersion(0)
	public b_expr(_p?: number): B_exprContext {
		if (_p === undefined) {
			_p = 0;
		}

		let _parentctx: ParserRuleContext = this._ctx;
		let _parentState: number = this.state;
		let _localctx: B_exprContext = new B_exprContext(this._ctx, _parentState);
		let _prevctx: B_exprContext = _localctx;
		let _startState: number = 1204;
		this.enterRecursionRule(_localctx, 1204, PostgreSQLParser.RULE_b_expr, _p);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9353;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 882, this._ctx) ) {
			case 1:
				{
				this.state = 9347;
				this.c_expr();
				}
				break;

			case 2:
				{
				this.state = 9348;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.PLUS || _la === PostgreSQLParser.MINUS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9349;
				this.b_expr(9);
				}
				break;

			case 3:
				{
				this.state = 9350;
				this.qual_op();
				this.state = 9351;
				this.b_expr(3);
				}
				break;
			}
			this._ctx._stop = this._input.tryLT(-1);
			this.state = 9394;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 886, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					if (this._parseListeners != null) {
						this.triggerExitRuleEvent();
					}
					_prevctx = _localctx;
					{
					this.state = 9392;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 885, this._ctx) ) {
					case 1:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParser.RULE_b_expr);
						this.state = 9355;
						if (!(this.precpred(this._ctx, 8))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 8)");
						}
						this.state = 9356;
						this.match(PostgreSQLParser.CARET);
						this.state = 9357;
						this.b_expr(9);
						}
						break;

					case 2:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParser.RULE_b_expr);
						this.state = 9358;
						if (!(this.precpred(this._ctx, 7))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 7)");
						}
						this.state = 9359;
						_la = this._input.LA(1);
						if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.STAR) | (1 << PostgreSQLParser.SLASH) | (1 << PostgreSQLParser.PERCENT))) !== 0))) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 9360;
						this.b_expr(8);
						}
						break;

					case 3:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParser.RULE_b_expr);
						this.state = 9361;
						if (!(this.precpred(this._ctx, 6))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 6)");
						}
						this.state = 9362;
						_la = this._input.LA(1);
						if (!(_la === PostgreSQLParser.PLUS || _la === PostgreSQLParser.MINUS)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 9363;
						this.b_expr(7);
						}
						break;

					case 4:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParser.RULE_b_expr);
						this.state = 9364;
						if (!(this.precpred(this._ctx, 5))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 5)");
						}
						this.state = 9365;
						this.qual_op();
						this.state = 9366;
						this.b_expr(6);
						}
						break;

					case 5:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParser.RULE_b_expr);
						this.state = 9368;
						if (!(this.precpred(this._ctx, 4))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 4)");
						}
						this.state = 9369;
						_la = this._input.LA(1);
						if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.EQUAL) | (1 << PostgreSQLParser.LT) | (1 << PostgreSQLParser.GT) | (1 << PostgreSQLParser.LESS_EQUALS) | (1 << PostgreSQLParser.GREATER_EQUALS) | (1 << PostgreSQLParser.NOT_EQUALS))) !== 0))) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 9370;
						this.b_expr(5);
						}
						break;

					case 6:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParser.RULE_b_expr);
						this.state = 9371;
						if (!(this.precpred(this._ctx, 10))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 10)");
						}
						this.state = 9372;
						this.match(PostgreSQLParser.TYPECAST);
						this.state = 9373;
						this.typename();
						}
						break;

					case 7:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParser.RULE_b_expr);
						this.state = 9374;
						if (!(this.precpred(this._ctx, 2))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 2)");
						}
						this.state = 9375;
						this.qual_op();
						}
						break;

					case 8:
						{
						_localctx = new B_exprContext(_parentctx, _parentState);
						this.pushNewRecursionContext(_localctx, _startState, PostgreSQLParser.RULE_b_expr);
						this.state = 9376;
						if (!(this.precpred(this._ctx, 1))) {
							throw this.createFailedPredicateException("this.precpred(this._ctx, 1)");
						}
						this.state = 9377;
						this.match(PostgreSQLParser.KW_IS);
						this.state = 9379;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === PostgreSQLParser.KW_NOT) {
							{
							this.state = 9378;
							this.match(PostgreSQLParser.KW_NOT);
							}
						}

						this.state = 9390;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case PostgreSQLParser.KW_DISTINCT:
							{
							this.state = 9381;
							this.match(PostgreSQLParser.KW_DISTINCT);
							this.state = 9382;
							this.match(PostgreSQLParser.KW_FROM);
							this.state = 9383;
							this.b_expr(0);
							}
							break;
						case PostgreSQLParser.KW_OF:
							{
							this.state = 9384;
							this.match(PostgreSQLParser.KW_OF);
							this.state = 9385;
							this.match(PostgreSQLParser.OPEN_PAREN);
							this.state = 9386;
							this.type_list();
							this.state = 9387;
							this.match(PostgreSQLParser.CLOSE_PAREN);
							}
							break;
						case PostgreSQLParser.KW_DOCUMENT:
							{
							this.state = 9389;
							this.match(PostgreSQLParser.KW_DOCUMENT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					}
					}
				}
				this.state = 9396;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 886, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public c_expr(): C_exprContext {
		let _localctx: C_exprContext = new C_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 1206, PostgreSQLParser.RULE_c_expr);
		try {
			this.state = 9433;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 889, this._ctx) ) {
			case 1:
				_localctx = new C_expr_existsContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9397;
				this.match(PostgreSQLParser.KW_EXISTS);
				this.state = 9398;
				this.select_with_parens();
				}
				break;

			case 2:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9399;
				this.match(PostgreSQLParser.KW_ARRAY);
				this.state = 9402;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.OPEN_PAREN:
					{
					this.state = 9400;
					this.select_with_parens();
					}
					break;
				case PostgreSQLParser.OPEN_BRACKET:
					{
					this.state = 9401;
					this.array_expr();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9404;
				this.match(PostgreSQLParser.PARAM);
				this.state = 9405;
				this.opt_indirection();
				}
				break;

			case 4:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9406;
				this.match(PostgreSQLParser.KW_GROUPING);
				this.state = 9407;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9408;
				this.expr_list();
				this.state = 9409;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 5:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9411;
				this.match(PostgreSQLParser.KW_UNIQUE);
				this.state = 9412;
				this.select_with_parens();
				}
				break;

			case 6:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9413;
				this.columnref();
				}
				break;

			case 7:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 9414;
				this.aexprconst();
				}
				break;

			case 8:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 9415;
				this.plsqlvariablename();
				}
				break;

			case 9:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 9416;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9417;
				(_localctx as C_expr_exprContext)._a_expr_in_parens = this.a_expr();
				this.state = 9418;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 9419;
				this.opt_indirection();
				}
				break;

			case 10:
				_localctx = new C_expr_caseContext(_localctx);
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 9421;
				this.case_expr();
				}
				break;

			case 11:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 9422;
				this.func_expr();
				}
				break;

			case 12:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 9423;
				this.select_with_parens();
				this.state = 9425;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 888, this._ctx) ) {
				case 1:
					{
					this.state = 9424;
					this.indirection();
					}
					break;
				}
				}
				break;

			case 13:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 9427;
				this.explicit_row();
				}
				break;

			case 14:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 9428;
				this.implicit_row();
				}
				break;

			case 15:
				_localctx = new C_expr_exprContext(_localctx);
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 9429;
				this.row();
				this.state = 9430;
				this.match(PostgreSQLParser.KW_OVERLAPS);
				this.state = 9431;
				this.row();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public plsqlvariablename(): PlsqlvariablenameContext {
		let _localctx: PlsqlvariablenameContext = new PlsqlvariablenameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1208, PostgreSQLParser.RULE_plsqlvariablename);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9435;
			this.match(PostgreSQLParser.PLSQLVARIABLENAME);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_application(): Func_applicationContext {
		let _localctx: Func_applicationContext = new Func_applicationContext(this._ctx, this.state);
		this.enterRule(_localctx, 1210, PostgreSQLParser.RULE_func_application);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9437;
			this.func_name();
			this.state = 9438;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 9460;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.OPEN_PAREN:
			case PostgreSQLParser.PLUS:
			case PostgreSQLParser.MINUS:
			case PostgreSQLParser.PARAM:
			case PostgreSQLParser.Operator:
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_CASE:
			case PostgreSQLParser.KW_CAST:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_CURRENT_CATALOG:
			case PostgreSQLParser.KW_CURRENT_DATE:
			case PostgreSQLParser.KW_CURRENT_ROLE:
			case PostgreSQLParser.KW_CURRENT_TIME:
			case PostgreSQLParser.KW_CURRENT_TIMESTAMP:
			case PostgreSQLParser.KW_CURRENT_USER:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_LOCALTIME:
			case PostgreSQLParser.KW_LOCALTIMESTAMP:
			case PostgreSQLParser.KW_NOT:
			case PostgreSQLParser.KW_NULL:
			case PostgreSQLParser.KW_SESSION_USER:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_UNIQUE:
			case PostgreSQLParser.KW_USER:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.BinaryStringConstant:
			case PostgreSQLParser.HexadecimalStringConstant:
			case PostgreSQLParser.Integral:
			case PostgreSQLParser.Numeric:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				{
				this.state = 9439;
				this.func_arg_list();
				this.state = 9443;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.COMMA) {
					{
					this.state = 9440;
					this.match(PostgreSQLParser.COMMA);
					this.state = 9441;
					this.match(PostgreSQLParser.KW_VARIADIC);
					this.state = 9442;
					this.func_arg_expr();
					}
				}

				this.state = 9446;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ORDER) {
					{
					this.state = 9445;
					this.opt_sort_clause();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_VARIADIC:
				{
				this.state = 9448;
				this.match(PostgreSQLParser.KW_VARIADIC);
				this.state = 9449;
				this.func_arg_expr();
				this.state = 9451;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ORDER) {
					{
					this.state = 9450;
					this.opt_sort_clause();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_ALL:
			case PostgreSQLParser.KW_DISTINCT:
				{
				this.state = 9453;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_ALL || _la === PostgreSQLParser.KW_DISTINCT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9454;
				this.func_arg_list();
				this.state = 9456;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ORDER) {
					{
					this.state = 9455;
					this.opt_sort_clause();
					}
				}

				}
				break;
			case PostgreSQLParser.STAR:
				{
				this.state = 9458;
				this.match(PostgreSQLParser.STAR);
				}
				break;
			case PostgreSQLParser.CLOSE_PAREN:
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 9462;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_expr(): Func_exprContext {
		let _localctx: Func_exprContext = new Func_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 1212, PostgreSQLParser.RULE_func_expr);
		try {
			this.state = 9475;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 898, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9464;
				this.func_application();
				this.state = 9466;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 895, this._ctx) ) {
				case 1:
					{
					this.state = 9465;
					this.within_group_clause();
					}
					break;
				}
				this.state = 9469;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 896, this._ctx) ) {
				case 1:
					{
					this.state = 9468;
					this.filter_clause();
					}
					break;
				}
				this.state = 9472;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 897, this._ctx) ) {
				case 1:
					{
					this.state = 9471;
					this.over_clause();
					}
					break;
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9474;
				this.func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_expr_windowless(): Func_expr_windowlessContext {
		let _localctx: Func_expr_windowlessContext = new Func_expr_windowlessContext(this._ctx, this.state);
		this.enterRule(_localctx, 1214, PostgreSQLParser.RULE_func_expr_windowless);
		try {
			this.state = 9479;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 899, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9477;
				this.func_application();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9478;
				this.func_expr_common_subexpr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_expr_common_subexpr(): Func_expr_common_subexprContext {
		let _localctx: Func_expr_common_subexprContext = new Func_expr_common_subexprContext(this._ctx, this.state);
		this.enterRule(_localctx, 1216, PostgreSQLParser.RULE_func_expr_common_subexpr);
		let _la: number;
		try {
			this.state = 9665;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_COLLATION:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9481;
				this.match(PostgreSQLParser.KW_COLLATION);
				this.state = 9482;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 9483;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9484;
				this.a_expr();
				this.state = 9485;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_CURRENT_DATE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9487;
				this.match(PostgreSQLParser.KW_CURRENT_DATE);
				}
				break;
			case PostgreSQLParser.KW_CURRENT_TIME:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9488;
				this.match(PostgreSQLParser.KW_CURRENT_TIME);
				this.state = 9493;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 900, this._ctx) ) {
				case 1:
					{
					this.state = 9489;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 9490;
					this.iconst();
					this.state = 9491;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_CURRENT_TIMESTAMP:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9495;
				this.match(PostgreSQLParser.KW_CURRENT_TIMESTAMP);
				this.state = 9500;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 901, this._ctx) ) {
				case 1:
					{
					this.state = 9496;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 9497;
					this.iconst();
					this.state = 9498;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_LOCALTIME:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9502;
				this.match(PostgreSQLParser.KW_LOCALTIME);
				this.state = 9507;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 902, this._ctx) ) {
				case 1:
					{
					this.state = 9503;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 9504;
					this.iconst();
					this.state = 9505;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_LOCALTIMESTAMP:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9509;
				this.match(PostgreSQLParser.KW_LOCALTIMESTAMP);
				this.state = 9514;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 903, this._ctx) ) {
				case 1:
					{
					this.state = 9510;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 9511;
					this.iconst();
					this.state = 9512;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.KW_CURRENT_ROLE:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 9516;
				this.match(PostgreSQLParser.KW_CURRENT_ROLE);
				}
				break;
			case PostgreSQLParser.KW_CURRENT_USER:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 9517;
				this.match(PostgreSQLParser.KW_CURRENT_USER);
				}
				break;
			case PostgreSQLParser.KW_SESSION_USER:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 9518;
				this.match(PostgreSQLParser.KW_SESSION_USER);
				}
				break;
			case PostgreSQLParser.KW_USER:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 9519;
				this.match(PostgreSQLParser.KW_USER);
				}
				break;
			case PostgreSQLParser.KW_CURRENT_CATALOG:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 9520;
				this.match(PostgreSQLParser.KW_CURRENT_CATALOG);
				}
				break;
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 9521;
				this.match(PostgreSQLParser.KW_CURRENT_SCHEMA);
				}
				break;
			case PostgreSQLParser.KW_CAST:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 9522;
				this.match(PostgreSQLParser.KW_CAST);
				this.state = 9523;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9524;
				this.a_expr();
				this.state = 9525;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 9526;
				this.typename();
				this.state = 9527;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_EXTRACT:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 9529;
				this.match(PostgreSQLParser.KW_EXTRACT);
				this.state = 9530;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9532;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 92)) & ~0x1F) === 0 && ((1 << (_la - 92)) & ((1 << (PostgreSQLParser.KW_TABLE - 92)) | (1 << (PostgreSQLParser.KW_IS - 92)) | (1 << (PostgreSQLParser.KW_OUTER - 92)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParser.KW_ABSOLUTE - 130)) | (1 << (PostgreSQLParser.KW_BACKWARD - 130)) | (1 << (PostgreSQLParser.KW_CHAIN - 130)) | (1 << (PostgreSQLParser.KW_CLOSE - 130)) | (1 << (PostgreSQLParser.KW_COMMIT - 130)))) !== 0) || ((((_la - 167)) & ~0x1F) === 0 && ((1 << (_la - 167)) & ((1 << (PostgreSQLParser.KW_CONTINUE - 167)) | (1 << (PostgreSQLParser.KW_CURSOR - 167)) | (1 << (PostgreSQLParser.KW_DAY - 167)))) !== 0) || ((((_la - 207)) & ~0x1F) === 0 && ((1 << (_la - 207)) & ((1 << (PostgreSQLParser.KW_FIRST - 207)) | (1 << (PostgreSQLParser.KW_FORWARD - 207)) | (1 << (PostgreSQLParser.KW_HOUR - 207)))) !== 0) || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & ((1 << (PostgreSQLParser.KW_INSERT - 241)) | (1 << (PostgreSQLParser.KW_LAST - 241)) | (1 << (PostgreSQLParser.KW_MINUTE - 241)) | (1 << (PostgreSQLParser.KW_MONTH - 241)) | (1 << (PostgreSQLParser.KW_MOVE - 241)) | (1 << (PostgreSQLParser.KW_NEXT - 241)) | (1 << (PostgreSQLParser.KW_NO - 241)))) !== 0) || ((((_la - 279)) & ~0x1F) === 0 && ((1 << (_la - 279)) & ((1 << (PostgreSQLParser.KW_OPTION - 279)) | (1 << (PostgreSQLParser.KW_PRIOR - 279)) | (1 << (PostgreSQLParser.KW_RELATIVE - 279)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (PostgreSQLParser.KW_RESET - 313)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 313)) | (1 << (PostgreSQLParser.KW_SCHEMA - 313)) | (1 << (PostgreSQLParser.KW_SCROLL - 313)) | (1 << (PostgreSQLParser.KW_SECOND - 313)) | (1 << (PostgreSQLParser.KW_SET - 313)))) !== 0) || _la === PostgreSQLParser.KW_TYPE || _la === PostgreSQLParser.KW_YEAR || _la === PostgreSQLParser.KW_CALL || _la === PostgreSQLParser.KW_CURRENT || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & ((1 << (PostgreSQLParser.KW_ROWTYPE - 477)) | (1 << (PostgreSQLParser.KW_DUMP - 477)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 477)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 477)) | (1 << (PostgreSQLParser.KW_ERROR - 477)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 477)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 477)) | (1 << (PostgreSQLParser.KW_ALIAS - 477)) | (1 << (PostgreSQLParser.KW_CONSTANT - 477)) | (1 << (PostgreSQLParser.KW_PERFORM - 477)) | (1 << (PostgreSQLParser.KW_GET - 477)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 477)) | (1 << (PostgreSQLParser.KW_STACKED - 477)) | (1 << (PostgreSQLParser.KW_ELSIF - 477)) | (1 << (PostgreSQLParser.KW_REVERSE - 477)) | (1 << (PostgreSQLParser.KW_SLICE - 477)) | (1 << (PostgreSQLParser.KW_EXIT - 477)) | (1 << (PostgreSQLParser.KW_RETURN - 477)))) !== 0) || ((((_la - 509)) & ~0x1F) === 0 && ((1 << (_la - 509)) & ((1 << (PostgreSQLParser.KW_QUERY - 509)) | (1 << (PostgreSQLParser.KW_RAISE - 509)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 509)) | (1 << (PostgreSQLParser.KW_DEBUG - 509)) | (1 << (PostgreSQLParser.KW_LOG - 509)) | (1 << (PostgreSQLParser.KW_INFO - 509)) | (1 << (PostgreSQLParser.KW_NOTICE - 509)) | (1 << (PostgreSQLParser.KW_WARNING - 509)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 509)) | (1 << (PostgreSQLParser.KW_ASSERT - 509)) | (1 << (PostgreSQLParser.KW_OPEN - 509)) | (1 << (PostgreSQLParser.Identifier - 509)) | (1 << (PostgreSQLParser.QuotedIdentifier - 509)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 509)) | (1 << (PostgreSQLParser.StringConstant - 509)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 509)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 509)))) !== 0) || ((((_la - 550)) & ~0x1F) === 0 && ((1 << (_la - 550)) & ((1 << (PostgreSQLParser.PLSQLVARIABLENAME - 550)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 550)) | (1 << (PostgreSQLParser.EscapeStringConstant - 550)))) !== 0)) {
					{
					this.state = 9531;
					this.extract_list();
					}
				}

				this.state = 9534;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_NORMALIZE:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 9535;
				this.match(PostgreSQLParser.KW_NORMALIZE);
				this.state = 9536;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9537;
				this.a_expr();
				this.state = 9540;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.COMMA) {
					{
					this.state = 9538;
					this.match(PostgreSQLParser.COMMA);
					this.state = 9539;
					this.unicode_normal_form();
					}
				}

				this.state = 9542;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_OVERLAY:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 9544;
				this.match(PostgreSQLParser.KW_OVERLAY);
				this.state = 9545;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9546;
				this.overlay_list();
				this.state = 9547;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_POSITION:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 9549;
				this.match(PostgreSQLParser.KW_POSITION);
				this.state = 9550;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9552;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_CASE - 33)) | (1 << (PostgreSQLParser.KW_CAST - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_CATALOG - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_DATE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_ROLE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIME - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIMESTAMP - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_USER - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FALSE - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (PostgreSQLParser.KW_LOCALTIME - 75)) | (1 << (PostgreSQLParser.KW_LOCALTIMESTAMP - 75)) | (1 << (PostgreSQLParser.KW_NULL - 75)) | (1 << (PostgreSQLParser.KW_SESSION_USER - 75)) | (1 << (PostgreSQLParser.KW_TABLE - 75)) | (1 << (PostgreSQLParser.KW_TRUE - 75)) | (1 << (PostgreSQLParser.KW_UNIQUE - 75)) | (1 << (PostgreSQLParser.KW_USER - 75)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 75)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (PostgreSQLParser.KW_BINARY - 107)) | (1 << (PostgreSQLParser.KW_COLLATION - 107)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 107)) | (1 << (PostgreSQLParser.KW_CROSS - 107)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 107)) | (1 << (PostgreSQLParser.KW_FREEZE - 107)) | (1 << (PostgreSQLParser.KW_FULL - 107)) | (1 << (PostgreSQLParser.KW_ILIKE - 107)) | (1 << (PostgreSQLParser.KW_INNER - 107)) | (1 << (PostgreSQLParser.KW_IS - 107)) | (1 << (PostgreSQLParser.KW_ISNULL - 107)) | (1 << (PostgreSQLParser.KW_JOIN - 107)) | (1 << (PostgreSQLParser.KW_LEFT - 107)) | (1 << (PostgreSQLParser.KW_LIKE - 107)) | (1 << (PostgreSQLParser.KW_NATURAL - 107)) | (1 << (PostgreSQLParser.KW_NOTNULL - 107)) | (1 << (PostgreSQLParser.KW_OUTER - 107)) | (1 << (PostgreSQLParser.KW_OVER - 107)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 107)) | (1 << (PostgreSQLParser.KW_RIGHT - 107)) | (1 << (PostgreSQLParser.KW_SIMILAR - 107)) | (1 << (PostgreSQLParser.KW_VERBOSE - 107)) | (1 << (PostgreSQLParser.KW_ABORT - 107)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 107)) | (1 << (PostgreSQLParser.KW_ACCESS - 107)) | (1 << (PostgreSQLParser.KW_ACTION - 107)) | (1 << (PostgreSQLParser.KW_ADD - 107)) | (1 << (PostgreSQLParser.KW_ADMIN - 107)) | (1 << (PostgreSQLParser.KW_AFTER - 107)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 107)) | (1 << (PostgreSQLParser.KW_ALSO - 107)) | (1 << (PostgreSQLParser.KW_ALTER - 107)))) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (PostgreSQLParser.KW_ALWAYS - 139)) | (1 << (PostgreSQLParser.KW_ASSERTION - 139)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 139)) | (1 << (PostgreSQLParser.KW_AT - 139)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 139)) | (1 << (PostgreSQLParser.KW_BACKWARD - 139)) | (1 << (PostgreSQLParser.KW_BEFORE - 139)) | (1 << (PostgreSQLParser.KW_BEGIN - 139)) | (1 << (PostgreSQLParser.KW_BY - 139)) | (1 << (PostgreSQLParser.KW_CACHE - 139)) | (1 << (PostgreSQLParser.KW_CALLED - 139)) | (1 << (PostgreSQLParser.KW_CASCADE - 139)) | (1 << (PostgreSQLParser.KW_CASCADED - 139)) | (1 << (PostgreSQLParser.KW_CATALOG - 139)) | (1 << (PostgreSQLParser.KW_CHAIN - 139)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 139)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 139)) | (1 << (PostgreSQLParser.KW_CLASS - 139)) | (1 << (PostgreSQLParser.KW_CLOSE - 139)) | (1 << (PostgreSQLParser.KW_CLUSTER - 139)) | (1 << (PostgreSQLParser.KW_COMMENT - 139)) | (1 << (PostgreSQLParser.KW_COMMENTS - 139)) | (1 << (PostgreSQLParser.KW_COMMIT - 139)) | (1 << (PostgreSQLParser.KW_COMMITTED - 139)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 139)) | (1 << (PostgreSQLParser.KW_CONNECTION - 139)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 139)) | (1 << (PostgreSQLParser.KW_CONTENT - 139)) | (1 << (PostgreSQLParser.KW_CONTINUE - 139)) | (1 << (PostgreSQLParser.KW_CONVERSION - 139)) | (1 << (PostgreSQLParser.KW_COPY - 139)) | (1 << (PostgreSQLParser.KW_COST - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (PostgreSQLParser.KW_CSV - 171)) | (1 << (PostgreSQLParser.KW_CURSOR - 171)) | (1 << (PostgreSQLParser.KW_CYCLE - 171)) | (1 << (PostgreSQLParser.KW_DATA - 171)) | (1 << (PostgreSQLParser.KW_DATABASE - 171)) | (1 << (PostgreSQLParser.KW_DAY - 171)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 171)) | (1 << (PostgreSQLParser.KW_DECLARE - 171)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 171)) | (1 << (PostgreSQLParser.KW_DEFERRED - 171)) | (1 << (PostgreSQLParser.KW_DEFINER - 171)) | (1 << (PostgreSQLParser.KW_DELETE - 171)) | (1 << (PostgreSQLParser.KW_DELIMITER - 171)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 171)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 171)) | (1 << (PostgreSQLParser.KW_DISABLE - 171)) | (1 << (PostgreSQLParser.KW_DISCARD - 171)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 171)) | (1 << (PostgreSQLParser.KW_DOMAIN - 171)) | (1 << (PostgreSQLParser.KW_DOUBLE - 171)) | (1 << (PostgreSQLParser.KW_DROP - 171)) | (1 << (PostgreSQLParser.KW_EACH - 171)) | (1 << (PostgreSQLParser.KW_ENABLE - 171)) | (1 << (PostgreSQLParser.KW_ENCODING - 171)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 171)) | (1 << (PostgreSQLParser.KW_ENUM - 171)) | (1 << (PostgreSQLParser.KW_ESCAPE - 171)) | (1 << (PostgreSQLParser.KW_EVENT - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 171)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 171)) | (1 << (PostgreSQLParser.KW_EXECUTE - 171)))) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & ((1 << (PostgreSQLParser.KW_EXPLAIN - 203)) | (1 << (PostgreSQLParser.KW_EXTENSION - 203)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 203)) | (1 << (PostgreSQLParser.KW_FAMILY - 203)) | (1 << (PostgreSQLParser.KW_FIRST - 203)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 203)) | (1 << (PostgreSQLParser.KW_FORCE - 203)) | (1 << (PostgreSQLParser.KW_FORWARD - 203)) | (1 << (PostgreSQLParser.KW_FUNCTION - 203)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 203)) | (1 << (PostgreSQLParser.KW_GLOBAL - 203)) | (1 << (PostgreSQLParser.KW_GRANTED - 203)) | (1 << (PostgreSQLParser.KW_HANDLER - 203)) | (1 << (PostgreSQLParser.KW_HEADER - 203)) | (1 << (PostgreSQLParser.KW_HOLD - 203)) | (1 << (PostgreSQLParser.KW_HOUR - 203)) | (1 << (PostgreSQLParser.KW_IDENTITY - 203)) | (1 << (PostgreSQLParser.KW_IF - 203)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 203)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 203)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 203)) | (1 << (PostgreSQLParser.KW_INCLUDING - 203)) | (1 << (PostgreSQLParser.KW_INCREMENT - 203)) | (1 << (PostgreSQLParser.KW_INDEX - 203)) | (1 << (PostgreSQLParser.KW_INDEXES - 203)) | (1 << (PostgreSQLParser.KW_INHERIT - 203)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (PostgreSQLParser.KW_INHERITS - 238)) | (1 << (PostgreSQLParser.KW_INLINE - 238)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 238)) | (1 << (PostgreSQLParser.KW_INSERT - 238)) | (1 << (PostgreSQLParser.KW_INSTEAD - 238)) | (1 << (PostgreSQLParser.KW_INVOKER - 238)) | (1 << (PostgreSQLParser.KW_ISOLATION - 238)) | (1 << (PostgreSQLParser.KW_KEY - 238)) | (1 << (PostgreSQLParser.KW_LABEL - 238)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 238)) | (1 << (PostgreSQLParser.KW_LARGE - 238)) | (1 << (PostgreSQLParser.KW_LAST - 238)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 238)) | (1 << (PostgreSQLParser.KW_LEVEL - 238)) | (1 << (PostgreSQLParser.KW_LISTEN - 238)) | (1 << (PostgreSQLParser.KW_LOAD - 238)) | (1 << (PostgreSQLParser.KW_LOCAL - 238)) | (1 << (PostgreSQLParser.KW_LOCATION - 238)) | (1 << (PostgreSQLParser.KW_LOCK - 238)) | (1 << (PostgreSQLParser.KW_MAPPING - 238)) | (1 << (PostgreSQLParser.KW_MATCH - 238)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 238)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 238)) | (1 << (PostgreSQLParser.KW_MINUTE - 238)) | (1 << (PostgreSQLParser.KW_MINVALUE - 238)) | (1 << (PostgreSQLParser.KW_MODE - 238)) | (1 << (PostgreSQLParser.KW_MONTH - 238)) | (1 << (PostgreSQLParser.KW_MOVE - 238)) | (1 << (PostgreSQLParser.KW_NAME - 238)) | (1 << (PostgreSQLParser.KW_NAMES - 238)) | (1 << (PostgreSQLParser.KW_NEXT - 238)) | (1 << (PostgreSQLParser.KW_NO - 238)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (PostgreSQLParser.KW_NOTHING - 270)) | (1 << (PostgreSQLParser.KW_NOTIFY - 270)) | (1 << (PostgreSQLParser.KW_NOWAIT - 270)) | (1 << (PostgreSQLParser.KW_NULLS - 270)) | (1 << (PostgreSQLParser.KW_OBJECT - 270)) | (1 << (PostgreSQLParser.KW_OF - 270)) | (1 << (PostgreSQLParser.KW_OFF - 270)) | (1 << (PostgreSQLParser.KW_OIDS - 270)) | (1 << (PostgreSQLParser.KW_OPERATOR - 270)) | (1 << (PostgreSQLParser.KW_OPTION - 270)) | (1 << (PostgreSQLParser.KW_OPTIONS - 270)) | (1 << (PostgreSQLParser.KW_OWNED - 270)) | (1 << (PostgreSQLParser.KW_OWNER - 270)) | (1 << (PostgreSQLParser.KW_PARSER - 270)) | (1 << (PostgreSQLParser.KW_PARTIAL - 270)) | (1 << (PostgreSQLParser.KW_PARTITION - 270)) | (1 << (PostgreSQLParser.KW_PASSING - 270)) | (1 << (PostgreSQLParser.KW_PASSWORD - 270)) | (1 << (PostgreSQLParser.KW_PLANS - 270)) | (1 << (PostgreSQLParser.KW_PRECEDING - 270)) | (1 << (PostgreSQLParser.KW_PREPARE - 270)) | (1 << (PostgreSQLParser.KW_PREPARED - 270)) | (1 << (PostgreSQLParser.KW_PRESERVE - 270)) | (1 << (PostgreSQLParser.KW_PRIOR - 270)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 270)) | (1 << (PostgreSQLParser.KW_PROGRAM - 270)) | (1 << (PostgreSQLParser.KW_QUOTE - 270)) | (1 << (PostgreSQLParser.KW_RANGE - 270)) | (1 << (PostgreSQLParser.KW_READ - 270)) | (1 << (PostgreSQLParser.KW_REASSIGN - 270)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (PostgreSQLParser.KW_RECHECK - 302)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 302)) | (1 << (PostgreSQLParser.KW_REF - 302)) | (1 << (PostgreSQLParser.KW_REFRESH - 302)) | (1 << (PostgreSQLParser.KW_REINDEX - 302)) | (1 << (PostgreSQLParser.KW_RELATIVE - 302)) | (1 << (PostgreSQLParser.KW_RELEASE - 302)) | (1 << (PostgreSQLParser.KW_RENAME - 302)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 302)) | (1 << (PostgreSQLParser.KW_REPLACE - 302)) | (1 << (PostgreSQLParser.KW_REPLICA - 302)) | (1 << (PostgreSQLParser.KW_RESET - 302)) | (1 << (PostgreSQLParser.KW_RESTART - 302)) | (1 << (PostgreSQLParser.KW_RESTRICT - 302)) | (1 << (PostgreSQLParser.KW_RETURNS - 302)) | (1 << (PostgreSQLParser.KW_REVOKE - 302)) | (1 << (PostgreSQLParser.KW_ROLE - 302)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 302)) | (1 << (PostgreSQLParser.KW_ROWS - 302)) | (1 << (PostgreSQLParser.KW_RULE - 302)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 302)) | (1 << (PostgreSQLParser.KW_SCHEMA - 302)) | (1 << (PostgreSQLParser.KW_SCROLL - 302)) | (1 << (PostgreSQLParser.KW_SEARCH - 302)) | (1 << (PostgreSQLParser.KW_SECOND - 302)) | (1 << (PostgreSQLParser.KW_SECURITY - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 302)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 302)) | (1 << (PostgreSQLParser.KW_SERVER - 302)) | (1 << (PostgreSQLParser.KW_SESSION - 302)) | (1 << (PostgreSQLParser.KW_SET - 302)))) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & ((1 << (PostgreSQLParser.KW_SHARE - 334)) | (1 << (PostgreSQLParser.KW_SHOW - 334)) | (1 << (PostgreSQLParser.KW_SIMPLE - 334)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 334)) | (1 << (PostgreSQLParser.KW_STABLE - 334)) | (1 << (PostgreSQLParser.KW_STANDALONE - 334)) | (1 << (PostgreSQLParser.KW_START - 334)) | (1 << (PostgreSQLParser.KW_STATEMENT - 334)) | (1 << (PostgreSQLParser.KW_STATISTICS - 334)) | (1 << (PostgreSQLParser.KW_STDIN - 334)) | (1 << (PostgreSQLParser.KW_STDOUT - 334)) | (1 << (PostgreSQLParser.KW_STORAGE - 334)) | (1 << (PostgreSQLParser.KW_STRICT - 334)) | (1 << (PostgreSQLParser.KW_STRIP - 334)) | (1 << (PostgreSQLParser.KW_SYSID - 334)) | (1 << (PostgreSQLParser.KW_SYSTEM - 334)) | (1 << (PostgreSQLParser.KW_TABLES - 334)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 334)) | (1 << (PostgreSQLParser.KW_TEMP - 334)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 334)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 334)) | (1 << (PostgreSQLParser.KW_TEXT - 334)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 334)) | (1 << (PostgreSQLParser.KW_TRIGGER - 334)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 334)) | (1 << (PostgreSQLParser.KW_TRUSTED - 334)) | (1 << (PostgreSQLParser.KW_TYPE - 334)) | (1 << (PostgreSQLParser.KW_TYPES - 334)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 334)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 334)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 334)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 334)))) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & ((1 << (PostgreSQLParser.KW_UNLISTEN - 366)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 366)) | (1 << (PostgreSQLParser.KW_UNTIL - 366)) | (1 << (PostgreSQLParser.KW_UPDATE - 366)) | (1 << (PostgreSQLParser.KW_VACUUM - 366)) | (1 << (PostgreSQLParser.KW_VALID - 366)) | (1 << (PostgreSQLParser.KW_VALIDATE - 366)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 366)) | (1 << (PostgreSQLParser.KW_VARYING - 366)) | (1 << (PostgreSQLParser.KW_VERSION - 366)) | (1 << (PostgreSQLParser.KW_VIEW - 366)) | (1 << (PostgreSQLParser.KW_VOLATILE - 366)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 366)) | (1 << (PostgreSQLParser.KW_WITHOUT - 366)) | (1 << (PostgreSQLParser.KW_WORK - 366)) | (1 << (PostgreSQLParser.KW_WRAPPER - 366)) | (1 << (PostgreSQLParser.KW_WRITE - 366)) | (1 << (PostgreSQLParser.KW_XML - 366)) | (1 << (PostgreSQLParser.KW_YEAR - 366)) | (1 << (PostgreSQLParser.KW_YES - 366)) | (1 << (PostgreSQLParser.KW_ZONE - 366)) | (1 << (PostgreSQLParser.KW_BETWEEN - 366)) | (1 << (PostgreSQLParser.KW_BIGINT - 366)) | (1 << (PostgreSQLParser.KW_BIT - 366)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 366)) | (1 << (PostgreSQLParser.KW_CHAR - 366)) | (1 << (PostgreSQLParser.KW_CHARACTER - 366)) | (1 << (PostgreSQLParser.KW_COALESCE - 366)) | (1 << (PostgreSQLParser.KW_DEC - 366)) | (1 << (PostgreSQLParser.KW_DECIMAL - 366)) | (1 << (PostgreSQLParser.KW_EXISTS - 366)) | (1 << (PostgreSQLParser.KW_EXTRACT - 366)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PostgreSQLParser.KW_FLOAT - 398)) | (1 << (PostgreSQLParser.KW_GREATEST - 398)) | (1 << (PostgreSQLParser.KW_INOUT - 398)) | (1 << (PostgreSQLParser.KW_INT - 398)) | (1 << (PostgreSQLParser.KW_INTEGER - 398)) | (1 << (PostgreSQLParser.KW_INTERVAL - 398)) | (1 << (PostgreSQLParser.KW_LEAST - 398)) | (1 << (PostgreSQLParser.KW_NATIONAL - 398)) | (1 << (PostgreSQLParser.KW_NCHAR - 398)) | (1 << (PostgreSQLParser.KW_NONE - 398)) | (1 << (PostgreSQLParser.KW_NULLIF - 398)) | (1 << (PostgreSQLParser.KW_NUMERIC - 398)) | (1 << (PostgreSQLParser.KW_OVERLAY - 398)) | (1 << (PostgreSQLParser.KW_POSITION - 398)) | (1 << (PostgreSQLParser.KW_PRECISION - 398)) | (1 << (PostgreSQLParser.KW_REAL - 398)) | (1 << (PostgreSQLParser.KW_ROW - 398)) | (1 << (PostgreSQLParser.KW_SETOF - 398)) | (1 << (PostgreSQLParser.KW_SMALLINT - 398)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 398)) | (1 << (PostgreSQLParser.KW_TIME - 398)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 398)) | (1 << (PostgreSQLParser.KW_TREAT - 398)) | (1 << (PostgreSQLParser.KW_TRIM - 398)) | (1 << (PostgreSQLParser.KW_VALUES - 398)) | (1 << (PostgreSQLParser.KW_VARCHAR - 398)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 398)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 398)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 398)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 398)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 398)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 398)))) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & ((1 << (PostgreSQLParser.KW_XMLPI - 430)) | (1 << (PostgreSQLParser.KW_XMLROOT - 430)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 430)) | (1 << (PostgreSQLParser.KW_CALL - 430)) | (1 << (PostgreSQLParser.KW_CURRENT - 430)) | (1 << (PostgreSQLParser.KW_ATTACH - 430)) | (1 << (PostgreSQLParser.KW_DETACH - 430)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 430)) | (1 << (PostgreSQLParser.KW_GENERATED - 430)) | (1 << (PostgreSQLParser.KW_LOGGED - 430)) | (1 << (PostgreSQLParser.KW_STORED - 430)) | (1 << (PostgreSQLParser.KW_INCLUDE - 430)) | (1 << (PostgreSQLParser.KW_ROUTINE - 430)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 430)) | (1 << (PostgreSQLParser.KW_IMPORT - 430)) | (1 << (PostgreSQLParser.KW_POLICY - 430)) | (1 << (PostgreSQLParser.KW_METHOD - 430)) | (1 << (PostgreSQLParser.KW_REFERENCING - 430)) | (1 << (PostgreSQLParser.KW_NEW - 430)) | (1 << (PostgreSQLParser.KW_OLD - 430)) | (1 << (PostgreSQLParser.KW_VALUE - 430)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 430)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 430)) | (1 << (PostgreSQLParser.KW_OUT - 430)) | (1 << (PostgreSQLParser.KW_ROUTINES - 430)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 430)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 430)) | (1 << (PostgreSQLParser.KW_INPUT - 430)) | (1 << (PostgreSQLParser.KW_SUPPORT - 430)) | (1 << (PostgreSQLParser.KW_PARALLEL - 430)) | (1 << (PostgreSQLParser.KW_SQL - 430)))) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & ((1 << (PostgreSQLParser.KW_DEPENDS - 462)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 462)) | (1 << (PostgreSQLParser.KW_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_SKIP - 462)) | (1 << (PostgreSQLParser.KW_LOCKED - 462)) | (1 << (PostgreSQLParser.KW_TIES - 462)) | (1 << (PostgreSQLParser.KW_ROLLUP - 462)) | (1 << (PostgreSQLParser.KW_CUBE - 462)) | (1 << (PostgreSQLParser.KW_GROUPING - 462)) | (1 << (PostgreSQLParser.KW_SETS - 462)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 462)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 462)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 462)) | (1 << (PostgreSQLParser.KW_COLUMNS - 462)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 462)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 462)) | (1 << (PostgreSQLParser.KW_WITHIN - 462)) | (1 << (PostgreSQLParser.KW_FILTER - 462)) | (1 << (PostgreSQLParser.KW_GROUPS - 462)) | (1 << (PostgreSQLParser.KW_OTHERS - 462)) | (1 << (PostgreSQLParser.KW_NFC - 462)) | (1 << (PostgreSQLParser.KW_NFD - 462)) | (1 << (PostgreSQLParser.KW_NFKC - 462)) | (1 << (PostgreSQLParser.KW_NFKD - 462)) | (1 << (PostgreSQLParser.KW_UESCAPE - 462)) | (1 << (PostgreSQLParser.KW_VIEWS - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 462)) | (1 << (PostgreSQLParser.KW_DUMP - 462)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 462)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_ERROR - 462)))) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (PostgreSQLParser.KW_USE_VARIABLE - 494)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 494)) | (1 << (PostgreSQLParser.KW_ALIAS - 494)) | (1 << (PostgreSQLParser.KW_CONSTANT - 494)) | (1 << (PostgreSQLParser.KW_PERFORM - 494)) | (1 << (PostgreSQLParser.KW_GET - 494)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 494)) | (1 << (PostgreSQLParser.KW_STACKED - 494)) | (1 << (PostgreSQLParser.KW_ELSIF - 494)) | (1 << (PostgreSQLParser.KW_REVERSE - 494)) | (1 << (PostgreSQLParser.KW_SLICE - 494)) | (1 << (PostgreSQLParser.KW_EXIT - 494)) | (1 << (PostgreSQLParser.KW_RETURN - 494)) | (1 << (PostgreSQLParser.KW_QUERY - 494)) | (1 << (PostgreSQLParser.KW_RAISE - 494)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 494)) | (1 << (PostgreSQLParser.KW_DEBUG - 494)) | (1 << (PostgreSQLParser.KW_LOG - 494)) | (1 << (PostgreSQLParser.KW_INFO - 494)) | (1 << (PostgreSQLParser.KW_NOTICE - 494)) | (1 << (PostgreSQLParser.KW_WARNING - 494)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 494)) | (1 << (PostgreSQLParser.KW_ASSERT - 494)) | (1 << (PostgreSQLParser.KW_OPEN - 494)) | (1 << (PostgreSQLParser.Identifier - 494)))) !== 0) || ((((_la - 526)) & ~0x1F) === 0 && ((1 << (_la - 526)) & ((1 << (PostgreSQLParser.QuotedIdentifier - 526)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 526)) | (1 << (PostgreSQLParser.StringConstant - 526)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 526)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 526)) | (1 << (PostgreSQLParser.BinaryStringConstant - 526)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 526)) | (1 << (PostgreSQLParser.Integral - 526)) | (1 << (PostgreSQLParser.Numeric - 526)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 526)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 526)))) !== 0) || _la === PostgreSQLParser.EscapeStringConstant) {
					{
					this.state = 9551;
					this.position_list();
					}
				}

				this.state = 9554;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_SUBSTRING:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 9555;
				this.match(PostgreSQLParser.KW_SUBSTRING);
				this.state = 9556;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9558;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_CASE - 33)) | (1 << (PostgreSQLParser.KW_CAST - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_CATALOG - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_DATE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_ROLE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIME - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIMESTAMP - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_USER - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FALSE - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (PostgreSQLParser.KW_LOCALTIME - 75)) | (1 << (PostgreSQLParser.KW_LOCALTIMESTAMP - 75)) | (1 << (PostgreSQLParser.KW_NOT - 75)) | (1 << (PostgreSQLParser.KW_NULL - 75)) | (1 << (PostgreSQLParser.KW_SESSION_USER - 75)) | (1 << (PostgreSQLParser.KW_TABLE - 75)) | (1 << (PostgreSQLParser.KW_TRUE - 75)) | (1 << (PostgreSQLParser.KW_UNIQUE - 75)) | (1 << (PostgreSQLParser.KW_USER - 75)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 75)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (PostgreSQLParser.KW_BINARY - 107)) | (1 << (PostgreSQLParser.KW_COLLATION - 107)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 107)) | (1 << (PostgreSQLParser.KW_CROSS - 107)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 107)) | (1 << (PostgreSQLParser.KW_FREEZE - 107)) | (1 << (PostgreSQLParser.KW_FULL - 107)) | (1 << (PostgreSQLParser.KW_ILIKE - 107)) | (1 << (PostgreSQLParser.KW_INNER - 107)) | (1 << (PostgreSQLParser.KW_IS - 107)) | (1 << (PostgreSQLParser.KW_ISNULL - 107)) | (1 << (PostgreSQLParser.KW_JOIN - 107)) | (1 << (PostgreSQLParser.KW_LEFT - 107)) | (1 << (PostgreSQLParser.KW_LIKE - 107)) | (1 << (PostgreSQLParser.KW_NATURAL - 107)) | (1 << (PostgreSQLParser.KW_NOTNULL - 107)) | (1 << (PostgreSQLParser.KW_OUTER - 107)) | (1 << (PostgreSQLParser.KW_OVER - 107)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 107)) | (1 << (PostgreSQLParser.KW_RIGHT - 107)) | (1 << (PostgreSQLParser.KW_SIMILAR - 107)) | (1 << (PostgreSQLParser.KW_VERBOSE - 107)) | (1 << (PostgreSQLParser.KW_ABORT - 107)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 107)) | (1 << (PostgreSQLParser.KW_ACCESS - 107)) | (1 << (PostgreSQLParser.KW_ACTION - 107)) | (1 << (PostgreSQLParser.KW_ADD - 107)) | (1 << (PostgreSQLParser.KW_ADMIN - 107)) | (1 << (PostgreSQLParser.KW_AFTER - 107)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 107)) | (1 << (PostgreSQLParser.KW_ALSO - 107)) | (1 << (PostgreSQLParser.KW_ALTER - 107)))) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (PostgreSQLParser.KW_ALWAYS - 139)) | (1 << (PostgreSQLParser.KW_ASSERTION - 139)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 139)) | (1 << (PostgreSQLParser.KW_AT - 139)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 139)) | (1 << (PostgreSQLParser.KW_BACKWARD - 139)) | (1 << (PostgreSQLParser.KW_BEFORE - 139)) | (1 << (PostgreSQLParser.KW_BEGIN - 139)) | (1 << (PostgreSQLParser.KW_BY - 139)) | (1 << (PostgreSQLParser.KW_CACHE - 139)) | (1 << (PostgreSQLParser.KW_CALLED - 139)) | (1 << (PostgreSQLParser.KW_CASCADE - 139)) | (1 << (PostgreSQLParser.KW_CASCADED - 139)) | (1 << (PostgreSQLParser.KW_CATALOG - 139)) | (1 << (PostgreSQLParser.KW_CHAIN - 139)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 139)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 139)) | (1 << (PostgreSQLParser.KW_CLASS - 139)) | (1 << (PostgreSQLParser.KW_CLOSE - 139)) | (1 << (PostgreSQLParser.KW_CLUSTER - 139)) | (1 << (PostgreSQLParser.KW_COMMENT - 139)) | (1 << (PostgreSQLParser.KW_COMMENTS - 139)) | (1 << (PostgreSQLParser.KW_COMMIT - 139)) | (1 << (PostgreSQLParser.KW_COMMITTED - 139)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 139)) | (1 << (PostgreSQLParser.KW_CONNECTION - 139)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 139)) | (1 << (PostgreSQLParser.KW_CONTENT - 139)) | (1 << (PostgreSQLParser.KW_CONTINUE - 139)) | (1 << (PostgreSQLParser.KW_CONVERSION - 139)) | (1 << (PostgreSQLParser.KW_COPY - 139)) | (1 << (PostgreSQLParser.KW_COST - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (PostgreSQLParser.KW_CSV - 171)) | (1 << (PostgreSQLParser.KW_CURSOR - 171)) | (1 << (PostgreSQLParser.KW_CYCLE - 171)) | (1 << (PostgreSQLParser.KW_DATA - 171)) | (1 << (PostgreSQLParser.KW_DATABASE - 171)) | (1 << (PostgreSQLParser.KW_DAY - 171)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 171)) | (1 << (PostgreSQLParser.KW_DECLARE - 171)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 171)) | (1 << (PostgreSQLParser.KW_DEFERRED - 171)) | (1 << (PostgreSQLParser.KW_DEFINER - 171)) | (1 << (PostgreSQLParser.KW_DELETE - 171)) | (1 << (PostgreSQLParser.KW_DELIMITER - 171)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 171)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 171)) | (1 << (PostgreSQLParser.KW_DISABLE - 171)) | (1 << (PostgreSQLParser.KW_DISCARD - 171)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 171)) | (1 << (PostgreSQLParser.KW_DOMAIN - 171)) | (1 << (PostgreSQLParser.KW_DOUBLE - 171)) | (1 << (PostgreSQLParser.KW_DROP - 171)) | (1 << (PostgreSQLParser.KW_EACH - 171)) | (1 << (PostgreSQLParser.KW_ENABLE - 171)) | (1 << (PostgreSQLParser.KW_ENCODING - 171)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 171)) | (1 << (PostgreSQLParser.KW_ENUM - 171)) | (1 << (PostgreSQLParser.KW_ESCAPE - 171)) | (1 << (PostgreSQLParser.KW_EVENT - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 171)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 171)) | (1 << (PostgreSQLParser.KW_EXECUTE - 171)))) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & ((1 << (PostgreSQLParser.KW_EXPLAIN - 203)) | (1 << (PostgreSQLParser.KW_EXTENSION - 203)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 203)) | (1 << (PostgreSQLParser.KW_FAMILY - 203)) | (1 << (PostgreSQLParser.KW_FIRST - 203)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 203)) | (1 << (PostgreSQLParser.KW_FORCE - 203)) | (1 << (PostgreSQLParser.KW_FORWARD - 203)) | (1 << (PostgreSQLParser.KW_FUNCTION - 203)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 203)) | (1 << (PostgreSQLParser.KW_GLOBAL - 203)) | (1 << (PostgreSQLParser.KW_GRANTED - 203)) | (1 << (PostgreSQLParser.KW_HANDLER - 203)) | (1 << (PostgreSQLParser.KW_HEADER - 203)) | (1 << (PostgreSQLParser.KW_HOLD - 203)) | (1 << (PostgreSQLParser.KW_HOUR - 203)) | (1 << (PostgreSQLParser.KW_IDENTITY - 203)) | (1 << (PostgreSQLParser.KW_IF - 203)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 203)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 203)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 203)) | (1 << (PostgreSQLParser.KW_INCLUDING - 203)) | (1 << (PostgreSQLParser.KW_INCREMENT - 203)) | (1 << (PostgreSQLParser.KW_INDEX - 203)) | (1 << (PostgreSQLParser.KW_INDEXES - 203)) | (1 << (PostgreSQLParser.KW_INHERIT - 203)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (PostgreSQLParser.KW_INHERITS - 238)) | (1 << (PostgreSQLParser.KW_INLINE - 238)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 238)) | (1 << (PostgreSQLParser.KW_INSERT - 238)) | (1 << (PostgreSQLParser.KW_INSTEAD - 238)) | (1 << (PostgreSQLParser.KW_INVOKER - 238)) | (1 << (PostgreSQLParser.KW_ISOLATION - 238)) | (1 << (PostgreSQLParser.KW_KEY - 238)) | (1 << (PostgreSQLParser.KW_LABEL - 238)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 238)) | (1 << (PostgreSQLParser.KW_LARGE - 238)) | (1 << (PostgreSQLParser.KW_LAST - 238)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 238)) | (1 << (PostgreSQLParser.KW_LEVEL - 238)) | (1 << (PostgreSQLParser.KW_LISTEN - 238)) | (1 << (PostgreSQLParser.KW_LOAD - 238)) | (1 << (PostgreSQLParser.KW_LOCAL - 238)) | (1 << (PostgreSQLParser.KW_LOCATION - 238)) | (1 << (PostgreSQLParser.KW_LOCK - 238)) | (1 << (PostgreSQLParser.KW_MAPPING - 238)) | (1 << (PostgreSQLParser.KW_MATCH - 238)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 238)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 238)) | (1 << (PostgreSQLParser.KW_MINUTE - 238)) | (1 << (PostgreSQLParser.KW_MINVALUE - 238)) | (1 << (PostgreSQLParser.KW_MODE - 238)) | (1 << (PostgreSQLParser.KW_MONTH - 238)) | (1 << (PostgreSQLParser.KW_MOVE - 238)) | (1 << (PostgreSQLParser.KW_NAME - 238)) | (1 << (PostgreSQLParser.KW_NAMES - 238)) | (1 << (PostgreSQLParser.KW_NEXT - 238)) | (1 << (PostgreSQLParser.KW_NO - 238)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (PostgreSQLParser.KW_NOTHING - 270)) | (1 << (PostgreSQLParser.KW_NOTIFY - 270)) | (1 << (PostgreSQLParser.KW_NOWAIT - 270)) | (1 << (PostgreSQLParser.KW_NULLS - 270)) | (1 << (PostgreSQLParser.KW_OBJECT - 270)) | (1 << (PostgreSQLParser.KW_OF - 270)) | (1 << (PostgreSQLParser.KW_OFF - 270)) | (1 << (PostgreSQLParser.KW_OIDS - 270)) | (1 << (PostgreSQLParser.KW_OPERATOR - 270)) | (1 << (PostgreSQLParser.KW_OPTION - 270)) | (1 << (PostgreSQLParser.KW_OPTIONS - 270)) | (1 << (PostgreSQLParser.KW_OWNED - 270)) | (1 << (PostgreSQLParser.KW_OWNER - 270)) | (1 << (PostgreSQLParser.KW_PARSER - 270)) | (1 << (PostgreSQLParser.KW_PARTIAL - 270)) | (1 << (PostgreSQLParser.KW_PARTITION - 270)) | (1 << (PostgreSQLParser.KW_PASSING - 270)) | (1 << (PostgreSQLParser.KW_PASSWORD - 270)) | (1 << (PostgreSQLParser.KW_PLANS - 270)) | (1 << (PostgreSQLParser.KW_PRECEDING - 270)) | (1 << (PostgreSQLParser.KW_PREPARE - 270)) | (1 << (PostgreSQLParser.KW_PREPARED - 270)) | (1 << (PostgreSQLParser.KW_PRESERVE - 270)) | (1 << (PostgreSQLParser.KW_PRIOR - 270)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 270)) | (1 << (PostgreSQLParser.KW_PROGRAM - 270)) | (1 << (PostgreSQLParser.KW_QUOTE - 270)) | (1 << (PostgreSQLParser.KW_RANGE - 270)) | (1 << (PostgreSQLParser.KW_READ - 270)) | (1 << (PostgreSQLParser.KW_REASSIGN - 270)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (PostgreSQLParser.KW_RECHECK - 302)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 302)) | (1 << (PostgreSQLParser.KW_REF - 302)) | (1 << (PostgreSQLParser.KW_REFRESH - 302)) | (1 << (PostgreSQLParser.KW_REINDEX - 302)) | (1 << (PostgreSQLParser.KW_RELATIVE - 302)) | (1 << (PostgreSQLParser.KW_RELEASE - 302)) | (1 << (PostgreSQLParser.KW_RENAME - 302)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 302)) | (1 << (PostgreSQLParser.KW_REPLACE - 302)) | (1 << (PostgreSQLParser.KW_REPLICA - 302)) | (1 << (PostgreSQLParser.KW_RESET - 302)) | (1 << (PostgreSQLParser.KW_RESTART - 302)) | (1 << (PostgreSQLParser.KW_RESTRICT - 302)) | (1 << (PostgreSQLParser.KW_RETURNS - 302)) | (1 << (PostgreSQLParser.KW_REVOKE - 302)) | (1 << (PostgreSQLParser.KW_ROLE - 302)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 302)) | (1 << (PostgreSQLParser.KW_ROWS - 302)) | (1 << (PostgreSQLParser.KW_RULE - 302)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 302)) | (1 << (PostgreSQLParser.KW_SCHEMA - 302)) | (1 << (PostgreSQLParser.KW_SCROLL - 302)) | (1 << (PostgreSQLParser.KW_SEARCH - 302)) | (1 << (PostgreSQLParser.KW_SECOND - 302)) | (1 << (PostgreSQLParser.KW_SECURITY - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 302)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 302)) | (1 << (PostgreSQLParser.KW_SERVER - 302)) | (1 << (PostgreSQLParser.KW_SESSION - 302)) | (1 << (PostgreSQLParser.KW_SET - 302)))) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & ((1 << (PostgreSQLParser.KW_SHARE - 334)) | (1 << (PostgreSQLParser.KW_SHOW - 334)) | (1 << (PostgreSQLParser.KW_SIMPLE - 334)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 334)) | (1 << (PostgreSQLParser.KW_STABLE - 334)) | (1 << (PostgreSQLParser.KW_STANDALONE - 334)) | (1 << (PostgreSQLParser.KW_START - 334)) | (1 << (PostgreSQLParser.KW_STATEMENT - 334)) | (1 << (PostgreSQLParser.KW_STATISTICS - 334)) | (1 << (PostgreSQLParser.KW_STDIN - 334)) | (1 << (PostgreSQLParser.KW_STDOUT - 334)) | (1 << (PostgreSQLParser.KW_STORAGE - 334)) | (1 << (PostgreSQLParser.KW_STRICT - 334)) | (1 << (PostgreSQLParser.KW_STRIP - 334)) | (1 << (PostgreSQLParser.KW_SYSID - 334)) | (1 << (PostgreSQLParser.KW_SYSTEM - 334)) | (1 << (PostgreSQLParser.KW_TABLES - 334)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 334)) | (1 << (PostgreSQLParser.KW_TEMP - 334)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 334)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 334)) | (1 << (PostgreSQLParser.KW_TEXT - 334)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 334)) | (1 << (PostgreSQLParser.KW_TRIGGER - 334)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 334)) | (1 << (PostgreSQLParser.KW_TRUSTED - 334)) | (1 << (PostgreSQLParser.KW_TYPE - 334)) | (1 << (PostgreSQLParser.KW_TYPES - 334)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 334)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 334)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 334)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 334)))) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & ((1 << (PostgreSQLParser.KW_UNLISTEN - 366)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 366)) | (1 << (PostgreSQLParser.KW_UNTIL - 366)) | (1 << (PostgreSQLParser.KW_UPDATE - 366)) | (1 << (PostgreSQLParser.KW_VACUUM - 366)) | (1 << (PostgreSQLParser.KW_VALID - 366)) | (1 << (PostgreSQLParser.KW_VALIDATE - 366)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 366)) | (1 << (PostgreSQLParser.KW_VARYING - 366)) | (1 << (PostgreSQLParser.KW_VERSION - 366)) | (1 << (PostgreSQLParser.KW_VIEW - 366)) | (1 << (PostgreSQLParser.KW_VOLATILE - 366)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 366)) | (1 << (PostgreSQLParser.KW_WITHOUT - 366)) | (1 << (PostgreSQLParser.KW_WORK - 366)) | (1 << (PostgreSQLParser.KW_WRAPPER - 366)) | (1 << (PostgreSQLParser.KW_WRITE - 366)) | (1 << (PostgreSQLParser.KW_XML - 366)) | (1 << (PostgreSQLParser.KW_YEAR - 366)) | (1 << (PostgreSQLParser.KW_YES - 366)) | (1 << (PostgreSQLParser.KW_ZONE - 366)) | (1 << (PostgreSQLParser.KW_BETWEEN - 366)) | (1 << (PostgreSQLParser.KW_BIGINT - 366)) | (1 << (PostgreSQLParser.KW_BIT - 366)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 366)) | (1 << (PostgreSQLParser.KW_CHAR - 366)) | (1 << (PostgreSQLParser.KW_CHARACTER - 366)) | (1 << (PostgreSQLParser.KW_COALESCE - 366)) | (1 << (PostgreSQLParser.KW_DEC - 366)) | (1 << (PostgreSQLParser.KW_DECIMAL - 366)) | (1 << (PostgreSQLParser.KW_EXISTS - 366)) | (1 << (PostgreSQLParser.KW_EXTRACT - 366)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PostgreSQLParser.KW_FLOAT - 398)) | (1 << (PostgreSQLParser.KW_GREATEST - 398)) | (1 << (PostgreSQLParser.KW_INOUT - 398)) | (1 << (PostgreSQLParser.KW_INT - 398)) | (1 << (PostgreSQLParser.KW_INTEGER - 398)) | (1 << (PostgreSQLParser.KW_INTERVAL - 398)) | (1 << (PostgreSQLParser.KW_LEAST - 398)) | (1 << (PostgreSQLParser.KW_NATIONAL - 398)) | (1 << (PostgreSQLParser.KW_NCHAR - 398)) | (1 << (PostgreSQLParser.KW_NONE - 398)) | (1 << (PostgreSQLParser.KW_NULLIF - 398)) | (1 << (PostgreSQLParser.KW_NUMERIC - 398)) | (1 << (PostgreSQLParser.KW_OVERLAY - 398)) | (1 << (PostgreSQLParser.KW_POSITION - 398)) | (1 << (PostgreSQLParser.KW_PRECISION - 398)) | (1 << (PostgreSQLParser.KW_REAL - 398)) | (1 << (PostgreSQLParser.KW_ROW - 398)) | (1 << (PostgreSQLParser.KW_SETOF - 398)) | (1 << (PostgreSQLParser.KW_SMALLINT - 398)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 398)) | (1 << (PostgreSQLParser.KW_TIME - 398)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 398)) | (1 << (PostgreSQLParser.KW_TREAT - 398)) | (1 << (PostgreSQLParser.KW_TRIM - 398)) | (1 << (PostgreSQLParser.KW_VALUES - 398)) | (1 << (PostgreSQLParser.KW_VARCHAR - 398)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 398)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 398)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 398)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 398)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 398)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 398)))) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & ((1 << (PostgreSQLParser.KW_XMLPI - 430)) | (1 << (PostgreSQLParser.KW_XMLROOT - 430)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 430)) | (1 << (PostgreSQLParser.KW_CALL - 430)) | (1 << (PostgreSQLParser.KW_CURRENT - 430)) | (1 << (PostgreSQLParser.KW_ATTACH - 430)) | (1 << (PostgreSQLParser.KW_DETACH - 430)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 430)) | (1 << (PostgreSQLParser.KW_GENERATED - 430)) | (1 << (PostgreSQLParser.KW_LOGGED - 430)) | (1 << (PostgreSQLParser.KW_STORED - 430)) | (1 << (PostgreSQLParser.KW_INCLUDE - 430)) | (1 << (PostgreSQLParser.KW_ROUTINE - 430)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 430)) | (1 << (PostgreSQLParser.KW_IMPORT - 430)) | (1 << (PostgreSQLParser.KW_POLICY - 430)) | (1 << (PostgreSQLParser.KW_METHOD - 430)) | (1 << (PostgreSQLParser.KW_REFERENCING - 430)) | (1 << (PostgreSQLParser.KW_NEW - 430)) | (1 << (PostgreSQLParser.KW_OLD - 430)) | (1 << (PostgreSQLParser.KW_VALUE - 430)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 430)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 430)) | (1 << (PostgreSQLParser.KW_OUT - 430)) | (1 << (PostgreSQLParser.KW_ROUTINES - 430)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 430)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 430)) | (1 << (PostgreSQLParser.KW_INPUT - 430)) | (1 << (PostgreSQLParser.KW_SUPPORT - 430)) | (1 << (PostgreSQLParser.KW_PARALLEL - 430)) | (1 << (PostgreSQLParser.KW_SQL - 430)))) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & ((1 << (PostgreSQLParser.KW_DEPENDS - 462)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 462)) | (1 << (PostgreSQLParser.KW_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_SKIP - 462)) | (1 << (PostgreSQLParser.KW_LOCKED - 462)) | (1 << (PostgreSQLParser.KW_TIES - 462)) | (1 << (PostgreSQLParser.KW_ROLLUP - 462)) | (1 << (PostgreSQLParser.KW_CUBE - 462)) | (1 << (PostgreSQLParser.KW_GROUPING - 462)) | (1 << (PostgreSQLParser.KW_SETS - 462)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 462)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 462)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 462)) | (1 << (PostgreSQLParser.KW_COLUMNS - 462)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 462)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 462)) | (1 << (PostgreSQLParser.KW_WITHIN - 462)) | (1 << (PostgreSQLParser.KW_FILTER - 462)) | (1 << (PostgreSQLParser.KW_GROUPS - 462)) | (1 << (PostgreSQLParser.KW_OTHERS - 462)) | (1 << (PostgreSQLParser.KW_NFC - 462)) | (1 << (PostgreSQLParser.KW_NFD - 462)) | (1 << (PostgreSQLParser.KW_NFKC - 462)) | (1 << (PostgreSQLParser.KW_NFKD - 462)) | (1 << (PostgreSQLParser.KW_UESCAPE - 462)) | (1 << (PostgreSQLParser.KW_VIEWS - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 462)) | (1 << (PostgreSQLParser.KW_DUMP - 462)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 462)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_ERROR - 462)))) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (PostgreSQLParser.KW_USE_VARIABLE - 494)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 494)) | (1 << (PostgreSQLParser.KW_ALIAS - 494)) | (1 << (PostgreSQLParser.KW_CONSTANT - 494)) | (1 << (PostgreSQLParser.KW_PERFORM - 494)) | (1 << (PostgreSQLParser.KW_GET - 494)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 494)) | (1 << (PostgreSQLParser.KW_STACKED - 494)) | (1 << (PostgreSQLParser.KW_ELSIF - 494)) | (1 << (PostgreSQLParser.KW_REVERSE - 494)) | (1 << (PostgreSQLParser.KW_SLICE - 494)) | (1 << (PostgreSQLParser.KW_EXIT - 494)) | (1 << (PostgreSQLParser.KW_RETURN - 494)) | (1 << (PostgreSQLParser.KW_QUERY - 494)) | (1 << (PostgreSQLParser.KW_RAISE - 494)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 494)) | (1 << (PostgreSQLParser.KW_DEBUG - 494)) | (1 << (PostgreSQLParser.KW_LOG - 494)) | (1 << (PostgreSQLParser.KW_INFO - 494)) | (1 << (PostgreSQLParser.KW_NOTICE - 494)) | (1 << (PostgreSQLParser.KW_WARNING - 494)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 494)) | (1 << (PostgreSQLParser.KW_ASSERT - 494)) | (1 << (PostgreSQLParser.KW_OPEN - 494)) | (1 << (PostgreSQLParser.Identifier - 494)))) !== 0) || ((((_la - 526)) & ~0x1F) === 0 && ((1 << (_la - 526)) & ((1 << (PostgreSQLParser.QuotedIdentifier - 526)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 526)) | (1 << (PostgreSQLParser.StringConstant - 526)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 526)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 526)) | (1 << (PostgreSQLParser.BinaryStringConstant - 526)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 526)) | (1 << (PostgreSQLParser.Integral - 526)) | (1 << (PostgreSQLParser.Numeric - 526)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 526)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 526)))) !== 0) || _la === PostgreSQLParser.EscapeStringConstant) {
					{
					this.state = 9557;
					this.substr_list();
					}
				}

				this.state = 9560;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_TREAT:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 9561;
				this.match(PostgreSQLParser.KW_TREAT);
				this.state = 9562;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9563;
				this.a_expr();
				this.state = 9564;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 9565;
				this.typename();
				this.state = 9566;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_TRIM:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 9568;
				this.match(PostgreSQLParser.KW_TRIM);
				this.state = 9569;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9571;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_BOTH || _la === PostgreSQLParser.KW_LEADING || _la === PostgreSQLParser.KW_TRAILING) {
					{
					this.state = 9570;
					_la = this._input.LA(1);
					if (!(_la === PostgreSQLParser.KW_BOTH || _la === PostgreSQLParser.KW_LEADING || _la === PostgreSQLParser.KW_TRAILING)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 9573;
				this.trim_list();
				this.state = 9574;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_NULLIF:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 9576;
				this.match(PostgreSQLParser.KW_NULLIF);
				this.state = 9577;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9578;
				this.a_expr();
				this.state = 9579;
				this.match(PostgreSQLParser.COMMA);
				this.state = 9580;
				this.a_expr();
				this.state = 9581;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_COALESCE:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 9583;
				this.match(PostgreSQLParser.KW_COALESCE);
				this.state = 9584;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9585;
				this.expr_list();
				this.state = 9586;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_GREATEST:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 9588;
				this.match(PostgreSQLParser.KW_GREATEST);
				this.state = 9589;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9590;
				this.expr_list();
				this.state = 9591;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_LEAST:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 9593;
				this.match(PostgreSQLParser.KW_LEAST);
				this.state = 9594;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9595;
				this.expr_list();
				this.state = 9596;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_XMLCONCAT:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 9598;
				this.match(PostgreSQLParser.KW_XMLCONCAT);
				this.state = 9599;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9600;
				this.expr_list();
				this.state = 9601;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_XMLELEMENT:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 9603;
				this.match(PostgreSQLParser.KW_XMLELEMENT);
				this.state = 9604;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9605;
				this.match(PostgreSQLParser.KW_NAME);
				this.state = 9606;
				this.collabel();
				this.state = 9612;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.COMMA) {
					{
					this.state = 9607;
					this.match(PostgreSQLParser.COMMA);
					this.state = 9610;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 909, this._ctx) ) {
					case 1:
						{
						this.state = 9608;
						this.xml_attributes();
						}
						break;

					case 2:
						{
						this.state = 9609;
						this.expr_list();
						}
						break;
					}
					}
				}

				this.state = 9614;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_XMLEXISTS:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 9616;
				this.match(PostgreSQLParser.KW_XMLEXISTS);
				this.state = 9617;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9618;
				this.c_expr();
				this.state = 9619;
				this.xmlexists_argument();
				this.state = 9620;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_XMLFOREST:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 9622;
				this.match(PostgreSQLParser.KW_XMLFOREST);
				this.state = 9623;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9624;
				this.xml_attribute_list();
				this.state = 9625;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_XMLPARSE:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 9627;
				this.match(PostgreSQLParser.KW_XMLPARSE);
				this.state = 9628;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9629;
				this.document_or_content();
				this.state = 9630;
				this.a_expr();
				this.state = 9632;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_PRESERVE || _la === PostgreSQLParser.KW_STRIP) {
					{
					this.state = 9631;
					this.xml_whitespace_option();
					}
				}

				this.state = 9634;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_XMLPI:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 9636;
				this.match(PostgreSQLParser.KW_XMLPI);
				this.state = 9637;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9638;
				this.match(PostgreSQLParser.KW_NAME);
				this.state = 9639;
				this.collabel();
				this.state = 9642;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.COMMA) {
					{
					this.state = 9640;
					this.match(PostgreSQLParser.COMMA);
					this.state = 9641;
					this.a_expr();
					}
				}

				this.state = 9644;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_XMLROOT:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 9646;
				this.match(PostgreSQLParser.KW_XMLROOT);
				this.state = 9647;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9648;
				this.match(PostgreSQLParser.KW_XML);
				this.state = 9649;
				this.a_expr();
				this.state = 9650;
				this.match(PostgreSQLParser.COMMA);
				this.state = 9651;
				this.xml_root_version();
				this.state = 9653;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.COMMA) {
					{
					this.state = 9652;
					this.opt_xml_root_standalone();
					}
				}

				this.state = 9655;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.KW_XMLSERIALIZE:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 9657;
				this.match(PostgreSQLParser.KW_XMLSERIALIZE);
				this.state = 9658;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9659;
				this.document_or_content();
				this.state = 9660;
				this.a_expr();
				this.state = 9661;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 9662;
				this.simpletypename();
				this.state = 9663;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_root_version(): Xml_root_versionContext {
		let _localctx: Xml_root_versionContext = new Xml_root_versionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1218, PostgreSQLParser.RULE_xml_root_version);
		try {
			this.state = 9672;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 915, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9667;
				this.match(PostgreSQLParser.KW_VERSION);
				this.state = 9668;
				this.a_expr();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9669;
				this.match(PostgreSQLParser.KW_VERSION);
				this.state = 9670;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 9671;
				this.match(PostgreSQLParser.KW_VALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_xml_root_standalone(): Opt_xml_root_standaloneContext {
		let _localctx: Opt_xml_root_standaloneContext = new Opt_xml_root_standaloneContext(this._ctx, this.state);
		this.enterRule(_localctx, 1220, PostgreSQLParser.RULE_opt_xml_root_standalone);
		try {
			this.state = 9684;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 916, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9674;
				this.match(PostgreSQLParser.COMMA);
				this.state = 9675;
				this.match(PostgreSQLParser.KW_STANDALONE);
				this.state = 9676;
				this.match(PostgreSQLParser.KW_YES);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9677;
				this.match(PostgreSQLParser.COMMA);
				this.state = 9678;
				this.match(PostgreSQLParser.KW_STANDALONE);
				this.state = 9679;
				this.match(PostgreSQLParser.KW_NO);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9680;
				this.match(PostgreSQLParser.COMMA);
				this.state = 9681;
				this.match(PostgreSQLParser.KW_STANDALONE);
				this.state = 9682;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 9683;
				this.match(PostgreSQLParser.KW_VALUE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_attributes(): Xml_attributesContext {
		let _localctx: Xml_attributesContext = new Xml_attributesContext(this._ctx, this.state);
		this.enterRule(_localctx, 1222, PostgreSQLParser.RULE_xml_attributes);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9686;
			this.match(PostgreSQLParser.KW_XMLATTRIBUTES);
			this.state = 9687;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 9688;
			this.xml_attribute_list();
			this.state = 9689;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_attribute_list(): Xml_attribute_listContext {
		let _localctx: Xml_attribute_listContext = new Xml_attribute_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1224, PostgreSQLParser.RULE_xml_attribute_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9691;
			this.xml_attribute_el();
			this.state = 9696;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 9692;
				this.match(PostgreSQLParser.COMMA);
				this.state = 9693;
				this.xml_attribute_el();
				}
				}
				this.state = 9698;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_attribute_el(): Xml_attribute_elContext {
		let _localctx: Xml_attribute_elContext = new Xml_attribute_elContext(this._ctx, this.state);
		this.enterRule(_localctx, 1226, PostgreSQLParser.RULE_xml_attribute_el);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9699;
			this.a_expr();
			this.state = 9702;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_AS) {
				{
				this.state = 9700;
				this.match(PostgreSQLParser.KW_AS);
				this.state = 9701;
				this.collabel();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public document_or_content(): Document_or_contentContext {
		let _localctx: Document_or_contentContext = new Document_or_contentContext(this._ctx, this.state);
		this.enterRule(_localctx, 1228, PostgreSQLParser.RULE_document_or_content);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9704;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_CONTENT || _la === PostgreSQLParser.KW_DOCUMENT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_whitespace_option(): Xml_whitespace_optionContext {
		let _localctx: Xml_whitespace_optionContext = new Xml_whitespace_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1230, PostgreSQLParser.RULE_xml_whitespace_option);
		try {
			this.state = 9710;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_PRESERVE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9706;
				this.match(PostgreSQLParser.KW_PRESERVE);
				this.state = 9707;
				this.match(PostgreSQLParser.KW_WHITESPACE);
				}
				break;
			case PostgreSQLParser.KW_STRIP:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9708;
				this.match(PostgreSQLParser.KW_STRIP);
				this.state = 9709;
				this.match(PostgreSQLParser.KW_WHITESPACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xmlexists_argument(): Xmlexists_argumentContext {
		let _localctx: Xmlexists_argumentContext = new Xmlexists_argumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 1232, PostgreSQLParser.RULE_xmlexists_argument);
		try {
			this.state = 9727;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 920, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9712;
				this.match(PostgreSQLParser.KW_PASSING);
				this.state = 9713;
				this.c_expr();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9714;
				this.match(PostgreSQLParser.KW_PASSING);
				this.state = 9715;
				this.c_expr();
				this.state = 9716;
				this.xml_passing_mech();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9718;
				this.match(PostgreSQLParser.KW_PASSING);
				this.state = 9719;
				this.xml_passing_mech();
				this.state = 9720;
				this.c_expr();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9722;
				this.match(PostgreSQLParser.KW_PASSING);
				this.state = 9723;
				this.xml_passing_mech();
				this.state = 9724;
				this.c_expr();
				this.state = 9725;
				this.xml_passing_mech();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xml_passing_mech(): Xml_passing_mechContext {
		let _localctx: Xml_passing_mechContext = new Xml_passing_mechContext(this._ctx, this.state);
		this.enterRule(_localctx, 1234, PostgreSQLParser.RULE_xml_passing_mech);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9729;
			this.match(PostgreSQLParser.KW_BY);
			this.state = 9730;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_REF || _la === PostgreSQLParser.KW_VALUE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public within_group_clause(): Within_group_clauseContext {
		let _localctx: Within_group_clauseContext = new Within_group_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1236, PostgreSQLParser.RULE_within_group_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9732;
			this.match(PostgreSQLParser.KW_WITHIN);
			this.state = 9733;
			this.match(PostgreSQLParser.KW_GROUP);
			this.state = 9734;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 9735;
			this.sort_clause();
			this.state = 9736;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public filter_clause(): Filter_clauseContext {
		let _localctx: Filter_clauseContext = new Filter_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1238, PostgreSQLParser.RULE_filter_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9738;
			this.match(PostgreSQLParser.KW_FILTER);
			this.state = 9739;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 9740;
			this.match(PostgreSQLParser.KW_WHERE);
			this.state = 9741;
			this.a_expr();
			this.state = 9742;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_clause(): Window_clauseContext {
		let _localctx: Window_clauseContext = new Window_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1240, PostgreSQLParser.RULE_window_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9744;
			this.match(PostgreSQLParser.KW_WINDOW);
			this.state = 9745;
			this.window_definition_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_definition_list(): Window_definition_listContext {
		let _localctx: Window_definition_listContext = new Window_definition_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1242, PostgreSQLParser.RULE_window_definition_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9747;
			this.window_definition();
			this.state = 9752;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 921, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9748;
					this.match(PostgreSQLParser.COMMA);
					this.state = 9749;
					this.window_definition();
					}
					}
				}
				this.state = 9754;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 921, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_definition(): Window_definitionContext {
		let _localctx: Window_definitionContext = new Window_definitionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1244, PostgreSQLParser.RULE_window_definition);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9755;
			this.colid();
			this.state = 9756;
			this.match(PostgreSQLParser.KW_AS);
			this.state = 9757;
			this.window_specification();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public over_clause(): Over_clauseContext {
		let _localctx: Over_clauseContext = new Over_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1246, PostgreSQLParser.RULE_over_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9759;
			this.match(PostgreSQLParser.KW_OVER);
			this.state = 9762;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.OPEN_PAREN:
				{
				this.state = 9760;
				this.window_specification();
				}
				break;
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				{
				this.state = 9761;
				this.colid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public window_specification(): Window_specificationContext {
		let _localctx: Window_specificationContext = new Window_specificationContext(this._ctx, this.state);
		this.enterRule(_localctx, 1248, PostgreSQLParser.RULE_window_specification);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9764;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 9766;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 923, this._ctx) ) {
			case 1:
				{
				this.state = 9765;
				this.opt_existing_window_name();
				}
				break;
			}
			this.state = 9769;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_PARTITION) {
				{
				this.state = 9768;
				this.opt_partition_clause();
				}
			}

			this.state = 9772;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_ORDER) {
				{
				this.state = 9771;
				this.opt_sort_clause();
				}
			}

			this.state = 9775;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_RANGE || _la === PostgreSQLParser.KW_ROWS || _la === PostgreSQLParser.KW_GROUPS) {
				{
				this.state = 9774;
				this.opt_frame_clause();
				}
			}

			this.state = 9777;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_existing_window_name(): Opt_existing_window_nameContext {
		let _localctx: Opt_existing_window_nameContext = new Opt_existing_window_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1250, PostgreSQLParser.RULE_opt_existing_window_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9779;
			this.colid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_partition_clause(): Opt_partition_clauseContext {
		let _localctx: Opt_partition_clauseContext = new Opt_partition_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1252, PostgreSQLParser.RULE_opt_partition_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9781;
			this.match(PostgreSQLParser.KW_PARTITION);
			this.state = 9782;
			this.match(PostgreSQLParser.KW_BY);
			this.state = 9783;
			this.expr_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_frame_clause(): Opt_frame_clauseContext {
		let _localctx: Opt_frame_clauseContext = new Opt_frame_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1254, PostgreSQLParser.RULE_opt_frame_clause);
		let _la: number;
		try {
			this.state = 9800;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_RANGE:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9785;
				this.match(PostgreSQLParser.KW_RANGE);
				this.state = 9786;
				this.frame_extent();
				this.state = 9788;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_EXCLUDE) {
					{
					this.state = 9787;
					this.opt_window_exclusion_clause();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_ROWS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9790;
				this.match(PostgreSQLParser.KW_ROWS);
				this.state = 9791;
				this.frame_extent();
				this.state = 9793;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_EXCLUDE) {
					{
					this.state = 9792;
					this.opt_window_exclusion_clause();
					}
				}

				}
				break;
			case PostgreSQLParser.KW_GROUPS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9795;
				this.match(PostgreSQLParser.KW_GROUPS);
				this.state = 9796;
				this.frame_extent();
				this.state = 9798;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_EXCLUDE) {
					{
					this.state = 9797;
					this.opt_window_exclusion_clause();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frame_extent(): Frame_extentContext {
		let _localctx: Frame_extentContext = new Frame_extentContext(this._ctx, this.state);
		this.enterRule(_localctx, 1256, PostgreSQLParser.RULE_frame_extent);
		try {
			this.state = 9808;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 931, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9802;
				this.frame_bound();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9803;
				this.match(PostgreSQLParser.KW_BETWEEN);
				this.state = 9804;
				this.frame_bound();
				this.state = 9805;
				this.match(PostgreSQLParser.KW_AND);
				this.state = 9806;
				this.frame_bound();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public frame_bound(): Frame_boundContext {
		let _localctx: Frame_boundContext = new Frame_boundContext(this._ctx, this.state);
		this.enterRule(_localctx, 1258, PostgreSQLParser.RULE_frame_bound);
		let _la: number;
		try {
			this.state = 9817;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 932, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9810;
				this.match(PostgreSQLParser.KW_UNBOUNDED);
				this.state = 9811;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_FOLLOWING || _la === PostgreSQLParser.KW_PRECEDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9812;
				this.match(PostgreSQLParser.KW_CURRENT);
				this.state = 9813;
				this.match(PostgreSQLParser.KW_ROW);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9814;
				this.a_expr();
				this.state = 9815;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_FOLLOWING || _la === PostgreSQLParser.KW_PRECEDING)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_window_exclusion_clause(): Opt_window_exclusion_clauseContext {
		let _localctx: Opt_window_exclusion_clauseContext = new Opt_window_exclusion_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1260, PostgreSQLParser.RULE_opt_window_exclusion_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9819;
			this.match(PostgreSQLParser.KW_EXCLUDE);
			this.state = 9826;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_CURRENT:
				{
				this.state = 9820;
				this.match(PostgreSQLParser.KW_CURRENT);
				this.state = 9821;
				this.match(PostgreSQLParser.KW_ROW);
				}
				break;
			case PostgreSQLParser.KW_GROUP:
				{
				this.state = 9822;
				this.match(PostgreSQLParser.KW_GROUP);
				}
				break;
			case PostgreSQLParser.KW_TIES:
				{
				this.state = 9823;
				this.match(PostgreSQLParser.KW_TIES);
				}
				break;
			case PostgreSQLParser.KW_NO:
				{
				this.state = 9824;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 9825;
				this.match(PostgreSQLParser.KW_OTHERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public row(): RowContext {
		let _localctx: RowContext = new RowContext(this._ctx, this.state);
		this.enterRule(_localctx, 1262, PostgreSQLParser.RULE_row);
		let _la: number;
		try {
			this.state = 9840;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_ROW:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9828;
				this.match(PostgreSQLParser.KW_ROW);
				this.state = 9829;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9831;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_CASE - 33)) | (1 << (PostgreSQLParser.KW_CAST - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_CATALOG - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_DATE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_ROLE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIME - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIMESTAMP - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_USER - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FALSE - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (PostgreSQLParser.KW_LOCALTIME - 75)) | (1 << (PostgreSQLParser.KW_LOCALTIMESTAMP - 75)) | (1 << (PostgreSQLParser.KW_NOT - 75)) | (1 << (PostgreSQLParser.KW_NULL - 75)) | (1 << (PostgreSQLParser.KW_SESSION_USER - 75)) | (1 << (PostgreSQLParser.KW_TABLE - 75)) | (1 << (PostgreSQLParser.KW_TRUE - 75)) | (1 << (PostgreSQLParser.KW_UNIQUE - 75)) | (1 << (PostgreSQLParser.KW_USER - 75)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 75)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (PostgreSQLParser.KW_BINARY - 107)) | (1 << (PostgreSQLParser.KW_COLLATION - 107)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 107)) | (1 << (PostgreSQLParser.KW_CROSS - 107)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 107)) | (1 << (PostgreSQLParser.KW_FREEZE - 107)) | (1 << (PostgreSQLParser.KW_FULL - 107)) | (1 << (PostgreSQLParser.KW_ILIKE - 107)) | (1 << (PostgreSQLParser.KW_INNER - 107)) | (1 << (PostgreSQLParser.KW_IS - 107)) | (1 << (PostgreSQLParser.KW_ISNULL - 107)) | (1 << (PostgreSQLParser.KW_JOIN - 107)) | (1 << (PostgreSQLParser.KW_LEFT - 107)) | (1 << (PostgreSQLParser.KW_LIKE - 107)) | (1 << (PostgreSQLParser.KW_NATURAL - 107)) | (1 << (PostgreSQLParser.KW_NOTNULL - 107)) | (1 << (PostgreSQLParser.KW_OUTER - 107)) | (1 << (PostgreSQLParser.KW_OVER - 107)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 107)) | (1 << (PostgreSQLParser.KW_RIGHT - 107)) | (1 << (PostgreSQLParser.KW_SIMILAR - 107)) | (1 << (PostgreSQLParser.KW_VERBOSE - 107)) | (1 << (PostgreSQLParser.KW_ABORT - 107)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 107)) | (1 << (PostgreSQLParser.KW_ACCESS - 107)) | (1 << (PostgreSQLParser.KW_ACTION - 107)) | (1 << (PostgreSQLParser.KW_ADD - 107)) | (1 << (PostgreSQLParser.KW_ADMIN - 107)) | (1 << (PostgreSQLParser.KW_AFTER - 107)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 107)) | (1 << (PostgreSQLParser.KW_ALSO - 107)) | (1 << (PostgreSQLParser.KW_ALTER - 107)))) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (PostgreSQLParser.KW_ALWAYS - 139)) | (1 << (PostgreSQLParser.KW_ASSERTION - 139)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 139)) | (1 << (PostgreSQLParser.KW_AT - 139)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 139)) | (1 << (PostgreSQLParser.KW_BACKWARD - 139)) | (1 << (PostgreSQLParser.KW_BEFORE - 139)) | (1 << (PostgreSQLParser.KW_BEGIN - 139)) | (1 << (PostgreSQLParser.KW_BY - 139)) | (1 << (PostgreSQLParser.KW_CACHE - 139)) | (1 << (PostgreSQLParser.KW_CALLED - 139)) | (1 << (PostgreSQLParser.KW_CASCADE - 139)) | (1 << (PostgreSQLParser.KW_CASCADED - 139)) | (1 << (PostgreSQLParser.KW_CATALOG - 139)) | (1 << (PostgreSQLParser.KW_CHAIN - 139)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 139)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 139)) | (1 << (PostgreSQLParser.KW_CLASS - 139)) | (1 << (PostgreSQLParser.KW_CLOSE - 139)) | (1 << (PostgreSQLParser.KW_CLUSTER - 139)) | (1 << (PostgreSQLParser.KW_COMMENT - 139)) | (1 << (PostgreSQLParser.KW_COMMENTS - 139)) | (1 << (PostgreSQLParser.KW_COMMIT - 139)) | (1 << (PostgreSQLParser.KW_COMMITTED - 139)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 139)) | (1 << (PostgreSQLParser.KW_CONNECTION - 139)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 139)) | (1 << (PostgreSQLParser.KW_CONTENT - 139)) | (1 << (PostgreSQLParser.KW_CONTINUE - 139)) | (1 << (PostgreSQLParser.KW_CONVERSION - 139)) | (1 << (PostgreSQLParser.KW_COPY - 139)) | (1 << (PostgreSQLParser.KW_COST - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (PostgreSQLParser.KW_CSV - 171)) | (1 << (PostgreSQLParser.KW_CURSOR - 171)) | (1 << (PostgreSQLParser.KW_CYCLE - 171)) | (1 << (PostgreSQLParser.KW_DATA - 171)) | (1 << (PostgreSQLParser.KW_DATABASE - 171)) | (1 << (PostgreSQLParser.KW_DAY - 171)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 171)) | (1 << (PostgreSQLParser.KW_DECLARE - 171)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 171)) | (1 << (PostgreSQLParser.KW_DEFERRED - 171)) | (1 << (PostgreSQLParser.KW_DEFINER - 171)) | (1 << (PostgreSQLParser.KW_DELETE - 171)) | (1 << (PostgreSQLParser.KW_DELIMITER - 171)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 171)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 171)) | (1 << (PostgreSQLParser.KW_DISABLE - 171)) | (1 << (PostgreSQLParser.KW_DISCARD - 171)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 171)) | (1 << (PostgreSQLParser.KW_DOMAIN - 171)) | (1 << (PostgreSQLParser.KW_DOUBLE - 171)) | (1 << (PostgreSQLParser.KW_DROP - 171)) | (1 << (PostgreSQLParser.KW_EACH - 171)) | (1 << (PostgreSQLParser.KW_ENABLE - 171)) | (1 << (PostgreSQLParser.KW_ENCODING - 171)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 171)) | (1 << (PostgreSQLParser.KW_ENUM - 171)) | (1 << (PostgreSQLParser.KW_ESCAPE - 171)) | (1 << (PostgreSQLParser.KW_EVENT - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 171)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 171)) | (1 << (PostgreSQLParser.KW_EXECUTE - 171)))) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & ((1 << (PostgreSQLParser.KW_EXPLAIN - 203)) | (1 << (PostgreSQLParser.KW_EXTENSION - 203)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 203)) | (1 << (PostgreSQLParser.KW_FAMILY - 203)) | (1 << (PostgreSQLParser.KW_FIRST - 203)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 203)) | (1 << (PostgreSQLParser.KW_FORCE - 203)) | (1 << (PostgreSQLParser.KW_FORWARD - 203)) | (1 << (PostgreSQLParser.KW_FUNCTION - 203)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 203)) | (1 << (PostgreSQLParser.KW_GLOBAL - 203)) | (1 << (PostgreSQLParser.KW_GRANTED - 203)) | (1 << (PostgreSQLParser.KW_HANDLER - 203)) | (1 << (PostgreSQLParser.KW_HEADER - 203)) | (1 << (PostgreSQLParser.KW_HOLD - 203)) | (1 << (PostgreSQLParser.KW_HOUR - 203)) | (1 << (PostgreSQLParser.KW_IDENTITY - 203)) | (1 << (PostgreSQLParser.KW_IF - 203)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 203)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 203)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 203)) | (1 << (PostgreSQLParser.KW_INCLUDING - 203)) | (1 << (PostgreSQLParser.KW_INCREMENT - 203)) | (1 << (PostgreSQLParser.KW_INDEX - 203)) | (1 << (PostgreSQLParser.KW_INDEXES - 203)) | (1 << (PostgreSQLParser.KW_INHERIT - 203)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (PostgreSQLParser.KW_INHERITS - 238)) | (1 << (PostgreSQLParser.KW_INLINE - 238)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 238)) | (1 << (PostgreSQLParser.KW_INSERT - 238)) | (1 << (PostgreSQLParser.KW_INSTEAD - 238)) | (1 << (PostgreSQLParser.KW_INVOKER - 238)) | (1 << (PostgreSQLParser.KW_ISOLATION - 238)) | (1 << (PostgreSQLParser.KW_KEY - 238)) | (1 << (PostgreSQLParser.KW_LABEL - 238)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 238)) | (1 << (PostgreSQLParser.KW_LARGE - 238)) | (1 << (PostgreSQLParser.KW_LAST - 238)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 238)) | (1 << (PostgreSQLParser.KW_LEVEL - 238)) | (1 << (PostgreSQLParser.KW_LISTEN - 238)) | (1 << (PostgreSQLParser.KW_LOAD - 238)) | (1 << (PostgreSQLParser.KW_LOCAL - 238)) | (1 << (PostgreSQLParser.KW_LOCATION - 238)) | (1 << (PostgreSQLParser.KW_LOCK - 238)) | (1 << (PostgreSQLParser.KW_MAPPING - 238)) | (1 << (PostgreSQLParser.KW_MATCH - 238)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 238)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 238)) | (1 << (PostgreSQLParser.KW_MINUTE - 238)) | (1 << (PostgreSQLParser.KW_MINVALUE - 238)) | (1 << (PostgreSQLParser.KW_MODE - 238)) | (1 << (PostgreSQLParser.KW_MONTH - 238)) | (1 << (PostgreSQLParser.KW_MOVE - 238)) | (1 << (PostgreSQLParser.KW_NAME - 238)) | (1 << (PostgreSQLParser.KW_NAMES - 238)) | (1 << (PostgreSQLParser.KW_NEXT - 238)) | (1 << (PostgreSQLParser.KW_NO - 238)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (PostgreSQLParser.KW_NOTHING - 270)) | (1 << (PostgreSQLParser.KW_NOTIFY - 270)) | (1 << (PostgreSQLParser.KW_NOWAIT - 270)) | (1 << (PostgreSQLParser.KW_NULLS - 270)) | (1 << (PostgreSQLParser.KW_OBJECT - 270)) | (1 << (PostgreSQLParser.KW_OF - 270)) | (1 << (PostgreSQLParser.KW_OFF - 270)) | (1 << (PostgreSQLParser.KW_OIDS - 270)) | (1 << (PostgreSQLParser.KW_OPERATOR - 270)) | (1 << (PostgreSQLParser.KW_OPTION - 270)) | (1 << (PostgreSQLParser.KW_OPTIONS - 270)) | (1 << (PostgreSQLParser.KW_OWNED - 270)) | (1 << (PostgreSQLParser.KW_OWNER - 270)) | (1 << (PostgreSQLParser.KW_PARSER - 270)) | (1 << (PostgreSQLParser.KW_PARTIAL - 270)) | (1 << (PostgreSQLParser.KW_PARTITION - 270)) | (1 << (PostgreSQLParser.KW_PASSING - 270)) | (1 << (PostgreSQLParser.KW_PASSWORD - 270)) | (1 << (PostgreSQLParser.KW_PLANS - 270)) | (1 << (PostgreSQLParser.KW_PRECEDING - 270)) | (1 << (PostgreSQLParser.KW_PREPARE - 270)) | (1 << (PostgreSQLParser.KW_PREPARED - 270)) | (1 << (PostgreSQLParser.KW_PRESERVE - 270)) | (1 << (PostgreSQLParser.KW_PRIOR - 270)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 270)) | (1 << (PostgreSQLParser.KW_PROGRAM - 270)) | (1 << (PostgreSQLParser.KW_QUOTE - 270)) | (1 << (PostgreSQLParser.KW_RANGE - 270)) | (1 << (PostgreSQLParser.KW_READ - 270)) | (1 << (PostgreSQLParser.KW_REASSIGN - 270)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (PostgreSQLParser.KW_RECHECK - 302)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 302)) | (1 << (PostgreSQLParser.KW_REF - 302)) | (1 << (PostgreSQLParser.KW_REFRESH - 302)) | (1 << (PostgreSQLParser.KW_REINDEX - 302)) | (1 << (PostgreSQLParser.KW_RELATIVE - 302)) | (1 << (PostgreSQLParser.KW_RELEASE - 302)) | (1 << (PostgreSQLParser.KW_RENAME - 302)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 302)) | (1 << (PostgreSQLParser.KW_REPLACE - 302)) | (1 << (PostgreSQLParser.KW_REPLICA - 302)) | (1 << (PostgreSQLParser.KW_RESET - 302)) | (1 << (PostgreSQLParser.KW_RESTART - 302)) | (1 << (PostgreSQLParser.KW_RESTRICT - 302)) | (1 << (PostgreSQLParser.KW_RETURNS - 302)) | (1 << (PostgreSQLParser.KW_REVOKE - 302)) | (1 << (PostgreSQLParser.KW_ROLE - 302)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 302)) | (1 << (PostgreSQLParser.KW_ROWS - 302)) | (1 << (PostgreSQLParser.KW_RULE - 302)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 302)) | (1 << (PostgreSQLParser.KW_SCHEMA - 302)) | (1 << (PostgreSQLParser.KW_SCROLL - 302)) | (1 << (PostgreSQLParser.KW_SEARCH - 302)) | (1 << (PostgreSQLParser.KW_SECOND - 302)) | (1 << (PostgreSQLParser.KW_SECURITY - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 302)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 302)) | (1 << (PostgreSQLParser.KW_SERVER - 302)) | (1 << (PostgreSQLParser.KW_SESSION - 302)) | (1 << (PostgreSQLParser.KW_SET - 302)))) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & ((1 << (PostgreSQLParser.KW_SHARE - 334)) | (1 << (PostgreSQLParser.KW_SHOW - 334)) | (1 << (PostgreSQLParser.KW_SIMPLE - 334)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 334)) | (1 << (PostgreSQLParser.KW_STABLE - 334)) | (1 << (PostgreSQLParser.KW_STANDALONE - 334)) | (1 << (PostgreSQLParser.KW_START - 334)) | (1 << (PostgreSQLParser.KW_STATEMENT - 334)) | (1 << (PostgreSQLParser.KW_STATISTICS - 334)) | (1 << (PostgreSQLParser.KW_STDIN - 334)) | (1 << (PostgreSQLParser.KW_STDOUT - 334)) | (1 << (PostgreSQLParser.KW_STORAGE - 334)) | (1 << (PostgreSQLParser.KW_STRICT - 334)) | (1 << (PostgreSQLParser.KW_STRIP - 334)) | (1 << (PostgreSQLParser.KW_SYSID - 334)) | (1 << (PostgreSQLParser.KW_SYSTEM - 334)) | (1 << (PostgreSQLParser.KW_TABLES - 334)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 334)) | (1 << (PostgreSQLParser.KW_TEMP - 334)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 334)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 334)) | (1 << (PostgreSQLParser.KW_TEXT - 334)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 334)) | (1 << (PostgreSQLParser.KW_TRIGGER - 334)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 334)) | (1 << (PostgreSQLParser.KW_TRUSTED - 334)) | (1 << (PostgreSQLParser.KW_TYPE - 334)) | (1 << (PostgreSQLParser.KW_TYPES - 334)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 334)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 334)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 334)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 334)))) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & ((1 << (PostgreSQLParser.KW_UNLISTEN - 366)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 366)) | (1 << (PostgreSQLParser.KW_UNTIL - 366)) | (1 << (PostgreSQLParser.KW_UPDATE - 366)) | (1 << (PostgreSQLParser.KW_VACUUM - 366)) | (1 << (PostgreSQLParser.KW_VALID - 366)) | (1 << (PostgreSQLParser.KW_VALIDATE - 366)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 366)) | (1 << (PostgreSQLParser.KW_VARYING - 366)) | (1 << (PostgreSQLParser.KW_VERSION - 366)) | (1 << (PostgreSQLParser.KW_VIEW - 366)) | (1 << (PostgreSQLParser.KW_VOLATILE - 366)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 366)) | (1 << (PostgreSQLParser.KW_WITHOUT - 366)) | (1 << (PostgreSQLParser.KW_WORK - 366)) | (1 << (PostgreSQLParser.KW_WRAPPER - 366)) | (1 << (PostgreSQLParser.KW_WRITE - 366)) | (1 << (PostgreSQLParser.KW_XML - 366)) | (1 << (PostgreSQLParser.KW_YEAR - 366)) | (1 << (PostgreSQLParser.KW_YES - 366)) | (1 << (PostgreSQLParser.KW_ZONE - 366)) | (1 << (PostgreSQLParser.KW_BETWEEN - 366)) | (1 << (PostgreSQLParser.KW_BIGINT - 366)) | (1 << (PostgreSQLParser.KW_BIT - 366)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 366)) | (1 << (PostgreSQLParser.KW_CHAR - 366)) | (1 << (PostgreSQLParser.KW_CHARACTER - 366)) | (1 << (PostgreSQLParser.KW_COALESCE - 366)) | (1 << (PostgreSQLParser.KW_DEC - 366)) | (1 << (PostgreSQLParser.KW_DECIMAL - 366)) | (1 << (PostgreSQLParser.KW_EXISTS - 366)) | (1 << (PostgreSQLParser.KW_EXTRACT - 366)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PostgreSQLParser.KW_FLOAT - 398)) | (1 << (PostgreSQLParser.KW_GREATEST - 398)) | (1 << (PostgreSQLParser.KW_INOUT - 398)) | (1 << (PostgreSQLParser.KW_INT - 398)) | (1 << (PostgreSQLParser.KW_INTEGER - 398)) | (1 << (PostgreSQLParser.KW_INTERVAL - 398)) | (1 << (PostgreSQLParser.KW_LEAST - 398)) | (1 << (PostgreSQLParser.KW_NATIONAL - 398)) | (1 << (PostgreSQLParser.KW_NCHAR - 398)) | (1 << (PostgreSQLParser.KW_NONE - 398)) | (1 << (PostgreSQLParser.KW_NULLIF - 398)) | (1 << (PostgreSQLParser.KW_NUMERIC - 398)) | (1 << (PostgreSQLParser.KW_OVERLAY - 398)) | (1 << (PostgreSQLParser.KW_POSITION - 398)) | (1 << (PostgreSQLParser.KW_PRECISION - 398)) | (1 << (PostgreSQLParser.KW_REAL - 398)) | (1 << (PostgreSQLParser.KW_ROW - 398)) | (1 << (PostgreSQLParser.KW_SETOF - 398)) | (1 << (PostgreSQLParser.KW_SMALLINT - 398)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 398)) | (1 << (PostgreSQLParser.KW_TIME - 398)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 398)) | (1 << (PostgreSQLParser.KW_TREAT - 398)) | (1 << (PostgreSQLParser.KW_TRIM - 398)) | (1 << (PostgreSQLParser.KW_VALUES - 398)) | (1 << (PostgreSQLParser.KW_VARCHAR - 398)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 398)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 398)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 398)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 398)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 398)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 398)))) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & ((1 << (PostgreSQLParser.KW_XMLPI - 430)) | (1 << (PostgreSQLParser.KW_XMLROOT - 430)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 430)) | (1 << (PostgreSQLParser.KW_CALL - 430)) | (1 << (PostgreSQLParser.KW_CURRENT - 430)) | (1 << (PostgreSQLParser.KW_ATTACH - 430)) | (1 << (PostgreSQLParser.KW_DETACH - 430)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 430)) | (1 << (PostgreSQLParser.KW_GENERATED - 430)) | (1 << (PostgreSQLParser.KW_LOGGED - 430)) | (1 << (PostgreSQLParser.KW_STORED - 430)) | (1 << (PostgreSQLParser.KW_INCLUDE - 430)) | (1 << (PostgreSQLParser.KW_ROUTINE - 430)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 430)) | (1 << (PostgreSQLParser.KW_IMPORT - 430)) | (1 << (PostgreSQLParser.KW_POLICY - 430)) | (1 << (PostgreSQLParser.KW_METHOD - 430)) | (1 << (PostgreSQLParser.KW_REFERENCING - 430)) | (1 << (PostgreSQLParser.KW_NEW - 430)) | (1 << (PostgreSQLParser.KW_OLD - 430)) | (1 << (PostgreSQLParser.KW_VALUE - 430)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 430)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 430)) | (1 << (PostgreSQLParser.KW_OUT - 430)) | (1 << (PostgreSQLParser.KW_ROUTINES - 430)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 430)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 430)) | (1 << (PostgreSQLParser.KW_INPUT - 430)) | (1 << (PostgreSQLParser.KW_SUPPORT - 430)) | (1 << (PostgreSQLParser.KW_PARALLEL - 430)) | (1 << (PostgreSQLParser.KW_SQL - 430)))) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & ((1 << (PostgreSQLParser.KW_DEPENDS - 462)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 462)) | (1 << (PostgreSQLParser.KW_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_SKIP - 462)) | (1 << (PostgreSQLParser.KW_LOCKED - 462)) | (1 << (PostgreSQLParser.KW_TIES - 462)) | (1 << (PostgreSQLParser.KW_ROLLUP - 462)) | (1 << (PostgreSQLParser.KW_CUBE - 462)) | (1 << (PostgreSQLParser.KW_GROUPING - 462)) | (1 << (PostgreSQLParser.KW_SETS - 462)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 462)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 462)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 462)) | (1 << (PostgreSQLParser.KW_COLUMNS - 462)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 462)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 462)) | (1 << (PostgreSQLParser.KW_WITHIN - 462)) | (1 << (PostgreSQLParser.KW_FILTER - 462)) | (1 << (PostgreSQLParser.KW_GROUPS - 462)) | (1 << (PostgreSQLParser.KW_OTHERS - 462)) | (1 << (PostgreSQLParser.KW_NFC - 462)) | (1 << (PostgreSQLParser.KW_NFD - 462)) | (1 << (PostgreSQLParser.KW_NFKC - 462)) | (1 << (PostgreSQLParser.KW_NFKD - 462)) | (1 << (PostgreSQLParser.KW_UESCAPE - 462)) | (1 << (PostgreSQLParser.KW_VIEWS - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 462)) | (1 << (PostgreSQLParser.KW_DUMP - 462)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 462)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_ERROR - 462)))) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (PostgreSQLParser.KW_USE_VARIABLE - 494)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 494)) | (1 << (PostgreSQLParser.KW_ALIAS - 494)) | (1 << (PostgreSQLParser.KW_CONSTANT - 494)) | (1 << (PostgreSQLParser.KW_PERFORM - 494)) | (1 << (PostgreSQLParser.KW_GET - 494)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 494)) | (1 << (PostgreSQLParser.KW_STACKED - 494)) | (1 << (PostgreSQLParser.KW_ELSIF - 494)) | (1 << (PostgreSQLParser.KW_REVERSE - 494)) | (1 << (PostgreSQLParser.KW_SLICE - 494)) | (1 << (PostgreSQLParser.KW_EXIT - 494)) | (1 << (PostgreSQLParser.KW_RETURN - 494)) | (1 << (PostgreSQLParser.KW_QUERY - 494)) | (1 << (PostgreSQLParser.KW_RAISE - 494)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 494)) | (1 << (PostgreSQLParser.KW_DEBUG - 494)) | (1 << (PostgreSQLParser.KW_LOG - 494)) | (1 << (PostgreSQLParser.KW_INFO - 494)) | (1 << (PostgreSQLParser.KW_NOTICE - 494)) | (1 << (PostgreSQLParser.KW_WARNING - 494)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 494)) | (1 << (PostgreSQLParser.KW_ASSERT - 494)) | (1 << (PostgreSQLParser.KW_OPEN - 494)) | (1 << (PostgreSQLParser.Identifier - 494)))) !== 0) || ((((_la - 526)) & ~0x1F) === 0 && ((1 << (_la - 526)) & ((1 << (PostgreSQLParser.QuotedIdentifier - 526)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 526)) | (1 << (PostgreSQLParser.StringConstant - 526)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 526)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 526)) | (1 << (PostgreSQLParser.BinaryStringConstant - 526)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 526)) | (1 << (PostgreSQLParser.Integral - 526)) | (1 << (PostgreSQLParser.Numeric - 526)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 526)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 526)))) !== 0) || _la === PostgreSQLParser.EscapeStringConstant) {
					{
					this.state = 9830;
					this.expr_list();
					}
				}

				this.state = 9833;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			case PostgreSQLParser.OPEN_PAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9834;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9835;
				this.expr_list();
				this.state = 9836;
				this.match(PostgreSQLParser.COMMA);
				this.state = 9837;
				this.a_expr();
				this.state = 9838;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public explicit_row(): Explicit_rowContext {
		let _localctx: Explicit_rowContext = new Explicit_rowContext(this._ctx, this.state);
		this.enterRule(_localctx, 1264, PostgreSQLParser.RULE_explicit_row);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9842;
			this.match(PostgreSQLParser.KW_ROW);
			this.state = 9843;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 9845;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_CASE - 33)) | (1 << (PostgreSQLParser.KW_CAST - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_CATALOG - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_DATE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_ROLE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIME - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIMESTAMP - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_USER - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FALSE - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (PostgreSQLParser.KW_LOCALTIME - 75)) | (1 << (PostgreSQLParser.KW_LOCALTIMESTAMP - 75)) | (1 << (PostgreSQLParser.KW_NOT - 75)) | (1 << (PostgreSQLParser.KW_NULL - 75)) | (1 << (PostgreSQLParser.KW_SESSION_USER - 75)) | (1 << (PostgreSQLParser.KW_TABLE - 75)) | (1 << (PostgreSQLParser.KW_TRUE - 75)) | (1 << (PostgreSQLParser.KW_UNIQUE - 75)) | (1 << (PostgreSQLParser.KW_USER - 75)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 75)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (PostgreSQLParser.KW_BINARY - 107)) | (1 << (PostgreSQLParser.KW_COLLATION - 107)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 107)) | (1 << (PostgreSQLParser.KW_CROSS - 107)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 107)) | (1 << (PostgreSQLParser.KW_FREEZE - 107)) | (1 << (PostgreSQLParser.KW_FULL - 107)) | (1 << (PostgreSQLParser.KW_ILIKE - 107)) | (1 << (PostgreSQLParser.KW_INNER - 107)) | (1 << (PostgreSQLParser.KW_IS - 107)) | (1 << (PostgreSQLParser.KW_ISNULL - 107)) | (1 << (PostgreSQLParser.KW_JOIN - 107)) | (1 << (PostgreSQLParser.KW_LEFT - 107)) | (1 << (PostgreSQLParser.KW_LIKE - 107)) | (1 << (PostgreSQLParser.KW_NATURAL - 107)) | (1 << (PostgreSQLParser.KW_NOTNULL - 107)) | (1 << (PostgreSQLParser.KW_OUTER - 107)) | (1 << (PostgreSQLParser.KW_OVER - 107)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 107)) | (1 << (PostgreSQLParser.KW_RIGHT - 107)) | (1 << (PostgreSQLParser.KW_SIMILAR - 107)) | (1 << (PostgreSQLParser.KW_VERBOSE - 107)) | (1 << (PostgreSQLParser.KW_ABORT - 107)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 107)) | (1 << (PostgreSQLParser.KW_ACCESS - 107)) | (1 << (PostgreSQLParser.KW_ACTION - 107)) | (1 << (PostgreSQLParser.KW_ADD - 107)) | (1 << (PostgreSQLParser.KW_ADMIN - 107)) | (1 << (PostgreSQLParser.KW_AFTER - 107)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 107)) | (1 << (PostgreSQLParser.KW_ALSO - 107)) | (1 << (PostgreSQLParser.KW_ALTER - 107)))) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (PostgreSQLParser.KW_ALWAYS - 139)) | (1 << (PostgreSQLParser.KW_ASSERTION - 139)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 139)) | (1 << (PostgreSQLParser.KW_AT - 139)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 139)) | (1 << (PostgreSQLParser.KW_BACKWARD - 139)) | (1 << (PostgreSQLParser.KW_BEFORE - 139)) | (1 << (PostgreSQLParser.KW_BEGIN - 139)) | (1 << (PostgreSQLParser.KW_BY - 139)) | (1 << (PostgreSQLParser.KW_CACHE - 139)) | (1 << (PostgreSQLParser.KW_CALLED - 139)) | (1 << (PostgreSQLParser.KW_CASCADE - 139)) | (1 << (PostgreSQLParser.KW_CASCADED - 139)) | (1 << (PostgreSQLParser.KW_CATALOG - 139)) | (1 << (PostgreSQLParser.KW_CHAIN - 139)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 139)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 139)) | (1 << (PostgreSQLParser.KW_CLASS - 139)) | (1 << (PostgreSQLParser.KW_CLOSE - 139)) | (1 << (PostgreSQLParser.KW_CLUSTER - 139)) | (1 << (PostgreSQLParser.KW_COMMENT - 139)) | (1 << (PostgreSQLParser.KW_COMMENTS - 139)) | (1 << (PostgreSQLParser.KW_COMMIT - 139)) | (1 << (PostgreSQLParser.KW_COMMITTED - 139)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 139)) | (1 << (PostgreSQLParser.KW_CONNECTION - 139)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 139)) | (1 << (PostgreSQLParser.KW_CONTENT - 139)) | (1 << (PostgreSQLParser.KW_CONTINUE - 139)) | (1 << (PostgreSQLParser.KW_CONVERSION - 139)) | (1 << (PostgreSQLParser.KW_COPY - 139)) | (1 << (PostgreSQLParser.KW_COST - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (PostgreSQLParser.KW_CSV - 171)) | (1 << (PostgreSQLParser.KW_CURSOR - 171)) | (1 << (PostgreSQLParser.KW_CYCLE - 171)) | (1 << (PostgreSQLParser.KW_DATA - 171)) | (1 << (PostgreSQLParser.KW_DATABASE - 171)) | (1 << (PostgreSQLParser.KW_DAY - 171)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 171)) | (1 << (PostgreSQLParser.KW_DECLARE - 171)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 171)) | (1 << (PostgreSQLParser.KW_DEFERRED - 171)) | (1 << (PostgreSQLParser.KW_DEFINER - 171)) | (1 << (PostgreSQLParser.KW_DELETE - 171)) | (1 << (PostgreSQLParser.KW_DELIMITER - 171)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 171)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 171)) | (1 << (PostgreSQLParser.KW_DISABLE - 171)) | (1 << (PostgreSQLParser.KW_DISCARD - 171)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 171)) | (1 << (PostgreSQLParser.KW_DOMAIN - 171)) | (1 << (PostgreSQLParser.KW_DOUBLE - 171)) | (1 << (PostgreSQLParser.KW_DROP - 171)) | (1 << (PostgreSQLParser.KW_EACH - 171)) | (1 << (PostgreSQLParser.KW_ENABLE - 171)) | (1 << (PostgreSQLParser.KW_ENCODING - 171)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 171)) | (1 << (PostgreSQLParser.KW_ENUM - 171)) | (1 << (PostgreSQLParser.KW_ESCAPE - 171)) | (1 << (PostgreSQLParser.KW_EVENT - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 171)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 171)) | (1 << (PostgreSQLParser.KW_EXECUTE - 171)))) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & ((1 << (PostgreSQLParser.KW_EXPLAIN - 203)) | (1 << (PostgreSQLParser.KW_EXTENSION - 203)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 203)) | (1 << (PostgreSQLParser.KW_FAMILY - 203)) | (1 << (PostgreSQLParser.KW_FIRST - 203)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 203)) | (1 << (PostgreSQLParser.KW_FORCE - 203)) | (1 << (PostgreSQLParser.KW_FORWARD - 203)) | (1 << (PostgreSQLParser.KW_FUNCTION - 203)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 203)) | (1 << (PostgreSQLParser.KW_GLOBAL - 203)) | (1 << (PostgreSQLParser.KW_GRANTED - 203)) | (1 << (PostgreSQLParser.KW_HANDLER - 203)) | (1 << (PostgreSQLParser.KW_HEADER - 203)) | (1 << (PostgreSQLParser.KW_HOLD - 203)) | (1 << (PostgreSQLParser.KW_HOUR - 203)) | (1 << (PostgreSQLParser.KW_IDENTITY - 203)) | (1 << (PostgreSQLParser.KW_IF - 203)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 203)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 203)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 203)) | (1 << (PostgreSQLParser.KW_INCLUDING - 203)) | (1 << (PostgreSQLParser.KW_INCREMENT - 203)) | (1 << (PostgreSQLParser.KW_INDEX - 203)) | (1 << (PostgreSQLParser.KW_INDEXES - 203)) | (1 << (PostgreSQLParser.KW_INHERIT - 203)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (PostgreSQLParser.KW_INHERITS - 238)) | (1 << (PostgreSQLParser.KW_INLINE - 238)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 238)) | (1 << (PostgreSQLParser.KW_INSERT - 238)) | (1 << (PostgreSQLParser.KW_INSTEAD - 238)) | (1 << (PostgreSQLParser.KW_INVOKER - 238)) | (1 << (PostgreSQLParser.KW_ISOLATION - 238)) | (1 << (PostgreSQLParser.KW_KEY - 238)) | (1 << (PostgreSQLParser.KW_LABEL - 238)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 238)) | (1 << (PostgreSQLParser.KW_LARGE - 238)) | (1 << (PostgreSQLParser.KW_LAST - 238)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 238)) | (1 << (PostgreSQLParser.KW_LEVEL - 238)) | (1 << (PostgreSQLParser.KW_LISTEN - 238)) | (1 << (PostgreSQLParser.KW_LOAD - 238)) | (1 << (PostgreSQLParser.KW_LOCAL - 238)) | (1 << (PostgreSQLParser.KW_LOCATION - 238)) | (1 << (PostgreSQLParser.KW_LOCK - 238)) | (1 << (PostgreSQLParser.KW_MAPPING - 238)) | (1 << (PostgreSQLParser.KW_MATCH - 238)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 238)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 238)) | (1 << (PostgreSQLParser.KW_MINUTE - 238)) | (1 << (PostgreSQLParser.KW_MINVALUE - 238)) | (1 << (PostgreSQLParser.KW_MODE - 238)) | (1 << (PostgreSQLParser.KW_MONTH - 238)) | (1 << (PostgreSQLParser.KW_MOVE - 238)) | (1 << (PostgreSQLParser.KW_NAME - 238)) | (1 << (PostgreSQLParser.KW_NAMES - 238)) | (1 << (PostgreSQLParser.KW_NEXT - 238)) | (1 << (PostgreSQLParser.KW_NO - 238)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (PostgreSQLParser.KW_NOTHING - 270)) | (1 << (PostgreSQLParser.KW_NOTIFY - 270)) | (1 << (PostgreSQLParser.KW_NOWAIT - 270)) | (1 << (PostgreSQLParser.KW_NULLS - 270)) | (1 << (PostgreSQLParser.KW_OBJECT - 270)) | (1 << (PostgreSQLParser.KW_OF - 270)) | (1 << (PostgreSQLParser.KW_OFF - 270)) | (1 << (PostgreSQLParser.KW_OIDS - 270)) | (1 << (PostgreSQLParser.KW_OPERATOR - 270)) | (1 << (PostgreSQLParser.KW_OPTION - 270)) | (1 << (PostgreSQLParser.KW_OPTIONS - 270)) | (1 << (PostgreSQLParser.KW_OWNED - 270)) | (1 << (PostgreSQLParser.KW_OWNER - 270)) | (1 << (PostgreSQLParser.KW_PARSER - 270)) | (1 << (PostgreSQLParser.KW_PARTIAL - 270)) | (1 << (PostgreSQLParser.KW_PARTITION - 270)) | (1 << (PostgreSQLParser.KW_PASSING - 270)) | (1 << (PostgreSQLParser.KW_PASSWORD - 270)) | (1 << (PostgreSQLParser.KW_PLANS - 270)) | (1 << (PostgreSQLParser.KW_PRECEDING - 270)) | (1 << (PostgreSQLParser.KW_PREPARE - 270)) | (1 << (PostgreSQLParser.KW_PREPARED - 270)) | (1 << (PostgreSQLParser.KW_PRESERVE - 270)) | (1 << (PostgreSQLParser.KW_PRIOR - 270)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 270)) | (1 << (PostgreSQLParser.KW_PROGRAM - 270)) | (1 << (PostgreSQLParser.KW_QUOTE - 270)) | (1 << (PostgreSQLParser.KW_RANGE - 270)) | (1 << (PostgreSQLParser.KW_READ - 270)) | (1 << (PostgreSQLParser.KW_REASSIGN - 270)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (PostgreSQLParser.KW_RECHECK - 302)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 302)) | (1 << (PostgreSQLParser.KW_REF - 302)) | (1 << (PostgreSQLParser.KW_REFRESH - 302)) | (1 << (PostgreSQLParser.KW_REINDEX - 302)) | (1 << (PostgreSQLParser.KW_RELATIVE - 302)) | (1 << (PostgreSQLParser.KW_RELEASE - 302)) | (1 << (PostgreSQLParser.KW_RENAME - 302)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 302)) | (1 << (PostgreSQLParser.KW_REPLACE - 302)) | (1 << (PostgreSQLParser.KW_REPLICA - 302)) | (1 << (PostgreSQLParser.KW_RESET - 302)) | (1 << (PostgreSQLParser.KW_RESTART - 302)) | (1 << (PostgreSQLParser.KW_RESTRICT - 302)) | (1 << (PostgreSQLParser.KW_RETURNS - 302)) | (1 << (PostgreSQLParser.KW_REVOKE - 302)) | (1 << (PostgreSQLParser.KW_ROLE - 302)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 302)) | (1 << (PostgreSQLParser.KW_ROWS - 302)) | (1 << (PostgreSQLParser.KW_RULE - 302)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 302)) | (1 << (PostgreSQLParser.KW_SCHEMA - 302)) | (1 << (PostgreSQLParser.KW_SCROLL - 302)) | (1 << (PostgreSQLParser.KW_SEARCH - 302)) | (1 << (PostgreSQLParser.KW_SECOND - 302)) | (1 << (PostgreSQLParser.KW_SECURITY - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 302)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 302)) | (1 << (PostgreSQLParser.KW_SERVER - 302)) | (1 << (PostgreSQLParser.KW_SESSION - 302)) | (1 << (PostgreSQLParser.KW_SET - 302)))) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & ((1 << (PostgreSQLParser.KW_SHARE - 334)) | (1 << (PostgreSQLParser.KW_SHOW - 334)) | (1 << (PostgreSQLParser.KW_SIMPLE - 334)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 334)) | (1 << (PostgreSQLParser.KW_STABLE - 334)) | (1 << (PostgreSQLParser.KW_STANDALONE - 334)) | (1 << (PostgreSQLParser.KW_START - 334)) | (1 << (PostgreSQLParser.KW_STATEMENT - 334)) | (1 << (PostgreSQLParser.KW_STATISTICS - 334)) | (1 << (PostgreSQLParser.KW_STDIN - 334)) | (1 << (PostgreSQLParser.KW_STDOUT - 334)) | (1 << (PostgreSQLParser.KW_STORAGE - 334)) | (1 << (PostgreSQLParser.KW_STRICT - 334)) | (1 << (PostgreSQLParser.KW_STRIP - 334)) | (1 << (PostgreSQLParser.KW_SYSID - 334)) | (1 << (PostgreSQLParser.KW_SYSTEM - 334)) | (1 << (PostgreSQLParser.KW_TABLES - 334)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 334)) | (1 << (PostgreSQLParser.KW_TEMP - 334)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 334)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 334)) | (1 << (PostgreSQLParser.KW_TEXT - 334)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 334)) | (1 << (PostgreSQLParser.KW_TRIGGER - 334)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 334)) | (1 << (PostgreSQLParser.KW_TRUSTED - 334)) | (1 << (PostgreSQLParser.KW_TYPE - 334)) | (1 << (PostgreSQLParser.KW_TYPES - 334)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 334)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 334)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 334)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 334)))) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & ((1 << (PostgreSQLParser.KW_UNLISTEN - 366)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 366)) | (1 << (PostgreSQLParser.KW_UNTIL - 366)) | (1 << (PostgreSQLParser.KW_UPDATE - 366)) | (1 << (PostgreSQLParser.KW_VACUUM - 366)) | (1 << (PostgreSQLParser.KW_VALID - 366)) | (1 << (PostgreSQLParser.KW_VALIDATE - 366)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 366)) | (1 << (PostgreSQLParser.KW_VARYING - 366)) | (1 << (PostgreSQLParser.KW_VERSION - 366)) | (1 << (PostgreSQLParser.KW_VIEW - 366)) | (1 << (PostgreSQLParser.KW_VOLATILE - 366)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 366)) | (1 << (PostgreSQLParser.KW_WITHOUT - 366)) | (1 << (PostgreSQLParser.KW_WORK - 366)) | (1 << (PostgreSQLParser.KW_WRAPPER - 366)) | (1 << (PostgreSQLParser.KW_WRITE - 366)) | (1 << (PostgreSQLParser.KW_XML - 366)) | (1 << (PostgreSQLParser.KW_YEAR - 366)) | (1 << (PostgreSQLParser.KW_YES - 366)) | (1 << (PostgreSQLParser.KW_ZONE - 366)) | (1 << (PostgreSQLParser.KW_BETWEEN - 366)) | (1 << (PostgreSQLParser.KW_BIGINT - 366)) | (1 << (PostgreSQLParser.KW_BIT - 366)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 366)) | (1 << (PostgreSQLParser.KW_CHAR - 366)) | (1 << (PostgreSQLParser.KW_CHARACTER - 366)) | (1 << (PostgreSQLParser.KW_COALESCE - 366)) | (1 << (PostgreSQLParser.KW_DEC - 366)) | (1 << (PostgreSQLParser.KW_DECIMAL - 366)) | (1 << (PostgreSQLParser.KW_EXISTS - 366)) | (1 << (PostgreSQLParser.KW_EXTRACT - 366)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PostgreSQLParser.KW_FLOAT - 398)) | (1 << (PostgreSQLParser.KW_GREATEST - 398)) | (1 << (PostgreSQLParser.KW_INOUT - 398)) | (1 << (PostgreSQLParser.KW_INT - 398)) | (1 << (PostgreSQLParser.KW_INTEGER - 398)) | (1 << (PostgreSQLParser.KW_INTERVAL - 398)) | (1 << (PostgreSQLParser.KW_LEAST - 398)) | (1 << (PostgreSQLParser.KW_NATIONAL - 398)) | (1 << (PostgreSQLParser.KW_NCHAR - 398)) | (1 << (PostgreSQLParser.KW_NONE - 398)) | (1 << (PostgreSQLParser.KW_NULLIF - 398)) | (1 << (PostgreSQLParser.KW_NUMERIC - 398)) | (1 << (PostgreSQLParser.KW_OVERLAY - 398)) | (1 << (PostgreSQLParser.KW_POSITION - 398)) | (1 << (PostgreSQLParser.KW_PRECISION - 398)) | (1 << (PostgreSQLParser.KW_REAL - 398)) | (1 << (PostgreSQLParser.KW_ROW - 398)) | (1 << (PostgreSQLParser.KW_SETOF - 398)) | (1 << (PostgreSQLParser.KW_SMALLINT - 398)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 398)) | (1 << (PostgreSQLParser.KW_TIME - 398)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 398)) | (1 << (PostgreSQLParser.KW_TREAT - 398)) | (1 << (PostgreSQLParser.KW_TRIM - 398)) | (1 << (PostgreSQLParser.KW_VALUES - 398)) | (1 << (PostgreSQLParser.KW_VARCHAR - 398)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 398)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 398)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 398)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 398)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 398)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 398)))) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & ((1 << (PostgreSQLParser.KW_XMLPI - 430)) | (1 << (PostgreSQLParser.KW_XMLROOT - 430)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 430)) | (1 << (PostgreSQLParser.KW_CALL - 430)) | (1 << (PostgreSQLParser.KW_CURRENT - 430)) | (1 << (PostgreSQLParser.KW_ATTACH - 430)) | (1 << (PostgreSQLParser.KW_DETACH - 430)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 430)) | (1 << (PostgreSQLParser.KW_GENERATED - 430)) | (1 << (PostgreSQLParser.KW_LOGGED - 430)) | (1 << (PostgreSQLParser.KW_STORED - 430)) | (1 << (PostgreSQLParser.KW_INCLUDE - 430)) | (1 << (PostgreSQLParser.KW_ROUTINE - 430)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 430)) | (1 << (PostgreSQLParser.KW_IMPORT - 430)) | (1 << (PostgreSQLParser.KW_POLICY - 430)) | (1 << (PostgreSQLParser.KW_METHOD - 430)) | (1 << (PostgreSQLParser.KW_REFERENCING - 430)) | (1 << (PostgreSQLParser.KW_NEW - 430)) | (1 << (PostgreSQLParser.KW_OLD - 430)) | (1 << (PostgreSQLParser.KW_VALUE - 430)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 430)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 430)) | (1 << (PostgreSQLParser.KW_OUT - 430)) | (1 << (PostgreSQLParser.KW_ROUTINES - 430)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 430)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 430)) | (1 << (PostgreSQLParser.KW_INPUT - 430)) | (1 << (PostgreSQLParser.KW_SUPPORT - 430)) | (1 << (PostgreSQLParser.KW_PARALLEL - 430)) | (1 << (PostgreSQLParser.KW_SQL - 430)))) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & ((1 << (PostgreSQLParser.KW_DEPENDS - 462)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 462)) | (1 << (PostgreSQLParser.KW_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_SKIP - 462)) | (1 << (PostgreSQLParser.KW_LOCKED - 462)) | (1 << (PostgreSQLParser.KW_TIES - 462)) | (1 << (PostgreSQLParser.KW_ROLLUP - 462)) | (1 << (PostgreSQLParser.KW_CUBE - 462)) | (1 << (PostgreSQLParser.KW_GROUPING - 462)) | (1 << (PostgreSQLParser.KW_SETS - 462)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 462)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 462)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 462)) | (1 << (PostgreSQLParser.KW_COLUMNS - 462)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 462)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 462)) | (1 << (PostgreSQLParser.KW_WITHIN - 462)) | (1 << (PostgreSQLParser.KW_FILTER - 462)) | (1 << (PostgreSQLParser.KW_GROUPS - 462)) | (1 << (PostgreSQLParser.KW_OTHERS - 462)) | (1 << (PostgreSQLParser.KW_NFC - 462)) | (1 << (PostgreSQLParser.KW_NFD - 462)) | (1 << (PostgreSQLParser.KW_NFKC - 462)) | (1 << (PostgreSQLParser.KW_NFKD - 462)) | (1 << (PostgreSQLParser.KW_UESCAPE - 462)) | (1 << (PostgreSQLParser.KW_VIEWS - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 462)) | (1 << (PostgreSQLParser.KW_DUMP - 462)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 462)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_ERROR - 462)))) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (PostgreSQLParser.KW_USE_VARIABLE - 494)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 494)) | (1 << (PostgreSQLParser.KW_ALIAS - 494)) | (1 << (PostgreSQLParser.KW_CONSTANT - 494)) | (1 << (PostgreSQLParser.KW_PERFORM - 494)) | (1 << (PostgreSQLParser.KW_GET - 494)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 494)) | (1 << (PostgreSQLParser.KW_STACKED - 494)) | (1 << (PostgreSQLParser.KW_ELSIF - 494)) | (1 << (PostgreSQLParser.KW_REVERSE - 494)) | (1 << (PostgreSQLParser.KW_SLICE - 494)) | (1 << (PostgreSQLParser.KW_EXIT - 494)) | (1 << (PostgreSQLParser.KW_RETURN - 494)) | (1 << (PostgreSQLParser.KW_QUERY - 494)) | (1 << (PostgreSQLParser.KW_RAISE - 494)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 494)) | (1 << (PostgreSQLParser.KW_DEBUG - 494)) | (1 << (PostgreSQLParser.KW_LOG - 494)) | (1 << (PostgreSQLParser.KW_INFO - 494)) | (1 << (PostgreSQLParser.KW_NOTICE - 494)) | (1 << (PostgreSQLParser.KW_WARNING - 494)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 494)) | (1 << (PostgreSQLParser.KW_ASSERT - 494)) | (1 << (PostgreSQLParser.KW_OPEN - 494)) | (1 << (PostgreSQLParser.Identifier - 494)))) !== 0) || ((((_la - 526)) & ~0x1F) === 0 && ((1 << (_la - 526)) & ((1 << (PostgreSQLParser.QuotedIdentifier - 526)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 526)) | (1 << (PostgreSQLParser.StringConstant - 526)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 526)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 526)) | (1 << (PostgreSQLParser.BinaryStringConstant - 526)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 526)) | (1 << (PostgreSQLParser.Integral - 526)) | (1 << (PostgreSQLParser.Numeric - 526)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 526)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 526)))) !== 0) || _la === PostgreSQLParser.EscapeStringConstant) {
				{
				this.state = 9844;
				this.expr_list();
				}
			}

			this.state = 9847;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public implicit_row(): Implicit_rowContext {
		let _localctx: Implicit_rowContext = new Implicit_rowContext(this._ctx, this.state);
		this.enterRule(_localctx, 1266, PostgreSQLParser.RULE_implicit_row);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9849;
			this.match(PostgreSQLParser.OPEN_PAREN);
			this.state = 9850;
			this.expr_list();
			this.state = 9851;
			this.match(PostgreSQLParser.COMMA);
			this.state = 9852;
			this.a_expr();
			this.state = 9853;
			this.match(PostgreSQLParser.CLOSE_PAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sub_type(): Sub_typeContext {
		let _localctx: Sub_typeContext = new Sub_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1268, PostgreSQLParser.RULE_sub_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9855;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_ALL || _la === PostgreSQLParser.KW_ANY || _la === PostgreSQLParser.KW_SOME)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public all_op(): All_opContext {
		let _localctx: All_opContext = new All_opContext(this._ctx, this.state);
		this.enterRule(_localctx, 1270, PostgreSQLParser.RULE_all_op);
		try {
			this.state = 9859;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.Operator:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9857;
				this.match(PostgreSQLParser.Operator);
				}
				break;
			case PostgreSQLParser.STAR:
			case PostgreSQLParser.EQUAL:
			case PostgreSQLParser.PLUS:
			case PostgreSQLParser.MINUS:
			case PostgreSQLParser.SLASH:
			case PostgreSQLParser.CARET:
			case PostgreSQLParser.LT:
			case PostgreSQLParser.GT:
			case PostgreSQLParser.LESS_EQUALS:
			case PostgreSQLParser.GREATER_EQUALS:
			case PostgreSQLParser.NOT_EQUALS:
			case PostgreSQLParser.PERCENT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9858;
				this.mathop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mathop(): MathopContext {
		let _localctx: MathopContext = new MathopContext(this._ctx, this.state);
		this.enterRule(_localctx, 1272, PostgreSQLParser.RULE_mathop);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9861;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.STAR) | (1 << PostgreSQLParser.EQUAL) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.SLASH) | (1 << PostgreSQLParser.CARET) | (1 << PostgreSQLParser.LT) | (1 << PostgreSQLParser.GT) | (1 << PostgreSQLParser.LESS_EQUALS) | (1 << PostgreSQLParser.GREATER_EQUALS) | (1 << PostgreSQLParser.NOT_EQUALS) | (1 << PostgreSQLParser.PERCENT))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qual_op(): Qual_opContext {
		let _localctx: Qual_opContext = new Qual_opContext(this._ctx, this.state);
		this.enterRule(_localctx, 1274, PostgreSQLParser.RULE_qual_op);
		try {
			this.state = 9869;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.Operator:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9863;
				this.match(PostgreSQLParser.Operator);
				}
				break;
			case PostgreSQLParser.KW_OPERATOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9864;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 9865;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9866;
				this.any_operator();
				this.state = 9867;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qual_all_op(): Qual_all_opContext {
		let _localctx: Qual_all_opContext = new Qual_all_opContext(this._ctx, this.state);
		this.enterRule(_localctx, 1276, PostgreSQLParser.RULE_qual_all_op);
		try {
			this.state = 9877;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.STAR:
			case PostgreSQLParser.EQUAL:
			case PostgreSQLParser.PLUS:
			case PostgreSQLParser.MINUS:
			case PostgreSQLParser.SLASH:
			case PostgreSQLParser.CARET:
			case PostgreSQLParser.LT:
			case PostgreSQLParser.GT:
			case PostgreSQLParser.LESS_EQUALS:
			case PostgreSQLParser.GREATER_EQUALS:
			case PostgreSQLParser.NOT_EQUALS:
			case PostgreSQLParser.PERCENT:
			case PostgreSQLParser.Operator:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9871;
				this.all_op();
				}
				break;
			case PostgreSQLParser.KW_OPERATOR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9872;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 9873;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9874;
				this.any_operator();
				this.state = 9875;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subquery_Op(): Subquery_OpContext {
		let _localctx: Subquery_OpContext = new Subquery_OpContext(this._ctx, this.state);
		this.enterRule(_localctx, 1278, PostgreSQLParser.RULE_subquery_Op);
		try {
			this.state = 9891;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 940, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9879;
				this.all_op();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9880;
				this.match(PostgreSQLParser.KW_OPERATOR);
				this.state = 9881;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 9882;
				this.any_operator();
				this.state = 9883;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9885;
				this.match(PostgreSQLParser.KW_LIKE);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9886;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 9887;
				this.match(PostgreSQLParser.KW_LIKE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9888;
				this.match(PostgreSQLParser.KW_ILIKE);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9889;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 9890;
				this.match(PostgreSQLParser.KW_ILIKE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_list(): Expr_listContext {
		let _localctx: Expr_listContext = new Expr_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1280, PostgreSQLParser.RULE_expr_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9893;
			this.a_expr();
			this.state = 9898;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 941, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9894;
					this.match(PostgreSQLParser.COMMA);
					this.state = 9895;
					this.a_expr();
					}
					}
				}
				this.state = 9900;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 941, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_arg_list(): Func_arg_listContext {
		let _localctx: Func_arg_listContext = new Func_arg_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1282, PostgreSQLParser.RULE_func_arg_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9901;
			this.func_arg_expr();
			this.state = 9906;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 942, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 9902;
					this.match(PostgreSQLParser.COMMA);
					this.state = 9903;
					this.func_arg_expr();
					}
					}
				}
				this.state = 9908;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 942, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_arg_expr(): Func_arg_exprContext {
		let _localctx: Func_arg_exprContext = new Func_arg_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 1284, PostgreSQLParser.RULE_func_arg_expr);
		let _la: number;
		try {
			this.state = 9914;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 943, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9909;
				this.a_expr();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9910;
				this.param_name();
				this.state = 9911;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.COLON_EQUALS || _la === PostgreSQLParser.EQUALS_GREATER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 9912;
				this.a_expr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_list(): Type_listContext {
		let _localctx: Type_listContext = new Type_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1286, PostgreSQLParser.RULE_type_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9916;
			this.typename();
			this.state = 9921;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 9917;
				this.match(PostgreSQLParser.COMMA);
				this.state = 9918;
				this.typename();
				}
				}
				this.state = 9923;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public array_expr(): Array_exprContext {
		let _localctx: Array_exprContext = new Array_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 1288, PostgreSQLParser.RULE_array_expr);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9924;
			this.match(PostgreSQLParser.OPEN_BRACKET);
			this.state = 9927;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.OPEN_PAREN:
			case PostgreSQLParser.PLUS:
			case PostgreSQLParser.MINUS:
			case PostgreSQLParser.PARAM:
			case PostgreSQLParser.Operator:
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_CASE:
			case PostgreSQLParser.KW_CAST:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_CURRENT_CATALOG:
			case PostgreSQLParser.KW_CURRENT_DATE:
			case PostgreSQLParser.KW_CURRENT_ROLE:
			case PostgreSQLParser.KW_CURRENT_TIME:
			case PostgreSQLParser.KW_CURRENT_TIMESTAMP:
			case PostgreSQLParser.KW_CURRENT_USER:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_LOCALTIME:
			case PostgreSQLParser.KW_LOCALTIMESTAMP:
			case PostgreSQLParser.KW_NOT:
			case PostgreSQLParser.KW_NULL:
			case PostgreSQLParser.KW_SESSION_USER:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_UNIQUE:
			case PostgreSQLParser.KW_USER:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.BinaryStringConstant:
			case PostgreSQLParser.HexadecimalStringConstant:
			case PostgreSQLParser.Integral:
			case PostgreSQLParser.Numeric:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				{
				this.state = 9925;
				this.expr_list();
				}
				break;
			case PostgreSQLParser.OPEN_BRACKET:
				{
				this.state = 9926;
				this.array_expr_list();
				}
				break;
			case PostgreSQLParser.CLOSE_BRACKET:
				break;
			default:
				break;
			}
			this.state = 9929;
			this.match(PostgreSQLParser.CLOSE_BRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public array_expr_list(): Array_expr_listContext {
		let _localctx: Array_expr_listContext = new Array_expr_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1290, PostgreSQLParser.RULE_array_expr_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9931;
			this.array_expr();
			this.state = 9936;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 9932;
				this.match(PostgreSQLParser.COMMA);
				this.state = 9933;
				this.array_expr();
				}
				}
				this.state = 9938;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extract_list(): Extract_listContext {
		let _localctx: Extract_listContext = new Extract_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1292, PostgreSQLParser.RULE_extract_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9939;
			this.extract_arg();
			this.state = 9940;
			this.match(PostgreSQLParser.KW_FROM);
			this.state = 9941;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public extract_arg(): Extract_argContext {
		let _localctx: Extract_argContext = new Extract_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 1294, PostgreSQLParser.RULE_extract_arg);
		try {
			this.state = 9951;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9943;
				this.identifier();
				}
				break;
			case PostgreSQLParser.KW_YEAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9944;
				this.match(PostgreSQLParser.KW_YEAR);
				}
				break;
			case PostgreSQLParser.KW_MONTH:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9945;
				this.match(PostgreSQLParser.KW_MONTH);
				}
				break;
			case PostgreSQLParser.KW_DAY:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9946;
				this.match(PostgreSQLParser.KW_DAY);
				}
				break;
			case PostgreSQLParser.KW_HOUR:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9947;
				this.match(PostgreSQLParser.KW_HOUR);
				}
				break;
			case PostgreSQLParser.KW_MINUTE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9948;
				this.match(PostgreSQLParser.KW_MINUTE);
				}
				break;
			case PostgreSQLParser.KW_SECOND:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 9949;
				this.match(PostgreSQLParser.KW_SECOND);
				}
				break;
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 9950;
				this.sconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unicode_normal_form(): Unicode_normal_formContext {
		let _localctx: Unicode_normal_formContext = new Unicode_normal_formContext(this._ctx, this.state);
		this.enterRule(_localctx, 1296, PostgreSQLParser.RULE_unicode_normal_form);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9953;
			_la = this._input.LA(1);
			if (!(((((_la - 483)) & ~0x1F) === 0 && ((1 << (_la - 483)) & ((1 << (PostgreSQLParser.KW_NFC - 483)) | (1 << (PostgreSQLParser.KW_NFD - 483)) | (1 << (PostgreSQLParser.KW_NFKC - 483)) | (1 << (PostgreSQLParser.KW_NFKD - 483)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public overlay_list(): Overlay_listContext {
		let _localctx: Overlay_listContext = new Overlay_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1298, PostgreSQLParser.RULE_overlay_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9955;
			this.a_expr();
			this.state = 9956;
			this.match(PostgreSQLParser.KW_PLACING);
			this.state = 9957;
			this.a_expr();
			this.state = 9958;
			this.match(PostgreSQLParser.KW_FROM);
			this.state = 9959;
			this.a_expr();
			this.state = 9962;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_FOR) {
				{
				this.state = 9960;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 9961;
				this.a_expr();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public position_list(): Position_listContext {
		let _localctx: Position_listContext = new Position_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1300, PostgreSQLParser.RULE_position_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 9964;
			this.b_expr(0);
			this.state = 9965;
			this.match(PostgreSQLParser.KW_IN);
			this.state = 9966;
			this.b_expr(0);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public substr_list(): Substr_listContext {
		let _localctx: Substr_listContext = new Substr_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1302, PostgreSQLParser.RULE_substr_list);
		try {
			this.state = 9995;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 949, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9968;
				this.a_expr();
				this.state = 9969;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 9970;
				this.a_expr();
				this.state = 9971;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 9972;
				this.a_expr();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 9974;
				this.a_expr();
				this.state = 9975;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 9976;
				this.a_expr();
				this.state = 9977;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 9978;
				this.a_expr();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 9980;
				this.a_expr();
				this.state = 9981;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 9982;
				this.a_expr();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 9984;
				this.a_expr();
				this.state = 9985;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 9986;
				this.a_expr();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 9988;
				this.a_expr();
				this.state = 9989;
				this.match(PostgreSQLParser.KW_SIMILAR);
				this.state = 9990;
				this.a_expr();
				this.state = 9991;
				this.match(PostgreSQLParser.KW_ESCAPE);
				this.state = 9992;
				this.a_expr();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 9994;
				this.expr_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public trim_list(): Trim_listContext {
		let _localctx: Trim_listContext = new Trim_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1304, PostgreSQLParser.RULE_trim_list);
		try {
			this.state = 10004;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 950, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 9997;
				this.a_expr();
				this.state = 9998;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 9999;
				this.expr_list();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10001;
				this.match(PostgreSQLParser.KW_FROM);
				this.state = 10002;
				this.expr_list();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10003;
				this.expr_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public in_expr(): In_exprContext {
		let _localctx: In_exprContext = new In_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 1306, PostgreSQLParser.RULE_in_expr);
		try {
			this.state = 10011;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 951, this._ctx) ) {
			case 1:
				_localctx = new In_expr_selectContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10006;
				this.select_with_parens();
				}
				break;

			case 2:
				_localctx = new In_expr_listContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10007;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 10008;
				this.expr_list();
				this.state = 10009;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_expr(): Case_exprContext {
		let _localctx: Case_exprContext = new Case_exprContext(this._ctx, this.state);
		this.enterRule(_localctx, 1308, PostgreSQLParser.RULE_case_expr);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10013;
			this.match(PostgreSQLParser.KW_CASE);
			this.state = 10015;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_CASE - 33)) | (1 << (PostgreSQLParser.KW_CAST - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_CATALOG - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_DATE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_ROLE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIME - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIMESTAMP - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_USER - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FALSE - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (PostgreSQLParser.KW_LOCALTIME - 75)) | (1 << (PostgreSQLParser.KW_LOCALTIMESTAMP - 75)) | (1 << (PostgreSQLParser.KW_NOT - 75)) | (1 << (PostgreSQLParser.KW_NULL - 75)) | (1 << (PostgreSQLParser.KW_SESSION_USER - 75)) | (1 << (PostgreSQLParser.KW_TABLE - 75)) | (1 << (PostgreSQLParser.KW_TRUE - 75)) | (1 << (PostgreSQLParser.KW_UNIQUE - 75)) | (1 << (PostgreSQLParser.KW_USER - 75)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 75)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (PostgreSQLParser.KW_BINARY - 107)) | (1 << (PostgreSQLParser.KW_COLLATION - 107)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 107)) | (1 << (PostgreSQLParser.KW_CROSS - 107)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 107)) | (1 << (PostgreSQLParser.KW_FREEZE - 107)) | (1 << (PostgreSQLParser.KW_FULL - 107)) | (1 << (PostgreSQLParser.KW_ILIKE - 107)) | (1 << (PostgreSQLParser.KW_INNER - 107)) | (1 << (PostgreSQLParser.KW_IS - 107)) | (1 << (PostgreSQLParser.KW_ISNULL - 107)) | (1 << (PostgreSQLParser.KW_JOIN - 107)) | (1 << (PostgreSQLParser.KW_LEFT - 107)) | (1 << (PostgreSQLParser.KW_LIKE - 107)) | (1 << (PostgreSQLParser.KW_NATURAL - 107)) | (1 << (PostgreSQLParser.KW_NOTNULL - 107)) | (1 << (PostgreSQLParser.KW_OUTER - 107)) | (1 << (PostgreSQLParser.KW_OVER - 107)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 107)) | (1 << (PostgreSQLParser.KW_RIGHT - 107)) | (1 << (PostgreSQLParser.KW_SIMILAR - 107)) | (1 << (PostgreSQLParser.KW_VERBOSE - 107)) | (1 << (PostgreSQLParser.KW_ABORT - 107)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 107)) | (1 << (PostgreSQLParser.KW_ACCESS - 107)) | (1 << (PostgreSQLParser.KW_ACTION - 107)) | (1 << (PostgreSQLParser.KW_ADD - 107)) | (1 << (PostgreSQLParser.KW_ADMIN - 107)) | (1 << (PostgreSQLParser.KW_AFTER - 107)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 107)) | (1 << (PostgreSQLParser.KW_ALSO - 107)) | (1 << (PostgreSQLParser.KW_ALTER - 107)))) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (PostgreSQLParser.KW_ALWAYS - 139)) | (1 << (PostgreSQLParser.KW_ASSERTION - 139)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 139)) | (1 << (PostgreSQLParser.KW_AT - 139)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 139)) | (1 << (PostgreSQLParser.KW_BACKWARD - 139)) | (1 << (PostgreSQLParser.KW_BEFORE - 139)) | (1 << (PostgreSQLParser.KW_BEGIN - 139)) | (1 << (PostgreSQLParser.KW_BY - 139)) | (1 << (PostgreSQLParser.KW_CACHE - 139)) | (1 << (PostgreSQLParser.KW_CALLED - 139)) | (1 << (PostgreSQLParser.KW_CASCADE - 139)) | (1 << (PostgreSQLParser.KW_CASCADED - 139)) | (1 << (PostgreSQLParser.KW_CATALOG - 139)) | (1 << (PostgreSQLParser.KW_CHAIN - 139)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 139)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 139)) | (1 << (PostgreSQLParser.KW_CLASS - 139)) | (1 << (PostgreSQLParser.KW_CLOSE - 139)) | (1 << (PostgreSQLParser.KW_CLUSTER - 139)) | (1 << (PostgreSQLParser.KW_COMMENT - 139)) | (1 << (PostgreSQLParser.KW_COMMENTS - 139)) | (1 << (PostgreSQLParser.KW_COMMIT - 139)) | (1 << (PostgreSQLParser.KW_COMMITTED - 139)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 139)) | (1 << (PostgreSQLParser.KW_CONNECTION - 139)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 139)) | (1 << (PostgreSQLParser.KW_CONTENT - 139)) | (1 << (PostgreSQLParser.KW_CONTINUE - 139)) | (1 << (PostgreSQLParser.KW_CONVERSION - 139)) | (1 << (PostgreSQLParser.KW_COPY - 139)) | (1 << (PostgreSQLParser.KW_COST - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (PostgreSQLParser.KW_CSV - 171)) | (1 << (PostgreSQLParser.KW_CURSOR - 171)) | (1 << (PostgreSQLParser.KW_CYCLE - 171)) | (1 << (PostgreSQLParser.KW_DATA - 171)) | (1 << (PostgreSQLParser.KW_DATABASE - 171)) | (1 << (PostgreSQLParser.KW_DAY - 171)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 171)) | (1 << (PostgreSQLParser.KW_DECLARE - 171)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 171)) | (1 << (PostgreSQLParser.KW_DEFERRED - 171)) | (1 << (PostgreSQLParser.KW_DEFINER - 171)) | (1 << (PostgreSQLParser.KW_DELETE - 171)) | (1 << (PostgreSQLParser.KW_DELIMITER - 171)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 171)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 171)) | (1 << (PostgreSQLParser.KW_DISABLE - 171)) | (1 << (PostgreSQLParser.KW_DISCARD - 171)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 171)) | (1 << (PostgreSQLParser.KW_DOMAIN - 171)) | (1 << (PostgreSQLParser.KW_DOUBLE - 171)) | (1 << (PostgreSQLParser.KW_DROP - 171)) | (1 << (PostgreSQLParser.KW_EACH - 171)) | (1 << (PostgreSQLParser.KW_ENABLE - 171)) | (1 << (PostgreSQLParser.KW_ENCODING - 171)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 171)) | (1 << (PostgreSQLParser.KW_ENUM - 171)) | (1 << (PostgreSQLParser.KW_ESCAPE - 171)) | (1 << (PostgreSQLParser.KW_EVENT - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 171)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 171)) | (1 << (PostgreSQLParser.KW_EXECUTE - 171)))) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & ((1 << (PostgreSQLParser.KW_EXPLAIN - 203)) | (1 << (PostgreSQLParser.KW_EXTENSION - 203)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 203)) | (1 << (PostgreSQLParser.KW_FAMILY - 203)) | (1 << (PostgreSQLParser.KW_FIRST - 203)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 203)) | (1 << (PostgreSQLParser.KW_FORCE - 203)) | (1 << (PostgreSQLParser.KW_FORWARD - 203)) | (1 << (PostgreSQLParser.KW_FUNCTION - 203)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 203)) | (1 << (PostgreSQLParser.KW_GLOBAL - 203)) | (1 << (PostgreSQLParser.KW_GRANTED - 203)) | (1 << (PostgreSQLParser.KW_HANDLER - 203)) | (1 << (PostgreSQLParser.KW_HEADER - 203)) | (1 << (PostgreSQLParser.KW_HOLD - 203)) | (1 << (PostgreSQLParser.KW_HOUR - 203)) | (1 << (PostgreSQLParser.KW_IDENTITY - 203)) | (1 << (PostgreSQLParser.KW_IF - 203)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 203)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 203)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 203)) | (1 << (PostgreSQLParser.KW_INCLUDING - 203)) | (1 << (PostgreSQLParser.KW_INCREMENT - 203)) | (1 << (PostgreSQLParser.KW_INDEX - 203)) | (1 << (PostgreSQLParser.KW_INDEXES - 203)) | (1 << (PostgreSQLParser.KW_INHERIT - 203)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (PostgreSQLParser.KW_INHERITS - 238)) | (1 << (PostgreSQLParser.KW_INLINE - 238)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 238)) | (1 << (PostgreSQLParser.KW_INSERT - 238)) | (1 << (PostgreSQLParser.KW_INSTEAD - 238)) | (1 << (PostgreSQLParser.KW_INVOKER - 238)) | (1 << (PostgreSQLParser.KW_ISOLATION - 238)) | (1 << (PostgreSQLParser.KW_KEY - 238)) | (1 << (PostgreSQLParser.KW_LABEL - 238)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 238)) | (1 << (PostgreSQLParser.KW_LARGE - 238)) | (1 << (PostgreSQLParser.KW_LAST - 238)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 238)) | (1 << (PostgreSQLParser.KW_LEVEL - 238)) | (1 << (PostgreSQLParser.KW_LISTEN - 238)) | (1 << (PostgreSQLParser.KW_LOAD - 238)) | (1 << (PostgreSQLParser.KW_LOCAL - 238)) | (1 << (PostgreSQLParser.KW_LOCATION - 238)) | (1 << (PostgreSQLParser.KW_LOCK - 238)) | (1 << (PostgreSQLParser.KW_MAPPING - 238)) | (1 << (PostgreSQLParser.KW_MATCH - 238)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 238)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 238)) | (1 << (PostgreSQLParser.KW_MINUTE - 238)) | (1 << (PostgreSQLParser.KW_MINVALUE - 238)) | (1 << (PostgreSQLParser.KW_MODE - 238)) | (1 << (PostgreSQLParser.KW_MONTH - 238)) | (1 << (PostgreSQLParser.KW_MOVE - 238)) | (1 << (PostgreSQLParser.KW_NAME - 238)) | (1 << (PostgreSQLParser.KW_NAMES - 238)) | (1 << (PostgreSQLParser.KW_NEXT - 238)) | (1 << (PostgreSQLParser.KW_NO - 238)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (PostgreSQLParser.KW_NOTHING - 270)) | (1 << (PostgreSQLParser.KW_NOTIFY - 270)) | (1 << (PostgreSQLParser.KW_NOWAIT - 270)) | (1 << (PostgreSQLParser.KW_NULLS - 270)) | (1 << (PostgreSQLParser.KW_OBJECT - 270)) | (1 << (PostgreSQLParser.KW_OF - 270)) | (1 << (PostgreSQLParser.KW_OFF - 270)) | (1 << (PostgreSQLParser.KW_OIDS - 270)) | (1 << (PostgreSQLParser.KW_OPERATOR - 270)) | (1 << (PostgreSQLParser.KW_OPTION - 270)) | (1 << (PostgreSQLParser.KW_OPTIONS - 270)) | (1 << (PostgreSQLParser.KW_OWNED - 270)) | (1 << (PostgreSQLParser.KW_OWNER - 270)) | (1 << (PostgreSQLParser.KW_PARSER - 270)) | (1 << (PostgreSQLParser.KW_PARTIAL - 270)) | (1 << (PostgreSQLParser.KW_PARTITION - 270)) | (1 << (PostgreSQLParser.KW_PASSING - 270)) | (1 << (PostgreSQLParser.KW_PASSWORD - 270)) | (1 << (PostgreSQLParser.KW_PLANS - 270)) | (1 << (PostgreSQLParser.KW_PRECEDING - 270)) | (1 << (PostgreSQLParser.KW_PREPARE - 270)) | (1 << (PostgreSQLParser.KW_PREPARED - 270)) | (1 << (PostgreSQLParser.KW_PRESERVE - 270)) | (1 << (PostgreSQLParser.KW_PRIOR - 270)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 270)) | (1 << (PostgreSQLParser.KW_PROGRAM - 270)) | (1 << (PostgreSQLParser.KW_QUOTE - 270)) | (1 << (PostgreSQLParser.KW_RANGE - 270)) | (1 << (PostgreSQLParser.KW_READ - 270)) | (1 << (PostgreSQLParser.KW_REASSIGN - 270)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (PostgreSQLParser.KW_RECHECK - 302)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 302)) | (1 << (PostgreSQLParser.KW_REF - 302)) | (1 << (PostgreSQLParser.KW_REFRESH - 302)) | (1 << (PostgreSQLParser.KW_REINDEX - 302)) | (1 << (PostgreSQLParser.KW_RELATIVE - 302)) | (1 << (PostgreSQLParser.KW_RELEASE - 302)) | (1 << (PostgreSQLParser.KW_RENAME - 302)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 302)) | (1 << (PostgreSQLParser.KW_REPLACE - 302)) | (1 << (PostgreSQLParser.KW_REPLICA - 302)) | (1 << (PostgreSQLParser.KW_RESET - 302)) | (1 << (PostgreSQLParser.KW_RESTART - 302)) | (1 << (PostgreSQLParser.KW_RESTRICT - 302)) | (1 << (PostgreSQLParser.KW_RETURNS - 302)) | (1 << (PostgreSQLParser.KW_REVOKE - 302)) | (1 << (PostgreSQLParser.KW_ROLE - 302)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 302)) | (1 << (PostgreSQLParser.KW_ROWS - 302)) | (1 << (PostgreSQLParser.KW_RULE - 302)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 302)) | (1 << (PostgreSQLParser.KW_SCHEMA - 302)) | (1 << (PostgreSQLParser.KW_SCROLL - 302)) | (1 << (PostgreSQLParser.KW_SEARCH - 302)) | (1 << (PostgreSQLParser.KW_SECOND - 302)) | (1 << (PostgreSQLParser.KW_SECURITY - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 302)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 302)) | (1 << (PostgreSQLParser.KW_SERVER - 302)) | (1 << (PostgreSQLParser.KW_SESSION - 302)) | (1 << (PostgreSQLParser.KW_SET - 302)))) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & ((1 << (PostgreSQLParser.KW_SHARE - 334)) | (1 << (PostgreSQLParser.KW_SHOW - 334)) | (1 << (PostgreSQLParser.KW_SIMPLE - 334)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 334)) | (1 << (PostgreSQLParser.KW_STABLE - 334)) | (1 << (PostgreSQLParser.KW_STANDALONE - 334)) | (1 << (PostgreSQLParser.KW_START - 334)) | (1 << (PostgreSQLParser.KW_STATEMENT - 334)) | (1 << (PostgreSQLParser.KW_STATISTICS - 334)) | (1 << (PostgreSQLParser.KW_STDIN - 334)) | (1 << (PostgreSQLParser.KW_STDOUT - 334)) | (1 << (PostgreSQLParser.KW_STORAGE - 334)) | (1 << (PostgreSQLParser.KW_STRICT - 334)) | (1 << (PostgreSQLParser.KW_STRIP - 334)) | (1 << (PostgreSQLParser.KW_SYSID - 334)) | (1 << (PostgreSQLParser.KW_SYSTEM - 334)) | (1 << (PostgreSQLParser.KW_TABLES - 334)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 334)) | (1 << (PostgreSQLParser.KW_TEMP - 334)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 334)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 334)) | (1 << (PostgreSQLParser.KW_TEXT - 334)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 334)) | (1 << (PostgreSQLParser.KW_TRIGGER - 334)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 334)) | (1 << (PostgreSQLParser.KW_TRUSTED - 334)) | (1 << (PostgreSQLParser.KW_TYPE - 334)) | (1 << (PostgreSQLParser.KW_TYPES - 334)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 334)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 334)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 334)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 334)))) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & ((1 << (PostgreSQLParser.KW_UNLISTEN - 366)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 366)) | (1 << (PostgreSQLParser.KW_UNTIL - 366)) | (1 << (PostgreSQLParser.KW_UPDATE - 366)) | (1 << (PostgreSQLParser.KW_VACUUM - 366)) | (1 << (PostgreSQLParser.KW_VALID - 366)) | (1 << (PostgreSQLParser.KW_VALIDATE - 366)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 366)) | (1 << (PostgreSQLParser.KW_VARYING - 366)) | (1 << (PostgreSQLParser.KW_VERSION - 366)) | (1 << (PostgreSQLParser.KW_VIEW - 366)) | (1 << (PostgreSQLParser.KW_VOLATILE - 366)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 366)) | (1 << (PostgreSQLParser.KW_WITHOUT - 366)) | (1 << (PostgreSQLParser.KW_WORK - 366)) | (1 << (PostgreSQLParser.KW_WRAPPER - 366)) | (1 << (PostgreSQLParser.KW_WRITE - 366)) | (1 << (PostgreSQLParser.KW_XML - 366)) | (1 << (PostgreSQLParser.KW_YEAR - 366)) | (1 << (PostgreSQLParser.KW_YES - 366)) | (1 << (PostgreSQLParser.KW_ZONE - 366)) | (1 << (PostgreSQLParser.KW_BETWEEN - 366)) | (1 << (PostgreSQLParser.KW_BIGINT - 366)) | (1 << (PostgreSQLParser.KW_BIT - 366)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 366)) | (1 << (PostgreSQLParser.KW_CHAR - 366)) | (1 << (PostgreSQLParser.KW_CHARACTER - 366)) | (1 << (PostgreSQLParser.KW_COALESCE - 366)) | (1 << (PostgreSQLParser.KW_DEC - 366)) | (1 << (PostgreSQLParser.KW_DECIMAL - 366)) | (1 << (PostgreSQLParser.KW_EXISTS - 366)) | (1 << (PostgreSQLParser.KW_EXTRACT - 366)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PostgreSQLParser.KW_FLOAT - 398)) | (1 << (PostgreSQLParser.KW_GREATEST - 398)) | (1 << (PostgreSQLParser.KW_INOUT - 398)) | (1 << (PostgreSQLParser.KW_INT - 398)) | (1 << (PostgreSQLParser.KW_INTEGER - 398)) | (1 << (PostgreSQLParser.KW_INTERVAL - 398)) | (1 << (PostgreSQLParser.KW_LEAST - 398)) | (1 << (PostgreSQLParser.KW_NATIONAL - 398)) | (1 << (PostgreSQLParser.KW_NCHAR - 398)) | (1 << (PostgreSQLParser.KW_NONE - 398)) | (1 << (PostgreSQLParser.KW_NULLIF - 398)) | (1 << (PostgreSQLParser.KW_NUMERIC - 398)) | (1 << (PostgreSQLParser.KW_OVERLAY - 398)) | (1 << (PostgreSQLParser.KW_POSITION - 398)) | (1 << (PostgreSQLParser.KW_PRECISION - 398)) | (1 << (PostgreSQLParser.KW_REAL - 398)) | (1 << (PostgreSQLParser.KW_ROW - 398)) | (1 << (PostgreSQLParser.KW_SETOF - 398)) | (1 << (PostgreSQLParser.KW_SMALLINT - 398)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 398)) | (1 << (PostgreSQLParser.KW_TIME - 398)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 398)) | (1 << (PostgreSQLParser.KW_TREAT - 398)) | (1 << (PostgreSQLParser.KW_TRIM - 398)) | (1 << (PostgreSQLParser.KW_VALUES - 398)) | (1 << (PostgreSQLParser.KW_VARCHAR - 398)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 398)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 398)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 398)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 398)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 398)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 398)))) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & ((1 << (PostgreSQLParser.KW_XMLPI - 430)) | (1 << (PostgreSQLParser.KW_XMLROOT - 430)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 430)) | (1 << (PostgreSQLParser.KW_CALL - 430)) | (1 << (PostgreSQLParser.KW_CURRENT - 430)) | (1 << (PostgreSQLParser.KW_ATTACH - 430)) | (1 << (PostgreSQLParser.KW_DETACH - 430)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 430)) | (1 << (PostgreSQLParser.KW_GENERATED - 430)) | (1 << (PostgreSQLParser.KW_LOGGED - 430)) | (1 << (PostgreSQLParser.KW_STORED - 430)) | (1 << (PostgreSQLParser.KW_INCLUDE - 430)) | (1 << (PostgreSQLParser.KW_ROUTINE - 430)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 430)) | (1 << (PostgreSQLParser.KW_IMPORT - 430)) | (1 << (PostgreSQLParser.KW_POLICY - 430)) | (1 << (PostgreSQLParser.KW_METHOD - 430)) | (1 << (PostgreSQLParser.KW_REFERENCING - 430)) | (1 << (PostgreSQLParser.KW_NEW - 430)) | (1 << (PostgreSQLParser.KW_OLD - 430)) | (1 << (PostgreSQLParser.KW_VALUE - 430)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 430)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 430)) | (1 << (PostgreSQLParser.KW_OUT - 430)) | (1 << (PostgreSQLParser.KW_ROUTINES - 430)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 430)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 430)) | (1 << (PostgreSQLParser.KW_INPUT - 430)) | (1 << (PostgreSQLParser.KW_SUPPORT - 430)) | (1 << (PostgreSQLParser.KW_PARALLEL - 430)) | (1 << (PostgreSQLParser.KW_SQL - 430)))) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & ((1 << (PostgreSQLParser.KW_DEPENDS - 462)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 462)) | (1 << (PostgreSQLParser.KW_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_SKIP - 462)) | (1 << (PostgreSQLParser.KW_LOCKED - 462)) | (1 << (PostgreSQLParser.KW_TIES - 462)) | (1 << (PostgreSQLParser.KW_ROLLUP - 462)) | (1 << (PostgreSQLParser.KW_CUBE - 462)) | (1 << (PostgreSQLParser.KW_GROUPING - 462)) | (1 << (PostgreSQLParser.KW_SETS - 462)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 462)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 462)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 462)) | (1 << (PostgreSQLParser.KW_COLUMNS - 462)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 462)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 462)) | (1 << (PostgreSQLParser.KW_WITHIN - 462)) | (1 << (PostgreSQLParser.KW_FILTER - 462)) | (1 << (PostgreSQLParser.KW_GROUPS - 462)) | (1 << (PostgreSQLParser.KW_OTHERS - 462)) | (1 << (PostgreSQLParser.KW_NFC - 462)) | (1 << (PostgreSQLParser.KW_NFD - 462)) | (1 << (PostgreSQLParser.KW_NFKC - 462)) | (1 << (PostgreSQLParser.KW_NFKD - 462)) | (1 << (PostgreSQLParser.KW_UESCAPE - 462)) | (1 << (PostgreSQLParser.KW_VIEWS - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 462)) | (1 << (PostgreSQLParser.KW_DUMP - 462)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 462)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_ERROR - 462)))) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (PostgreSQLParser.KW_USE_VARIABLE - 494)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 494)) | (1 << (PostgreSQLParser.KW_ALIAS - 494)) | (1 << (PostgreSQLParser.KW_CONSTANT - 494)) | (1 << (PostgreSQLParser.KW_PERFORM - 494)) | (1 << (PostgreSQLParser.KW_GET - 494)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 494)) | (1 << (PostgreSQLParser.KW_STACKED - 494)) | (1 << (PostgreSQLParser.KW_ELSIF - 494)) | (1 << (PostgreSQLParser.KW_REVERSE - 494)) | (1 << (PostgreSQLParser.KW_SLICE - 494)) | (1 << (PostgreSQLParser.KW_EXIT - 494)) | (1 << (PostgreSQLParser.KW_RETURN - 494)) | (1 << (PostgreSQLParser.KW_QUERY - 494)) | (1 << (PostgreSQLParser.KW_RAISE - 494)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 494)) | (1 << (PostgreSQLParser.KW_DEBUG - 494)) | (1 << (PostgreSQLParser.KW_LOG - 494)) | (1 << (PostgreSQLParser.KW_INFO - 494)) | (1 << (PostgreSQLParser.KW_NOTICE - 494)) | (1 << (PostgreSQLParser.KW_WARNING - 494)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 494)) | (1 << (PostgreSQLParser.KW_ASSERT - 494)) | (1 << (PostgreSQLParser.KW_OPEN - 494)) | (1 << (PostgreSQLParser.Identifier - 494)))) !== 0) || ((((_la - 526)) & ~0x1F) === 0 && ((1 << (_la - 526)) & ((1 << (PostgreSQLParser.QuotedIdentifier - 526)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 526)) | (1 << (PostgreSQLParser.StringConstant - 526)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 526)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 526)) | (1 << (PostgreSQLParser.BinaryStringConstant - 526)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 526)) | (1 << (PostgreSQLParser.Integral - 526)) | (1 << (PostgreSQLParser.Numeric - 526)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 526)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 526)))) !== 0) || _la === PostgreSQLParser.EscapeStringConstant) {
				{
				this.state = 10014;
				this.case_arg();
				}
			}

			this.state = 10017;
			this.when_clause_list();
			this.state = 10019;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_ELSE) {
				{
				this.state = 10018;
				this.case_default();
				}
			}

			this.state = 10021;
			this.match(PostgreSQLParser.KW_END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public when_clause_list(): When_clause_listContext {
		let _localctx: When_clause_listContext = new When_clause_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1310, PostgreSQLParser.RULE_when_clause_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10024;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 10023;
				this.when_clause();
				}
				}
				this.state = 10026;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PostgreSQLParser.KW_WHEN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public when_clause(): When_clauseContext {
		let _localctx: When_clauseContext = new When_clauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1312, PostgreSQLParser.RULE_when_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10028;
			this.match(PostgreSQLParser.KW_WHEN);
			this.state = 10029;
			this.a_expr();
			this.state = 10030;
			this.match(PostgreSQLParser.KW_THEN);
			this.state = 10031;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_default(): Case_defaultContext {
		let _localctx: Case_defaultContext = new Case_defaultContext(this._ctx, this.state);
		this.enterRule(_localctx, 1314, PostgreSQLParser.RULE_case_default);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10033;
			this.match(PostgreSQLParser.KW_ELSE);
			this.state = 10034;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_arg(): Case_argContext {
		let _localctx: Case_argContext = new Case_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 1316, PostgreSQLParser.RULE_case_arg);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10036;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public columnref(): ColumnrefContext {
		let _localctx: ColumnrefContext = new ColumnrefContext(this._ctx, this.state);
		this.enterRule(_localctx, 1318, PostgreSQLParser.RULE_columnref);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10038;
			this.colid();
			this.state = 10040;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 955, this._ctx) ) {
			case 1:
				{
				this.state = 10039;
				this.indirection();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indirection_el(): Indirection_elContext {
		let _localctx: Indirection_elContext = new Indirection_elContext(this._ctx, this.state);
		this.enterRule(_localctx, 1320, PostgreSQLParser.RULE_indirection_el);
		let _la: number;
		try {
			this.state = 10059;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.DOT:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10042;
				this.match(PostgreSQLParser.DOT);
				this.state = 10045;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_ALL:
				case PostgreSQLParser.KW_ANALYSE:
				case PostgreSQLParser.KW_ANALYZE:
				case PostgreSQLParser.KW_AND:
				case PostgreSQLParser.KW_ANY:
				case PostgreSQLParser.KW_ARRAY:
				case PostgreSQLParser.KW_AS:
				case PostgreSQLParser.KW_ASC:
				case PostgreSQLParser.KW_ASYMMETRIC:
				case PostgreSQLParser.KW_BOTH:
				case PostgreSQLParser.KW_CASE:
				case PostgreSQLParser.KW_CAST:
				case PostgreSQLParser.KW_CHECK:
				case PostgreSQLParser.KW_COLLATE:
				case PostgreSQLParser.KW_COLUMN:
				case PostgreSQLParser.KW_CONSTRAINT:
				case PostgreSQLParser.KW_CREATE:
				case PostgreSQLParser.KW_CURRENT_CATALOG:
				case PostgreSQLParser.KW_CURRENT_DATE:
				case PostgreSQLParser.KW_CURRENT_ROLE:
				case PostgreSQLParser.KW_CURRENT_TIME:
				case PostgreSQLParser.KW_CURRENT_TIMESTAMP:
				case PostgreSQLParser.KW_CURRENT_USER:
				case PostgreSQLParser.KW_DEFAULT:
				case PostgreSQLParser.KW_DEFERRABLE:
				case PostgreSQLParser.KW_DESC:
				case PostgreSQLParser.KW_DISTINCT:
				case PostgreSQLParser.KW_DO:
				case PostgreSQLParser.KW_ELSE:
				case PostgreSQLParser.KW_EXCEPT:
				case PostgreSQLParser.KW_FALSE:
				case PostgreSQLParser.KW_FETCH:
				case PostgreSQLParser.KW_FOR:
				case PostgreSQLParser.KW_FOREIGN:
				case PostgreSQLParser.KW_FROM:
				case PostgreSQLParser.KW_GRANT:
				case PostgreSQLParser.KW_GROUP:
				case PostgreSQLParser.KW_HAVING:
				case PostgreSQLParser.KW_IN:
				case PostgreSQLParser.KW_INITIALLY:
				case PostgreSQLParser.KW_INTERSECT:
				case PostgreSQLParser.KW_LATERAL:
				case PostgreSQLParser.KW_LEADING:
				case PostgreSQLParser.KW_LIMIT:
				case PostgreSQLParser.KW_LOCALTIME:
				case PostgreSQLParser.KW_LOCALTIMESTAMP:
				case PostgreSQLParser.KW_NOT:
				case PostgreSQLParser.KW_NULL:
				case PostgreSQLParser.KW_OFFSET:
				case PostgreSQLParser.KW_ON:
				case PostgreSQLParser.KW_ONLY:
				case PostgreSQLParser.KW_OR:
				case PostgreSQLParser.KW_ORDER:
				case PostgreSQLParser.KW_PLACING:
				case PostgreSQLParser.KW_PRIMARY:
				case PostgreSQLParser.KW_REFERENCES:
				case PostgreSQLParser.KW_RETURNING:
				case PostgreSQLParser.KW_SELECT:
				case PostgreSQLParser.KW_SESSION_USER:
				case PostgreSQLParser.KW_SOME:
				case PostgreSQLParser.KW_SYMMETRIC:
				case PostgreSQLParser.KW_TABLE:
				case PostgreSQLParser.KW_THEN:
				case PostgreSQLParser.KW_TO:
				case PostgreSQLParser.KW_TRAILING:
				case PostgreSQLParser.KW_TRUE:
				case PostgreSQLParser.KW_UNION:
				case PostgreSQLParser.KW_UNIQUE:
				case PostgreSQLParser.KW_USER:
				case PostgreSQLParser.KW_USING:
				case PostgreSQLParser.KW_VARIADIC:
				case PostgreSQLParser.KW_WHEN:
				case PostgreSQLParser.KW_WHERE:
				case PostgreSQLParser.KW_WINDOW:
				case PostgreSQLParser.KW_WITH:
				case PostgreSQLParser.KW_AUTHORIZATION:
				case PostgreSQLParser.KW_BINARY:
				case PostgreSQLParser.KW_COLLATION:
				case PostgreSQLParser.KW_CONCURRENTLY:
				case PostgreSQLParser.KW_CROSS:
				case PostgreSQLParser.KW_CURRENT_SCHEMA:
				case PostgreSQLParser.KW_FREEZE:
				case PostgreSQLParser.KW_FULL:
				case PostgreSQLParser.KW_ILIKE:
				case PostgreSQLParser.KW_INNER:
				case PostgreSQLParser.KW_IS:
				case PostgreSQLParser.KW_ISNULL:
				case PostgreSQLParser.KW_JOIN:
				case PostgreSQLParser.KW_LEFT:
				case PostgreSQLParser.KW_LIKE:
				case PostgreSQLParser.KW_NATURAL:
				case PostgreSQLParser.KW_NOTNULL:
				case PostgreSQLParser.KW_OUTER:
				case PostgreSQLParser.KW_OVER:
				case PostgreSQLParser.KW_OVERLAPS:
				case PostgreSQLParser.KW_RIGHT:
				case PostgreSQLParser.KW_SIMILAR:
				case PostgreSQLParser.KW_VERBOSE:
				case PostgreSQLParser.KW_ABORT:
				case PostgreSQLParser.KW_ABSOLUTE:
				case PostgreSQLParser.KW_ACCESS:
				case PostgreSQLParser.KW_ACTION:
				case PostgreSQLParser.KW_ADD:
				case PostgreSQLParser.KW_ADMIN:
				case PostgreSQLParser.KW_AFTER:
				case PostgreSQLParser.KW_AGGREGATE:
				case PostgreSQLParser.KW_ALSO:
				case PostgreSQLParser.KW_ALTER:
				case PostgreSQLParser.KW_ALWAYS:
				case PostgreSQLParser.KW_ASSERTION:
				case PostgreSQLParser.KW_ASSIGNMENT:
				case PostgreSQLParser.KW_AT:
				case PostgreSQLParser.KW_ATTRIBUTE:
				case PostgreSQLParser.KW_BACKWARD:
				case PostgreSQLParser.KW_BEFORE:
				case PostgreSQLParser.KW_BEGIN:
				case PostgreSQLParser.KW_BY:
				case PostgreSQLParser.KW_CACHE:
				case PostgreSQLParser.KW_CALLED:
				case PostgreSQLParser.KW_CASCADE:
				case PostgreSQLParser.KW_CASCADED:
				case PostgreSQLParser.KW_CATALOG:
				case PostgreSQLParser.KW_CHAIN:
				case PostgreSQLParser.KW_CHARACTERISTICS:
				case PostgreSQLParser.KW_CHECKPOINT:
				case PostgreSQLParser.KW_CLASS:
				case PostgreSQLParser.KW_CLOSE:
				case PostgreSQLParser.KW_CLUSTER:
				case PostgreSQLParser.KW_COMMENT:
				case PostgreSQLParser.KW_COMMENTS:
				case PostgreSQLParser.KW_COMMIT:
				case PostgreSQLParser.KW_COMMITTED:
				case PostgreSQLParser.KW_CONFIGURATION:
				case PostgreSQLParser.KW_CONNECTION:
				case PostgreSQLParser.KW_CONSTRAINTS:
				case PostgreSQLParser.KW_CONTENT:
				case PostgreSQLParser.KW_CONTINUE:
				case PostgreSQLParser.KW_CONVERSION:
				case PostgreSQLParser.KW_COPY:
				case PostgreSQLParser.KW_COST:
				case PostgreSQLParser.KW_CSV:
				case PostgreSQLParser.KW_CURSOR:
				case PostgreSQLParser.KW_CYCLE:
				case PostgreSQLParser.KW_DATA:
				case PostgreSQLParser.KW_DATABASE:
				case PostgreSQLParser.KW_DAY:
				case PostgreSQLParser.KW_DEALLOCATE:
				case PostgreSQLParser.KW_DECLARE:
				case PostgreSQLParser.KW_DEFAULTS:
				case PostgreSQLParser.KW_DEFERRED:
				case PostgreSQLParser.KW_DEFINER:
				case PostgreSQLParser.KW_DELETE:
				case PostgreSQLParser.KW_DELIMITER:
				case PostgreSQLParser.KW_DELIMITERS:
				case PostgreSQLParser.KW_DICTIONARY:
				case PostgreSQLParser.KW_DISABLE:
				case PostgreSQLParser.KW_DISCARD:
				case PostgreSQLParser.KW_DOCUMENT:
				case PostgreSQLParser.KW_DOMAIN:
				case PostgreSQLParser.KW_DOUBLE:
				case PostgreSQLParser.KW_DROP:
				case PostgreSQLParser.KW_EACH:
				case PostgreSQLParser.KW_ENABLE:
				case PostgreSQLParser.KW_ENCODING:
				case PostgreSQLParser.KW_ENCRYPTED:
				case PostgreSQLParser.KW_ENUM:
				case PostgreSQLParser.KW_ESCAPE:
				case PostgreSQLParser.KW_EVENT:
				case PostgreSQLParser.KW_EXCLUDE:
				case PostgreSQLParser.KW_EXCLUDING:
				case PostgreSQLParser.KW_EXCLUSIVE:
				case PostgreSQLParser.KW_EXECUTE:
				case PostgreSQLParser.KW_EXPLAIN:
				case PostgreSQLParser.KW_EXTENSION:
				case PostgreSQLParser.KW_EXTERNAL:
				case PostgreSQLParser.KW_FAMILY:
				case PostgreSQLParser.KW_FIRST:
				case PostgreSQLParser.KW_FOLLOWING:
				case PostgreSQLParser.KW_FORCE:
				case PostgreSQLParser.KW_FORWARD:
				case PostgreSQLParser.KW_FUNCTION:
				case PostgreSQLParser.KW_FUNCTIONS:
				case PostgreSQLParser.KW_GLOBAL:
				case PostgreSQLParser.KW_GRANTED:
				case PostgreSQLParser.KW_HANDLER:
				case PostgreSQLParser.KW_HEADER:
				case PostgreSQLParser.KW_HOLD:
				case PostgreSQLParser.KW_HOUR:
				case PostgreSQLParser.KW_IDENTITY:
				case PostgreSQLParser.KW_IF:
				case PostgreSQLParser.KW_IMMEDIATE:
				case PostgreSQLParser.KW_IMMUTABLE:
				case PostgreSQLParser.KW_IMPLICIT:
				case PostgreSQLParser.KW_INCLUDING:
				case PostgreSQLParser.KW_INCREMENT:
				case PostgreSQLParser.KW_INDEX:
				case PostgreSQLParser.KW_INDEXES:
				case PostgreSQLParser.KW_INHERIT:
				case PostgreSQLParser.KW_INHERITS:
				case PostgreSQLParser.KW_INLINE:
				case PostgreSQLParser.KW_INSENSITIVE:
				case PostgreSQLParser.KW_INSERT:
				case PostgreSQLParser.KW_INSTEAD:
				case PostgreSQLParser.KW_INVOKER:
				case PostgreSQLParser.KW_ISOLATION:
				case PostgreSQLParser.KW_KEY:
				case PostgreSQLParser.KW_LABEL:
				case PostgreSQLParser.KW_LANGUAGE:
				case PostgreSQLParser.KW_LARGE:
				case PostgreSQLParser.KW_LAST:
				case PostgreSQLParser.KW_LEAKPROOF:
				case PostgreSQLParser.KW_LEVEL:
				case PostgreSQLParser.KW_LISTEN:
				case PostgreSQLParser.KW_LOAD:
				case PostgreSQLParser.KW_LOCAL:
				case PostgreSQLParser.KW_LOCATION:
				case PostgreSQLParser.KW_LOCK:
				case PostgreSQLParser.KW_MAPPING:
				case PostgreSQLParser.KW_MATCH:
				case PostgreSQLParser.KW_MATERIALIZED:
				case PostgreSQLParser.KW_MAXVALUE:
				case PostgreSQLParser.KW_MINUTE:
				case PostgreSQLParser.KW_MINVALUE:
				case PostgreSQLParser.KW_MODE:
				case PostgreSQLParser.KW_MONTH:
				case PostgreSQLParser.KW_MOVE:
				case PostgreSQLParser.KW_NAME:
				case PostgreSQLParser.KW_NAMES:
				case PostgreSQLParser.KW_NEXT:
				case PostgreSQLParser.KW_NO:
				case PostgreSQLParser.KW_NOTHING:
				case PostgreSQLParser.KW_NOTIFY:
				case PostgreSQLParser.KW_NOWAIT:
				case PostgreSQLParser.KW_NULLS:
				case PostgreSQLParser.KW_OBJECT:
				case PostgreSQLParser.KW_OF:
				case PostgreSQLParser.KW_OFF:
				case PostgreSQLParser.KW_OIDS:
				case PostgreSQLParser.KW_OPERATOR:
				case PostgreSQLParser.KW_OPTION:
				case PostgreSQLParser.KW_OPTIONS:
				case PostgreSQLParser.KW_OWNED:
				case PostgreSQLParser.KW_OWNER:
				case PostgreSQLParser.KW_PARSER:
				case PostgreSQLParser.KW_PARTIAL:
				case PostgreSQLParser.KW_PARTITION:
				case PostgreSQLParser.KW_PASSING:
				case PostgreSQLParser.KW_PASSWORD:
				case PostgreSQLParser.KW_PLANS:
				case PostgreSQLParser.KW_PRECEDING:
				case PostgreSQLParser.KW_PREPARE:
				case PostgreSQLParser.KW_PREPARED:
				case PostgreSQLParser.KW_PRESERVE:
				case PostgreSQLParser.KW_PRIOR:
				case PostgreSQLParser.KW_PRIVILEGES:
				case PostgreSQLParser.KW_PROCEDURAL:
				case PostgreSQLParser.KW_PROCEDURE:
				case PostgreSQLParser.KW_PROGRAM:
				case PostgreSQLParser.KW_QUOTE:
				case PostgreSQLParser.KW_RANGE:
				case PostgreSQLParser.KW_READ:
				case PostgreSQLParser.KW_REASSIGN:
				case PostgreSQLParser.KW_RECHECK:
				case PostgreSQLParser.KW_RECURSIVE:
				case PostgreSQLParser.KW_REF:
				case PostgreSQLParser.KW_REFRESH:
				case PostgreSQLParser.KW_REINDEX:
				case PostgreSQLParser.KW_RELATIVE:
				case PostgreSQLParser.KW_RELEASE:
				case PostgreSQLParser.KW_RENAME:
				case PostgreSQLParser.KW_REPEATABLE:
				case PostgreSQLParser.KW_REPLACE:
				case PostgreSQLParser.KW_REPLICA:
				case PostgreSQLParser.KW_RESET:
				case PostgreSQLParser.KW_RESTART:
				case PostgreSQLParser.KW_RESTRICT:
				case PostgreSQLParser.KW_RETURNS:
				case PostgreSQLParser.KW_REVOKE:
				case PostgreSQLParser.KW_ROLE:
				case PostgreSQLParser.KW_ROLLBACK:
				case PostgreSQLParser.KW_ROWS:
				case PostgreSQLParser.KW_RULE:
				case PostgreSQLParser.KW_SAVEPOINT:
				case PostgreSQLParser.KW_SCHEMA:
				case PostgreSQLParser.KW_SCROLL:
				case PostgreSQLParser.KW_SEARCH:
				case PostgreSQLParser.KW_SECOND:
				case PostgreSQLParser.KW_SECURITY:
				case PostgreSQLParser.KW_SEQUENCE:
				case PostgreSQLParser.KW_SEQUENCES:
				case PostgreSQLParser.KW_SERIALIZABLE:
				case PostgreSQLParser.KW_SERVER:
				case PostgreSQLParser.KW_SESSION:
				case PostgreSQLParser.KW_SET:
				case PostgreSQLParser.KW_SHARE:
				case PostgreSQLParser.KW_SHOW:
				case PostgreSQLParser.KW_SIMPLE:
				case PostgreSQLParser.KW_SNAPSHOT:
				case PostgreSQLParser.KW_STABLE:
				case PostgreSQLParser.KW_STANDALONE:
				case PostgreSQLParser.KW_START:
				case PostgreSQLParser.KW_STATEMENT:
				case PostgreSQLParser.KW_STATISTICS:
				case PostgreSQLParser.KW_STDIN:
				case PostgreSQLParser.KW_STDOUT:
				case PostgreSQLParser.KW_STORAGE:
				case PostgreSQLParser.KW_STRICT:
				case PostgreSQLParser.KW_STRIP:
				case PostgreSQLParser.KW_SYSID:
				case PostgreSQLParser.KW_SYSTEM:
				case PostgreSQLParser.KW_TABLES:
				case PostgreSQLParser.KW_TABLESPACE:
				case PostgreSQLParser.KW_TEMP:
				case PostgreSQLParser.KW_TEMPLATE:
				case PostgreSQLParser.KW_TEMPORARY:
				case PostgreSQLParser.KW_TEXT:
				case PostgreSQLParser.KW_TRANSACTION:
				case PostgreSQLParser.KW_TRIGGER:
				case PostgreSQLParser.KW_TRUNCATE:
				case PostgreSQLParser.KW_TRUSTED:
				case PostgreSQLParser.KW_TYPE:
				case PostgreSQLParser.KW_TYPES:
				case PostgreSQLParser.KW_UNBOUNDED:
				case PostgreSQLParser.KW_UNCOMMITTED:
				case PostgreSQLParser.KW_UNENCRYPTED:
				case PostgreSQLParser.KW_UNKNOWN:
				case PostgreSQLParser.KW_UNLISTEN:
				case PostgreSQLParser.KW_UNLOGGED:
				case PostgreSQLParser.KW_UNTIL:
				case PostgreSQLParser.KW_UPDATE:
				case PostgreSQLParser.KW_VACUUM:
				case PostgreSQLParser.KW_VALID:
				case PostgreSQLParser.KW_VALIDATE:
				case PostgreSQLParser.KW_VALIDATOR:
				case PostgreSQLParser.KW_VARYING:
				case PostgreSQLParser.KW_VERSION:
				case PostgreSQLParser.KW_VIEW:
				case PostgreSQLParser.KW_VOLATILE:
				case PostgreSQLParser.KW_WHITESPACE:
				case PostgreSQLParser.KW_WITHOUT:
				case PostgreSQLParser.KW_WORK:
				case PostgreSQLParser.KW_WRAPPER:
				case PostgreSQLParser.KW_WRITE:
				case PostgreSQLParser.KW_XML:
				case PostgreSQLParser.KW_YEAR:
				case PostgreSQLParser.KW_YES:
				case PostgreSQLParser.KW_ZONE:
				case PostgreSQLParser.KW_BETWEEN:
				case PostgreSQLParser.KW_BIGINT:
				case PostgreSQLParser.KW_BIT:
				case PostgreSQLParser.KW_BOOLEAN:
				case PostgreSQLParser.KW_CHAR:
				case PostgreSQLParser.KW_CHARACTER:
				case PostgreSQLParser.KW_COALESCE:
				case PostgreSQLParser.KW_DEC:
				case PostgreSQLParser.KW_DECIMAL:
				case PostgreSQLParser.KW_EXISTS:
				case PostgreSQLParser.KW_EXTRACT:
				case PostgreSQLParser.KW_FLOAT:
				case PostgreSQLParser.KW_GREATEST:
				case PostgreSQLParser.KW_INOUT:
				case PostgreSQLParser.KW_INT:
				case PostgreSQLParser.KW_INTEGER:
				case PostgreSQLParser.KW_INTERVAL:
				case PostgreSQLParser.KW_LEAST:
				case PostgreSQLParser.KW_NATIONAL:
				case PostgreSQLParser.KW_NCHAR:
				case PostgreSQLParser.KW_NONE:
				case PostgreSQLParser.KW_NULLIF:
				case PostgreSQLParser.KW_NUMERIC:
				case PostgreSQLParser.KW_OVERLAY:
				case PostgreSQLParser.KW_POSITION:
				case PostgreSQLParser.KW_PRECISION:
				case PostgreSQLParser.KW_REAL:
				case PostgreSQLParser.KW_ROW:
				case PostgreSQLParser.KW_SETOF:
				case PostgreSQLParser.KW_SMALLINT:
				case PostgreSQLParser.KW_SUBSTRING:
				case PostgreSQLParser.KW_TIME:
				case PostgreSQLParser.KW_TIMESTAMP:
				case PostgreSQLParser.KW_TREAT:
				case PostgreSQLParser.KW_TRIM:
				case PostgreSQLParser.KW_VALUES:
				case PostgreSQLParser.KW_VARCHAR:
				case PostgreSQLParser.KW_XMLATTRIBUTES:
				case PostgreSQLParser.KW_XMLCONCAT:
				case PostgreSQLParser.KW_XMLELEMENT:
				case PostgreSQLParser.KW_XMLEXISTS:
				case PostgreSQLParser.KW_XMLFOREST:
				case PostgreSQLParser.KW_XMLPARSE:
				case PostgreSQLParser.KW_XMLPI:
				case PostgreSQLParser.KW_XMLROOT:
				case PostgreSQLParser.KW_XMLSERIALIZE:
				case PostgreSQLParser.KW_CALL:
				case PostgreSQLParser.KW_CURRENT:
				case PostgreSQLParser.KW_ATTACH:
				case PostgreSQLParser.KW_DETACH:
				case PostgreSQLParser.KW_EXPRESSION:
				case PostgreSQLParser.KW_GENERATED:
				case PostgreSQLParser.KW_LOGGED:
				case PostgreSQLParser.KW_STORED:
				case PostgreSQLParser.KW_INCLUDE:
				case PostgreSQLParser.KW_ROUTINE:
				case PostgreSQLParser.KW_TRANSFORM:
				case PostgreSQLParser.KW_IMPORT:
				case PostgreSQLParser.KW_POLICY:
				case PostgreSQLParser.KW_METHOD:
				case PostgreSQLParser.KW_REFERENCING:
				case PostgreSQLParser.KW_NEW:
				case PostgreSQLParser.KW_OLD:
				case PostgreSQLParser.KW_VALUE:
				case PostgreSQLParser.KW_SUBSCRIPTION:
				case PostgreSQLParser.KW_PUBLICATION:
				case PostgreSQLParser.KW_OUT:
				case PostgreSQLParser.KW_END:
				case PostgreSQLParser.KW_ROUTINES:
				case PostgreSQLParser.KW_SCHEMAS:
				case PostgreSQLParser.KW_PROCEDURES:
				case PostgreSQLParser.KW_INPUT:
				case PostgreSQLParser.KW_SUPPORT:
				case PostgreSQLParser.KW_PARALLEL:
				case PostgreSQLParser.KW_SQL:
				case PostgreSQLParser.KW_DEPENDS:
				case PostgreSQLParser.KW_OVERRIDING:
				case PostgreSQLParser.KW_CONFLICT:
				case PostgreSQLParser.KW_SKIP:
				case PostgreSQLParser.KW_LOCKED:
				case PostgreSQLParser.KW_TIES:
				case PostgreSQLParser.KW_ROLLUP:
				case PostgreSQLParser.KW_CUBE:
				case PostgreSQLParser.KW_GROUPING:
				case PostgreSQLParser.KW_SETS:
				case PostgreSQLParser.KW_TABLESAMPLE:
				case PostgreSQLParser.KW_ORDINALITY:
				case PostgreSQLParser.KW_XMLTABLE:
				case PostgreSQLParser.KW_COLUMNS:
				case PostgreSQLParser.KW_XMLNAMESPACES:
				case PostgreSQLParser.KW_ROWTYPE:
				case PostgreSQLParser.KW_NORMALIZED:
				case PostgreSQLParser.KW_WITHIN:
				case PostgreSQLParser.KW_FILTER:
				case PostgreSQLParser.KW_GROUPS:
				case PostgreSQLParser.KW_OTHERS:
				case PostgreSQLParser.KW_NFC:
				case PostgreSQLParser.KW_NFD:
				case PostgreSQLParser.KW_NFKC:
				case PostgreSQLParser.KW_NFKD:
				case PostgreSQLParser.KW_UESCAPE:
				case PostgreSQLParser.KW_VIEWS:
				case PostgreSQLParser.KW_NORMALIZE:
				case PostgreSQLParser.KW_DUMP:
				case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
				case PostgreSQLParser.KW_VARIABLE_CONFLICT:
				case PostgreSQLParser.KW_ERROR:
				case PostgreSQLParser.KW_USE_VARIABLE:
				case PostgreSQLParser.KW_USE_COLUMN:
				case PostgreSQLParser.KW_ALIAS:
				case PostgreSQLParser.KW_CONSTANT:
				case PostgreSQLParser.KW_PERFORM:
				case PostgreSQLParser.KW_GET:
				case PostgreSQLParser.KW_DIAGNOSTICS:
				case PostgreSQLParser.KW_STACKED:
				case PostgreSQLParser.KW_ELSIF:
				case PostgreSQLParser.KW_REVERSE:
				case PostgreSQLParser.KW_SLICE:
				case PostgreSQLParser.KW_EXIT:
				case PostgreSQLParser.KW_RETURN:
				case PostgreSQLParser.KW_QUERY:
				case PostgreSQLParser.KW_RAISE:
				case PostgreSQLParser.KW_SQLSTATE:
				case PostgreSQLParser.KW_DEBUG:
				case PostgreSQLParser.KW_LOG:
				case PostgreSQLParser.KW_INFO:
				case PostgreSQLParser.KW_NOTICE:
				case PostgreSQLParser.KW_WARNING:
				case PostgreSQLParser.KW_EXCEPTION:
				case PostgreSQLParser.KW_ASSERT:
				case PostgreSQLParser.KW_OPEN:
				case PostgreSQLParser.Identifier:
				case PostgreSQLParser.QuotedIdentifier:
				case PostgreSQLParser.UnicodeQuotedIdentifier:
				case PostgreSQLParser.PLSQLVARIABLENAME:
				case PostgreSQLParser.PLSQLIDENTIFIER:
					{
					this.state = 10043;
					this.attr_name();
					}
					break;
				case PostgreSQLParser.STAR:
					{
					this.state = 10044;
					this.match(PostgreSQLParser.STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case PostgreSQLParser.OPEN_BRACKET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10047;
				this.match(PostgreSQLParser.OPEN_BRACKET);
				this.state = 10056;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 959, this._ctx) ) {
				case 1:
					{
					this.state = 10048;
					this.a_expr();
					}
					break;

				case 2:
					{
					this.state = 10050;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_CASE - 33)) | (1 << (PostgreSQLParser.KW_CAST - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_CATALOG - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_DATE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_ROLE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIME - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIMESTAMP - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_USER - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FALSE - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (PostgreSQLParser.KW_LOCALTIME - 75)) | (1 << (PostgreSQLParser.KW_LOCALTIMESTAMP - 75)) | (1 << (PostgreSQLParser.KW_NOT - 75)) | (1 << (PostgreSQLParser.KW_NULL - 75)) | (1 << (PostgreSQLParser.KW_SESSION_USER - 75)) | (1 << (PostgreSQLParser.KW_TABLE - 75)) | (1 << (PostgreSQLParser.KW_TRUE - 75)) | (1 << (PostgreSQLParser.KW_UNIQUE - 75)) | (1 << (PostgreSQLParser.KW_USER - 75)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 75)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (PostgreSQLParser.KW_BINARY - 107)) | (1 << (PostgreSQLParser.KW_COLLATION - 107)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 107)) | (1 << (PostgreSQLParser.KW_CROSS - 107)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 107)) | (1 << (PostgreSQLParser.KW_FREEZE - 107)) | (1 << (PostgreSQLParser.KW_FULL - 107)) | (1 << (PostgreSQLParser.KW_ILIKE - 107)) | (1 << (PostgreSQLParser.KW_INNER - 107)) | (1 << (PostgreSQLParser.KW_IS - 107)) | (1 << (PostgreSQLParser.KW_ISNULL - 107)) | (1 << (PostgreSQLParser.KW_JOIN - 107)) | (1 << (PostgreSQLParser.KW_LEFT - 107)) | (1 << (PostgreSQLParser.KW_LIKE - 107)) | (1 << (PostgreSQLParser.KW_NATURAL - 107)) | (1 << (PostgreSQLParser.KW_NOTNULL - 107)) | (1 << (PostgreSQLParser.KW_OUTER - 107)) | (1 << (PostgreSQLParser.KW_OVER - 107)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 107)) | (1 << (PostgreSQLParser.KW_RIGHT - 107)) | (1 << (PostgreSQLParser.KW_SIMILAR - 107)) | (1 << (PostgreSQLParser.KW_VERBOSE - 107)) | (1 << (PostgreSQLParser.KW_ABORT - 107)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 107)) | (1 << (PostgreSQLParser.KW_ACCESS - 107)) | (1 << (PostgreSQLParser.KW_ACTION - 107)) | (1 << (PostgreSQLParser.KW_ADD - 107)) | (1 << (PostgreSQLParser.KW_ADMIN - 107)) | (1 << (PostgreSQLParser.KW_AFTER - 107)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 107)) | (1 << (PostgreSQLParser.KW_ALSO - 107)) | (1 << (PostgreSQLParser.KW_ALTER - 107)))) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (PostgreSQLParser.KW_ALWAYS - 139)) | (1 << (PostgreSQLParser.KW_ASSERTION - 139)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 139)) | (1 << (PostgreSQLParser.KW_AT - 139)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 139)) | (1 << (PostgreSQLParser.KW_BACKWARD - 139)) | (1 << (PostgreSQLParser.KW_BEFORE - 139)) | (1 << (PostgreSQLParser.KW_BEGIN - 139)) | (1 << (PostgreSQLParser.KW_BY - 139)) | (1 << (PostgreSQLParser.KW_CACHE - 139)) | (1 << (PostgreSQLParser.KW_CALLED - 139)) | (1 << (PostgreSQLParser.KW_CASCADE - 139)) | (1 << (PostgreSQLParser.KW_CASCADED - 139)) | (1 << (PostgreSQLParser.KW_CATALOG - 139)) | (1 << (PostgreSQLParser.KW_CHAIN - 139)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 139)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 139)) | (1 << (PostgreSQLParser.KW_CLASS - 139)) | (1 << (PostgreSQLParser.KW_CLOSE - 139)) | (1 << (PostgreSQLParser.KW_CLUSTER - 139)) | (1 << (PostgreSQLParser.KW_COMMENT - 139)) | (1 << (PostgreSQLParser.KW_COMMENTS - 139)) | (1 << (PostgreSQLParser.KW_COMMIT - 139)) | (1 << (PostgreSQLParser.KW_COMMITTED - 139)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 139)) | (1 << (PostgreSQLParser.KW_CONNECTION - 139)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 139)) | (1 << (PostgreSQLParser.KW_CONTENT - 139)) | (1 << (PostgreSQLParser.KW_CONTINUE - 139)) | (1 << (PostgreSQLParser.KW_CONVERSION - 139)) | (1 << (PostgreSQLParser.KW_COPY - 139)) | (1 << (PostgreSQLParser.KW_COST - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (PostgreSQLParser.KW_CSV - 171)) | (1 << (PostgreSQLParser.KW_CURSOR - 171)) | (1 << (PostgreSQLParser.KW_CYCLE - 171)) | (1 << (PostgreSQLParser.KW_DATA - 171)) | (1 << (PostgreSQLParser.KW_DATABASE - 171)) | (1 << (PostgreSQLParser.KW_DAY - 171)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 171)) | (1 << (PostgreSQLParser.KW_DECLARE - 171)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 171)) | (1 << (PostgreSQLParser.KW_DEFERRED - 171)) | (1 << (PostgreSQLParser.KW_DEFINER - 171)) | (1 << (PostgreSQLParser.KW_DELETE - 171)) | (1 << (PostgreSQLParser.KW_DELIMITER - 171)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 171)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 171)) | (1 << (PostgreSQLParser.KW_DISABLE - 171)) | (1 << (PostgreSQLParser.KW_DISCARD - 171)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 171)) | (1 << (PostgreSQLParser.KW_DOMAIN - 171)) | (1 << (PostgreSQLParser.KW_DOUBLE - 171)) | (1 << (PostgreSQLParser.KW_DROP - 171)) | (1 << (PostgreSQLParser.KW_EACH - 171)) | (1 << (PostgreSQLParser.KW_ENABLE - 171)) | (1 << (PostgreSQLParser.KW_ENCODING - 171)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 171)) | (1 << (PostgreSQLParser.KW_ENUM - 171)) | (1 << (PostgreSQLParser.KW_ESCAPE - 171)) | (1 << (PostgreSQLParser.KW_EVENT - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 171)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 171)) | (1 << (PostgreSQLParser.KW_EXECUTE - 171)))) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & ((1 << (PostgreSQLParser.KW_EXPLAIN - 203)) | (1 << (PostgreSQLParser.KW_EXTENSION - 203)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 203)) | (1 << (PostgreSQLParser.KW_FAMILY - 203)) | (1 << (PostgreSQLParser.KW_FIRST - 203)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 203)) | (1 << (PostgreSQLParser.KW_FORCE - 203)) | (1 << (PostgreSQLParser.KW_FORWARD - 203)) | (1 << (PostgreSQLParser.KW_FUNCTION - 203)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 203)) | (1 << (PostgreSQLParser.KW_GLOBAL - 203)) | (1 << (PostgreSQLParser.KW_GRANTED - 203)) | (1 << (PostgreSQLParser.KW_HANDLER - 203)) | (1 << (PostgreSQLParser.KW_HEADER - 203)) | (1 << (PostgreSQLParser.KW_HOLD - 203)) | (1 << (PostgreSQLParser.KW_HOUR - 203)) | (1 << (PostgreSQLParser.KW_IDENTITY - 203)) | (1 << (PostgreSQLParser.KW_IF - 203)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 203)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 203)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 203)) | (1 << (PostgreSQLParser.KW_INCLUDING - 203)) | (1 << (PostgreSQLParser.KW_INCREMENT - 203)) | (1 << (PostgreSQLParser.KW_INDEX - 203)) | (1 << (PostgreSQLParser.KW_INDEXES - 203)) | (1 << (PostgreSQLParser.KW_INHERIT - 203)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (PostgreSQLParser.KW_INHERITS - 238)) | (1 << (PostgreSQLParser.KW_INLINE - 238)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 238)) | (1 << (PostgreSQLParser.KW_INSERT - 238)) | (1 << (PostgreSQLParser.KW_INSTEAD - 238)) | (1 << (PostgreSQLParser.KW_INVOKER - 238)) | (1 << (PostgreSQLParser.KW_ISOLATION - 238)) | (1 << (PostgreSQLParser.KW_KEY - 238)) | (1 << (PostgreSQLParser.KW_LABEL - 238)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 238)) | (1 << (PostgreSQLParser.KW_LARGE - 238)) | (1 << (PostgreSQLParser.KW_LAST - 238)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 238)) | (1 << (PostgreSQLParser.KW_LEVEL - 238)) | (1 << (PostgreSQLParser.KW_LISTEN - 238)) | (1 << (PostgreSQLParser.KW_LOAD - 238)) | (1 << (PostgreSQLParser.KW_LOCAL - 238)) | (1 << (PostgreSQLParser.KW_LOCATION - 238)) | (1 << (PostgreSQLParser.KW_LOCK - 238)) | (1 << (PostgreSQLParser.KW_MAPPING - 238)) | (1 << (PostgreSQLParser.KW_MATCH - 238)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 238)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 238)) | (1 << (PostgreSQLParser.KW_MINUTE - 238)) | (1 << (PostgreSQLParser.KW_MINVALUE - 238)) | (1 << (PostgreSQLParser.KW_MODE - 238)) | (1 << (PostgreSQLParser.KW_MONTH - 238)) | (1 << (PostgreSQLParser.KW_MOVE - 238)) | (1 << (PostgreSQLParser.KW_NAME - 238)) | (1 << (PostgreSQLParser.KW_NAMES - 238)) | (1 << (PostgreSQLParser.KW_NEXT - 238)) | (1 << (PostgreSQLParser.KW_NO - 238)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (PostgreSQLParser.KW_NOTHING - 270)) | (1 << (PostgreSQLParser.KW_NOTIFY - 270)) | (1 << (PostgreSQLParser.KW_NOWAIT - 270)) | (1 << (PostgreSQLParser.KW_NULLS - 270)) | (1 << (PostgreSQLParser.KW_OBJECT - 270)) | (1 << (PostgreSQLParser.KW_OF - 270)) | (1 << (PostgreSQLParser.KW_OFF - 270)) | (1 << (PostgreSQLParser.KW_OIDS - 270)) | (1 << (PostgreSQLParser.KW_OPERATOR - 270)) | (1 << (PostgreSQLParser.KW_OPTION - 270)) | (1 << (PostgreSQLParser.KW_OPTIONS - 270)) | (1 << (PostgreSQLParser.KW_OWNED - 270)) | (1 << (PostgreSQLParser.KW_OWNER - 270)) | (1 << (PostgreSQLParser.KW_PARSER - 270)) | (1 << (PostgreSQLParser.KW_PARTIAL - 270)) | (1 << (PostgreSQLParser.KW_PARTITION - 270)) | (1 << (PostgreSQLParser.KW_PASSING - 270)) | (1 << (PostgreSQLParser.KW_PASSWORD - 270)) | (1 << (PostgreSQLParser.KW_PLANS - 270)) | (1 << (PostgreSQLParser.KW_PRECEDING - 270)) | (1 << (PostgreSQLParser.KW_PREPARE - 270)) | (1 << (PostgreSQLParser.KW_PREPARED - 270)) | (1 << (PostgreSQLParser.KW_PRESERVE - 270)) | (1 << (PostgreSQLParser.KW_PRIOR - 270)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 270)) | (1 << (PostgreSQLParser.KW_PROGRAM - 270)) | (1 << (PostgreSQLParser.KW_QUOTE - 270)) | (1 << (PostgreSQLParser.KW_RANGE - 270)) | (1 << (PostgreSQLParser.KW_READ - 270)) | (1 << (PostgreSQLParser.KW_REASSIGN - 270)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (PostgreSQLParser.KW_RECHECK - 302)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 302)) | (1 << (PostgreSQLParser.KW_REF - 302)) | (1 << (PostgreSQLParser.KW_REFRESH - 302)) | (1 << (PostgreSQLParser.KW_REINDEX - 302)) | (1 << (PostgreSQLParser.KW_RELATIVE - 302)) | (1 << (PostgreSQLParser.KW_RELEASE - 302)) | (1 << (PostgreSQLParser.KW_RENAME - 302)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 302)) | (1 << (PostgreSQLParser.KW_REPLACE - 302)) | (1 << (PostgreSQLParser.KW_REPLICA - 302)) | (1 << (PostgreSQLParser.KW_RESET - 302)) | (1 << (PostgreSQLParser.KW_RESTART - 302)) | (1 << (PostgreSQLParser.KW_RESTRICT - 302)) | (1 << (PostgreSQLParser.KW_RETURNS - 302)) | (1 << (PostgreSQLParser.KW_REVOKE - 302)) | (1 << (PostgreSQLParser.KW_ROLE - 302)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 302)) | (1 << (PostgreSQLParser.KW_ROWS - 302)) | (1 << (PostgreSQLParser.KW_RULE - 302)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 302)) | (1 << (PostgreSQLParser.KW_SCHEMA - 302)) | (1 << (PostgreSQLParser.KW_SCROLL - 302)) | (1 << (PostgreSQLParser.KW_SEARCH - 302)) | (1 << (PostgreSQLParser.KW_SECOND - 302)) | (1 << (PostgreSQLParser.KW_SECURITY - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 302)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 302)) | (1 << (PostgreSQLParser.KW_SERVER - 302)) | (1 << (PostgreSQLParser.KW_SESSION - 302)) | (1 << (PostgreSQLParser.KW_SET - 302)))) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & ((1 << (PostgreSQLParser.KW_SHARE - 334)) | (1 << (PostgreSQLParser.KW_SHOW - 334)) | (1 << (PostgreSQLParser.KW_SIMPLE - 334)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 334)) | (1 << (PostgreSQLParser.KW_STABLE - 334)) | (1 << (PostgreSQLParser.KW_STANDALONE - 334)) | (1 << (PostgreSQLParser.KW_START - 334)) | (1 << (PostgreSQLParser.KW_STATEMENT - 334)) | (1 << (PostgreSQLParser.KW_STATISTICS - 334)) | (1 << (PostgreSQLParser.KW_STDIN - 334)) | (1 << (PostgreSQLParser.KW_STDOUT - 334)) | (1 << (PostgreSQLParser.KW_STORAGE - 334)) | (1 << (PostgreSQLParser.KW_STRICT - 334)) | (1 << (PostgreSQLParser.KW_STRIP - 334)) | (1 << (PostgreSQLParser.KW_SYSID - 334)) | (1 << (PostgreSQLParser.KW_SYSTEM - 334)) | (1 << (PostgreSQLParser.KW_TABLES - 334)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 334)) | (1 << (PostgreSQLParser.KW_TEMP - 334)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 334)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 334)) | (1 << (PostgreSQLParser.KW_TEXT - 334)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 334)) | (1 << (PostgreSQLParser.KW_TRIGGER - 334)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 334)) | (1 << (PostgreSQLParser.KW_TRUSTED - 334)) | (1 << (PostgreSQLParser.KW_TYPE - 334)) | (1 << (PostgreSQLParser.KW_TYPES - 334)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 334)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 334)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 334)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 334)))) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & ((1 << (PostgreSQLParser.KW_UNLISTEN - 366)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 366)) | (1 << (PostgreSQLParser.KW_UNTIL - 366)) | (1 << (PostgreSQLParser.KW_UPDATE - 366)) | (1 << (PostgreSQLParser.KW_VACUUM - 366)) | (1 << (PostgreSQLParser.KW_VALID - 366)) | (1 << (PostgreSQLParser.KW_VALIDATE - 366)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 366)) | (1 << (PostgreSQLParser.KW_VARYING - 366)) | (1 << (PostgreSQLParser.KW_VERSION - 366)) | (1 << (PostgreSQLParser.KW_VIEW - 366)) | (1 << (PostgreSQLParser.KW_VOLATILE - 366)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 366)) | (1 << (PostgreSQLParser.KW_WITHOUT - 366)) | (1 << (PostgreSQLParser.KW_WORK - 366)) | (1 << (PostgreSQLParser.KW_WRAPPER - 366)) | (1 << (PostgreSQLParser.KW_WRITE - 366)) | (1 << (PostgreSQLParser.KW_XML - 366)) | (1 << (PostgreSQLParser.KW_YEAR - 366)) | (1 << (PostgreSQLParser.KW_YES - 366)) | (1 << (PostgreSQLParser.KW_ZONE - 366)) | (1 << (PostgreSQLParser.KW_BETWEEN - 366)) | (1 << (PostgreSQLParser.KW_BIGINT - 366)) | (1 << (PostgreSQLParser.KW_BIT - 366)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 366)) | (1 << (PostgreSQLParser.KW_CHAR - 366)) | (1 << (PostgreSQLParser.KW_CHARACTER - 366)) | (1 << (PostgreSQLParser.KW_COALESCE - 366)) | (1 << (PostgreSQLParser.KW_DEC - 366)) | (1 << (PostgreSQLParser.KW_DECIMAL - 366)) | (1 << (PostgreSQLParser.KW_EXISTS - 366)) | (1 << (PostgreSQLParser.KW_EXTRACT - 366)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PostgreSQLParser.KW_FLOAT - 398)) | (1 << (PostgreSQLParser.KW_GREATEST - 398)) | (1 << (PostgreSQLParser.KW_INOUT - 398)) | (1 << (PostgreSQLParser.KW_INT - 398)) | (1 << (PostgreSQLParser.KW_INTEGER - 398)) | (1 << (PostgreSQLParser.KW_INTERVAL - 398)) | (1 << (PostgreSQLParser.KW_LEAST - 398)) | (1 << (PostgreSQLParser.KW_NATIONAL - 398)) | (1 << (PostgreSQLParser.KW_NCHAR - 398)) | (1 << (PostgreSQLParser.KW_NONE - 398)) | (1 << (PostgreSQLParser.KW_NULLIF - 398)) | (1 << (PostgreSQLParser.KW_NUMERIC - 398)) | (1 << (PostgreSQLParser.KW_OVERLAY - 398)) | (1 << (PostgreSQLParser.KW_POSITION - 398)) | (1 << (PostgreSQLParser.KW_PRECISION - 398)) | (1 << (PostgreSQLParser.KW_REAL - 398)) | (1 << (PostgreSQLParser.KW_ROW - 398)) | (1 << (PostgreSQLParser.KW_SETOF - 398)) | (1 << (PostgreSQLParser.KW_SMALLINT - 398)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 398)) | (1 << (PostgreSQLParser.KW_TIME - 398)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 398)) | (1 << (PostgreSQLParser.KW_TREAT - 398)) | (1 << (PostgreSQLParser.KW_TRIM - 398)) | (1 << (PostgreSQLParser.KW_VALUES - 398)) | (1 << (PostgreSQLParser.KW_VARCHAR - 398)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 398)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 398)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 398)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 398)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 398)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 398)))) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & ((1 << (PostgreSQLParser.KW_XMLPI - 430)) | (1 << (PostgreSQLParser.KW_XMLROOT - 430)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 430)) | (1 << (PostgreSQLParser.KW_CALL - 430)) | (1 << (PostgreSQLParser.KW_CURRENT - 430)) | (1 << (PostgreSQLParser.KW_ATTACH - 430)) | (1 << (PostgreSQLParser.KW_DETACH - 430)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 430)) | (1 << (PostgreSQLParser.KW_GENERATED - 430)) | (1 << (PostgreSQLParser.KW_LOGGED - 430)) | (1 << (PostgreSQLParser.KW_STORED - 430)) | (1 << (PostgreSQLParser.KW_INCLUDE - 430)) | (1 << (PostgreSQLParser.KW_ROUTINE - 430)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 430)) | (1 << (PostgreSQLParser.KW_IMPORT - 430)) | (1 << (PostgreSQLParser.KW_POLICY - 430)) | (1 << (PostgreSQLParser.KW_METHOD - 430)) | (1 << (PostgreSQLParser.KW_REFERENCING - 430)) | (1 << (PostgreSQLParser.KW_NEW - 430)) | (1 << (PostgreSQLParser.KW_OLD - 430)) | (1 << (PostgreSQLParser.KW_VALUE - 430)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 430)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 430)) | (1 << (PostgreSQLParser.KW_OUT - 430)) | (1 << (PostgreSQLParser.KW_ROUTINES - 430)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 430)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 430)) | (1 << (PostgreSQLParser.KW_INPUT - 430)) | (1 << (PostgreSQLParser.KW_SUPPORT - 430)) | (1 << (PostgreSQLParser.KW_PARALLEL - 430)) | (1 << (PostgreSQLParser.KW_SQL - 430)))) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & ((1 << (PostgreSQLParser.KW_DEPENDS - 462)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 462)) | (1 << (PostgreSQLParser.KW_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_SKIP - 462)) | (1 << (PostgreSQLParser.KW_LOCKED - 462)) | (1 << (PostgreSQLParser.KW_TIES - 462)) | (1 << (PostgreSQLParser.KW_ROLLUP - 462)) | (1 << (PostgreSQLParser.KW_CUBE - 462)) | (1 << (PostgreSQLParser.KW_GROUPING - 462)) | (1 << (PostgreSQLParser.KW_SETS - 462)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 462)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 462)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 462)) | (1 << (PostgreSQLParser.KW_COLUMNS - 462)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 462)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 462)) | (1 << (PostgreSQLParser.KW_WITHIN - 462)) | (1 << (PostgreSQLParser.KW_FILTER - 462)) | (1 << (PostgreSQLParser.KW_GROUPS - 462)) | (1 << (PostgreSQLParser.KW_OTHERS - 462)) | (1 << (PostgreSQLParser.KW_NFC - 462)) | (1 << (PostgreSQLParser.KW_NFD - 462)) | (1 << (PostgreSQLParser.KW_NFKC - 462)) | (1 << (PostgreSQLParser.KW_NFKD - 462)) | (1 << (PostgreSQLParser.KW_UESCAPE - 462)) | (1 << (PostgreSQLParser.KW_VIEWS - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 462)) | (1 << (PostgreSQLParser.KW_DUMP - 462)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 462)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_ERROR - 462)))) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (PostgreSQLParser.KW_USE_VARIABLE - 494)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 494)) | (1 << (PostgreSQLParser.KW_ALIAS - 494)) | (1 << (PostgreSQLParser.KW_CONSTANT - 494)) | (1 << (PostgreSQLParser.KW_PERFORM - 494)) | (1 << (PostgreSQLParser.KW_GET - 494)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 494)) | (1 << (PostgreSQLParser.KW_STACKED - 494)) | (1 << (PostgreSQLParser.KW_ELSIF - 494)) | (1 << (PostgreSQLParser.KW_REVERSE - 494)) | (1 << (PostgreSQLParser.KW_SLICE - 494)) | (1 << (PostgreSQLParser.KW_EXIT - 494)) | (1 << (PostgreSQLParser.KW_RETURN - 494)) | (1 << (PostgreSQLParser.KW_QUERY - 494)) | (1 << (PostgreSQLParser.KW_RAISE - 494)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 494)) | (1 << (PostgreSQLParser.KW_DEBUG - 494)) | (1 << (PostgreSQLParser.KW_LOG - 494)) | (1 << (PostgreSQLParser.KW_INFO - 494)) | (1 << (PostgreSQLParser.KW_NOTICE - 494)) | (1 << (PostgreSQLParser.KW_WARNING - 494)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 494)) | (1 << (PostgreSQLParser.KW_ASSERT - 494)) | (1 << (PostgreSQLParser.KW_OPEN - 494)) | (1 << (PostgreSQLParser.Identifier - 494)))) !== 0) || ((((_la - 526)) & ~0x1F) === 0 && ((1 << (_la - 526)) & ((1 << (PostgreSQLParser.QuotedIdentifier - 526)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 526)) | (1 << (PostgreSQLParser.StringConstant - 526)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 526)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 526)) | (1 << (PostgreSQLParser.BinaryStringConstant - 526)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 526)) | (1 << (PostgreSQLParser.Integral - 526)) | (1 << (PostgreSQLParser.Numeric - 526)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 526)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 526)))) !== 0) || _la === PostgreSQLParser.EscapeStringConstant) {
						{
						this.state = 10049;
						this.opt_slice_bound();
						}
					}

					this.state = 10052;
					this.match(PostgreSQLParser.COLON);
					this.state = 10054;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_CASE - 33)) | (1 << (PostgreSQLParser.KW_CAST - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_CATALOG - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_DATE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_ROLE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIME - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIMESTAMP - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_USER - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FALSE - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (PostgreSQLParser.KW_LOCALTIME - 75)) | (1 << (PostgreSQLParser.KW_LOCALTIMESTAMP - 75)) | (1 << (PostgreSQLParser.KW_NOT - 75)) | (1 << (PostgreSQLParser.KW_NULL - 75)) | (1 << (PostgreSQLParser.KW_SESSION_USER - 75)) | (1 << (PostgreSQLParser.KW_TABLE - 75)) | (1 << (PostgreSQLParser.KW_TRUE - 75)) | (1 << (PostgreSQLParser.KW_UNIQUE - 75)) | (1 << (PostgreSQLParser.KW_USER - 75)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 75)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (PostgreSQLParser.KW_BINARY - 107)) | (1 << (PostgreSQLParser.KW_COLLATION - 107)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 107)) | (1 << (PostgreSQLParser.KW_CROSS - 107)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 107)) | (1 << (PostgreSQLParser.KW_FREEZE - 107)) | (1 << (PostgreSQLParser.KW_FULL - 107)) | (1 << (PostgreSQLParser.KW_ILIKE - 107)) | (1 << (PostgreSQLParser.KW_INNER - 107)) | (1 << (PostgreSQLParser.KW_IS - 107)) | (1 << (PostgreSQLParser.KW_ISNULL - 107)) | (1 << (PostgreSQLParser.KW_JOIN - 107)) | (1 << (PostgreSQLParser.KW_LEFT - 107)) | (1 << (PostgreSQLParser.KW_LIKE - 107)) | (1 << (PostgreSQLParser.KW_NATURAL - 107)) | (1 << (PostgreSQLParser.KW_NOTNULL - 107)) | (1 << (PostgreSQLParser.KW_OUTER - 107)) | (1 << (PostgreSQLParser.KW_OVER - 107)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 107)) | (1 << (PostgreSQLParser.KW_RIGHT - 107)) | (1 << (PostgreSQLParser.KW_SIMILAR - 107)) | (1 << (PostgreSQLParser.KW_VERBOSE - 107)) | (1 << (PostgreSQLParser.KW_ABORT - 107)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 107)) | (1 << (PostgreSQLParser.KW_ACCESS - 107)) | (1 << (PostgreSQLParser.KW_ACTION - 107)) | (1 << (PostgreSQLParser.KW_ADD - 107)) | (1 << (PostgreSQLParser.KW_ADMIN - 107)) | (1 << (PostgreSQLParser.KW_AFTER - 107)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 107)) | (1 << (PostgreSQLParser.KW_ALSO - 107)) | (1 << (PostgreSQLParser.KW_ALTER - 107)))) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (PostgreSQLParser.KW_ALWAYS - 139)) | (1 << (PostgreSQLParser.KW_ASSERTION - 139)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 139)) | (1 << (PostgreSQLParser.KW_AT - 139)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 139)) | (1 << (PostgreSQLParser.KW_BACKWARD - 139)) | (1 << (PostgreSQLParser.KW_BEFORE - 139)) | (1 << (PostgreSQLParser.KW_BEGIN - 139)) | (1 << (PostgreSQLParser.KW_BY - 139)) | (1 << (PostgreSQLParser.KW_CACHE - 139)) | (1 << (PostgreSQLParser.KW_CALLED - 139)) | (1 << (PostgreSQLParser.KW_CASCADE - 139)) | (1 << (PostgreSQLParser.KW_CASCADED - 139)) | (1 << (PostgreSQLParser.KW_CATALOG - 139)) | (1 << (PostgreSQLParser.KW_CHAIN - 139)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 139)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 139)) | (1 << (PostgreSQLParser.KW_CLASS - 139)) | (1 << (PostgreSQLParser.KW_CLOSE - 139)) | (1 << (PostgreSQLParser.KW_CLUSTER - 139)) | (1 << (PostgreSQLParser.KW_COMMENT - 139)) | (1 << (PostgreSQLParser.KW_COMMENTS - 139)) | (1 << (PostgreSQLParser.KW_COMMIT - 139)) | (1 << (PostgreSQLParser.KW_COMMITTED - 139)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 139)) | (1 << (PostgreSQLParser.KW_CONNECTION - 139)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 139)) | (1 << (PostgreSQLParser.KW_CONTENT - 139)) | (1 << (PostgreSQLParser.KW_CONTINUE - 139)) | (1 << (PostgreSQLParser.KW_CONVERSION - 139)) | (1 << (PostgreSQLParser.KW_COPY - 139)) | (1 << (PostgreSQLParser.KW_COST - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (PostgreSQLParser.KW_CSV - 171)) | (1 << (PostgreSQLParser.KW_CURSOR - 171)) | (1 << (PostgreSQLParser.KW_CYCLE - 171)) | (1 << (PostgreSQLParser.KW_DATA - 171)) | (1 << (PostgreSQLParser.KW_DATABASE - 171)) | (1 << (PostgreSQLParser.KW_DAY - 171)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 171)) | (1 << (PostgreSQLParser.KW_DECLARE - 171)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 171)) | (1 << (PostgreSQLParser.KW_DEFERRED - 171)) | (1 << (PostgreSQLParser.KW_DEFINER - 171)) | (1 << (PostgreSQLParser.KW_DELETE - 171)) | (1 << (PostgreSQLParser.KW_DELIMITER - 171)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 171)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 171)) | (1 << (PostgreSQLParser.KW_DISABLE - 171)) | (1 << (PostgreSQLParser.KW_DISCARD - 171)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 171)) | (1 << (PostgreSQLParser.KW_DOMAIN - 171)) | (1 << (PostgreSQLParser.KW_DOUBLE - 171)) | (1 << (PostgreSQLParser.KW_DROP - 171)) | (1 << (PostgreSQLParser.KW_EACH - 171)) | (1 << (PostgreSQLParser.KW_ENABLE - 171)) | (1 << (PostgreSQLParser.KW_ENCODING - 171)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 171)) | (1 << (PostgreSQLParser.KW_ENUM - 171)) | (1 << (PostgreSQLParser.KW_ESCAPE - 171)) | (1 << (PostgreSQLParser.KW_EVENT - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 171)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 171)) | (1 << (PostgreSQLParser.KW_EXECUTE - 171)))) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & ((1 << (PostgreSQLParser.KW_EXPLAIN - 203)) | (1 << (PostgreSQLParser.KW_EXTENSION - 203)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 203)) | (1 << (PostgreSQLParser.KW_FAMILY - 203)) | (1 << (PostgreSQLParser.KW_FIRST - 203)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 203)) | (1 << (PostgreSQLParser.KW_FORCE - 203)) | (1 << (PostgreSQLParser.KW_FORWARD - 203)) | (1 << (PostgreSQLParser.KW_FUNCTION - 203)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 203)) | (1 << (PostgreSQLParser.KW_GLOBAL - 203)) | (1 << (PostgreSQLParser.KW_GRANTED - 203)) | (1 << (PostgreSQLParser.KW_HANDLER - 203)) | (1 << (PostgreSQLParser.KW_HEADER - 203)) | (1 << (PostgreSQLParser.KW_HOLD - 203)) | (1 << (PostgreSQLParser.KW_HOUR - 203)) | (1 << (PostgreSQLParser.KW_IDENTITY - 203)) | (1 << (PostgreSQLParser.KW_IF - 203)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 203)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 203)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 203)) | (1 << (PostgreSQLParser.KW_INCLUDING - 203)) | (1 << (PostgreSQLParser.KW_INCREMENT - 203)) | (1 << (PostgreSQLParser.KW_INDEX - 203)) | (1 << (PostgreSQLParser.KW_INDEXES - 203)) | (1 << (PostgreSQLParser.KW_INHERIT - 203)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (PostgreSQLParser.KW_INHERITS - 238)) | (1 << (PostgreSQLParser.KW_INLINE - 238)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 238)) | (1 << (PostgreSQLParser.KW_INSERT - 238)) | (1 << (PostgreSQLParser.KW_INSTEAD - 238)) | (1 << (PostgreSQLParser.KW_INVOKER - 238)) | (1 << (PostgreSQLParser.KW_ISOLATION - 238)) | (1 << (PostgreSQLParser.KW_KEY - 238)) | (1 << (PostgreSQLParser.KW_LABEL - 238)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 238)) | (1 << (PostgreSQLParser.KW_LARGE - 238)) | (1 << (PostgreSQLParser.KW_LAST - 238)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 238)) | (1 << (PostgreSQLParser.KW_LEVEL - 238)) | (1 << (PostgreSQLParser.KW_LISTEN - 238)) | (1 << (PostgreSQLParser.KW_LOAD - 238)) | (1 << (PostgreSQLParser.KW_LOCAL - 238)) | (1 << (PostgreSQLParser.KW_LOCATION - 238)) | (1 << (PostgreSQLParser.KW_LOCK - 238)) | (1 << (PostgreSQLParser.KW_MAPPING - 238)) | (1 << (PostgreSQLParser.KW_MATCH - 238)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 238)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 238)) | (1 << (PostgreSQLParser.KW_MINUTE - 238)) | (1 << (PostgreSQLParser.KW_MINVALUE - 238)) | (1 << (PostgreSQLParser.KW_MODE - 238)) | (1 << (PostgreSQLParser.KW_MONTH - 238)) | (1 << (PostgreSQLParser.KW_MOVE - 238)) | (1 << (PostgreSQLParser.KW_NAME - 238)) | (1 << (PostgreSQLParser.KW_NAMES - 238)) | (1 << (PostgreSQLParser.KW_NEXT - 238)) | (1 << (PostgreSQLParser.KW_NO - 238)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (PostgreSQLParser.KW_NOTHING - 270)) | (1 << (PostgreSQLParser.KW_NOTIFY - 270)) | (1 << (PostgreSQLParser.KW_NOWAIT - 270)) | (1 << (PostgreSQLParser.KW_NULLS - 270)) | (1 << (PostgreSQLParser.KW_OBJECT - 270)) | (1 << (PostgreSQLParser.KW_OF - 270)) | (1 << (PostgreSQLParser.KW_OFF - 270)) | (1 << (PostgreSQLParser.KW_OIDS - 270)) | (1 << (PostgreSQLParser.KW_OPERATOR - 270)) | (1 << (PostgreSQLParser.KW_OPTION - 270)) | (1 << (PostgreSQLParser.KW_OPTIONS - 270)) | (1 << (PostgreSQLParser.KW_OWNED - 270)) | (1 << (PostgreSQLParser.KW_OWNER - 270)) | (1 << (PostgreSQLParser.KW_PARSER - 270)) | (1 << (PostgreSQLParser.KW_PARTIAL - 270)) | (1 << (PostgreSQLParser.KW_PARTITION - 270)) | (1 << (PostgreSQLParser.KW_PASSING - 270)) | (1 << (PostgreSQLParser.KW_PASSWORD - 270)) | (1 << (PostgreSQLParser.KW_PLANS - 270)) | (1 << (PostgreSQLParser.KW_PRECEDING - 270)) | (1 << (PostgreSQLParser.KW_PREPARE - 270)) | (1 << (PostgreSQLParser.KW_PREPARED - 270)) | (1 << (PostgreSQLParser.KW_PRESERVE - 270)) | (1 << (PostgreSQLParser.KW_PRIOR - 270)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 270)) | (1 << (PostgreSQLParser.KW_PROGRAM - 270)) | (1 << (PostgreSQLParser.KW_QUOTE - 270)) | (1 << (PostgreSQLParser.KW_RANGE - 270)) | (1 << (PostgreSQLParser.KW_READ - 270)) | (1 << (PostgreSQLParser.KW_REASSIGN - 270)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (PostgreSQLParser.KW_RECHECK - 302)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 302)) | (1 << (PostgreSQLParser.KW_REF - 302)) | (1 << (PostgreSQLParser.KW_REFRESH - 302)) | (1 << (PostgreSQLParser.KW_REINDEX - 302)) | (1 << (PostgreSQLParser.KW_RELATIVE - 302)) | (1 << (PostgreSQLParser.KW_RELEASE - 302)) | (1 << (PostgreSQLParser.KW_RENAME - 302)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 302)) | (1 << (PostgreSQLParser.KW_REPLACE - 302)) | (1 << (PostgreSQLParser.KW_REPLICA - 302)) | (1 << (PostgreSQLParser.KW_RESET - 302)) | (1 << (PostgreSQLParser.KW_RESTART - 302)) | (1 << (PostgreSQLParser.KW_RESTRICT - 302)) | (1 << (PostgreSQLParser.KW_RETURNS - 302)) | (1 << (PostgreSQLParser.KW_REVOKE - 302)) | (1 << (PostgreSQLParser.KW_ROLE - 302)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 302)) | (1 << (PostgreSQLParser.KW_ROWS - 302)) | (1 << (PostgreSQLParser.KW_RULE - 302)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 302)) | (1 << (PostgreSQLParser.KW_SCHEMA - 302)) | (1 << (PostgreSQLParser.KW_SCROLL - 302)) | (1 << (PostgreSQLParser.KW_SEARCH - 302)) | (1 << (PostgreSQLParser.KW_SECOND - 302)) | (1 << (PostgreSQLParser.KW_SECURITY - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 302)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 302)) | (1 << (PostgreSQLParser.KW_SERVER - 302)) | (1 << (PostgreSQLParser.KW_SESSION - 302)) | (1 << (PostgreSQLParser.KW_SET - 302)))) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & ((1 << (PostgreSQLParser.KW_SHARE - 334)) | (1 << (PostgreSQLParser.KW_SHOW - 334)) | (1 << (PostgreSQLParser.KW_SIMPLE - 334)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 334)) | (1 << (PostgreSQLParser.KW_STABLE - 334)) | (1 << (PostgreSQLParser.KW_STANDALONE - 334)) | (1 << (PostgreSQLParser.KW_START - 334)) | (1 << (PostgreSQLParser.KW_STATEMENT - 334)) | (1 << (PostgreSQLParser.KW_STATISTICS - 334)) | (1 << (PostgreSQLParser.KW_STDIN - 334)) | (1 << (PostgreSQLParser.KW_STDOUT - 334)) | (1 << (PostgreSQLParser.KW_STORAGE - 334)) | (1 << (PostgreSQLParser.KW_STRICT - 334)) | (1 << (PostgreSQLParser.KW_STRIP - 334)) | (1 << (PostgreSQLParser.KW_SYSID - 334)) | (1 << (PostgreSQLParser.KW_SYSTEM - 334)) | (1 << (PostgreSQLParser.KW_TABLES - 334)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 334)) | (1 << (PostgreSQLParser.KW_TEMP - 334)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 334)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 334)) | (1 << (PostgreSQLParser.KW_TEXT - 334)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 334)) | (1 << (PostgreSQLParser.KW_TRIGGER - 334)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 334)) | (1 << (PostgreSQLParser.KW_TRUSTED - 334)) | (1 << (PostgreSQLParser.KW_TYPE - 334)) | (1 << (PostgreSQLParser.KW_TYPES - 334)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 334)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 334)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 334)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 334)))) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & ((1 << (PostgreSQLParser.KW_UNLISTEN - 366)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 366)) | (1 << (PostgreSQLParser.KW_UNTIL - 366)) | (1 << (PostgreSQLParser.KW_UPDATE - 366)) | (1 << (PostgreSQLParser.KW_VACUUM - 366)) | (1 << (PostgreSQLParser.KW_VALID - 366)) | (1 << (PostgreSQLParser.KW_VALIDATE - 366)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 366)) | (1 << (PostgreSQLParser.KW_VARYING - 366)) | (1 << (PostgreSQLParser.KW_VERSION - 366)) | (1 << (PostgreSQLParser.KW_VIEW - 366)) | (1 << (PostgreSQLParser.KW_VOLATILE - 366)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 366)) | (1 << (PostgreSQLParser.KW_WITHOUT - 366)) | (1 << (PostgreSQLParser.KW_WORK - 366)) | (1 << (PostgreSQLParser.KW_WRAPPER - 366)) | (1 << (PostgreSQLParser.KW_WRITE - 366)) | (1 << (PostgreSQLParser.KW_XML - 366)) | (1 << (PostgreSQLParser.KW_YEAR - 366)) | (1 << (PostgreSQLParser.KW_YES - 366)) | (1 << (PostgreSQLParser.KW_ZONE - 366)) | (1 << (PostgreSQLParser.KW_BETWEEN - 366)) | (1 << (PostgreSQLParser.KW_BIGINT - 366)) | (1 << (PostgreSQLParser.KW_BIT - 366)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 366)) | (1 << (PostgreSQLParser.KW_CHAR - 366)) | (1 << (PostgreSQLParser.KW_CHARACTER - 366)) | (1 << (PostgreSQLParser.KW_COALESCE - 366)) | (1 << (PostgreSQLParser.KW_DEC - 366)) | (1 << (PostgreSQLParser.KW_DECIMAL - 366)) | (1 << (PostgreSQLParser.KW_EXISTS - 366)) | (1 << (PostgreSQLParser.KW_EXTRACT - 366)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PostgreSQLParser.KW_FLOAT - 398)) | (1 << (PostgreSQLParser.KW_GREATEST - 398)) | (1 << (PostgreSQLParser.KW_INOUT - 398)) | (1 << (PostgreSQLParser.KW_INT - 398)) | (1 << (PostgreSQLParser.KW_INTEGER - 398)) | (1 << (PostgreSQLParser.KW_INTERVAL - 398)) | (1 << (PostgreSQLParser.KW_LEAST - 398)) | (1 << (PostgreSQLParser.KW_NATIONAL - 398)) | (1 << (PostgreSQLParser.KW_NCHAR - 398)) | (1 << (PostgreSQLParser.KW_NONE - 398)) | (1 << (PostgreSQLParser.KW_NULLIF - 398)) | (1 << (PostgreSQLParser.KW_NUMERIC - 398)) | (1 << (PostgreSQLParser.KW_OVERLAY - 398)) | (1 << (PostgreSQLParser.KW_POSITION - 398)) | (1 << (PostgreSQLParser.KW_PRECISION - 398)) | (1 << (PostgreSQLParser.KW_REAL - 398)) | (1 << (PostgreSQLParser.KW_ROW - 398)) | (1 << (PostgreSQLParser.KW_SETOF - 398)) | (1 << (PostgreSQLParser.KW_SMALLINT - 398)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 398)) | (1 << (PostgreSQLParser.KW_TIME - 398)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 398)) | (1 << (PostgreSQLParser.KW_TREAT - 398)) | (1 << (PostgreSQLParser.KW_TRIM - 398)) | (1 << (PostgreSQLParser.KW_VALUES - 398)) | (1 << (PostgreSQLParser.KW_VARCHAR - 398)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 398)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 398)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 398)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 398)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 398)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 398)))) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & ((1 << (PostgreSQLParser.KW_XMLPI - 430)) | (1 << (PostgreSQLParser.KW_XMLROOT - 430)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 430)) | (1 << (PostgreSQLParser.KW_CALL - 430)) | (1 << (PostgreSQLParser.KW_CURRENT - 430)) | (1 << (PostgreSQLParser.KW_ATTACH - 430)) | (1 << (PostgreSQLParser.KW_DETACH - 430)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 430)) | (1 << (PostgreSQLParser.KW_GENERATED - 430)) | (1 << (PostgreSQLParser.KW_LOGGED - 430)) | (1 << (PostgreSQLParser.KW_STORED - 430)) | (1 << (PostgreSQLParser.KW_INCLUDE - 430)) | (1 << (PostgreSQLParser.KW_ROUTINE - 430)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 430)) | (1 << (PostgreSQLParser.KW_IMPORT - 430)) | (1 << (PostgreSQLParser.KW_POLICY - 430)) | (1 << (PostgreSQLParser.KW_METHOD - 430)) | (1 << (PostgreSQLParser.KW_REFERENCING - 430)) | (1 << (PostgreSQLParser.KW_NEW - 430)) | (1 << (PostgreSQLParser.KW_OLD - 430)) | (1 << (PostgreSQLParser.KW_VALUE - 430)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 430)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 430)) | (1 << (PostgreSQLParser.KW_OUT - 430)) | (1 << (PostgreSQLParser.KW_ROUTINES - 430)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 430)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 430)) | (1 << (PostgreSQLParser.KW_INPUT - 430)) | (1 << (PostgreSQLParser.KW_SUPPORT - 430)) | (1 << (PostgreSQLParser.KW_PARALLEL - 430)) | (1 << (PostgreSQLParser.KW_SQL - 430)))) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & ((1 << (PostgreSQLParser.KW_DEPENDS - 462)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 462)) | (1 << (PostgreSQLParser.KW_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_SKIP - 462)) | (1 << (PostgreSQLParser.KW_LOCKED - 462)) | (1 << (PostgreSQLParser.KW_TIES - 462)) | (1 << (PostgreSQLParser.KW_ROLLUP - 462)) | (1 << (PostgreSQLParser.KW_CUBE - 462)) | (1 << (PostgreSQLParser.KW_GROUPING - 462)) | (1 << (PostgreSQLParser.KW_SETS - 462)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 462)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 462)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 462)) | (1 << (PostgreSQLParser.KW_COLUMNS - 462)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 462)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 462)) | (1 << (PostgreSQLParser.KW_WITHIN - 462)) | (1 << (PostgreSQLParser.KW_FILTER - 462)) | (1 << (PostgreSQLParser.KW_GROUPS - 462)) | (1 << (PostgreSQLParser.KW_OTHERS - 462)) | (1 << (PostgreSQLParser.KW_NFC - 462)) | (1 << (PostgreSQLParser.KW_NFD - 462)) | (1 << (PostgreSQLParser.KW_NFKC - 462)) | (1 << (PostgreSQLParser.KW_NFKD - 462)) | (1 << (PostgreSQLParser.KW_UESCAPE - 462)) | (1 << (PostgreSQLParser.KW_VIEWS - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 462)) | (1 << (PostgreSQLParser.KW_DUMP - 462)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 462)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_ERROR - 462)))) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (PostgreSQLParser.KW_USE_VARIABLE - 494)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 494)) | (1 << (PostgreSQLParser.KW_ALIAS - 494)) | (1 << (PostgreSQLParser.KW_CONSTANT - 494)) | (1 << (PostgreSQLParser.KW_PERFORM - 494)) | (1 << (PostgreSQLParser.KW_GET - 494)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 494)) | (1 << (PostgreSQLParser.KW_STACKED - 494)) | (1 << (PostgreSQLParser.KW_ELSIF - 494)) | (1 << (PostgreSQLParser.KW_REVERSE - 494)) | (1 << (PostgreSQLParser.KW_SLICE - 494)) | (1 << (PostgreSQLParser.KW_EXIT - 494)) | (1 << (PostgreSQLParser.KW_RETURN - 494)) | (1 << (PostgreSQLParser.KW_QUERY - 494)) | (1 << (PostgreSQLParser.KW_RAISE - 494)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 494)) | (1 << (PostgreSQLParser.KW_DEBUG - 494)) | (1 << (PostgreSQLParser.KW_LOG - 494)) | (1 << (PostgreSQLParser.KW_INFO - 494)) | (1 << (PostgreSQLParser.KW_NOTICE - 494)) | (1 << (PostgreSQLParser.KW_WARNING - 494)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 494)) | (1 << (PostgreSQLParser.KW_ASSERT - 494)) | (1 << (PostgreSQLParser.KW_OPEN - 494)) | (1 << (PostgreSQLParser.Identifier - 494)))) !== 0) || ((((_la - 526)) & ~0x1F) === 0 && ((1 << (_la - 526)) & ((1 << (PostgreSQLParser.QuotedIdentifier - 526)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 526)) | (1 << (PostgreSQLParser.StringConstant - 526)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 526)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 526)) | (1 << (PostgreSQLParser.BinaryStringConstant - 526)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 526)) | (1 << (PostgreSQLParser.Integral - 526)) | (1 << (PostgreSQLParser.Numeric - 526)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 526)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 526)))) !== 0) || _la === PostgreSQLParser.EscapeStringConstant) {
						{
						this.state = 10053;
						this.opt_slice_bound();
						}
					}

					}
					break;
				}
				this.state = 10058;
				this.match(PostgreSQLParser.CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_slice_bound(): Opt_slice_boundContext {
		let _localctx: Opt_slice_boundContext = new Opt_slice_boundContext(this._ctx, this.state);
		this.enterRule(_localctx, 1322, PostgreSQLParser.RULE_opt_slice_bound);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10061;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indirection(): IndirectionContext {
		let _localctx: IndirectionContext = new IndirectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1324, PostgreSQLParser.RULE_indirection);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10064;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 10063;
					this.indirection_el();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 10066;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 961, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_indirection(): Opt_indirectionContext {
		let _localctx: Opt_indirectionContext = new Opt_indirectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1326, PostgreSQLParser.RULE_opt_indirection);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10071;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 962, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 10068;
					this.indirection_el();
					}
					}
				}
				this.state = 10073;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 962, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_target_list(): Opt_target_listContext {
		let _localctx: Opt_target_listContext = new Opt_target_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1328, PostgreSQLParser.RULE_opt_target_list);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10074;
			this.target_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public target_list(): Target_listContext {
		let _localctx: Target_listContext = new Target_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1330, PostgreSQLParser.RULE_target_list);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10076;
			this.target_el();
			this.state = 10081;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 963, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 10077;
					this.match(PostgreSQLParser.COMMA);
					this.state = 10078;
					this.target_el();
					}
					}
				}
				this.state = 10083;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 963, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public target_el(): Target_elContext {
		let _localctx: Target_elContext = new Target_elContext(this._ctx, this.state);
		this.enterRule(_localctx, 1332, PostgreSQLParser.RULE_target_el);
		try {
			this.state = 10092;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.OPEN_PAREN:
			case PostgreSQLParser.PLUS:
			case PostgreSQLParser.MINUS:
			case PostgreSQLParser.PARAM:
			case PostgreSQLParser.Operator:
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_CASE:
			case PostgreSQLParser.KW_CAST:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_CURRENT_CATALOG:
			case PostgreSQLParser.KW_CURRENT_DATE:
			case PostgreSQLParser.KW_CURRENT_ROLE:
			case PostgreSQLParser.KW_CURRENT_TIME:
			case PostgreSQLParser.KW_CURRENT_TIMESTAMP:
			case PostgreSQLParser.KW_CURRENT_USER:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_LOCALTIME:
			case PostgreSQLParser.KW_LOCALTIMESTAMP:
			case PostgreSQLParser.KW_NOT:
			case PostgreSQLParser.KW_NULL:
			case PostgreSQLParser.KW_SESSION_USER:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_UNIQUE:
			case PostgreSQLParser.KW_USER:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.BinaryStringConstant:
			case PostgreSQLParser.HexadecimalStringConstant:
			case PostgreSQLParser.Integral:
			case PostgreSQLParser.Numeric:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				_localctx = new Target_labelContext(_localctx);
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10084;
				this.a_expr();
				this.state = 10089;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 964, this._ctx) ) {
				case 1:
					{
					this.state = 10085;
					this.match(PostgreSQLParser.KW_AS);
					this.state = 10086;
					this.collabel();
					}
					break;

				case 2:
					{
					this.state = 10087;
					this.identifier();
					}
					break;

				case 3:
					// tslint:disable-next-line:no-empty
					{
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.STAR:
				_localctx = new Target_starContext(_localctx);
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10091;
				this.match(PostgreSQLParser.STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualified_name_list(): Qualified_name_listContext {
		let _localctx: Qualified_name_listContext = new Qualified_name_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1334, PostgreSQLParser.RULE_qualified_name_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10094;
			this.qualified_name();
			this.state = 10099;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 10095;
				this.match(PostgreSQLParser.COMMA);
				this.state = 10096;
				this.qualified_name();
				}
				}
				this.state = 10101;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public table_qualified_name(): Table_qualified_nameContext {
		let _localctx: Table_qualified_nameContext = new Table_qualified_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1336, PostgreSQLParser.RULE_table_qualified_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10102;
			this.colid();
			this.state = 10104;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.OPEN_BRACKET || _la === PostgreSQLParser.DOT) {
				{
				this.state = 10103;
				this.indirection();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualified_name(): Qualified_nameContext {
		let _localctx: Qualified_nameContext = new Qualified_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1338, PostgreSQLParser.RULE_qualified_name);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10106;
			this.colid();
			this.state = 10108;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.OPEN_BRACKET || _la === PostgreSQLParser.DOT) {
				{
				this.state = 10107;
				this.indirection();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public name_list(): Name_listContext {
		let _localctx: Name_listContext = new Name_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1340, PostgreSQLParser.RULE_name_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10110;
			this.name();
			this.state = 10115;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 10111;
				this.match(PostgreSQLParser.COMMA);
				this.state = 10112;
				this.name();
				}
				}
				this.state = 10117;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public name(): NameContext {
		let _localctx: NameContext = new NameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1342, PostgreSQLParser.RULE_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10118;
			this.colid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public attr_name(): Attr_nameContext {
		let _localctx: Attr_nameContext = new Attr_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1344, PostgreSQLParser.RULE_attr_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10120;
			this.collabel();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public file_name(): File_nameContext {
		let _localctx: File_nameContext = new File_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1346, PostgreSQLParser.RULE_file_name);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10122;
			this.sconst();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public func_name(): Func_nameContext {
		let _localctx: Func_nameContext = new Func_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1348, PostgreSQLParser.RULE_func_name);
		try {
			this.state = 10128;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 970, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10124;
				this.type_function_name();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10125;
				this.colid();
				this.state = 10126;
				this.indirection();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public aexprconst(): AexprconstContext {
		let _localctx: AexprconstContext = new AexprconstContext(this._ctx, this.state);
		this.enterRule(_localctx, 1350, PostgreSQLParser.RULE_aexprconst);
		let _la: number;
		try {
			this.state = 10165;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 975, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10130;
				this.iconst();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10131;
				this.fconst();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10132;
				this.sconst();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10133;
				this.bconst();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10134;
				this.xconst();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 10135;
				this.func_name();
				this.state = 10145;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.StringConstant:
				case PostgreSQLParser.UnicodeEscapeStringConstant:
				case PostgreSQLParser.BeginDollarStringConstant:
				case PostgreSQLParser.EscapeStringConstant:
					{
					this.state = 10136;
					this.sconst();
					}
					break;
				case PostgreSQLParser.OPEN_PAREN:
					{
					this.state = 10137;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 10138;
					this.func_arg_list();
					this.state = 10140;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === PostgreSQLParser.KW_ORDER) {
						{
						this.state = 10139;
						this.opt_sort_clause();
						}
					}

					this.state = 10142;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					this.state = 10143;
					this.sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 10147;
				this.consttypename();
				this.state = 10148;
				this.sconst();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 10150;
				this.constinterval();
				this.state = 10160;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.StringConstant:
				case PostgreSQLParser.UnicodeEscapeStringConstant:
				case PostgreSQLParser.BeginDollarStringConstant:
				case PostgreSQLParser.EscapeStringConstant:
					{
					this.state = 10151;
					this.sconst();
					this.state = 10153;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 973, this._ctx) ) {
					case 1:
						{
						this.state = 10152;
						this.opt_interval();
						}
						break;
					}
					}
					break;
				case PostgreSQLParser.OPEN_PAREN:
					{
					this.state = 10155;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 10156;
					this.iconst();
					this.state = 10157;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					this.state = 10158;
					this.sconst();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 10162;
				this.match(PostgreSQLParser.KW_TRUE);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 10163;
				this.match(PostgreSQLParser.KW_FALSE);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 10164;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public xconst(): XconstContext {
		let _localctx: XconstContext = new XconstContext(this._ctx, this.state);
		this.enterRule(_localctx, 1352, PostgreSQLParser.RULE_xconst);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10167;
			this.match(PostgreSQLParser.HexadecimalStringConstant);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public bconst(): BconstContext {
		let _localctx: BconstContext = new BconstContext(this._ctx, this.state);
		this.enterRule(_localctx, 1354, PostgreSQLParser.RULE_bconst);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10169;
			this.match(PostgreSQLParser.BinaryStringConstant);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public fconst(): FconstContext {
		let _localctx: FconstContext = new FconstContext(this._ctx, this.state);
		this.enterRule(_localctx, 1356, PostgreSQLParser.RULE_fconst);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10171;
			this.match(PostgreSQLParser.Numeric);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public iconst(): IconstContext {
		let _localctx: IconstContext = new IconstContext(this._ctx, this.state);
		this.enterRule(_localctx, 1358, PostgreSQLParser.RULE_iconst);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10173;
			this.match(PostgreSQLParser.Integral);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sconst(): SconstContext {
		let _localctx: SconstContext = new SconstContext(this._ctx, this.state);
		this.enterRule(_localctx, 1360, PostgreSQLParser.RULE_sconst);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10175;
			this.anysconst();
			this.state = 10177;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 976, this._ctx) ) {
			case 1:
				{
				this.state = 10176;
				this.opt_uescape();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public anysconst(): AnysconstContext {
		let _localctx: AnysconstContext = new AnysconstContext(this._ctx, this.state);
		this.enterRule(_localctx, 1362, PostgreSQLParser.RULE_anysconst);
		let _la: number;
		try {
			this.state = 10190;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.StringConstant:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10179;
				this.match(PostgreSQLParser.StringConstant);
				}
				break;
			case PostgreSQLParser.UnicodeEscapeStringConstant:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10180;
				this.match(PostgreSQLParser.UnicodeEscapeStringConstant);
				}
				break;
			case PostgreSQLParser.BeginDollarStringConstant:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10181;
				this.match(PostgreSQLParser.BeginDollarStringConstant);
				this.state = 10185;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PostgreSQLParser.DollarText) {
					{
					{
					this.state = 10182;
					this.match(PostgreSQLParser.DollarText);
					}
					}
					this.state = 10187;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 10188;
				this.match(PostgreSQLParser.EndDollarStringConstant);
				}
				break;
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10189;
				this.match(PostgreSQLParser.EscapeStringConstant);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_uescape(): Opt_uescapeContext {
		let _localctx: Opt_uescapeContext = new Opt_uescapeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1364, PostgreSQLParser.RULE_opt_uescape);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10192;
			this.match(PostgreSQLParser.KW_UESCAPE);
			this.state = 10193;
			this.anysconst();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signediconst(): SignediconstContext {
		let _localctx: SignediconstContext = new SignediconstContext(this._ctx, this.state);
		this.enterRule(_localctx, 1366, PostgreSQLParser.RULE_signediconst);
		try {
			this.state = 10200;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.Integral:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10195;
				this.iconst();
				}
				break;
			case PostgreSQLParser.PLUS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10196;
				this.match(PostgreSQLParser.PLUS);
				this.state = 10197;
				this.iconst();
				}
				break;
			case PostgreSQLParser.MINUS:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10198;
				this.match(PostgreSQLParser.MINUS);
				this.state = 10199;
				this.iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public groupname(): GroupnameContext {
		let _localctx: GroupnameContext = new GroupnameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1368, PostgreSQLParser.RULE_groupname);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10202;
			this.rolespec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleid(): RoleidContext {
		let _localctx: RoleidContext = new RoleidContext(this._ctx, this.state);
		this.enterRule(_localctx, 1370, PostgreSQLParser.RULE_roleid);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10204;
			this.rolespec();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rolespec(): RolespecContext {
		let _localctx: RolespecContext = new RolespecContext(this._ctx, this.state);
		this.enterRule(_localctx, 1372, PostgreSQLParser.RULE_rolespec);
		try {
			this.state = 10210;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10206;
				this.nonreservedword();
				}
				break;
			case PostgreSQLParser.KW_CURRENT_USER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10207;
				this.match(PostgreSQLParser.KW_CURRENT_USER);
				}
				break;
			case PostgreSQLParser.KW_SESSION_USER:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10208;
				this.match(PostgreSQLParser.KW_SESSION_USER);
				}
				break;
			case PostgreSQLParser.KW_PUBLIC:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10209;
				this.match(PostgreSQLParser.KW_PUBLIC);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public role_list(): Role_listContext {
		let _localctx: Role_listContext = new Role_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1374, PostgreSQLParser.RULE_role_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10212;
			this.rolespec();
			this.state = 10217;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 10213;
				this.match(PostgreSQLParser.COMMA);
				this.state = 10214;
				this.rolespec();
				}
				}
				this.state = 10219;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public colid(): ColidContext {
		let _localctx: ColidContext = new ColidContext(this._ctx, this.state);
		this.enterRule(_localctx, 1376, PostgreSQLParser.RULE_colid);
		try {
			this.state = 10224;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 982, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10220;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10221;
				this.unreserved_keyword();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10222;
				this.col_name_keyword();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10223;
				this.plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_method_choices(): Index_method_choicesContext {
		let _localctx: Index_method_choicesContext = new Index_method_choicesContext(this._ctx, this.state);
		this.enterRule(_localctx, 1378, PostgreSQLParser.RULE_index_method_choices);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10226;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exclude_element(): Exclude_elementContext {
		let _localctx: Exclude_elementContext = new Exclude_elementContext(this._ctx, this.state);
		this.enterRule(_localctx, 1380, PostgreSQLParser.RULE_exclude_element);
		let _la: number;
		try {
			this.state = 10240;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_WITH:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10228;
				this.opt_definition();
				}
				break;
			case PostgreSQLParser.OPEN_PAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				{
				this.state = 10229;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 10230;
				this.a_expr();
				this.state = 10231;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				this.state = 10233;
				this.identifier();
				this.state = 10235;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_ASC || _la === PostgreSQLParser.KW_DESC) {
					{
					this.state = 10234;
					this.opt_asc_desc();
					}
				}

				this.state = 10238;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.KW_NULLS) {
					{
					this.state = 10237;
					this.opt_nulls_order();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public index_paramenters(): Index_paramentersContext {
		let _localctx: Index_paramentersContext = new Index_paramentersContext(this._ctx, this.state);
		this.enterRule(_localctx, 1382, PostgreSQLParser.RULE_index_paramenters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10244;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WITH) {
				{
				this.state = 10242;
				this.match(PostgreSQLParser.KW_WITH);
				this.state = 10243;
				this.reloptions();
				}
			}

			this.state = 10247;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_USING) {
				{
				this.state = 10246;
				this.optconstablespace();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public wherePredicate(): WherePredicateContext {
		let _localctx: WherePredicateContext = new WherePredicateContext(this._ctx, this.state);
		this.enterRule(_localctx, 1384, PostgreSQLParser.RULE_wherePredicate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10249;
			this.match(PostgreSQLParser.KW_WHERE);
			this.state = 10250;
			this.identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_function_name(): Type_function_nameContext {
		let _localctx: Type_function_nameContext = new Type_function_nameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1386, PostgreSQLParser.RULE_type_function_name);
		try {
			this.state = 10256;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 988, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10252;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10253;
				this.unreserved_keyword();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10254;
				this.plsql_unreserved_keyword();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10255;
				this.type_func_name_keyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nonreservedword(): NonreservedwordContext {
		let _localctx: NonreservedwordContext = new NonreservedwordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1388, PostgreSQLParser.RULE_nonreservedword);
		try {
			this.state = 10262;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 989, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10258;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10259;
				this.unreserved_keyword();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10260;
				this.col_name_keyword();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10261;
				this.type_func_name_keyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public collabel(): CollabelContext {
		let _localctx: CollabelContext = new CollabelContext(this._ctx, this.state);
		this.enterRule(_localctx, 1390, PostgreSQLParser.RULE_collabel);
		try {
			this.state = 10270;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 990, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10264;
				this.identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10265;
				this.plsql_unreserved_keyword();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10266;
				this.unreserved_keyword();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10267;
				this.col_name_keyword();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10268;
				this.type_func_name_keyword();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 10269;
				this.reserved_keyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public identifier(): IdentifierContext {
		let _localctx: IdentifierContext = new IdentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1392, PostgreSQLParser.RULE_identifier);
		try {
			this.state = 10281;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.Identifier:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10272;
				this.match(PostgreSQLParser.Identifier);
				this.state = 10274;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 991, this._ctx) ) {
				case 1:
					{
					this.state = 10273;
					this.opt_uescape();
					}
					break;
				}
				}
				break;
			case PostgreSQLParser.QuotedIdentifier:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10276;
				this.match(PostgreSQLParser.QuotedIdentifier);
				}
				break;
			case PostgreSQLParser.UnicodeQuotedIdentifier:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10277;
				this.match(PostgreSQLParser.UnicodeQuotedIdentifier);
				}
				break;
			case PostgreSQLParser.PLSQLVARIABLENAME:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10278;
				this.plsqlvariablename();
				}
				break;
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10279;
				this.plsqlidentifier();
				}
				break;
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 10280;
				this.plsql_unreserved_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public plsqlidentifier(): PlsqlidentifierContext {
		let _localctx: PlsqlidentifierContext = new PlsqlidentifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1394, PostgreSQLParser.RULE_plsqlidentifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10283;
			this.match(PostgreSQLParser.PLSQLIDENTIFIER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unreserved_keyword(): Unreserved_keywordContext {
		let _localctx: Unreserved_keywordContext = new Unreserved_keywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1396, PostgreSQLParser.RULE_unreserved_keyword);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10285;
			_la = this._input.LA(1);
			if (!(((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (PostgreSQLParser.KW_OVER - 124)) | (1 << (PostgreSQLParser.KW_ABORT - 124)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 124)) | (1 << (PostgreSQLParser.KW_ACCESS - 124)) | (1 << (PostgreSQLParser.KW_ACTION - 124)) | (1 << (PostgreSQLParser.KW_ADD - 124)) | (1 << (PostgreSQLParser.KW_ADMIN - 124)) | (1 << (PostgreSQLParser.KW_AFTER - 124)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 124)) | (1 << (PostgreSQLParser.KW_ALSO - 124)) | (1 << (PostgreSQLParser.KW_ALTER - 124)) | (1 << (PostgreSQLParser.KW_ALWAYS - 124)) | (1 << (PostgreSQLParser.KW_ASSERTION - 124)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 124)) | (1 << (PostgreSQLParser.KW_AT - 124)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 124)) | (1 << (PostgreSQLParser.KW_BACKWARD - 124)) | (1 << (PostgreSQLParser.KW_BEFORE - 124)) | (1 << (PostgreSQLParser.KW_BEGIN - 124)) | (1 << (PostgreSQLParser.KW_BY - 124)) | (1 << (PostgreSQLParser.KW_CACHE - 124)) | (1 << (PostgreSQLParser.KW_CALLED - 124)) | (1 << (PostgreSQLParser.KW_CASCADE - 124)) | (1 << (PostgreSQLParser.KW_CASCADED - 124)) | (1 << (PostgreSQLParser.KW_CATALOG - 124)) | (1 << (PostgreSQLParser.KW_CHAIN - 124)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 124)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 124)))) !== 0) || ((((_la - 156)) & ~0x1F) === 0 && ((1 << (_la - 156)) & ((1 << (PostgreSQLParser.KW_CLASS - 156)) | (1 << (PostgreSQLParser.KW_CLOSE - 156)) | (1 << (PostgreSQLParser.KW_CLUSTER - 156)) | (1 << (PostgreSQLParser.KW_COMMENT - 156)) | (1 << (PostgreSQLParser.KW_COMMENTS - 156)) | (1 << (PostgreSQLParser.KW_COMMIT - 156)) | (1 << (PostgreSQLParser.KW_COMMITTED - 156)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 156)) | (1 << (PostgreSQLParser.KW_CONNECTION - 156)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 156)) | (1 << (PostgreSQLParser.KW_CONTENT - 156)) | (1 << (PostgreSQLParser.KW_CONTINUE - 156)) | (1 << (PostgreSQLParser.KW_CONVERSION - 156)) | (1 << (PostgreSQLParser.KW_COPY - 156)) | (1 << (PostgreSQLParser.KW_COST - 156)) | (1 << (PostgreSQLParser.KW_CSV - 156)) | (1 << (PostgreSQLParser.KW_CURSOR - 156)) | (1 << (PostgreSQLParser.KW_CYCLE - 156)) | (1 << (PostgreSQLParser.KW_DATA - 156)) | (1 << (PostgreSQLParser.KW_DATABASE - 156)) | (1 << (PostgreSQLParser.KW_DAY - 156)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 156)) | (1 << (PostgreSQLParser.KW_DECLARE - 156)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 156)) | (1 << (PostgreSQLParser.KW_DEFERRED - 156)) | (1 << (PostgreSQLParser.KW_DEFINER - 156)) | (1 << (PostgreSQLParser.KW_DELETE - 156)) | (1 << (PostgreSQLParser.KW_DELIMITER - 156)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 156)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 156)) | (1 << (PostgreSQLParser.KW_DISABLE - 156)) | (1 << (PostgreSQLParser.KW_DISCARD - 156)))) !== 0) || ((((_la - 188)) & ~0x1F) === 0 && ((1 << (_la - 188)) & ((1 << (PostgreSQLParser.KW_DOCUMENT - 188)) | (1 << (PostgreSQLParser.KW_DOMAIN - 188)) | (1 << (PostgreSQLParser.KW_DOUBLE - 188)) | (1 << (PostgreSQLParser.KW_DROP - 188)) | (1 << (PostgreSQLParser.KW_EACH - 188)) | (1 << (PostgreSQLParser.KW_ENABLE - 188)) | (1 << (PostgreSQLParser.KW_ENCODING - 188)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 188)) | (1 << (PostgreSQLParser.KW_ENUM - 188)) | (1 << (PostgreSQLParser.KW_ESCAPE - 188)) | (1 << (PostgreSQLParser.KW_EVENT - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 188)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 188)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 188)) | (1 << (PostgreSQLParser.KW_EXECUTE - 188)) | (1 << (PostgreSQLParser.KW_EXPLAIN - 188)) | (1 << (PostgreSQLParser.KW_EXTENSION - 188)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 188)) | (1 << (PostgreSQLParser.KW_FAMILY - 188)) | (1 << (PostgreSQLParser.KW_FIRST - 188)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 188)) | (1 << (PostgreSQLParser.KW_FORCE - 188)) | (1 << (PostgreSQLParser.KW_FORWARD - 188)) | (1 << (PostgreSQLParser.KW_FUNCTION - 188)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 188)) | (1 << (PostgreSQLParser.KW_GLOBAL - 188)) | (1 << (PostgreSQLParser.KW_GRANTED - 188)) | (1 << (PostgreSQLParser.KW_HANDLER - 188)) | (1 << (PostgreSQLParser.KW_HEADER - 188)) | (1 << (PostgreSQLParser.KW_HOLD - 188)) | (1 << (PostgreSQLParser.KW_HOUR - 188)) | (1 << (PostgreSQLParser.KW_IDENTITY - 188)))) !== 0) || ((((_la - 220)) & ~0x1F) === 0 && ((1 << (_la - 220)) & ((1 << (PostgreSQLParser.KW_IF - 220)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 220)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 220)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 220)) | (1 << (PostgreSQLParser.KW_INCLUDING - 220)) | (1 << (PostgreSQLParser.KW_INCREMENT - 220)) | (1 << (PostgreSQLParser.KW_INDEX - 220)) | (1 << (PostgreSQLParser.KW_INDEXES - 220)) | (1 << (PostgreSQLParser.KW_INHERIT - 220)) | (1 << (PostgreSQLParser.KW_INHERITS - 220)) | (1 << (PostgreSQLParser.KW_INLINE - 220)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 220)) | (1 << (PostgreSQLParser.KW_INSERT - 220)) | (1 << (PostgreSQLParser.KW_INSTEAD - 220)) | (1 << (PostgreSQLParser.KW_INVOKER - 220)) | (1 << (PostgreSQLParser.KW_ISOLATION - 220)) | (1 << (PostgreSQLParser.KW_KEY - 220)) | (1 << (PostgreSQLParser.KW_LABEL - 220)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 220)) | (1 << (PostgreSQLParser.KW_LARGE - 220)) | (1 << (PostgreSQLParser.KW_LAST - 220)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 220)) | (1 << (PostgreSQLParser.KW_LEVEL - 220)))) !== 0) || ((((_la - 252)) & ~0x1F) === 0 && ((1 << (_la - 252)) & ((1 << (PostgreSQLParser.KW_LISTEN - 252)) | (1 << (PostgreSQLParser.KW_LOAD - 252)) | (1 << (PostgreSQLParser.KW_LOCAL - 252)) | (1 << (PostgreSQLParser.KW_LOCATION - 252)) | (1 << (PostgreSQLParser.KW_LOCK - 252)) | (1 << (PostgreSQLParser.KW_MAPPING - 252)) | (1 << (PostgreSQLParser.KW_MATCH - 252)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 252)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 252)) | (1 << (PostgreSQLParser.KW_MINUTE - 252)) | (1 << (PostgreSQLParser.KW_MINVALUE - 252)) | (1 << (PostgreSQLParser.KW_MODE - 252)) | (1 << (PostgreSQLParser.KW_MONTH - 252)) | (1 << (PostgreSQLParser.KW_MOVE - 252)) | (1 << (PostgreSQLParser.KW_NAME - 252)) | (1 << (PostgreSQLParser.KW_NAMES - 252)) | (1 << (PostgreSQLParser.KW_NEXT - 252)) | (1 << (PostgreSQLParser.KW_NO - 252)) | (1 << (PostgreSQLParser.KW_NOTHING - 252)) | (1 << (PostgreSQLParser.KW_NOTIFY - 252)) | (1 << (PostgreSQLParser.KW_NOWAIT - 252)) | (1 << (PostgreSQLParser.KW_NULLS - 252)) | (1 << (PostgreSQLParser.KW_OBJECT - 252)) | (1 << (PostgreSQLParser.KW_OF - 252)) | (1 << (PostgreSQLParser.KW_OFF - 252)) | (1 << (PostgreSQLParser.KW_OIDS - 252)) | (1 << (PostgreSQLParser.KW_OPERATOR - 252)) | (1 << (PostgreSQLParser.KW_OPTION - 252)) | (1 << (PostgreSQLParser.KW_OPTIONS - 252)) | (1 << (PostgreSQLParser.KW_OWNED - 252)) | (1 << (PostgreSQLParser.KW_OWNER - 252)) | (1 << (PostgreSQLParser.KW_PARSER - 252)))) !== 0) || ((((_la - 284)) & ~0x1F) === 0 && ((1 << (_la - 284)) & ((1 << (PostgreSQLParser.KW_PARTIAL - 284)) | (1 << (PostgreSQLParser.KW_PARTITION - 284)) | (1 << (PostgreSQLParser.KW_PASSING - 284)) | (1 << (PostgreSQLParser.KW_PASSWORD - 284)) | (1 << (PostgreSQLParser.KW_PLANS - 284)) | (1 << (PostgreSQLParser.KW_PRECEDING - 284)) | (1 << (PostgreSQLParser.KW_PREPARE - 284)) | (1 << (PostgreSQLParser.KW_PREPARED - 284)) | (1 << (PostgreSQLParser.KW_PRESERVE - 284)) | (1 << (PostgreSQLParser.KW_PRIOR - 284)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 284)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 284)) | (1 << (PostgreSQLParser.KW_PROGRAM - 284)) | (1 << (PostgreSQLParser.KW_QUOTE - 284)) | (1 << (PostgreSQLParser.KW_RANGE - 284)) | (1 << (PostgreSQLParser.KW_READ - 284)) | (1 << (PostgreSQLParser.KW_REASSIGN - 284)) | (1 << (PostgreSQLParser.KW_RECHECK - 284)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 284)) | (1 << (PostgreSQLParser.KW_REF - 284)) | (1 << (PostgreSQLParser.KW_REFRESH - 284)) | (1 << (PostgreSQLParser.KW_REINDEX - 284)) | (1 << (PostgreSQLParser.KW_RELATIVE - 284)) | (1 << (PostgreSQLParser.KW_RELEASE - 284)) | (1 << (PostgreSQLParser.KW_RENAME - 284)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 284)) | (1 << (PostgreSQLParser.KW_REPLACE - 284)) | (1 << (PostgreSQLParser.KW_REPLICA - 284)) | (1 << (PostgreSQLParser.KW_RESET - 284)) | (1 << (PostgreSQLParser.KW_RESTART - 284)) | (1 << (PostgreSQLParser.KW_RESTRICT - 284)))) !== 0) || ((((_la - 316)) & ~0x1F) === 0 && ((1 << (_la - 316)) & ((1 << (PostgreSQLParser.KW_RETURNS - 316)) | (1 << (PostgreSQLParser.KW_REVOKE - 316)) | (1 << (PostgreSQLParser.KW_ROLE - 316)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 316)) | (1 << (PostgreSQLParser.KW_ROWS - 316)) | (1 << (PostgreSQLParser.KW_RULE - 316)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 316)) | (1 << (PostgreSQLParser.KW_SCHEMA - 316)) | (1 << (PostgreSQLParser.KW_SCROLL - 316)) | (1 << (PostgreSQLParser.KW_SEARCH - 316)) | (1 << (PostgreSQLParser.KW_SECOND - 316)) | (1 << (PostgreSQLParser.KW_SECURITY - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 316)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 316)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 316)) | (1 << (PostgreSQLParser.KW_SERVER - 316)) | (1 << (PostgreSQLParser.KW_SESSION - 316)) | (1 << (PostgreSQLParser.KW_SET - 316)) | (1 << (PostgreSQLParser.KW_SHARE - 316)) | (1 << (PostgreSQLParser.KW_SHOW - 316)) | (1 << (PostgreSQLParser.KW_SIMPLE - 316)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 316)) | (1 << (PostgreSQLParser.KW_STABLE - 316)) | (1 << (PostgreSQLParser.KW_STANDALONE - 316)) | (1 << (PostgreSQLParser.KW_START - 316)) | (1 << (PostgreSQLParser.KW_STATEMENT - 316)) | (1 << (PostgreSQLParser.KW_STATISTICS - 316)) | (1 << (PostgreSQLParser.KW_STDIN - 316)) | (1 << (PostgreSQLParser.KW_STDOUT - 316)) | (1 << (PostgreSQLParser.KW_STORAGE - 316)) | (1 << (PostgreSQLParser.KW_STRICT - 316)) | (1 << (PostgreSQLParser.KW_STRIP - 316)))) !== 0) || ((((_la - 348)) & ~0x1F) === 0 && ((1 << (_la - 348)) & ((1 << (PostgreSQLParser.KW_SYSID - 348)) | (1 << (PostgreSQLParser.KW_SYSTEM - 348)) | (1 << (PostgreSQLParser.KW_TABLES - 348)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 348)) | (1 << (PostgreSQLParser.KW_TEMP - 348)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 348)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 348)) | (1 << (PostgreSQLParser.KW_TEXT - 348)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 348)) | (1 << (PostgreSQLParser.KW_TRIGGER - 348)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 348)) | (1 << (PostgreSQLParser.KW_TRUSTED - 348)) | (1 << (PostgreSQLParser.KW_TYPE - 348)) | (1 << (PostgreSQLParser.KW_TYPES - 348)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 348)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 348)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 348)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 348)) | (1 << (PostgreSQLParser.KW_UNLISTEN - 348)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 348)) | (1 << (PostgreSQLParser.KW_UNTIL - 348)) | (1 << (PostgreSQLParser.KW_UPDATE - 348)) | (1 << (PostgreSQLParser.KW_VACUUM - 348)) | (1 << (PostgreSQLParser.KW_VALID - 348)) | (1 << (PostgreSQLParser.KW_VALIDATE - 348)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 348)) | (1 << (PostgreSQLParser.KW_VARYING - 348)) | (1 << (PostgreSQLParser.KW_VERSION - 348)) | (1 << (PostgreSQLParser.KW_VIEW - 348)) | (1 << (PostgreSQLParser.KW_VOLATILE - 348)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 348)) | (1 << (PostgreSQLParser.KW_WITHOUT - 348)))) !== 0) || ((((_la - 380)) & ~0x1F) === 0 && ((1 << (_la - 380)) & ((1 << (PostgreSQLParser.KW_WORK - 380)) | (1 << (PostgreSQLParser.KW_WRAPPER - 380)) | (1 << (PostgreSQLParser.KW_WRITE - 380)) | (1 << (PostgreSQLParser.KW_XML - 380)) | (1 << (PostgreSQLParser.KW_YEAR - 380)) | (1 << (PostgreSQLParser.KW_YES - 380)) | (1 << (PostgreSQLParser.KW_ZONE - 380)))) !== 0) || ((((_la - 433)) & ~0x1F) === 0 && ((1 << (_la - 433)) & ((1 << (PostgreSQLParser.KW_CALL - 433)) | (1 << (PostgreSQLParser.KW_CURRENT - 433)) | (1 << (PostgreSQLParser.KW_ATTACH - 433)) | (1 << (PostgreSQLParser.KW_DETACH - 433)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 433)) | (1 << (PostgreSQLParser.KW_GENERATED - 433)) | (1 << (PostgreSQLParser.KW_LOGGED - 433)) | (1 << (PostgreSQLParser.KW_STORED - 433)) | (1 << (PostgreSQLParser.KW_INCLUDE - 433)) | (1 << (PostgreSQLParser.KW_ROUTINE - 433)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 433)) | (1 << (PostgreSQLParser.KW_IMPORT - 433)) | (1 << (PostgreSQLParser.KW_POLICY - 433)) | (1 << (PostgreSQLParser.KW_METHOD - 433)) | (1 << (PostgreSQLParser.KW_REFERENCING - 433)) | (1 << (PostgreSQLParser.KW_NEW - 433)) | (1 << (PostgreSQLParser.KW_OLD - 433)) | (1 << (PostgreSQLParser.KW_VALUE - 433)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 433)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 433)) | (1 << (PostgreSQLParser.KW_ROUTINES - 433)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 433)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 433)) | (1 << (PostgreSQLParser.KW_INPUT - 433)) | (1 << (PostgreSQLParser.KW_SUPPORT - 433)) | (1 << (PostgreSQLParser.KW_PARALLEL - 433)) | (1 << (PostgreSQLParser.KW_SQL - 433)) | (1 << (PostgreSQLParser.KW_DEPENDS - 433)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 433)) | (1 << (PostgreSQLParser.KW_CONFLICT - 433)))) !== 0) || ((((_la - 465)) & ~0x1F) === 0 && ((1 << (_la - 465)) & ((1 << (PostgreSQLParser.KW_SKIP - 465)) | (1 << (PostgreSQLParser.KW_LOCKED - 465)) | (1 << (PostgreSQLParser.KW_TIES - 465)) | (1 << (PostgreSQLParser.KW_ROLLUP - 465)) | (1 << (PostgreSQLParser.KW_CUBE - 465)) | (1 << (PostgreSQLParser.KW_SETS - 465)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 465)) | (1 << (PostgreSQLParser.KW_COLUMNS - 465)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 465)) | (1 << (PostgreSQLParser.KW_WITHIN - 465)) | (1 << (PostgreSQLParser.KW_FILTER - 465)) | (1 << (PostgreSQLParser.KW_GROUPS - 465)) | (1 << (PostgreSQLParser.KW_OTHERS - 465)) | (1 << (PostgreSQLParser.KW_NFC - 465)) | (1 << (PostgreSQLParser.KW_NFD - 465)) | (1 << (PostgreSQLParser.KW_NFKC - 465)) | (1 << (PostgreSQLParser.KW_NFKD - 465)) | (1 << (PostgreSQLParser.KW_UESCAPE - 465)) | (1 << (PostgreSQLParser.KW_VIEWS - 465)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public col_name_keyword(): Col_name_keywordContext {
		let _localctx: Col_name_keywordContext = new Col_name_keywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1398, PostgreSQLParser.RULE_col_name_keyword);
		try {
			this.state = 10338;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 993, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10287;
				this.match(PostgreSQLParser.KW_BETWEEN);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10288;
				this.match(PostgreSQLParser.KW_BIGINT);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10289;
				this.bit();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10290;
				this.match(PostgreSQLParser.KW_BOOLEAN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10291;
				this.match(PostgreSQLParser.KW_CHAR);
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 10292;
				this.character();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 10293;
				this.match(PostgreSQLParser.KW_COALESCE);
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 10294;
				this.match(PostgreSQLParser.KW_DEC);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 10295;
				this.match(PostgreSQLParser.KW_DECIMAL);
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 10296;
				this.match(PostgreSQLParser.KW_EXISTS);
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 10297;
				this.match(PostgreSQLParser.KW_EXTRACT);
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 10298;
				this.match(PostgreSQLParser.KW_FLOAT);
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 10299;
				this.match(PostgreSQLParser.KW_GREATEST);
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 10300;
				this.match(PostgreSQLParser.KW_GROUPING);
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 10301;
				this.match(PostgreSQLParser.KW_INOUT);
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 10302;
				this.match(PostgreSQLParser.KW_INT);
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 10303;
				this.match(PostgreSQLParser.KW_INTEGER);
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 10304;
				this.match(PostgreSQLParser.KW_INTERVAL);
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 10305;
				this.match(PostgreSQLParser.KW_LEAST);
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 10306;
				this.match(PostgreSQLParser.KW_NATIONAL);
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 10307;
				this.match(PostgreSQLParser.KW_NCHAR);
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 10308;
				this.match(PostgreSQLParser.KW_NONE);
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 10309;
				this.match(PostgreSQLParser.KW_NORMALIZE);
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 10310;
				this.match(PostgreSQLParser.KW_NULLIF);
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 10311;
				this.numeric();
				}
				break;

			case 26:
				this.enterOuterAlt(_localctx, 26);
				{
				this.state = 10312;
				this.match(PostgreSQLParser.KW_OUT);
				}
				break;

			case 27:
				this.enterOuterAlt(_localctx, 27);
				{
				this.state = 10313;
				this.match(PostgreSQLParser.KW_OVERLAY);
				}
				break;

			case 28:
				this.enterOuterAlt(_localctx, 28);
				{
				this.state = 10314;
				this.match(PostgreSQLParser.KW_POSITION);
				}
				break;

			case 29:
				this.enterOuterAlt(_localctx, 29);
				{
				this.state = 10315;
				this.match(PostgreSQLParser.KW_PRECISION);
				}
				break;

			case 30:
				this.enterOuterAlt(_localctx, 30);
				{
				this.state = 10316;
				this.match(PostgreSQLParser.KW_REAL);
				}
				break;

			case 31:
				this.enterOuterAlt(_localctx, 31);
				{
				this.state = 10317;
				this.match(PostgreSQLParser.KW_ROW);
				}
				break;

			case 32:
				this.enterOuterAlt(_localctx, 32);
				{
				this.state = 10318;
				this.match(PostgreSQLParser.KW_SETOF);
				}
				break;

			case 33:
				this.enterOuterAlt(_localctx, 33);
				{
				this.state = 10319;
				this.match(PostgreSQLParser.KW_SMALLINT);
				}
				break;

			case 34:
				this.enterOuterAlt(_localctx, 34);
				{
				this.state = 10320;
				this.match(PostgreSQLParser.KW_SUBSTRING);
				}
				break;

			case 35:
				this.enterOuterAlt(_localctx, 35);
				{
				this.state = 10321;
				this.match(PostgreSQLParser.KW_TIME);
				}
				break;

			case 36:
				this.enterOuterAlt(_localctx, 36);
				{
				this.state = 10322;
				this.match(PostgreSQLParser.KW_TIMESTAMP);
				}
				break;

			case 37:
				this.enterOuterAlt(_localctx, 37);
				{
				this.state = 10323;
				this.match(PostgreSQLParser.KW_TREAT);
				}
				break;

			case 38:
				this.enterOuterAlt(_localctx, 38);
				{
				this.state = 10324;
				this.match(PostgreSQLParser.KW_TRIM);
				}
				break;

			case 39:
				this.enterOuterAlt(_localctx, 39);
				{
				this.state = 10325;
				this.match(PostgreSQLParser.KW_VALUES);
				}
				break;

			case 40:
				this.enterOuterAlt(_localctx, 40);
				{
				this.state = 10326;
				this.match(PostgreSQLParser.KW_VARCHAR);
				}
				break;

			case 41:
				this.enterOuterAlt(_localctx, 41);
				{
				this.state = 10327;
				this.match(PostgreSQLParser.KW_XMLATTRIBUTES);
				}
				break;

			case 42:
				this.enterOuterAlt(_localctx, 42);
				{
				this.state = 10328;
				this.match(PostgreSQLParser.KW_XMLCONCAT);
				}
				break;

			case 43:
				this.enterOuterAlt(_localctx, 43);
				{
				this.state = 10329;
				this.match(PostgreSQLParser.KW_XMLELEMENT);
				}
				break;

			case 44:
				this.enterOuterAlt(_localctx, 44);
				{
				this.state = 10330;
				this.match(PostgreSQLParser.KW_XMLEXISTS);
				}
				break;

			case 45:
				this.enterOuterAlt(_localctx, 45);
				{
				this.state = 10331;
				this.match(PostgreSQLParser.KW_XMLFOREST);
				}
				break;

			case 46:
				this.enterOuterAlt(_localctx, 46);
				{
				this.state = 10332;
				this.match(PostgreSQLParser.KW_XMLNAMESPACES);
				}
				break;

			case 47:
				this.enterOuterAlt(_localctx, 47);
				{
				this.state = 10333;
				this.match(PostgreSQLParser.KW_XMLPARSE);
				}
				break;

			case 48:
				this.enterOuterAlt(_localctx, 48);
				{
				this.state = 10334;
				this.match(PostgreSQLParser.KW_XMLPI);
				}
				break;

			case 49:
				this.enterOuterAlt(_localctx, 49);
				{
				this.state = 10335;
				this.match(PostgreSQLParser.KW_XMLROOT);
				}
				break;

			case 50:
				this.enterOuterAlt(_localctx, 50);
				{
				this.state = 10336;
				this.match(PostgreSQLParser.KW_XMLSERIALIZE);
				}
				break;

			case 51:
				this.enterOuterAlt(_localctx, 51);
				{
				this.state = 10337;
				this.match(PostgreSQLParser.KW_XMLTABLE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public type_func_name_keyword(): Type_func_name_keywordContext {
		let _localctx: Type_func_name_keywordContext = new Type_func_name_keywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1400, PostgreSQLParser.RULE_type_func_name_keyword);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10340;
			_la = this._input.LA(1);
			if (!(((((_la - 106)) & ~0x1F) === 0 && ((1 << (_la - 106)) & ((1 << (PostgreSQLParser.KW_AUTHORIZATION - 106)) | (1 << (PostgreSQLParser.KW_BINARY - 106)) | (1 << (PostgreSQLParser.KW_COLLATION - 106)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 106)) | (1 << (PostgreSQLParser.KW_CROSS - 106)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 106)) | (1 << (PostgreSQLParser.KW_FREEZE - 106)) | (1 << (PostgreSQLParser.KW_FULL - 106)) | (1 << (PostgreSQLParser.KW_ILIKE - 106)) | (1 << (PostgreSQLParser.KW_INNER - 106)) | (1 << (PostgreSQLParser.KW_IS - 106)) | (1 << (PostgreSQLParser.KW_ISNULL - 106)) | (1 << (PostgreSQLParser.KW_JOIN - 106)) | (1 << (PostgreSQLParser.KW_LEFT - 106)) | (1 << (PostgreSQLParser.KW_LIKE - 106)) | (1 << (PostgreSQLParser.KW_NATURAL - 106)) | (1 << (PostgreSQLParser.KW_NOTNULL - 106)) | (1 << (PostgreSQLParser.KW_OUTER - 106)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 106)) | (1 << (PostgreSQLParser.KW_RIGHT - 106)) | (1 << (PostgreSQLParser.KW_SIMILAR - 106)) | (1 << (PostgreSQLParser.KW_VERBOSE - 106)))) !== 0) || _la === PostgreSQLParser.KW_TABLESAMPLE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reserved_keyword(): Reserved_keywordContext {
		let _localctx: Reserved_keywordContext = new Reserved_keywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1402, PostgreSQLParser.RULE_reserved_keyword);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10342;
			_la = this._input.LA(1);
			if (!(((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & ((1 << (PostgreSQLParser.KW_ALL - 30)) | (1 << (PostgreSQLParser.KW_ANALYSE - 30)) | (1 << (PostgreSQLParser.KW_ANALYZE - 30)) | (1 << (PostgreSQLParser.KW_AND - 30)) | (1 << (PostgreSQLParser.KW_ANY - 30)) | (1 << (PostgreSQLParser.KW_ARRAY - 30)) | (1 << (PostgreSQLParser.KW_AS - 30)) | (1 << (PostgreSQLParser.KW_ASC - 30)) | (1 << (PostgreSQLParser.KW_ASYMMETRIC - 30)) | (1 << (PostgreSQLParser.KW_BOTH - 30)) | (1 << (PostgreSQLParser.KW_CASE - 30)) | (1 << (PostgreSQLParser.KW_CAST - 30)) | (1 << (PostgreSQLParser.KW_CHECK - 30)) | (1 << (PostgreSQLParser.KW_COLLATE - 30)) | (1 << (PostgreSQLParser.KW_COLUMN - 30)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 30)) | (1 << (PostgreSQLParser.KW_CREATE - 30)) | (1 << (PostgreSQLParser.KW_CURRENT_CATALOG - 30)) | (1 << (PostgreSQLParser.KW_CURRENT_DATE - 30)) | (1 << (PostgreSQLParser.KW_CURRENT_ROLE - 30)) | (1 << (PostgreSQLParser.KW_CURRENT_TIME - 30)) | (1 << (PostgreSQLParser.KW_CURRENT_TIMESTAMP - 30)) | (1 << (PostgreSQLParser.KW_CURRENT_USER - 30)) | (1 << (PostgreSQLParser.KW_DEFERRABLE - 30)) | (1 << (PostgreSQLParser.KW_DESC - 30)) | (1 << (PostgreSQLParser.KW_DISTINCT - 30)) | (1 << (PostgreSQLParser.KW_DO - 30)) | (1 << (PostgreSQLParser.KW_ELSE - 30)) | (1 << (PostgreSQLParser.KW_EXCEPT - 30)) | (1 << (PostgreSQLParser.KW_FALSE - 30)) | (1 << (PostgreSQLParser.KW_FETCH - 30)))) !== 0) || ((((_la - 62)) & ~0x1F) === 0 && ((1 << (_la - 62)) & ((1 << (PostgreSQLParser.KW_FOR - 62)) | (1 << (PostgreSQLParser.KW_FOREIGN - 62)) | (1 << (PostgreSQLParser.KW_FROM - 62)) | (1 << (PostgreSQLParser.KW_GRANT - 62)) | (1 << (PostgreSQLParser.KW_GROUP - 62)) | (1 << (PostgreSQLParser.KW_HAVING - 62)) | (1 << (PostgreSQLParser.KW_IN - 62)) | (1 << (PostgreSQLParser.KW_INITIALLY - 62)) | (1 << (PostgreSQLParser.KW_INTERSECT - 62)) | (1 << (PostgreSQLParser.KW_LATERAL - 62)) | (1 << (PostgreSQLParser.KW_LEADING - 62)) | (1 << (PostgreSQLParser.KW_LIMIT - 62)) | (1 << (PostgreSQLParser.KW_LOCALTIME - 62)) | (1 << (PostgreSQLParser.KW_LOCALTIMESTAMP - 62)) | (1 << (PostgreSQLParser.KW_NOT - 62)) | (1 << (PostgreSQLParser.KW_NULL - 62)) | (1 << (PostgreSQLParser.KW_OFFSET - 62)) | (1 << (PostgreSQLParser.KW_ON - 62)) | (1 << (PostgreSQLParser.KW_ONLY - 62)) | (1 << (PostgreSQLParser.KW_OR - 62)) | (1 << (PostgreSQLParser.KW_ORDER - 62)) | (1 << (PostgreSQLParser.KW_PLACING - 62)) | (1 << (PostgreSQLParser.KW_PRIMARY - 62)) | (1 << (PostgreSQLParser.KW_REFERENCES - 62)) | (1 << (PostgreSQLParser.KW_RETURNING - 62)) | (1 << (PostgreSQLParser.KW_SELECT - 62)) | (1 << (PostgreSQLParser.KW_SESSION_USER - 62)) | (1 << (PostgreSQLParser.KW_SOME - 62)) | (1 << (PostgreSQLParser.KW_SYMMETRIC - 62)) | (1 << (PostgreSQLParser.KW_TABLE - 62)) | (1 << (PostgreSQLParser.KW_THEN - 62)))) !== 0) || ((((_la - 94)) & ~0x1F) === 0 && ((1 << (_la - 94)) & ((1 << (PostgreSQLParser.KW_TO - 94)) | (1 << (PostgreSQLParser.KW_TRAILING - 94)) | (1 << (PostgreSQLParser.KW_TRUE - 94)) | (1 << (PostgreSQLParser.KW_UNION - 94)) | (1 << (PostgreSQLParser.KW_UNIQUE - 94)) | (1 << (PostgreSQLParser.KW_USER - 94)) | (1 << (PostgreSQLParser.KW_USING - 94)) | (1 << (PostgreSQLParser.KW_VARIADIC - 94)) | (1 << (PostgreSQLParser.KW_WHEN - 94)) | (1 << (PostgreSQLParser.KW_WHERE - 94)) | (1 << (PostgreSQLParser.KW_WINDOW - 94)) | (1 << (PostgreSQLParser.KW_WITH - 94)))) !== 0) || _la === PostgreSQLParser.KW_END)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pl_function(): Pl_functionContext {
		let _localctx: Pl_functionContext = new Pl_functionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1404, PostgreSQLParser.RULE_pl_function);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10344;
			this.comp_options();
			this.state = 10345;
			this.pl_block();
			this.state = 10346;
			this.opt_semi();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comp_options(): Comp_optionsContext {
		let _localctx: Comp_optionsContext = new Comp_optionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1406, PostgreSQLParser.RULE_comp_options);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10351;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.Operator) {
				{
				{
				this.state = 10348;
				this.comp_option();
				}
				}
				this.state = 10353;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comp_option(): Comp_optionContext {
		let _localctx: Comp_optionContext = new Comp_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1408, PostgreSQLParser.RULE_comp_option);
		try {
			this.state = 10374;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 995, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10354;
				this.sharp();
				this.state = 10355;
				this.match(PostgreSQLParser.KW_OPTION);
				this.state = 10356;
				this.match(PostgreSQLParser.KW_DUMP);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10358;
				this.sharp();
				this.state = 10359;
				this.match(PostgreSQLParser.KW_PRINT_STRICT_PARAMS);
				this.state = 10360;
				this.option_value();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10362;
				this.sharp();
				this.state = 10363;
				this.match(PostgreSQLParser.KW_VARIABLE_CONFLICT);
				this.state = 10364;
				this.match(PostgreSQLParser.KW_ERROR);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10366;
				this.sharp();
				this.state = 10367;
				this.match(PostgreSQLParser.KW_VARIABLE_CONFLICT);
				this.state = 10368;
				this.match(PostgreSQLParser.KW_USE_VARIABLE);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10370;
				this.sharp();
				this.state = 10371;
				this.match(PostgreSQLParser.KW_VARIABLE_CONFLICT);
				this.state = 10372;
				this.match(PostgreSQLParser.KW_USE_COLUMN);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sharp(): SharpContext {
		let _localctx: SharpContext = new SharpContext(this._ctx, this.state);
		this.enterRule(_localctx, 1410, PostgreSQLParser.RULE_sharp);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10376;
			this.match(PostgreSQLParser.Operator);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public option_value(): Option_valueContext {
		let _localctx: Option_valueContext = new Option_valueContext(this._ctx, this.state);
		this.enterRule(_localctx, 1412, PostgreSQLParser.RULE_option_value);
		try {
			this.state = 10382;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 996, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10378;
				this.sconst();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10379;
				this.reserved_keyword();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10380;
				this.plsql_unreserved_keyword();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10381;
				this.unreserved_keyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_semi(): Opt_semiContext {
		let _localctx: Opt_semiContext = new Opt_semiContext(this._ctx, this.state);
		this.enterRule(_localctx, 1414, PostgreSQLParser.RULE_opt_semi);
		try {
			this.state = 10386;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.EOF:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.SEMI:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10385;
				this.match(PostgreSQLParser.SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pl_block(): Pl_blockContext {
		let _localctx: Pl_blockContext = new Pl_blockContext(this._ctx, this.state);
		this.enterRule(_localctx, 1416, PostgreSQLParser.RULE_pl_block);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10388;
			this.decl_sect();
			this.state = 10389;
			this.match(PostgreSQLParser.KW_BEGIN);
			this.state = 10390;
			this.proc_sect();
			this.state = 10391;
			this.exception_sect();
			this.state = 10392;
			this.match(PostgreSQLParser.KW_END);
			this.state = 10393;
			this.opt_label();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_sect(): Decl_sectContext {
		let _localctx: Decl_sectContext = new Decl_sectContext(this._ctx, this.state);
		this.enterRule(_localctx, 1418, PostgreSQLParser.RULE_decl_sect);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10395;
			this.opt_block_label();
			this.state = 10400;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_DECLARE) {
				{
				this.state = 10396;
				this.decl_start();
				this.state = 10398;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 998, this._ctx) ) {
				case 1:
					{
					this.state = 10397;
					this.decl_stmts();
					}
					break;
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_start(): Decl_startContext {
		let _localctx: Decl_startContext = new Decl_startContext(this._ctx, this.state);
		this.enterRule(_localctx, 1420, PostgreSQLParser.RULE_decl_start);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10402;
			this.match(PostgreSQLParser.KW_DECLARE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_stmts(): Decl_stmtsContext {
		let _localctx: Decl_stmtsContext = new Decl_stmtsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1422, PostgreSQLParser.RULE_decl_stmts);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10405;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 10404;
					this.decl_stmt();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 10407;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1000, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public label_decl(): Label_declContext {
		let _localctx: Label_declContext = new Label_declContext(this._ctx, this.state);
		this.enterRule(_localctx, 1424, PostgreSQLParser.RULE_label_decl);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10409;
			this.match(PostgreSQLParser.LESS_LESS);
			this.state = 10410;
			this.any_identifier();
			this.state = 10411;
			this.match(PostgreSQLParser.GREATER_GREATER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_stmt(): Decl_stmtContext {
		let _localctx: Decl_stmtContext = new Decl_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 1426, PostgreSQLParser.RULE_decl_stmt);
		try {
			this.state = 10416;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1001, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10413;
				this.decl_statement();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10414;
				this.match(PostgreSQLParser.KW_DECLARE);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10415;
				this.label_decl();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_statement(): Decl_statementContext {
		let _localctx: Decl_statementContext = new Decl_statementContext(this._ctx, this.state);
		this.enterRule(_localctx, 1428, PostgreSQLParser.RULE_decl_statement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10418;
			this.decl_varname();
			this.state = 10434;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1002, this._ctx) ) {
			case 1:
				{
				this.state = 10419;
				this.match(PostgreSQLParser.KW_ALIAS);
				this.state = 10420;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 10421;
				this.decl_aliasitem();
				}
				break;

			case 2:
				{
				this.state = 10422;
				this.decl_const();
				this.state = 10423;
				this.decl_datatype();
				this.state = 10424;
				this.decl_collate();
				this.state = 10425;
				this.decl_notnull();
				this.state = 10426;
				this.decl_defval();
				}
				break;

			case 3:
				{
				this.state = 10428;
				this.opt_scrollable();
				this.state = 10429;
				this.match(PostgreSQLParser.KW_CURSOR);
				this.state = 10430;
				this.decl_cursor_args();
				this.state = 10431;
				this.decl_is_for();
				this.state = 10432;
				this.decl_cursor_query();
				}
				break;
			}
			this.state = 10436;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_scrollable(): Opt_scrollableContext {
		let _localctx: Opt_scrollableContext = new Opt_scrollableContext(this._ctx, this.state);
		this.enterRule(_localctx, 1430, PostgreSQLParser.RULE_opt_scrollable);
		try {
			this.state = 10442;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_CURSOR:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_NO:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10439;
				this.match(PostgreSQLParser.KW_NO);
				this.state = 10440;
				this.match(PostgreSQLParser.KW_SCROLL);
				}
				break;
			case PostgreSQLParser.KW_SCROLL:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10441;
				this.match(PostgreSQLParser.KW_SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_cursor_query(): Decl_cursor_queryContext {
		let _localctx: Decl_cursor_queryContext = new Decl_cursor_queryContext(this._ctx, this.state);
		this.enterRule(_localctx, 1432, PostgreSQLParser.RULE_decl_cursor_query);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10444;
			this.selectstmt();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_cursor_args(): Decl_cursor_argsContext {
		let _localctx: Decl_cursor_argsContext = new Decl_cursor_argsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1434, PostgreSQLParser.RULE_decl_cursor_args);
		try {
			this.state = 10451;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_FOR:
			case PostgreSQLParser.KW_IS:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.OPEN_PAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10447;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 10448;
				this.decl_cursor_arglist();
				this.state = 10449;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_cursor_arglist(): Decl_cursor_arglistContext {
		let _localctx: Decl_cursor_arglistContext = new Decl_cursor_arglistContext(this._ctx, this.state);
		this.enterRule(_localctx, 1436, PostgreSQLParser.RULE_decl_cursor_arglist);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10453;
			this.decl_cursor_arg();
			this.state = 10458;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 10454;
				this.match(PostgreSQLParser.COMMA);
				this.state = 10455;
				this.decl_cursor_arg();
				}
				}
				this.state = 10460;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_cursor_arg(): Decl_cursor_argContext {
		let _localctx: Decl_cursor_argContext = new Decl_cursor_argContext(this._ctx, this.state);
		this.enterRule(_localctx, 1438, PostgreSQLParser.RULE_decl_cursor_arg);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10461;
			this.decl_varname();
			this.state = 10462;
			this.decl_datatype();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_is_for(): Decl_is_forContext {
		let _localctx: Decl_is_forContext = new Decl_is_forContext(this._ctx, this.state);
		this.enterRule(_localctx, 1440, PostgreSQLParser.RULE_decl_is_for);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10464;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_FOR || _la === PostgreSQLParser.KW_IS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_aliasitem(): Decl_aliasitemContext {
		let _localctx: Decl_aliasitemContext = new Decl_aliasitemContext(this._ctx, this.state);
		this.enterRule(_localctx, 1442, PostgreSQLParser.RULE_decl_aliasitem);
		try {
			this.state = 10468;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.PARAM:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10466;
				this.match(PostgreSQLParser.PARAM);
				}
				break;
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10467;
				this.colid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_varname(): Decl_varnameContext {
		let _localctx: Decl_varnameContext = new Decl_varnameContext(this._ctx, this.state);
		this.enterRule(_localctx, 1444, PostgreSQLParser.RULE_decl_varname);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10470;
			this.any_identifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_const(): Decl_constContext {
		let _localctx: Decl_constContext = new Decl_constContext(this._ctx, this.state);
		this.enterRule(_localctx, 1446, PostgreSQLParser.RULE_decl_const);
		try {
			this.state = 10474;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1007, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10473;
				this.match(PostgreSQLParser.KW_CONSTANT);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_datatype(): Decl_datatypeContext {
		let _localctx: Decl_datatypeContext = new Decl_datatypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1448, PostgreSQLParser.RULE_decl_datatype);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10476;
			this.typename();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_collate(): Decl_collateContext {
		let _localctx: Decl_collateContext = new Decl_collateContext(this._ctx, this.state);
		this.enterRule(_localctx, 1450, PostgreSQLParser.RULE_decl_collate);
		try {
			this.state = 10481;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.SEMI:
			case PostgreSQLParser.EQUAL:
			case PostgreSQLParser.COLON_EQUALS:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_NOT:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_COLLATE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10479;
				this.match(PostgreSQLParser.KW_COLLATE);
				this.state = 10480;
				this.any_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_notnull(): Decl_notnullContext {
		let _localctx: Decl_notnullContext = new Decl_notnullContext(this._ctx, this.state);
		this.enterRule(_localctx, 1452, PostgreSQLParser.RULE_decl_notnull);
		try {
			this.state = 10486;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.SEMI:
			case PostgreSQLParser.EQUAL:
			case PostgreSQLParser.COLON_EQUALS:
			case PostgreSQLParser.KW_DEFAULT:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_NOT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10484;
				this.match(PostgreSQLParser.KW_NOT);
				this.state = 10485;
				this.match(PostgreSQLParser.KW_NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_defval(): Decl_defvalContext {
		let _localctx: Decl_defvalContext = new Decl_defvalContext(this._ctx, this.state);
		this.enterRule(_localctx, 1454, PostgreSQLParser.RULE_decl_defval);
		try {
			this.state = 10492;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.SEMI:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.EQUAL:
			case PostgreSQLParser.COLON_EQUALS:
			case PostgreSQLParser.KW_DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10489;
				this.decl_defkey();
				this.state = 10490;
				this.sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public decl_defkey(): Decl_defkeyContext {
		let _localctx: Decl_defkeyContext = new Decl_defkeyContext(this._ctx, this.state);
		this.enterRule(_localctx, 1456, PostgreSQLParser.RULE_decl_defkey);
		try {
			this.state = 10496;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.EQUAL:
			case PostgreSQLParser.COLON_EQUALS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10494;
				this.assign_operator();
				}
				break;
			case PostgreSQLParser.KW_DEFAULT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10495;
				this.match(PostgreSQLParser.KW_DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_operator(): Assign_operatorContext {
		let _localctx: Assign_operatorContext = new Assign_operatorContext(this._ctx, this.state);
		this.enterRule(_localctx, 1458, PostgreSQLParser.RULE_assign_operator);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10498;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.EQUAL || _la === PostgreSQLParser.COLON_EQUALS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public proc_sect(): Proc_sectContext {
		let _localctx: Proc_sectContext = new Proc_sectContext(this._ctx, this.state);
		this.enterRule(_localctx, 1460, PostgreSQLParser.RULE_proc_sect);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10503;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 1012, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 10500;
					this.proc_stmt();
					}
					}
				}
				this.state = 10505;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 1012, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public proc_stmt(): Proc_stmtContext {
		let _localctx: Proc_stmtContext = new Proc_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 1462, PostgreSQLParser.RULE_proc_stmt);
		try {
			this.state = 10533;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1013, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10506;
				this.pl_block();
				this.state = 10507;
				this.match(PostgreSQLParser.SEMI);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10509;
				this.stmt_return();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10510;
				this.stmt_raise();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10511;
				this.stmt_assign();
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10512;
				this.stmt_if();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 10513;
				this.stmt_case();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 10514;
				this.stmt_loop();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 10515;
				this.stmt_while();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 10516;
				this.stmt_for();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 10517;
				this.stmt_foreach_a();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 10518;
				this.stmt_exit();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 10519;
				this.stmt_assert();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 10520;
				this.stmt_execsql();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 10521;
				this.stmt_dynexecute();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 10522;
				this.stmt_perform();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 10523;
				this.stmt_call();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 10524;
				this.stmt_getdiag();
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 10525;
				this.stmt_open();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 10526;
				this.stmt_fetch();
				}
				break;

			case 20:
				this.enterOuterAlt(_localctx, 20);
				{
				this.state = 10527;
				this.stmt_move();
				}
				break;

			case 21:
				this.enterOuterAlt(_localctx, 21);
				{
				this.state = 10528;
				this.stmt_close();
				}
				break;

			case 22:
				this.enterOuterAlt(_localctx, 22);
				{
				this.state = 10529;
				this.stmt_null();
				}
				break;

			case 23:
				this.enterOuterAlt(_localctx, 23);
				{
				this.state = 10530;
				this.stmt_commit();
				}
				break;

			case 24:
				this.enterOuterAlt(_localctx, 24);
				{
				this.state = 10531;
				this.stmt_rollback();
				}
				break;

			case 25:
				this.enterOuterAlt(_localctx, 25);
				{
				this.state = 10532;
				this.stmt_set();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_perform(): Stmt_performContext {
		let _localctx: Stmt_performContext = new Stmt_performContext(this._ctx, this.state);
		this.enterRule(_localctx, 1464, PostgreSQLParser.RULE_stmt_perform);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10535;
			this.match(PostgreSQLParser.KW_PERFORM);
			this.state = 10536;
			this.expr_until_semi();
			this.state = 10537;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_call(): Stmt_callContext {
		let _localctx: Stmt_callContext = new Stmt_callContext(this._ctx, this.state);
		this.enterRule(_localctx, 1466, PostgreSQLParser.RULE_stmt_call);
		try {
			this.state = 10553;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_CALL:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10539;
				this.match(PostgreSQLParser.KW_CALL);
				this.state = 10540;
				this.any_identifier();
				this.state = 10541;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 10542;
				this.opt_expr_list();
				this.state = 10543;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 10544;
				this.match(PostgreSQLParser.SEMI);
				}
				break;
			case PostgreSQLParser.KW_DO:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10546;
				this.match(PostgreSQLParser.KW_DO);
				this.state = 10547;
				this.any_identifier();
				this.state = 10548;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 10549;
				this.opt_expr_list();
				this.state = 10550;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				this.state = 10551;
				this.match(PostgreSQLParser.SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_expr_list(): Opt_expr_listContext {
		let _localctx: Opt_expr_listContext = new Opt_expr_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1468, PostgreSQLParser.RULE_opt_expr_list);
		try {
			this.state = 10557;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.CLOSE_PAREN:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.OPEN_PAREN:
			case PostgreSQLParser.PLUS:
			case PostgreSQLParser.MINUS:
			case PostgreSQLParser.PARAM:
			case PostgreSQLParser.Operator:
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_CASE:
			case PostgreSQLParser.KW_CAST:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_CURRENT_CATALOG:
			case PostgreSQLParser.KW_CURRENT_DATE:
			case PostgreSQLParser.KW_CURRENT_ROLE:
			case PostgreSQLParser.KW_CURRENT_TIME:
			case PostgreSQLParser.KW_CURRENT_TIMESTAMP:
			case PostgreSQLParser.KW_CURRENT_USER:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FALSE:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_LOCALTIME:
			case PostgreSQLParser.KW_LOCALTIMESTAMP:
			case PostgreSQLParser.KW_NOT:
			case PostgreSQLParser.KW_NULL:
			case PostgreSQLParser.KW_SESSION_USER:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_TRUE:
			case PostgreSQLParser.KW_UNIQUE:
			case PostgreSQLParser.KW_USER:
			case PostgreSQLParser.KW_AUTHORIZATION:
			case PostgreSQLParser.KW_BINARY:
			case PostgreSQLParser.KW_COLLATION:
			case PostgreSQLParser.KW_CONCURRENTLY:
			case PostgreSQLParser.KW_CROSS:
			case PostgreSQLParser.KW_CURRENT_SCHEMA:
			case PostgreSQLParser.KW_FREEZE:
			case PostgreSQLParser.KW_FULL:
			case PostgreSQLParser.KW_ILIKE:
			case PostgreSQLParser.KW_INNER:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_ISNULL:
			case PostgreSQLParser.KW_JOIN:
			case PostgreSQLParser.KW_LEFT:
			case PostgreSQLParser.KW_LIKE:
			case PostgreSQLParser.KW_NATURAL:
			case PostgreSQLParser.KW_NOTNULL:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_OVERLAPS:
			case PostgreSQLParser.KW_RIGHT:
			case PostgreSQLParser.KW_SIMILAR:
			case PostgreSQLParser.KW_VERBOSE:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_TABLESAMPLE:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.StringConstant:
			case PostgreSQLParser.UnicodeEscapeStringConstant:
			case PostgreSQLParser.BeginDollarStringConstant:
			case PostgreSQLParser.BinaryStringConstant:
			case PostgreSQLParser.HexadecimalStringConstant:
			case PostgreSQLParser.Integral:
			case PostgreSQLParser.Numeric:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
			case PostgreSQLParser.EscapeStringConstant:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10556;
				this.expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_assign(): Stmt_assignContext {
		let _localctx: Stmt_assignContext = new Stmt_assignContext(this._ctx, this.state);
		this.enterRule(_localctx, 1470, PostgreSQLParser.RULE_stmt_assign);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10559;
			this.assign_var();
			this.state = 10560;
			this.assign_operator();
			this.state = 10561;
			this.sql_expression();
			this.state = 10562;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_getdiag(): Stmt_getdiagContext {
		let _localctx: Stmt_getdiagContext = new Stmt_getdiagContext(this._ctx, this.state);
		this.enterRule(_localctx, 1472, PostgreSQLParser.RULE_stmt_getdiag);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10564;
			this.match(PostgreSQLParser.KW_GET);
			this.state = 10565;
			this.getdiag_area_opt();
			this.state = 10566;
			this.match(PostgreSQLParser.KW_DIAGNOSTICS);
			this.state = 10567;
			this.getdiag_list();
			this.state = 10568;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public getdiag_area_opt(): Getdiag_area_optContext {
		let _localctx: Getdiag_area_optContext = new Getdiag_area_optContext(this._ctx, this.state);
		this.enterRule(_localctx, 1474, PostgreSQLParser.RULE_getdiag_area_opt);
		try {
			this.state = 10573;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_DIAGNOSTICS:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_CURRENT:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10571;
				this.match(PostgreSQLParser.KW_CURRENT);
				}
				break;
			case PostgreSQLParser.KW_STACKED:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10572;
				this.match(PostgreSQLParser.KW_STACKED);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public getdiag_list(): Getdiag_listContext {
		let _localctx: Getdiag_listContext = new Getdiag_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1476, PostgreSQLParser.RULE_getdiag_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10575;
			this.getdiag_list_item();
			this.state = 10580;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 10576;
				this.match(PostgreSQLParser.COMMA);
				this.state = 10577;
				this.getdiag_list_item();
				}
				}
				this.state = 10582;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public getdiag_list_item(): Getdiag_list_itemContext {
		let _localctx: Getdiag_list_itemContext = new Getdiag_list_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 1478, PostgreSQLParser.RULE_getdiag_list_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10583;
			this.getdiag_target();
			this.state = 10584;
			this.assign_operator();
			this.state = 10585;
			this.getdiag_item();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public getdiag_item(): Getdiag_itemContext {
		let _localctx: Getdiag_itemContext = new Getdiag_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 1480, PostgreSQLParser.RULE_getdiag_item);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10587;
			this.colid();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public getdiag_target(): Getdiag_targetContext {
		let _localctx: Getdiag_targetContext = new Getdiag_targetContext(this._ctx, this.state);
		this.enterRule(_localctx, 1482, PostgreSQLParser.RULE_getdiag_target);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10589;
			this.assign_var();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public assign_var(): Assign_varContext {
		let _localctx: Assign_varContext = new Assign_varContext(this._ctx, this.state);
		this.enterRule(_localctx, 1484, PostgreSQLParser.RULE_assign_var);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10593;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				{
				this.state = 10591;
				this.any_name();
				}
				break;
			case PostgreSQLParser.PARAM:
				{
				this.state = 10592;
				this.match(PostgreSQLParser.PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 10601;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.OPEN_BRACKET) {
				{
				{
				this.state = 10595;
				this.match(PostgreSQLParser.OPEN_BRACKET);
				this.state = 10596;
				this.expr_until_rightbracket();
				this.state = 10597;
				this.match(PostgreSQLParser.CLOSE_BRACKET);
				}
				}
				this.state = 10603;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_if(): Stmt_ifContext {
		let _localctx: Stmt_ifContext = new Stmt_ifContext(this._ctx, this.state);
		this.enterRule(_localctx, 1486, PostgreSQLParser.RULE_stmt_if);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10604;
			this.match(PostgreSQLParser.KW_IF);
			this.state = 10605;
			this.expr_until_then();
			this.state = 10606;
			this.match(PostgreSQLParser.KW_THEN);
			this.state = 10607;
			this.proc_sect();
			this.state = 10608;
			this.stmt_elsifs();
			this.state = 10609;
			this.stmt_else();
			this.state = 10610;
			this.match(PostgreSQLParser.KW_END);
			this.state = 10611;
			this.match(PostgreSQLParser.KW_IF);
			this.state = 10612;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_elsifs(): Stmt_elsifsContext {
		let _localctx: Stmt_elsifsContext = new Stmt_elsifsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1488, PostgreSQLParser.RULE_stmt_elsifs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10621;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.KW_ELSIF) {
				{
				{
				this.state = 10614;
				this.match(PostgreSQLParser.KW_ELSIF);
				this.state = 10615;
				this.a_expr();
				this.state = 10616;
				this.match(PostgreSQLParser.KW_THEN);
				this.state = 10617;
				this.proc_sect();
				}
				}
				this.state = 10623;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_else(): Stmt_elseContext {
		let _localctx: Stmt_elseContext = new Stmt_elseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1490, PostgreSQLParser.RULE_stmt_else);
		try {
			this.state = 10627;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_END:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_ELSE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10625;
				this.match(PostgreSQLParser.KW_ELSE);
				this.state = 10626;
				this.proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_case(): Stmt_caseContext {
		let _localctx: Stmt_caseContext = new Stmt_caseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1492, PostgreSQLParser.RULE_stmt_case);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10629;
			this.match(PostgreSQLParser.KW_CASE);
			this.state = 10630;
			this.opt_expr_until_when();
			this.state = 10631;
			this.case_when_list();
			this.state = 10632;
			this.opt_case_else();
			this.state = 10633;
			this.match(PostgreSQLParser.KW_END);
			this.state = 10634;
			this.match(PostgreSQLParser.KW_CASE);
			this.state = 10635;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_expr_until_when(): Opt_expr_until_whenContext {
		let _localctx: Opt_expr_until_whenContext = new Opt_expr_until_whenContext(this._ctx, this.state);
		this.enterRule(_localctx, 1494, PostgreSQLParser.RULE_opt_expr_until_when);
		try {
			this.state = 10639;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1022, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10638;
				this.sql_expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_when_list(): Case_when_listContext {
		let _localctx: Case_when_listContext = new Case_when_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1496, PostgreSQLParser.RULE_case_when_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10642;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 10641;
				this.case_when();
				}
				}
				this.state = 10644;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PostgreSQLParser.KW_WHEN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public case_when(): Case_whenContext {
		let _localctx: Case_whenContext = new Case_whenContext(this._ctx, this.state);
		this.enterRule(_localctx, 1498, PostgreSQLParser.RULE_case_when);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10646;
			this.match(PostgreSQLParser.KW_WHEN);
			this.state = 10647;
			this.expr_list();
			this.state = 10648;
			this.match(PostgreSQLParser.KW_THEN);
			this.state = 10649;
			this.proc_sect();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_case_else(): Opt_case_elseContext {
		let _localctx: Opt_case_elseContext = new Opt_case_elseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1500, PostgreSQLParser.RULE_opt_case_else);
		try {
			this.state = 10654;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_END:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_ELSE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10652;
				this.match(PostgreSQLParser.KW_ELSE);
				this.state = 10653;
				this.proc_sect();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_loop(): Stmt_loopContext {
		let _localctx: Stmt_loopContext = new Stmt_loopContext(this._ctx, this.state);
		this.enterRule(_localctx, 1502, PostgreSQLParser.RULE_stmt_loop);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10656;
			this.opt_loop_label();
			this.state = 10657;
			this.loop_body();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_while(): Stmt_whileContext {
		let _localctx: Stmt_whileContext = new Stmt_whileContext(this._ctx, this.state);
		this.enterRule(_localctx, 1504, PostgreSQLParser.RULE_stmt_while);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10659;
			this.opt_loop_label();
			this.state = 10660;
			this.match(PostgreSQLParser.KW_WHILE);
			this.state = 10661;
			this.expr_until_loop();
			this.state = 10662;
			this.loop_body();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_for(): Stmt_forContext {
		let _localctx: Stmt_forContext = new Stmt_forContext(this._ctx, this.state);
		this.enterRule(_localctx, 1506, PostgreSQLParser.RULE_stmt_for);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10664;
			this.opt_loop_label();
			this.state = 10665;
			this.match(PostgreSQLParser.KW_FOR);
			this.state = 10666;
			this.for_control();
			this.state = 10667;
			this.loop_body();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_control(): For_controlContext {
		let _localctx: For_controlContext = new For_controlContext(this._ctx, this.state);
		this.enterRule(_localctx, 1508, PostgreSQLParser.RULE_for_control);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10669;
			this.for_variable();
			this.state = 10670;
			this.match(PostgreSQLParser.KW_IN);
			this.state = 10686;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1025, this._ctx) ) {
			case 1:
				{
				this.state = 10671;
				this.cursor_name();
				this.state = 10672;
				this.opt_cursor_parameters();
				}
				break;

			case 2:
				{
				this.state = 10674;
				this.selectstmt();
				}
				break;

			case 3:
				{
				this.state = 10675;
				this.explainstmt();
				}
				break;

			case 4:
				{
				this.state = 10676;
				this.match(PostgreSQLParser.KW_EXECUTE);
				this.state = 10677;
				this.a_expr();
				this.state = 10678;
				this.opt_for_using_expression();
				}
				break;

			case 5:
				{
				this.state = 10680;
				this.opt_reverse();
				this.state = 10681;
				this.a_expr();
				this.state = 10682;
				this.match(PostgreSQLParser.DOT_DOT);
				this.state = 10683;
				this.a_expr();
				this.state = 10684;
				this.opt_by_expression();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_for_using_expression(): Opt_for_using_expressionContext {
		let _localctx: Opt_for_using_expressionContext = new Opt_for_using_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1510, PostgreSQLParser.RULE_opt_for_using_expression);
		try {
			this.state = 10691;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.SEMI:
			case PostgreSQLParser.KW_LOOP:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_USING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10689;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 10690;
				this.expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_cursor_parameters(): Opt_cursor_parametersContext {
		let _localctx: Opt_cursor_parametersContext = new Opt_cursor_parametersContext(this._ctx, this.state);
		this.enterRule(_localctx, 1512, PostgreSQLParser.RULE_opt_cursor_parameters);
		let _la: number;
		try {
			this.state = 10705;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_LOOP:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.OPEN_PAREN:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10694;
				this.match(PostgreSQLParser.OPEN_PAREN);
				this.state = 10695;
				this.a_expr();
				this.state = 10700;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === PostgreSQLParser.COMMA) {
					{
					{
					this.state = 10696;
					this.match(PostgreSQLParser.COMMA);
					this.state = 10697;
					this.a_expr();
					}
					}
					this.state = 10702;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 10703;
				this.match(PostgreSQLParser.CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_reverse(): Opt_reverseContext {
		let _localctx: Opt_reverseContext = new Opt_reverseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1514, PostgreSQLParser.RULE_opt_reverse);
		try {
			this.state = 10709;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1029, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10708;
				this.match(PostgreSQLParser.KW_REVERSE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_by_expression(): Opt_by_expressionContext {
		let _localctx: Opt_by_expressionContext = new Opt_by_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1516, PostgreSQLParser.RULE_opt_by_expression);
		try {
			this.state = 10714;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_LOOP:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_BY:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10712;
				this.match(PostgreSQLParser.KW_BY);
				this.state = 10713;
				this.a_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public for_variable(): For_variableContext {
		let _localctx: For_variableContext = new For_variableContext(this._ctx, this.state);
		this.enterRule(_localctx, 1518, PostgreSQLParser.RULE_for_variable);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10716;
			this.any_name_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_foreach_a(): Stmt_foreach_aContext {
		let _localctx: Stmt_foreach_aContext = new Stmt_foreach_aContext(this._ctx, this.state);
		this.enterRule(_localctx, 1520, PostgreSQLParser.RULE_stmt_foreach_a);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10718;
			this.opt_loop_label();
			this.state = 10719;
			this.match(PostgreSQLParser.KW_FOREACH);
			this.state = 10720;
			this.for_variable();
			this.state = 10721;
			this.foreach_slice();
			this.state = 10722;
			this.match(PostgreSQLParser.KW_IN);
			this.state = 10723;
			this.match(PostgreSQLParser.KW_ARRAY);
			this.state = 10724;
			this.a_expr();
			this.state = 10725;
			this.loop_body();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public foreach_slice(): Foreach_sliceContext {
		let _localctx: Foreach_sliceContext = new Foreach_sliceContext(this._ctx, this.state);
		this.enterRule(_localctx, 1522, PostgreSQLParser.RULE_foreach_slice);
		try {
			this.state = 10730;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_IN:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_SLICE:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10728;
				this.match(PostgreSQLParser.KW_SLICE);
				this.state = 10729;
				this.iconst();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_exit(): Stmt_exitContext {
		let _localctx: Stmt_exitContext = new Stmt_exitContext(this._ctx, this.state);
		this.enterRule(_localctx, 1524, PostgreSQLParser.RULE_stmt_exit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10732;
			this.exit_type();
			this.state = 10733;
			this.opt_label();
			this.state = 10735;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WHEN) {
				{
				this.state = 10734;
				this.opt_exitcond();
				}
			}

			this.state = 10737;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exit_type(): Exit_typeContext {
		let _localctx: Exit_typeContext = new Exit_typeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1526, PostgreSQLParser.RULE_exit_type);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10739;
			_la = this._input.LA(1);
			if (!(_la === PostgreSQLParser.KW_CONTINUE || _la === PostgreSQLParser.KW_EXIT)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_return(): Stmt_returnContext {
		let _localctx: Stmt_returnContext = new Stmt_returnContext(this._ctx, this.state);
		this.enterRule(_localctx, 1528, PostgreSQLParser.RULE_stmt_return);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10741;
			this.match(PostgreSQLParser.KW_RETURN);
			this.state = 10753;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1034, this._ctx) ) {
			case 1:
				{
				this.state = 10742;
				this.match(PostgreSQLParser.KW_NEXT);
				this.state = 10743;
				this.sql_expression();
				}
				break;

			case 2:
				{
				this.state = 10744;
				this.match(PostgreSQLParser.KW_QUERY);
				this.state = 10750;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_EXECUTE:
					{
					this.state = 10745;
					this.match(PostgreSQLParser.KW_EXECUTE);
					this.state = 10746;
					this.a_expr();
					this.state = 10747;
					this.opt_for_using_expression();
					}
					break;
				case PostgreSQLParser.OPEN_PAREN:
				case PostgreSQLParser.KW_SELECT:
				case PostgreSQLParser.KW_TABLE:
				case PostgreSQLParser.KW_WITH:
				case PostgreSQLParser.KW_VALUES:
					{
					this.state = 10749;
					this.selectstmt();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 3:
				{
				this.state = 10752;
				this.opt_return_result();
				}
				break;
			}
			this.state = 10755;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_return_result(): Opt_return_resultContext {
		let _localctx: Opt_return_resultContext = new Opt_return_resultContext(this._ctx, this.state);
		this.enterRule(_localctx, 1530, PostgreSQLParser.RULE_opt_return_result);
		try {
			this.state = 10759;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1035, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10758;
				this.sql_expression();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_raise(): Stmt_raiseContext {
		let _localctx: Stmt_raiseContext = new Stmt_raiseContext(this._ctx, this.state);
		this.enterRule(_localctx, 1532, PostgreSQLParser.RULE_stmt_raise);
		let _la: number;
		try {
			this.state = 10795;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1040, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10761;
				this.match(PostgreSQLParser.KW_RAISE);
				this.state = 10763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 512)) & ~0x1F) === 0 && ((1 << (_la - 512)) & ((1 << (PostgreSQLParser.KW_DEBUG - 512)) | (1 << (PostgreSQLParser.KW_LOG - 512)) | (1 << (PostgreSQLParser.KW_INFO - 512)) | (1 << (PostgreSQLParser.KW_NOTICE - 512)) | (1 << (PostgreSQLParser.KW_WARNING - 512)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 512)))) !== 0)) {
					{
					this.state = 10762;
					this.opt_stmt_raise_level();
					}
				}

				this.state = 10765;
				this.sconst();
				this.state = 10766;
				this.opt_raise_list();
				this.state = 10767;
				this.opt_raise_using();
				this.state = 10768;
				this.match(PostgreSQLParser.SEMI);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10770;
				this.match(PostgreSQLParser.KW_RAISE);
				this.state = 10772;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1037, this._ctx) ) {
				case 1:
					{
					this.state = 10771;
					this.opt_stmt_raise_level();
					}
					break;
				}
				this.state = 10774;
				this.identifier();
				this.state = 10775;
				this.opt_raise_using();
				this.state = 10776;
				this.match(PostgreSQLParser.SEMI);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10778;
				this.match(PostgreSQLParser.KW_RAISE);
				this.state = 10780;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 512)) & ~0x1F) === 0 && ((1 << (_la - 512)) & ((1 << (PostgreSQLParser.KW_DEBUG - 512)) | (1 << (PostgreSQLParser.KW_LOG - 512)) | (1 << (PostgreSQLParser.KW_INFO - 512)) | (1 << (PostgreSQLParser.KW_NOTICE - 512)) | (1 << (PostgreSQLParser.KW_WARNING - 512)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 512)))) !== 0)) {
					{
					this.state = 10779;
					this.opt_stmt_raise_level();
					}
				}

				this.state = 10782;
				this.match(PostgreSQLParser.KW_SQLSTATE);
				this.state = 10783;
				this.sconst();
				this.state = 10784;
				this.opt_raise_using();
				this.state = 10785;
				this.match(PostgreSQLParser.SEMI);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10787;
				this.match(PostgreSQLParser.KW_RAISE);
				this.state = 10789;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (((((_la - 512)) & ~0x1F) === 0 && ((1 << (_la - 512)) & ((1 << (PostgreSQLParser.KW_DEBUG - 512)) | (1 << (PostgreSQLParser.KW_LOG - 512)) | (1 << (PostgreSQLParser.KW_INFO - 512)) | (1 << (PostgreSQLParser.KW_NOTICE - 512)) | (1 << (PostgreSQLParser.KW_WARNING - 512)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 512)))) !== 0)) {
					{
					this.state = 10788;
					this.opt_stmt_raise_level();
					}
				}

				this.state = 10791;
				this.opt_raise_using();
				this.state = 10792;
				this.match(PostgreSQLParser.SEMI);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10794;
				this.match(PostgreSQLParser.KW_RAISE);
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_stmt_raise_level(): Opt_stmt_raise_levelContext {
		let _localctx: Opt_stmt_raise_levelContext = new Opt_stmt_raise_levelContext(this._ctx, this.state);
		this.enterRule(_localctx, 1534, PostgreSQLParser.RULE_opt_stmt_raise_level);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10797;
			_la = this._input.LA(1);
			if (!(((((_la - 512)) & ~0x1F) === 0 && ((1 << (_la - 512)) & ((1 << (PostgreSQLParser.KW_DEBUG - 512)) | (1 << (PostgreSQLParser.KW_LOG - 512)) | (1 << (PostgreSQLParser.KW_INFO - 512)) | (1 << (PostgreSQLParser.KW_NOTICE - 512)) | (1 << (PostgreSQLParser.KW_WARNING - 512)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 512)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_raise_list(): Opt_raise_listContext {
		let _localctx: Opt_raise_listContext = new Opt_raise_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1536, PostgreSQLParser.RULE_opt_raise_list);
		let _la: number;
		try {
			this.state = 10806;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.SEMI:
			case PostgreSQLParser.KW_USING:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.COMMA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10802;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 10800;
					this.match(PostgreSQLParser.COMMA);
					this.state = 10801;
					this.a_expr();
					}
					}
					this.state = 10804;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === PostgreSQLParser.COMMA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_raise_using(): Opt_raise_usingContext {
		let _localctx: Opt_raise_usingContext = new Opt_raise_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 1538, PostgreSQLParser.RULE_opt_raise_using);
		try {
			this.state = 10811;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.SEMI:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_USING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10809;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 10810;
				this.opt_raise_using_elem_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_raise_using_elem(): Opt_raise_using_elemContext {
		let _localctx: Opt_raise_using_elemContext = new Opt_raise_using_elemContext(this._ctx, this.state);
		this.enterRule(_localctx, 1540, PostgreSQLParser.RULE_opt_raise_using_elem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10813;
			this.identifier();
			this.state = 10814;
			this.match(PostgreSQLParser.EQUAL);
			this.state = 10815;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_raise_using_elem_list(): Opt_raise_using_elem_listContext {
		let _localctx: Opt_raise_using_elem_listContext = new Opt_raise_using_elem_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1542, PostgreSQLParser.RULE_opt_raise_using_elem_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10817;
			this.opt_raise_using_elem();
			this.state = 10822;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 10818;
				this.match(PostgreSQLParser.COMMA);
				this.state = 10819;
				this.opt_raise_using_elem();
				}
				}
				this.state = 10824;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_assert(): Stmt_assertContext {
		let _localctx: Stmt_assertContext = new Stmt_assertContext(this._ctx, this.state);
		this.enterRule(_localctx, 1544, PostgreSQLParser.RULE_stmt_assert);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10825;
			this.match(PostgreSQLParser.KW_ASSERT);
			this.state = 10826;
			this.sql_expression();
			this.state = 10827;
			this.opt_stmt_assert_message();
			this.state = 10828;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_stmt_assert_message(): Opt_stmt_assert_messageContext {
		let _localctx: Opt_stmt_assert_messageContext = new Opt_stmt_assert_messageContext(this._ctx, this.state);
		this.enterRule(_localctx, 1546, PostgreSQLParser.RULE_opt_stmt_assert_message);
		try {
			this.state = 10833;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.SEMI:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.COMMA:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10831;
				this.match(PostgreSQLParser.COMMA);
				this.state = 10832;
				this.sql_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loop_body(): Loop_bodyContext {
		let _localctx: Loop_bodyContext = new Loop_bodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 1548, PostgreSQLParser.RULE_loop_body);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10835;
			this.match(PostgreSQLParser.KW_LOOP);
			this.state = 10836;
			this.proc_sect();
			this.state = 10837;
			this.match(PostgreSQLParser.KW_END);
			this.state = 10838;
			this.match(PostgreSQLParser.KW_LOOP);
			this.state = 10839;
			this.opt_label();
			this.state = 10840;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_execsql(): Stmt_execsqlContext {
		let _localctx: Stmt_execsqlContext = new Stmt_execsqlContext(this._ctx, this.state);
		this.enterRule(_localctx, 1550, PostgreSQLParser.RULE_stmt_execsql);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10842;
			this.make_execsql_stmt();
			this.state = 10843;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_dynexecute(): Stmt_dynexecuteContext {
		let _localctx: Stmt_dynexecuteContext = new Stmt_dynexecuteContext(this._ctx, this.state);
		this.enterRule(_localctx, 1552, PostgreSQLParser.RULE_stmt_dynexecute);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10845;
			this.match(PostgreSQLParser.KW_EXECUTE);
			this.state = 10846;
			this.a_expr();
			this.state = 10854;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1046, this._ctx) ) {
			case 1:
				{
				this.state = 10847;
				this.opt_execute_into();
				this.state = 10848;
				this.opt_execute_using();
				}
				break;

			case 2:
				{
				this.state = 10850;
				this.opt_execute_using();
				this.state = 10851;
				this.opt_execute_into();
				}
				break;

			case 3:
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			}
			this.state = 10856;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_execute_using(): Opt_execute_usingContext {
		let _localctx: Opt_execute_usingContext = new Opt_execute_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 1554, PostgreSQLParser.RULE_opt_execute_using);
		try {
			this.state = 10861;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1047, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10859;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 10860;
				this.opt_execute_using_list();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_execute_using_list(): Opt_execute_using_listContext {
		let _localctx: Opt_execute_using_listContext = new Opt_execute_using_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1556, PostgreSQLParser.RULE_opt_execute_using_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10863;
			this.a_expr();
			this.state = 10868;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 10864;
				this.match(PostgreSQLParser.COMMA);
				this.state = 10865;
				this.a_expr();
				}
				}
				this.state = 10870;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_execute_into(): Opt_execute_intoContext {
		let _localctx: Opt_execute_intoContext = new Opt_execute_intoContext(this._ctx, this.state);
		this.enterRule(_localctx, 1558, PostgreSQLParser.RULE_opt_execute_into);
		try {
			this.state = 10877;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1050, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10872;
				this.match(PostgreSQLParser.KW_INTO);
				this.state = 10874;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1049, this._ctx) ) {
				case 1:
					{
					this.state = 10873;
					this.match(PostgreSQLParser.KW_STRICT);
					}
					break;
				}
				this.state = 10876;
				this.into_target();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_open(): Stmt_openContext {
		let _localctx: Stmt_openContext = new Stmt_openContext(this._ctx, this.state);
		this.enterRule(_localctx, 1560, PostgreSQLParser.RULE_stmt_open);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10879;
			this.match(PostgreSQLParser.KW_OPEN);
			this.state = 10897;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1053, this._ctx) ) {
			case 1:
				{
				this.state = 10880;
				this.cursor_variable();
				this.state = 10881;
				this.opt_scroll_option();
				this.state = 10882;
				this.match(PostgreSQLParser.KW_FOR);
				this.state = 10888;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.OPEN_PAREN:
				case PostgreSQLParser.KW_SELECT:
				case PostgreSQLParser.KW_TABLE:
				case PostgreSQLParser.KW_WITH:
				case PostgreSQLParser.KW_VALUES:
					{
					this.state = 10883;
					this.selectstmt();
					}
					break;
				case PostgreSQLParser.KW_EXECUTE:
					{
					this.state = 10884;
					this.match(PostgreSQLParser.KW_EXECUTE);
					this.state = 10885;
					this.sql_expression();
					this.state = 10886;
					this.opt_open_using();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 10890;
				this.colid();
				this.state = 10895;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === PostgreSQLParser.OPEN_PAREN) {
					{
					this.state = 10891;
					this.match(PostgreSQLParser.OPEN_PAREN);
					this.state = 10892;
					this.opt_open_bound_list();
					this.state = 10893;
					this.match(PostgreSQLParser.CLOSE_PAREN);
					}
				}

				}
				break;
			}
			this.state = 10899;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_open_bound_list_item(): Opt_open_bound_list_itemContext {
		let _localctx: Opt_open_bound_list_itemContext = new Opt_open_bound_list_itemContext(this._ctx, this.state);
		this.enterRule(_localctx, 1562, PostgreSQLParser.RULE_opt_open_bound_list_item);
		try {
			this.state = 10906;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1054, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10901;
				this.colid();
				this.state = 10902;
				this.match(PostgreSQLParser.COLON_EQUALS);
				this.state = 10903;
				this.a_expr();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10905;
				this.a_expr();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_open_bound_list(): Opt_open_bound_listContext {
		let _localctx: Opt_open_bound_listContext = new Opt_open_bound_listContext(this._ctx, this.state);
		this.enterRule(_localctx, 1564, PostgreSQLParser.RULE_opt_open_bound_list);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10908;
			this.opt_open_bound_list_item();
			this.state = 10913;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.COMMA) {
				{
				{
				this.state = 10909;
				this.match(PostgreSQLParser.COMMA);
				this.state = 10910;
				this.opt_open_bound_list_item();
				}
				}
				this.state = 10915;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_open_using(): Opt_open_usingContext {
		let _localctx: Opt_open_usingContext = new Opt_open_usingContext(this._ctx, this.state);
		this.enterRule(_localctx, 1566, PostgreSQLParser.RULE_opt_open_using);
		try {
			this.state = 10919;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.SEMI:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_USING:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10917;
				this.match(PostgreSQLParser.KW_USING);
				this.state = 10918;
				this.expr_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_scroll_option(): Opt_scroll_optionContext {
		let _localctx: Opt_scroll_optionContext = new Opt_scroll_optionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1568, PostgreSQLParser.RULE_opt_scroll_option);
		try {
			this.state = 10925;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_FOR:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_SCROLL:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10922;
				this.opt_scroll_option_no();
				this.state = 10923;
				this.match(PostgreSQLParser.KW_SCROLL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_scroll_option_no(): Opt_scroll_option_noContext {
		let _localctx: Opt_scroll_option_noContext = new Opt_scroll_option_noContext(this._ctx, this.state);
		this.enterRule(_localctx, 1570, PostgreSQLParser.RULE_opt_scroll_option_no);
		try {
			this.state = 10929;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_SCROLL:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_NO:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10928;
				this.match(PostgreSQLParser.KW_NO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_fetch(): Stmt_fetchContext {
		let _localctx: Stmt_fetchContext = new Stmt_fetchContext(this._ctx, this.state);
		this.enterRule(_localctx, 1572, PostgreSQLParser.RULE_stmt_fetch);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10931;
			this.match(PostgreSQLParser.KW_FETCH);
			this.state = 10933;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1059, this._ctx) ) {
			case 1:
				{
				this.state = 10932;
				_localctx._direction = this.opt_fetch_direction();
				}
				break;
			}
			this.state = 10935;
			this.opt_cursor_from();
			this.state = 10936;
			this.cursor_variable();
			this.state = 10937;
			this.match(PostgreSQLParser.KW_INTO);
			this.state = 10938;
			this.into_target();
			this.state = 10939;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public into_target(): Into_targetContext {
		let _localctx: Into_targetContext = new Into_targetContext(this._ctx, this.state);
		this.enterRule(_localctx, 1574, PostgreSQLParser.RULE_into_target);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10941;
			this.expr_list();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_cursor_from(): Opt_cursor_fromContext {
		let _localctx: Opt_cursor_fromContext = new Opt_cursor_fromContext(this._ctx, this.state);
		this.enterRule(_localctx, 1576, PostgreSQLParser.RULE_opt_cursor_from);
		try {
			this.state = 10946;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.PARAM:
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_FROM:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10944;
				this.match(PostgreSQLParser.KW_FROM);
				}
				break;
			case PostgreSQLParser.KW_IN:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10945;
				this.match(PostgreSQLParser.KW_IN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_fetch_direction(): Opt_fetch_directionContext {
		let _localctx: Opt_fetch_directionContext = new Opt_fetch_directionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1578, PostgreSQLParser.RULE_opt_fetch_direction);
		let _la: number;
		try {
			this.state = 10963;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1062, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10948;
				this.match(PostgreSQLParser.KW_NEXT);
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 10949;
				this.match(PostgreSQLParser.KW_PRIOR);
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 10950;
				this.match(PostgreSQLParser.KW_FIRST);
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 10951;
				this.match(PostgreSQLParser.KW_LAST);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 10952;
				this.match(PostgreSQLParser.KW_ABSOLUTE);
				this.state = 10953;
				this.a_expr();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 10954;
				this.match(PostgreSQLParser.KW_RELATIVE);
				this.state = 10955;
				this.a_expr();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 10956;
				this.a_expr();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 10957;
				this.match(PostgreSQLParser.KW_ALL);
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 10958;
				_la = this._input.LA(1);
				if (!(_la === PostgreSQLParser.KW_BACKWARD || _la === PostgreSQLParser.KW_FORWARD)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 10961;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 1061, this._ctx) ) {
				case 1:
					{
					this.state = 10959;
					this.a_expr();
					}
					break;

				case 2:
					{
					this.state = 10960;
					this.match(PostgreSQLParser.KW_ALL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_move(): Stmt_moveContext {
		let _localctx: Stmt_moveContext = new Stmt_moveContext(this._ctx, this.state);
		this.enterRule(_localctx, 1580, PostgreSQLParser.RULE_stmt_move);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10965;
			this.match(PostgreSQLParser.KW_MOVE);
			this.state = 10967;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1063, this._ctx) ) {
			case 1:
				{
				this.state = 10966;
				this.opt_fetch_direction();
				}
				break;
			}
			this.state = 10969;
			this.cursor_variable();
			this.state = 10970;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_close(): Stmt_closeContext {
		let _localctx: Stmt_closeContext = new Stmt_closeContext(this._ctx, this.state);
		this.enterRule(_localctx, 1582, PostgreSQLParser.RULE_stmt_close);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10972;
			this.match(PostgreSQLParser.KW_CLOSE);
			this.state = 10973;
			this.cursor_variable();
			this.state = 10974;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_null(): Stmt_nullContext {
		let _localctx: Stmt_nullContext = new Stmt_nullContext(this._ctx, this.state);
		this.enterRule(_localctx, 1584, PostgreSQLParser.RULE_stmt_null);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10976;
			this.match(PostgreSQLParser.KW_NULL);
			this.state = 10977;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_commit(): Stmt_commitContext {
		let _localctx: Stmt_commitContext = new Stmt_commitContext(this._ctx, this.state);
		this.enterRule(_localctx, 1586, PostgreSQLParser.RULE_stmt_commit);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10979;
			this.match(PostgreSQLParser.KW_COMMIT);
			this.state = 10981;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_AND) {
				{
				this.state = 10980;
				this.plsql_opt_transaction_chain();
				}
			}

			this.state = 10983;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_rollback(): Stmt_rollbackContext {
		let _localctx: Stmt_rollbackContext = new Stmt_rollbackContext(this._ctx, this.state);
		this.enterRule(_localctx, 1588, PostgreSQLParser.RULE_stmt_rollback);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10985;
			this.match(PostgreSQLParser.KW_ROLLBACK);
			this.state = 10987;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_AND) {
				{
				this.state = 10986;
				this.plsql_opt_transaction_chain();
				}
			}

			this.state = 10989;
			this.match(PostgreSQLParser.SEMI);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public plsql_opt_transaction_chain(): Plsql_opt_transaction_chainContext {
		let _localctx: Plsql_opt_transaction_chainContext = new Plsql_opt_transaction_chainContext(this._ctx, this.state);
		this.enterRule(_localctx, 1590, PostgreSQLParser.RULE_plsql_opt_transaction_chain);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 10991;
			this.match(PostgreSQLParser.KW_AND);
			this.state = 10993;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_NO) {
				{
				this.state = 10992;
				this.match(PostgreSQLParser.KW_NO);
				}
			}

			this.state = 10995;
			this.match(PostgreSQLParser.KW_CHAIN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stmt_set(): Stmt_setContext {
		let _localctx: Stmt_setContext = new Stmt_setContext(this._ctx, this.state);
		this.enterRule(_localctx, 1592, PostgreSQLParser.RULE_stmt_set);
		try {
			this.state = 11009;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_SET:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 10997;
				this.match(PostgreSQLParser.KW_SET);
				this.state = 10998;
				this.any_name();
				this.state = 10999;
				this.match(PostgreSQLParser.KW_TO);
				this.state = 11000;
				this.match(PostgreSQLParser.KW_DEFAULT);
				this.state = 11001;
				this.match(PostgreSQLParser.SEMI);
				}
				break;
			case PostgreSQLParser.KW_RESET:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 11003;
				this.match(PostgreSQLParser.KW_RESET);
				this.state = 11006;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case PostgreSQLParser.KW_AND:
				case PostgreSQLParser.KW_ARRAY:
				case PostgreSQLParser.KW_COLLATE:
				case PostgreSQLParser.KW_COLUMN:
				case PostgreSQLParser.KW_CONSTRAINT:
				case PostgreSQLParser.KW_DEFAULT:
				case PostgreSQLParser.KW_DO:
				case PostgreSQLParser.KW_FETCH:
				case PostgreSQLParser.KW_TABLE:
				case PostgreSQLParser.KW_IS:
				case PostgreSQLParser.KW_OUTER:
				case PostgreSQLParser.KW_OVER:
				case PostgreSQLParser.KW_ABORT:
				case PostgreSQLParser.KW_ABSOLUTE:
				case PostgreSQLParser.KW_ACCESS:
				case PostgreSQLParser.KW_ACTION:
				case PostgreSQLParser.KW_ADD:
				case PostgreSQLParser.KW_ADMIN:
				case PostgreSQLParser.KW_AFTER:
				case PostgreSQLParser.KW_AGGREGATE:
				case PostgreSQLParser.KW_ALSO:
				case PostgreSQLParser.KW_ALTER:
				case PostgreSQLParser.KW_ALWAYS:
				case PostgreSQLParser.KW_ASSERTION:
				case PostgreSQLParser.KW_ASSIGNMENT:
				case PostgreSQLParser.KW_AT:
				case PostgreSQLParser.KW_ATTRIBUTE:
				case PostgreSQLParser.KW_BACKWARD:
				case PostgreSQLParser.KW_BEFORE:
				case PostgreSQLParser.KW_BEGIN:
				case PostgreSQLParser.KW_BY:
				case PostgreSQLParser.KW_CACHE:
				case PostgreSQLParser.KW_CALLED:
				case PostgreSQLParser.KW_CASCADE:
				case PostgreSQLParser.KW_CASCADED:
				case PostgreSQLParser.KW_CATALOG:
				case PostgreSQLParser.KW_CHAIN:
				case PostgreSQLParser.KW_CHARACTERISTICS:
				case PostgreSQLParser.KW_CHECKPOINT:
				case PostgreSQLParser.KW_CLASS:
				case PostgreSQLParser.KW_CLOSE:
				case PostgreSQLParser.KW_CLUSTER:
				case PostgreSQLParser.KW_COMMENT:
				case PostgreSQLParser.KW_COMMENTS:
				case PostgreSQLParser.KW_COMMIT:
				case PostgreSQLParser.KW_COMMITTED:
				case PostgreSQLParser.KW_CONFIGURATION:
				case PostgreSQLParser.KW_CONNECTION:
				case PostgreSQLParser.KW_CONSTRAINTS:
				case PostgreSQLParser.KW_CONTENT:
				case PostgreSQLParser.KW_CONTINUE:
				case PostgreSQLParser.KW_CONVERSION:
				case PostgreSQLParser.KW_COPY:
				case PostgreSQLParser.KW_COST:
				case PostgreSQLParser.KW_CSV:
				case PostgreSQLParser.KW_CURSOR:
				case PostgreSQLParser.KW_CYCLE:
				case PostgreSQLParser.KW_DATA:
				case PostgreSQLParser.KW_DATABASE:
				case PostgreSQLParser.KW_DAY:
				case PostgreSQLParser.KW_DEALLOCATE:
				case PostgreSQLParser.KW_DECLARE:
				case PostgreSQLParser.KW_DEFAULTS:
				case PostgreSQLParser.KW_DEFERRED:
				case PostgreSQLParser.KW_DEFINER:
				case PostgreSQLParser.KW_DELETE:
				case PostgreSQLParser.KW_DELIMITER:
				case PostgreSQLParser.KW_DELIMITERS:
				case PostgreSQLParser.KW_DICTIONARY:
				case PostgreSQLParser.KW_DISABLE:
				case PostgreSQLParser.KW_DISCARD:
				case PostgreSQLParser.KW_DOCUMENT:
				case PostgreSQLParser.KW_DOMAIN:
				case PostgreSQLParser.KW_DOUBLE:
				case PostgreSQLParser.KW_DROP:
				case PostgreSQLParser.KW_EACH:
				case PostgreSQLParser.KW_ENABLE:
				case PostgreSQLParser.KW_ENCODING:
				case PostgreSQLParser.KW_ENCRYPTED:
				case PostgreSQLParser.KW_ENUM:
				case PostgreSQLParser.KW_ESCAPE:
				case PostgreSQLParser.KW_EVENT:
				case PostgreSQLParser.KW_EXCLUDE:
				case PostgreSQLParser.KW_EXCLUDING:
				case PostgreSQLParser.KW_EXCLUSIVE:
				case PostgreSQLParser.KW_EXECUTE:
				case PostgreSQLParser.KW_EXPLAIN:
				case PostgreSQLParser.KW_EXTENSION:
				case PostgreSQLParser.KW_EXTERNAL:
				case PostgreSQLParser.KW_FAMILY:
				case PostgreSQLParser.KW_FIRST:
				case PostgreSQLParser.KW_FOLLOWING:
				case PostgreSQLParser.KW_FORCE:
				case PostgreSQLParser.KW_FORWARD:
				case PostgreSQLParser.KW_FUNCTION:
				case PostgreSQLParser.KW_FUNCTIONS:
				case PostgreSQLParser.KW_GLOBAL:
				case PostgreSQLParser.KW_GRANTED:
				case PostgreSQLParser.KW_HANDLER:
				case PostgreSQLParser.KW_HEADER:
				case PostgreSQLParser.KW_HOLD:
				case PostgreSQLParser.KW_HOUR:
				case PostgreSQLParser.KW_IDENTITY:
				case PostgreSQLParser.KW_IF:
				case PostgreSQLParser.KW_IMMEDIATE:
				case PostgreSQLParser.KW_IMMUTABLE:
				case PostgreSQLParser.KW_IMPLICIT:
				case PostgreSQLParser.KW_INCLUDING:
				case PostgreSQLParser.KW_INCREMENT:
				case PostgreSQLParser.KW_INDEX:
				case PostgreSQLParser.KW_INDEXES:
				case PostgreSQLParser.KW_INHERIT:
				case PostgreSQLParser.KW_INHERITS:
				case PostgreSQLParser.KW_INLINE:
				case PostgreSQLParser.KW_INSENSITIVE:
				case PostgreSQLParser.KW_INSERT:
				case PostgreSQLParser.KW_INSTEAD:
				case PostgreSQLParser.KW_INVOKER:
				case PostgreSQLParser.KW_ISOLATION:
				case PostgreSQLParser.KW_KEY:
				case PostgreSQLParser.KW_LABEL:
				case PostgreSQLParser.KW_LANGUAGE:
				case PostgreSQLParser.KW_LARGE:
				case PostgreSQLParser.KW_LAST:
				case PostgreSQLParser.KW_LEAKPROOF:
				case PostgreSQLParser.KW_LEVEL:
				case PostgreSQLParser.KW_LISTEN:
				case PostgreSQLParser.KW_LOAD:
				case PostgreSQLParser.KW_LOCAL:
				case PostgreSQLParser.KW_LOCATION:
				case PostgreSQLParser.KW_LOCK:
				case PostgreSQLParser.KW_MAPPING:
				case PostgreSQLParser.KW_MATCH:
				case PostgreSQLParser.KW_MATERIALIZED:
				case PostgreSQLParser.KW_MAXVALUE:
				case PostgreSQLParser.KW_MINUTE:
				case PostgreSQLParser.KW_MINVALUE:
				case PostgreSQLParser.KW_MODE:
				case PostgreSQLParser.KW_MONTH:
				case PostgreSQLParser.KW_MOVE:
				case PostgreSQLParser.KW_NAME:
				case PostgreSQLParser.KW_NAMES:
				case PostgreSQLParser.KW_NEXT:
				case PostgreSQLParser.KW_NO:
				case PostgreSQLParser.KW_NOTHING:
				case PostgreSQLParser.KW_NOTIFY:
				case PostgreSQLParser.KW_NOWAIT:
				case PostgreSQLParser.KW_NULLS:
				case PostgreSQLParser.KW_OBJECT:
				case PostgreSQLParser.KW_OF:
				case PostgreSQLParser.KW_OFF:
				case PostgreSQLParser.KW_OIDS:
				case PostgreSQLParser.KW_OPERATOR:
				case PostgreSQLParser.KW_OPTION:
				case PostgreSQLParser.KW_OPTIONS:
				case PostgreSQLParser.KW_OWNED:
				case PostgreSQLParser.KW_OWNER:
				case PostgreSQLParser.KW_PARSER:
				case PostgreSQLParser.KW_PARTIAL:
				case PostgreSQLParser.KW_PARTITION:
				case PostgreSQLParser.KW_PASSING:
				case PostgreSQLParser.KW_PASSWORD:
				case PostgreSQLParser.KW_PLANS:
				case PostgreSQLParser.KW_PRECEDING:
				case PostgreSQLParser.KW_PREPARE:
				case PostgreSQLParser.KW_PREPARED:
				case PostgreSQLParser.KW_PRESERVE:
				case PostgreSQLParser.KW_PRIOR:
				case PostgreSQLParser.KW_PRIVILEGES:
				case PostgreSQLParser.KW_PROCEDURAL:
				case PostgreSQLParser.KW_PROCEDURE:
				case PostgreSQLParser.KW_PROGRAM:
				case PostgreSQLParser.KW_QUOTE:
				case PostgreSQLParser.KW_RANGE:
				case PostgreSQLParser.KW_READ:
				case PostgreSQLParser.KW_REASSIGN:
				case PostgreSQLParser.KW_RECHECK:
				case PostgreSQLParser.KW_RECURSIVE:
				case PostgreSQLParser.KW_REF:
				case PostgreSQLParser.KW_REFRESH:
				case PostgreSQLParser.KW_REINDEX:
				case PostgreSQLParser.KW_RELATIVE:
				case PostgreSQLParser.KW_RELEASE:
				case PostgreSQLParser.KW_RENAME:
				case PostgreSQLParser.KW_REPEATABLE:
				case PostgreSQLParser.KW_REPLACE:
				case PostgreSQLParser.KW_REPLICA:
				case PostgreSQLParser.KW_RESET:
				case PostgreSQLParser.KW_RESTART:
				case PostgreSQLParser.KW_RESTRICT:
				case PostgreSQLParser.KW_RETURNS:
				case PostgreSQLParser.KW_REVOKE:
				case PostgreSQLParser.KW_ROLE:
				case PostgreSQLParser.KW_ROLLBACK:
				case PostgreSQLParser.KW_ROWS:
				case PostgreSQLParser.KW_RULE:
				case PostgreSQLParser.KW_SAVEPOINT:
				case PostgreSQLParser.KW_SCHEMA:
				case PostgreSQLParser.KW_SCROLL:
				case PostgreSQLParser.KW_SEARCH:
				case PostgreSQLParser.KW_SECOND:
				case PostgreSQLParser.KW_SECURITY:
				case PostgreSQLParser.KW_SEQUENCE:
				case PostgreSQLParser.KW_SEQUENCES:
				case PostgreSQLParser.KW_SERIALIZABLE:
				case PostgreSQLParser.KW_SERVER:
				case PostgreSQLParser.KW_SESSION:
				case PostgreSQLParser.KW_SET:
				case PostgreSQLParser.KW_SHARE:
				case PostgreSQLParser.KW_SHOW:
				case PostgreSQLParser.KW_SIMPLE:
				case PostgreSQLParser.KW_SNAPSHOT:
				case PostgreSQLParser.KW_STABLE:
				case PostgreSQLParser.KW_STANDALONE:
				case PostgreSQLParser.KW_START:
				case PostgreSQLParser.KW_STATEMENT:
				case PostgreSQLParser.KW_STATISTICS:
				case PostgreSQLParser.KW_STDIN:
				case PostgreSQLParser.KW_STDOUT:
				case PostgreSQLParser.KW_STORAGE:
				case PostgreSQLParser.KW_STRICT:
				case PostgreSQLParser.KW_STRIP:
				case PostgreSQLParser.KW_SYSID:
				case PostgreSQLParser.KW_SYSTEM:
				case PostgreSQLParser.KW_TABLES:
				case PostgreSQLParser.KW_TABLESPACE:
				case PostgreSQLParser.KW_TEMP:
				case PostgreSQLParser.KW_TEMPLATE:
				case PostgreSQLParser.KW_TEMPORARY:
				case PostgreSQLParser.KW_TEXT:
				case PostgreSQLParser.KW_TRANSACTION:
				case PostgreSQLParser.KW_TRIGGER:
				case PostgreSQLParser.KW_TRUNCATE:
				case PostgreSQLParser.KW_TRUSTED:
				case PostgreSQLParser.KW_TYPE:
				case PostgreSQLParser.KW_TYPES:
				case PostgreSQLParser.KW_UNBOUNDED:
				case PostgreSQLParser.KW_UNCOMMITTED:
				case PostgreSQLParser.KW_UNENCRYPTED:
				case PostgreSQLParser.KW_UNKNOWN:
				case PostgreSQLParser.KW_UNLISTEN:
				case PostgreSQLParser.KW_UNLOGGED:
				case PostgreSQLParser.KW_UNTIL:
				case PostgreSQLParser.KW_UPDATE:
				case PostgreSQLParser.KW_VACUUM:
				case PostgreSQLParser.KW_VALID:
				case PostgreSQLParser.KW_VALIDATE:
				case PostgreSQLParser.KW_VALIDATOR:
				case PostgreSQLParser.KW_VARYING:
				case PostgreSQLParser.KW_VERSION:
				case PostgreSQLParser.KW_VIEW:
				case PostgreSQLParser.KW_VOLATILE:
				case PostgreSQLParser.KW_WHITESPACE:
				case PostgreSQLParser.KW_WITHOUT:
				case PostgreSQLParser.KW_WORK:
				case PostgreSQLParser.KW_WRAPPER:
				case PostgreSQLParser.KW_WRITE:
				case PostgreSQLParser.KW_XML:
				case PostgreSQLParser.KW_YEAR:
				case PostgreSQLParser.KW_YES:
				case PostgreSQLParser.KW_ZONE:
				case PostgreSQLParser.KW_BETWEEN:
				case PostgreSQLParser.KW_BIGINT:
				case PostgreSQLParser.KW_BIT:
				case PostgreSQLParser.KW_BOOLEAN:
				case PostgreSQLParser.KW_CHAR:
				case PostgreSQLParser.KW_CHARACTER:
				case PostgreSQLParser.KW_COALESCE:
				case PostgreSQLParser.KW_DEC:
				case PostgreSQLParser.KW_DECIMAL:
				case PostgreSQLParser.KW_EXISTS:
				case PostgreSQLParser.KW_EXTRACT:
				case PostgreSQLParser.KW_FLOAT:
				case PostgreSQLParser.KW_GREATEST:
				case PostgreSQLParser.KW_INOUT:
				case PostgreSQLParser.KW_INT:
				case PostgreSQLParser.KW_INTEGER:
				case PostgreSQLParser.KW_INTERVAL:
				case PostgreSQLParser.KW_LEAST:
				case PostgreSQLParser.KW_NATIONAL:
				case PostgreSQLParser.KW_NCHAR:
				case PostgreSQLParser.KW_NONE:
				case PostgreSQLParser.KW_NULLIF:
				case PostgreSQLParser.KW_NUMERIC:
				case PostgreSQLParser.KW_OVERLAY:
				case PostgreSQLParser.KW_POSITION:
				case PostgreSQLParser.KW_PRECISION:
				case PostgreSQLParser.KW_REAL:
				case PostgreSQLParser.KW_ROW:
				case PostgreSQLParser.KW_SETOF:
				case PostgreSQLParser.KW_SMALLINT:
				case PostgreSQLParser.KW_SUBSTRING:
				case PostgreSQLParser.KW_TIME:
				case PostgreSQLParser.KW_TIMESTAMP:
				case PostgreSQLParser.KW_TREAT:
				case PostgreSQLParser.KW_TRIM:
				case PostgreSQLParser.KW_VALUES:
				case PostgreSQLParser.KW_VARCHAR:
				case PostgreSQLParser.KW_XMLATTRIBUTES:
				case PostgreSQLParser.KW_XMLCONCAT:
				case PostgreSQLParser.KW_XMLELEMENT:
				case PostgreSQLParser.KW_XMLEXISTS:
				case PostgreSQLParser.KW_XMLFOREST:
				case PostgreSQLParser.KW_XMLPARSE:
				case PostgreSQLParser.KW_XMLPI:
				case PostgreSQLParser.KW_XMLROOT:
				case PostgreSQLParser.KW_XMLSERIALIZE:
				case PostgreSQLParser.KW_CALL:
				case PostgreSQLParser.KW_CURRENT:
				case PostgreSQLParser.KW_ATTACH:
				case PostgreSQLParser.KW_DETACH:
				case PostgreSQLParser.KW_EXPRESSION:
				case PostgreSQLParser.KW_GENERATED:
				case PostgreSQLParser.KW_LOGGED:
				case PostgreSQLParser.KW_STORED:
				case PostgreSQLParser.KW_INCLUDE:
				case PostgreSQLParser.KW_ROUTINE:
				case PostgreSQLParser.KW_TRANSFORM:
				case PostgreSQLParser.KW_IMPORT:
				case PostgreSQLParser.KW_POLICY:
				case PostgreSQLParser.KW_METHOD:
				case PostgreSQLParser.KW_REFERENCING:
				case PostgreSQLParser.KW_NEW:
				case PostgreSQLParser.KW_OLD:
				case PostgreSQLParser.KW_VALUE:
				case PostgreSQLParser.KW_SUBSCRIPTION:
				case PostgreSQLParser.KW_PUBLICATION:
				case PostgreSQLParser.KW_OUT:
				case PostgreSQLParser.KW_ROUTINES:
				case PostgreSQLParser.KW_SCHEMAS:
				case PostgreSQLParser.KW_PROCEDURES:
				case PostgreSQLParser.KW_INPUT:
				case PostgreSQLParser.KW_SUPPORT:
				case PostgreSQLParser.KW_PARALLEL:
				case PostgreSQLParser.KW_SQL:
				case PostgreSQLParser.KW_DEPENDS:
				case PostgreSQLParser.KW_OVERRIDING:
				case PostgreSQLParser.KW_CONFLICT:
				case PostgreSQLParser.KW_SKIP:
				case PostgreSQLParser.KW_LOCKED:
				case PostgreSQLParser.KW_TIES:
				case PostgreSQLParser.KW_ROLLUP:
				case PostgreSQLParser.KW_CUBE:
				case PostgreSQLParser.KW_GROUPING:
				case PostgreSQLParser.KW_SETS:
				case PostgreSQLParser.KW_ORDINALITY:
				case PostgreSQLParser.KW_XMLTABLE:
				case PostgreSQLParser.KW_COLUMNS:
				case PostgreSQLParser.KW_XMLNAMESPACES:
				case PostgreSQLParser.KW_ROWTYPE:
				case PostgreSQLParser.KW_NORMALIZED:
				case PostgreSQLParser.KW_WITHIN:
				case PostgreSQLParser.KW_FILTER:
				case PostgreSQLParser.KW_GROUPS:
				case PostgreSQLParser.KW_OTHERS:
				case PostgreSQLParser.KW_NFC:
				case PostgreSQLParser.KW_NFD:
				case PostgreSQLParser.KW_NFKC:
				case PostgreSQLParser.KW_NFKD:
				case PostgreSQLParser.KW_UESCAPE:
				case PostgreSQLParser.KW_VIEWS:
				case PostgreSQLParser.KW_NORMALIZE:
				case PostgreSQLParser.KW_DUMP:
				case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
				case PostgreSQLParser.KW_VARIABLE_CONFLICT:
				case PostgreSQLParser.KW_ERROR:
				case PostgreSQLParser.KW_USE_VARIABLE:
				case PostgreSQLParser.KW_USE_COLUMN:
				case PostgreSQLParser.KW_ALIAS:
				case PostgreSQLParser.KW_CONSTANT:
				case PostgreSQLParser.KW_PERFORM:
				case PostgreSQLParser.KW_GET:
				case PostgreSQLParser.KW_DIAGNOSTICS:
				case PostgreSQLParser.KW_STACKED:
				case PostgreSQLParser.KW_ELSIF:
				case PostgreSQLParser.KW_REVERSE:
				case PostgreSQLParser.KW_SLICE:
				case PostgreSQLParser.KW_EXIT:
				case PostgreSQLParser.KW_RETURN:
				case PostgreSQLParser.KW_QUERY:
				case PostgreSQLParser.KW_RAISE:
				case PostgreSQLParser.KW_SQLSTATE:
				case PostgreSQLParser.KW_DEBUG:
				case PostgreSQLParser.KW_LOG:
				case PostgreSQLParser.KW_INFO:
				case PostgreSQLParser.KW_NOTICE:
				case PostgreSQLParser.KW_WARNING:
				case PostgreSQLParser.KW_EXCEPTION:
				case PostgreSQLParser.KW_ASSERT:
				case PostgreSQLParser.KW_OPEN:
				case PostgreSQLParser.Identifier:
				case PostgreSQLParser.QuotedIdentifier:
				case PostgreSQLParser.UnicodeQuotedIdentifier:
				case PostgreSQLParser.PLSQLVARIABLENAME:
				case PostgreSQLParser.PLSQLIDENTIFIER:
					{
					this.state = 11004;
					this.any_name();
					}
					break;
				case PostgreSQLParser.KW_ALL:
					{
					this.state = 11005;
					this.match(PostgreSQLParser.KW_ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 11008;
				this.match(PostgreSQLParser.SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public cursor_variable(): Cursor_variableContext {
		let _localctx: Cursor_variableContext = new Cursor_variableContext(this._ctx, this.state);
		this.enterRule(_localctx, 1594, PostgreSQLParser.RULE_cursor_variable);
		try {
			this.state = 11013;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 11011;
				this.colid();
				}
				break;
			case PostgreSQLParser.PARAM:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 11012;
				this.match(PostgreSQLParser.PARAM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public exception_sect(): Exception_sectContext {
		let _localctx: Exception_sectContext = new Exception_sectContext(this._ctx, this.state);
		this.enterRule(_localctx, 1596, PostgreSQLParser.RULE_exception_sect);
		try {
			this.state = 11018;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_END:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_EXCEPTION:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 11016;
				this.match(PostgreSQLParser.KW_EXCEPTION);
				this.state = 11017;
				this.proc_exceptions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public proc_exceptions(): Proc_exceptionsContext {
		let _localctx: Proc_exceptionsContext = new Proc_exceptionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1598, PostgreSQLParser.RULE_proc_exceptions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11021;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 11020;
				this.proc_exception();
				}
				}
				this.state = 11023;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === PostgreSQLParser.KW_WHEN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public proc_exception(): Proc_exceptionContext {
		let _localctx: Proc_exceptionContext = new Proc_exceptionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1600, PostgreSQLParser.RULE_proc_exception);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11025;
			this.match(PostgreSQLParser.KW_WHEN);
			this.state = 11026;
			this.proc_conditions();
			this.state = 11027;
			this.match(PostgreSQLParser.KW_THEN);
			this.state = 11028;
			this.proc_sect();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public proc_conditions(): Proc_conditionsContext {
		let _localctx: Proc_conditionsContext = new Proc_conditionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 1602, PostgreSQLParser.RULE_proc_conditions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11030;
			this.proc_condition();
			this.state = 11035;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === PostgreSQLParser.KW_OR) {
				{
				{
				this.state = 11031;
				this.match(PostgreSQLParser.KW_OR);
				this.state = 11032;
				this.proc_condition();
				}
				}
				this.state = 11037;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public proc_condition(): Proc_conditionContext {
		let _localctx: Proc_conditionContext = new Proc_conditionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1604, PostgreSQLParser.RULE_proc_condition);
		try {
			this.state = 11041;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1073, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 11038;
				this.any_identifier();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 11039;
				this.match(PostgreSQLParser.KW_SQLSTATE);
				this.state = 11040;
				this.sconst();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_block_label(): Opt_block_labelContext {
		let _localctx: Opt_block_labelContext = new Opt_block_labelContext(this._ctx, this.state);
		this.enterRule(_localctx, 1606, PostgreSQLParser.RULE_opt_block_label);
		try {
			this.state = 11045;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_DECLARE:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.LESS_LESS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 11044;
				this.label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_loop_label(): Opt_loop_labelContext {
		let _localctx: Opt_loop_labelContext = new Opt_loop_labelContext(this._ctx, this.state);
		this.enterRule(_localctx, 1608, PostgreSQLParser.RULE_opt_loop_label);
		try {
			this.state = 11049;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.KW_FOR:
			case PostgreSQLParser.KW_WHILE:
			case PostgreSQLParser.KW_FOREACH:
			case PostgreSQLParser.KW_LOOP:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.LESS_LESS:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 11048;
				this.label_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_label(): Opt_labelContext {
		let _localctx: Opt_labelContext = new Opt_labelContext(this._ctx, this.state);
		this.enterRule(_localctx, 1610, PostgreSQLParser.RULE_opt_label);
		try {
			this.state = 11053;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case PostgreSQLParser.EOF:
			case PostgreSQLParser.SEMI:
			case PostgreSQLParser.KW_WHEN:
				this.enterOuterAlt(_localctx, 1);
				// tslint:disable-next-line:no-empty
				{
				}
				break;
			case PostgreSQLParser.KW_AND:
			case PostgreSQLParser.KW_ARRAY:
			case PostgreSQLParser.KW_COLLATE:
			case PostgreSQLParser.KW_COLUMN:
			case PostgreSQLParser.KW_CONSTRAINT:
			case PostgreSQLParser.KW_DEFAULT:
			case PostgreSQLParser.KW_DO:
			case PostgreSQLParser.KW_FETCH:
			case PostgreSQLParser.KW_TABLE:
			case PostgreSQLParser.KW_IS:
			case PostgreSQLParser.KW_OUTER:
			case PostgreSQLParser.KW_OVER:
			case PostgreSQLParser.KW_ABORT:
			case PostgreSQLParser.KW_ABSOLUTE:
			case PostgreSQLParser.KW_ACCESS:
			case PostgreSQLParser.KW_ACTION:
			case PostgreSQLParser.KW_ADD:
			case PostgreSQLParser.KW_ADMIN:
			case PostgreSQLParser.KW_AFTER:
			case PostgreSQLParser.KW_AGGREGATE:
			case PostgreSQLParser.KW_ALSO:
			case PostgreSQLParser.KW_ALTER:
			case PostgreSQLParser.KW_ALWAYS:
			case PostgreSQLParser.KW_ASSERTION:
			case PostgreSQLParser.KW_ASSIGNMENT:
			case PostgreSQLParser.KW_AT:
			case PostgreSQLParser.KW_ATTRIBUTE:
			case PostgreSQLParser.KW_BACKWARD:
			case PostgreSQLParser.KW_BEFORE:
			case PostgreSQLParser.KW_BEGIN:
			case PostgreSQLParser.KW_BY:
			case PostgreSQLParser.KW_CACHE:
			case PostgreSQLParser.KW_CALLED:
			case PostgreSQLParser.KW_CASCADE:
			case PostgreSQLParser.KW_CASCADED:
			case PostgreSQLParser.KW_CATALOG:
			case PostgreSQLParser.KW_CHAIN:
			case PostgreSQLParser.KW_CHARACTERISTICS:
			case PostgreSQLParser.KW_CHECKPOINT:
			case PostgreSQLParser.KW_CLASS:
			case PostgreSQLParser.KW_CLOSE:
			case PostgreSQLParser.KW_CLUSTER:
			case PostgreSQLParser.KW_COMMENT:
			case PostgreSQLParser.KW_COMMENTS:
			case PostgreSQLParser.KW_COMMIT:
			case PostgreSQLParser.KW_COMMITTED:
			case PostgreSQLParser.KW_CONFIGURATION:
			case PostgreSQLParser.KW_CONNECTION:
			case PostgreSQLParser.KW_CONSTRAINTS:
			case PostgreSQLParser.KW_CONTENT:
			case PostgreSQLParser.KW_CONTINUE:
			case PostgreSQLParser.KW_CONVERSION:
			case PostgreSQLParser.KW_COPY:
			case PostgreSQLParser.KW_COST:
			case PostgreSQLParser.KW_CSV:
			case PostgreSQLParser.KW_CURSOR:
			case PostgreSQLParser.KW_CYCLE:
			case PostgreSQLParser.KW_DATA:
			case PostgreSQLParser.KW_DATABASE:
			case PostgreSQLParser.KW_DAY:
			case PostgreSQLParser.KW_DEALLOCATE:
			case PostgreSQLParser.KW_DECLARE:
			case PostgreSQLParser.KW_DEFAULTS:
			case PostgreSQLParser.KW_DEFERRED:
			case PostgreSQLParser.KW_DEFINER:
			case PostgreSQLParser.KW_DELETE:
			case PostgreSQLParser.KW_DELIMITER:
			case PostgreSQLParser.KW_DELIMITERS:
			case PostgreSQLParser.KW_DICTIONARY:
			case PostgreSQLParser.KW_DISABLE:
			case PostgreSQLParser.KW_DISCARD:
			case PostgreSQLParser.KW_DOCUMENT:
			case PostgreSQLParser.KW_DOMAIN:
			case PostgreSQLParser.KW_DOUBLE:
			case PostgreSQLParser.KW_DROP:
			case PostgreSQLParser.KW_EACH:
			case PostgreSQLParser.KW_ENABLE:
			case PostgreSQLParser.KW_ENCODING:
			case PostgreSQLParser.KW_ENCRYPTED:
			case PostgreSQLParser.KW_ENUM:
			case PostgreSQLParser.KW_ESCAPE:
			case PostgreSQLParser.KW_EVENT:
			case PostgreSQLParser.KW_EXCLUDE:
			case PostgreSQLParser.KW_EXCLUDING:
			case PostgreSQLParser.KW_EXCLUSIVE:
			case PostgreSQLParser.KW_EXECUTE:
			case PostgreSQLParser.KW_EXPLAIN:
			case PostgreSQLParser.KW_EXTENSION:
			case PostgreSQLParser.KW_EXTERNAL:
			case PostgreSQLParser.KW_FAMILY:
			case PostgreSQLParser.KW_FIRST:
			case PostgreSQLParser.KW_FOLLOWING:
			case PostgreSQLParser.KW_FORCE:
			case PostgreSQLParser.KW_FORWARD:
			case PostgreSQLParser.KW_FUNCTION:
			case PostgreSQLParser.KW_FUNCTIONS:
			case PostgreSQLParser.KW_GLOBAL:
			case PostgreSQLParser.KW_GRANTED:
			case PostgreSQLParser.KW_HANDLER:
			case PostgreSQLParser.KW_HEADER:
			case PostgreSQLParser.KW_HOLD:
			case PostgreSQLParser.KW_HOUR:
			case PostgreSQLParser.KW_IDENTITY:
			case PostgreSQLParser.KW_IF:
			case PostgreSQLParser.KW_IMMEDIATE:
			case PostgreSQLParser.KW_IMMUTABLE:
			case PostgreSQLParser.KW_IMPLICIT:
			case PostgreSQLParser.KW_INCLUDING:
			case PostgreSQLParser.KW_INCREMENT:
			case PostgreSQLParser.KW_INDEX:
			case PostgreSQLParser.KW_INDEXES:
			case PostgreSQLParser.KW_INHERIT:
			case PostgreSQLParser.KW_INHERITS:
			case PostgreSQLParser.KW_INLINE:
			case PostgreSQLParser.KW_INSENSITIVE:
			case PostgreSQLParser.KW_INSERT:
			case PostgreSQLParser.KW_INSTEAD:
			case PostgreSQLParser.KW_INVOKER:
			case PostgreSQLParser.KW_ISOLATION:
			case PostgreSQLParser.KW_KEY:
			case PostgreSQLParser.KW_LABEL:
			case PostgreSQLParser.KW_LANGUAGE:
			case PostgreSQLParser.KW_LARGE:
			case PostgreSQLParser.KW_LAST:
			case PostgreSQLParser.KW_LEAKPROOF:
			case PostgreSQLParser.KW_LEVEL:
			case PostgreSQLParser.KW_LISTEN:
			case PostgreSQLParser.KW_LOAD:
			case PostgreSQLParser.KW_LOCAL:
			case PostgreSQLParser.KW_LOCATION:
			case PostgreSQLParser.KW_LOCK:
			case PostgreSQLParser.KW_MAPPING:
			case PostgreSQLParser.KW_MATCH:
			case PostgreSQLParser.KW_MATERIALIZED:
			case PostgreSQLParser.KW_MAXVALUE:
			case PostgreSQLParser.KW_MINUTE:
			case PostgreSQLParser.KW_MINVALUE:
			case PostgreSQLParser.KW_MODE:
			case PostgreSQLParser.KW_MONTH:
			case PostgreSQLParser.KW_MOVE:
			case PostgreSQLParser.KW_NAME:
			case PostgreSQLParser.KW_NAMES:
			case PostgreSQLParser.KW_NEXT:
			case PostgreSQLParser.KW_NO:
			case PostgreSQLParser.KW_NOTHING:
			case PostgreSQLParser.KW_NOTIFY:
			case PostgreSQLParser.KW_NOWAIT:
			case PostgreSQLParser.KW_NULLS:
			case PostgreSQLParser.KW_OBJECT:
			case PostgreSQLParser.KW_OF:
			case PostgreSQLParser.KW_OFF:
			case PostgreSQLParser.KW_OIDS:
			case PostgreSQLParser.KW_OPERATOR:
			case PostgreSQLParser.KW_OPTION:
			case PostgreSQLParser.KW_OPTIONS:
			case PostgreSQLParser.KW_OWNED:
			case PostgreSQLParser.KW_OWNER:
			case PostgreSQLParser.KW_PARSER:
			case PostgreSQLParser.KW_PARTIAL:
			case PostgreSQLParser.KW_PARTITION:
			case PostgreSQLParser.KW_PASSING:
			case PostgreSQLParser.KW_PASSWORD:
			case PostgreSQLParser.KW_PLANS:
			case PostgreSQLParser.KW_PRECEDING:
			case PostgreSQLParser.KW_PREPARE:
			case PostgreSQLParser.KW_PREPARED:
			case PostgreSQLParser.KW_PRESERVE:
			case PostgreSQLParser.KW_PRIOR:
			case PostgreSQLParser.KW_PRIVILEGES:
			case PostgreSQLParser.KW_PROCEDURAL:
			case PostgreSQLParser.KW_PROCEDURE:
			case PostgreSQLParser.KW_PROGRAM:
			case PostgreSQLParser.KW_QUOTE:
			case PostgreSQLParser.KW_RANGE:
			case PostgreSQLParser.KW_READ:
			case PostgreSQLParser.KW_REASSIGN:
			case PostgreSQLParser.KW_RECHECK:
			case PostgreSQLParser.KW_RECURSIVE:
			case PostgreSQLParser.KW_REF:
			case PostgreSQLParser.KW_REFRESH:
			case PostgreSQLParser.KW_REINDEX:
			case PostgreSQLParser.KW_RELATIVE:
			case PostgreSQLParser.KW_RELEASE:
			case PostgreSQLParser.KW_RENAME:
			case PostgreSQLParser.KW_REPEATABLE:
			case PostgreSQLParser.KW_REPLACE:
			case PostgreSQLParser.KW_REPLICA:
			case PostgreSQLParser.KW_RESET:
			case PostgreSQLParser.KW_RESTART:
			case PostgreSQLParser.KW_RESTRICT:
			case PostgreSQLParser.KW_RETURNS:
			case PostgreSQLParser.KW_REVOKE:
			case PostgreSQLParser.KW_ROLE:
			case PostgreSQLParser.KW_ROLLBACK:
			case PostgreSQLParser.KW_ROWS:
			case PostgreSQLParser.KW_RULE:
			case PostgreSQLParser.KW_SAVEPOINT:
			case PostgreSQLParser.KW_SCHEMA:
			case PostgreSQLParser.KW_SCROLL:
			case PostgreSQLParser.KW_SEARCH:
			case PostgreSQLParser.KW_SECOND:
			case PostgreSQLParser.KW_SECURITY:
			case PostgreSQLParser.KW_SEQUENCE:
			case PostgreSQLParser.KW_SEQUENCES:
			case PostgreSQLParser.KW_SERIALIZABLE:
			case PostgreSQLParser.KW_SERVER:
			case PostgreSQLParser.KW_SESSION:
			case PostgreSQLParser.KW_SET:
			case PostgreSQLParser.KW_SHARE:
			case PostgreSQLParser.KW_SHOW:
			case PostgreSQLParser.KW_SIMPLE:
			case PostgreSQLParser.KW_SNAPSHOT:
			case PostgreSQLParser.KW_STABLE:
			case PostgreSQLParser.KW_STANDALONE:
			case PostgreSQLParser.KW_START:
			case PostgreSQLParser.KW_STATEMENT:
			case PostgreSQLParser.KW_STATISTICS:
			case PostgreSQLParser.KW_STDIN:
			case PostgreSQLParser.KW_STDOUT:
			case PostgreSQLParser.KW_STORAGE:
			case PostgreSQLParser.KW_STRICT:
			case PostgreSQLParser.KW_STRIP:
			case PostgreSQLParser.KW_SYSID:
			case PostgreSQLParser.KW_SYSTEM:
			case PostgreSQLParser.KW_TABLES:
			case PostgreSQLParser.KW_TABLESPACE:
			case PostgreSQLParser.KW_TEMP:
			case PostgreSQLParser.KW_TEMPLATE:
			case PostgreSQLParser.KW_TEMPORARY:
			case PostgreSQLParser.KW_TEXT:
			case PostgreSQLParser.KW_TRANSACTION:
			case PostgreSQLParser.KW_TRIGGER:
			case PostgreSQLParser.KW_TRUNCATE:
			case PostgreSQLParser.KW_TRUSTED:
			case PostgreSQLParser.KW_TYPE:
			case PostgreSQLParser.KW_TYPES:
			case PostgreSQLParser.KW_UNBOUNDED:
			case PostgreSQLParser.KW_UNCOMMITTED:
			case PostgreSQLParser.KW_UNENCRYPTED:
			case PostgreSQLParser.KW_UNKNOWN:
			case PostgreSQLParser.KW_UNLISTEN:
			case PostgreSQLParser.KW_UNLOGGED:
			case PostgreSQLParser.KW_UNTIL:
			case PostgreSQLParser.KW_UPDATE:
			case PostgreSQLParser.KW_VACUUM:
			case PostgreSQLParser.KW_VALID:
			case PostgreSQLParser.KW_VALIDATE:
			case PostgreSQLParser.KW_VALIDATOR:
			case PostgreSQLParser.KW_VARYING:
			case PostgreSQLParser.KW_VERSION:
			case PostgreSQLParser.KW_VIEW:
			case PostgreSQLParser.KW_VOLATILE:
			case PostgreSQLParser.KW_WHITESPACE:
			case PostgreSQLParser.KW_WITHOUT:
			case PostgreSQLParser.KW_WORK:
			case PostgreSQLParser.KW_WRAPPER:
			case PostgreSQLParser.KW_WRITE:
			case PostgreSQLParser.KW_XML:
			case PostgreSQLParser.KW_YEAR:
			case PostgreSQLParser.KW_YES:
			case PostgreSQLParser.KW_ZONE:
			case PostgreSQLParser.KW_BETWEEN:
			case PostgreSQLParser.KW_BIGINT:
			case PostgreSQLParser.KW_BIT:
			case PostgreSQLParser.KW_BOOLEAN:
			case PostgreSQLParser.KW_CHAR:
			case PostgreSQLParser.KW_CHARACTER:
			case PostgreSQLParser.KW_COALESCE:
			case PostgreSQLParser.KW_DEC:
			case PostgreSQLParser.KW_DECIMAL:
			case PostgreSQLParser.KW_EXISTS:
			case PostgreSQLParser.KW_EXTRACT:
			case PostgreSQLParser.KW_FLOAT:
			case PostgreSQLParser.KW_GREATEST:
			case PostgreSQLParser.KW_INOUT:
			case PostgreSQLParser.KW_INT:
			case PostgreSQLParser.KW_INTEGER:
			case PostgreSQLParser.KW_INTERVAL:
			case PostgreSQLParser.KW_LEAST:
			case PostgreSQLParser.KW_NATIONAL:
			case PostgreSQLParser.KW_NCHAR:
			case PostgreSQLParser.KW_NONE:
			case PostgreSQLParser.KW_NULLIF:
			case PostgreSQLParser.KW_NUMERIC:
			case PostgreSQLParser.KW_OVERLAY:
			case PostgreSQLParser.KW_POSITION:
			case PostgreSQLParser.KW_PRECISION:
			case PostgreSQLParser.KW_REAL:
			case PostgreSQLParser.KW_ROW:
			case PostgreSQLParser.KW_SETOF:
			case PostgreSQLParser.KW_SMALLINT:
			case PostgreSQLParser.KW_SUBSTRING:
			case PostgreSQLParser.KW_TIME:
			case PostgreSQLParser.KW_TIMESTAMP:
			case PostgreSQLParser.KW_TREAT:
			case PostgreSQLParser.KW_TRIM:
			case PostgreSQLParser.KW_VALUES:
			case PostgreSQLParser.KW_VARCHAR:
			case PostgreSQLParser.KW_XMLATTRIBUTES:
			case PostgreSQLParser.KW_XMLCONCAT:
			case PostgreSQLParser.KW_XMLELEMENT:
			case PostgreSQLParser.KW_XMLEXISTS:
			case PostgreSQLParser.KW_XMLFOREST:
			case PostgreSQLParser.KW_XMLPARSE:
			case PostgreSQLParser.KW_XMLPI:
			case PostgreSQLParser.KW_XMLROOT:
			case PostgreSQLParser.KW_XMLSERIALIZE:
			case PostgreSQLParser.KW_CALL:
			case PostgreSQLParser.KW_CURRENT:
			case PostgreSQLParser.KW_ATTACH:
			case PostgreSQLParser.KW_DETACH:
			case PostgreSQLParser.KW_EXPRESSION:
			case PostgreSQLParser.KW_GENERATED:
			case PostgreSQLParser.KW_LOGGED:
			case PostgreSQLParser.KW_STORED:
			case PostgreSQLParser.KW_INCLUDE:
			case PostgreSQLParser.KW_ROUTINE:
			case PostgreSQLParser.KW_TRANSFORM:
			case PostgreSQLParser.KW_IMPORT:
			case PostgreSQLParser.KW_POLICY:
			case PostgreSQLParser.KW_METHOD:
			case PostgreSQLParser.KW_REFERENCING:
			case PostgreSQLParser.KW_NEW:
			case PostgreSQLParser.KW_OLD:
			case PostgreSQLParser.KW_VALUE:
			case PostgreSQLParser.KW_SUBSCRIPTION:
			case PostgreSQLParser.KW_PUBLICATION:
			case PostgreSQLParser.KW_OUT:
			case PostgreSQLParser.KW_ROUTINES:
			case PostgreSQLParser.KW_SCHEMAS:
			case PostgreSQLParser.KW_PROCEDURES:
			case PostgreSQLParser.KW_INPUT:
			case PostgreSQLParser.KW_SUPPORT:
			case PostgreSQLParser.KW_PARALLEL:
			case PostgreSQLParser.KW_SQL:
			case PostgreSQLParser.KW_DEPENDS:
			case PostgreSQLParser.KW_OVERRIDING:
			case PostgreSQLParser.KW_CONFLICT:
			case PostgreSQLParser.KW_SKIP:
			case PostgreSQLParser.KW_LOCKED:
			case PostgreSQLParser.KW_TIES:
			case PostgreSQLParser.KW_ROLLUP:
			case PostgreSQLParser.KW_CUBE:
			case PostgreSQLParser.KW_GROUPING:
			case PostgreSQLParser.KW_SETS:
			case PostgreSQLParser.KW_ORDINALITY:
			case PostgreSQLParser.KW_XMLTABLE:
			case PostgreSQLParser.KW_COLUMNS:
			case PostgreSQLParser.KW_XMLNAMESPACES:
			case PostgreSQLParser.KW_ROWTYPE:
			case PostgreSQLParser.KW_NORMALIZED:
			case PostgreSQLParser.KW_WITHIN:
			case PostgreSQLParser.KW_FILTER:
			case PostgreSQLParser.KW_GROUPS:
			case PostgreSQLParser.KW_OTHERS:
			case PostgreSQLParser.KW_NFC:
			case PostgreSQLParser.KW_NFD:
			case PostgreSQLParser.KW_NFKC:
			case PostgreSQLParser.KW_NFKD:
			case PostgreSQLParser.KW_UESCAPE:
			case PostgreSQLParser.KW_VIEWS:
			case PostgreSQLParser.KW_NORMALIZE:
			case PostgreSQLParser.KW_DUMP:
			case PostgreSQLParser.KW_PRINT_STRICT_PARAMS:
			case PostgreSQLParser.KW_VARIABLE_CONFLICT:
			case PostgreSQLParser.KW_ERROR:
			case PostgreSQLParser.KW_USE_VARIABLE:
			case PostgreSQLParser.KW_USE_COLUMN:
			case PostgreSQLParser.KW_ALIAS:
			case PostgreSQLParser.KW_CONSTANT:
			case PostgreSQLParser.KW_PERFORM:
			case PostgreSQLParser.KW_GET:
			case PostgreSQLParser.KW_DIAGNOSTICS:
			case PostgreSQLParser.KW_STACKED:
			case PostgreSQLParser.KW_ELSIF:
			case PostgreSQLParser.KW_REVERSE:
			case PostgreSQLParser.KW_SLICE:
			case PostgreSQLParser.KW_EXIT:
			case PostgreSQLParser.KW_RETURN:
			case PostgreSQLParser.KW_QUERY:
			case PostgreSQLParser.KW_RAISE:
			case PostgreSQLParser.KW_SQLSTATE:
			case PostgreSQLParser.KW_DEBUG:
			case PostgreSQLParser.KW_LOG:
			case PostgreSQLParser.KW_INFO:
			case PostgreSQLParser.KW_NOTICE:
			case PostgreSQLParser.KW_WARNING:
			case PostgreSQLParser.KW_EXCEPTION:
			case PostgreSQLParser.KW_ASSERT:
			case PostgreSQLParser.KW_OPEN:
			case PostgreSQLParser.Identifier:
			case PostgreSQLParser.QuotedIdentifier:
			case PostgreSQLParser.UnicodeQuotedIdentifier:
			case PostgreSQLParser.PLSQLVARIABLENAME:
			case PostgreSQLParser.PLSQLIDENTIFIER:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 11052;
				this.any_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_exitcond(): Opt_exitcondContext {
		let _localctx: Opt_exitcondContext = new Opt_exitcondContext(this._ctx, this.state);
		this.enterRule(_localctx, 1612, PostgreSQLParser.RULE_opt_exitcond);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11055;
			this.match(PostgreSQLParser.KW_WHEN);
			this.state = 11056;
			this.expr_until_semi();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public any_identifier(): Any_identifierContext {
		let _localctx: Any_identifierContext = new Any_identifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 1614, PostgreSQLParser.RULE_any_identifier);
		try {
			this.state = 11060;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 1077, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 11058;
				this.colid();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 11059;
				this.plsql_unreserved_keyword();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext {
		let _localctx: Plsql_unreserved_keywordContext = new Plsql_unreserved_keywordContext(this._ctx, this.state);
		this.enterRule(_localctx, 1616, PostgreSQLParser.RULE_plsql_unreserved_keyword);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11062;
			_la = this._input.LA(1);
			if (!(((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 92)) & ~0x1F) === 0 && ((1 << (_la - 92)) & ((1 << (PostgreSQLParser.KW_TABLE - 92)) | (1 << (PostgreSQLParser.KW_IS - 92)) | (1 << (PostgreSQLParser.KW_OUTER - 92)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (PostgreSQLParser.KW_ABSOLUTE - 130)) | (1 << (PostgreSQLParser.KW_BACKWARD - 130)) | (1 << (PostgreSQLParser.KW_CHAIN - 130)) | (1 << (PostgreSQLParser.KW_CLOSE - 130)) | (1 << (PostgreSQLParser.KW_COMMIT - 130)))) !== 0) || _la === PostgreSQLParser.KW_CONTINUE || _la === PostgreSQLParser.KW_CURSOR || _la === PostgreSQLParser.KW_FIRST || _la === PostgreSQLParser.KW_FORWARD || ((((_la - 241)) & ~0x1F) === 0 && ((1 << (_la - 241)) & ((1 << (PostgreSQLParser.KW_INSERT - 241)) | (1 << (PostgreSQLParser.KW_LAST - 241)) | (1 << (PostgreSQLParser.KW_MOVE - 241)) | (1 << (PostgreSQLParser.KW_NEXT - 241)) | (1 << (PostgreSQLParser.KW_NO - 241)))) !== 0) || ((((_la - 279)) & ~0x1F) === 0 && ((1 << (_la - 279)) & ((1 << (PostgreSQLParser.KW_OPTION - 279)) | (1 << (PostgreSQLParser.KW_PRIOR - 279)) | (1 << (PostgreSQLParser.KW_RELATIVE - 279)))) !== 0) || ((((_la - 313)) & ~0x1F) === 0 && ((1 << (_la - 313)) & ((1 << (PostgreSQLParser.KW_RESET - 313)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 313)) | (1 << (PostgreSQLParser.KW_SCHEMA - 313)) | (1 << (PostgreSQLParser.KW_SCROLL - 313)) | (1 << (PostgreSQLParser.KW_SET - 313)))) !== 0) || _la === PostgreSQLParser.KW_TYPE || _la === PostgreSQLParser.KW_CALL || _la === PostgreSQLParser.KW_CURRENT || ((((_la - 477)) & ~0x1F) === 0 && ((1 << (_la - 477)) & ((1 << (PostgreSQLParser.KW_ROWTYPE - 477)) | (1 << (PostgreSQLParser.KW_DUMP - 477)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 477)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 477)) | (1 << (PostgreSQLParser.KW_ERROR - 477)) | (1 << (PostgreSQLParser.KW_USE_VARIABLE - 477)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 477)) | (1 << (PostgreSQLParser.KW_ALIAS - 477)) | (1 << (PostgreSQLParser.KW_CONSTANT - 477)) | (1 << (PostgreSQLParser.KW_PERFORM - 477)) | (1 << (PostgreSQLParser.KW_GET - 477)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 477)) | (1 << (PostgreSQLParser.KW_STACKED - 477)) | (1 << (PostgreSQLParser.KW_ELSIF - 477)) | (1 << (PostgreSQLParser.KW_REVERSE - 477)) | (1 << (PostgreSQLParser.KW_SLICE - 477)) | (1 << (PostgreSQLParser.KW_EXIT - 477)) | (1 << (PostgreSQLParser.KW_RETURN - 477)))) !== 0) || ((((_la - 509)) & ~0x1F) === 0 && ((1 << (_la - 509)) & ((1 << (PostgreSQLParser.KW_QUERY - 509)) | (1 << (PostgreSQLParser.KW_RAISE - 509)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 509)) | (1 << (PostgreSQLParser.KW_DEBUG - 509)) | (1 << (PostgreSQLParser.KW_LOG - 509)) | (1 << (PostgreSQLParser.KW_INFO - 509)) | (1 << (PostgreSQLParser.KW_NOTICE - 509)) | (1 << (PostgreSQLParser.KW_WARNING - 509)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 509)) | (1 << (PostgreSQLParser.KW_ASSERT - 509)) | (1 << (PostgreSQLParser.KW_OPEN - 509)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public sql_expression(): Sql_expressionContext {
		let _localctx: Sql_expressionContext = new Sql_expressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 1618, PostgreSQLParser.RULE_sql_expression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11065;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << PostgreSQLParser.OPEN_PAREN) | (1 << PostgreSQLParser.STAR) | (1 << PostgreSQLParser.PLUS) | (1 << PostgreSQLParser.MINUS) | (1 << PostgreSQLParser.PARAM) | (1 << PostgreSQLParser.Operator))) !== 0) || ((((_la - 33)) & ~0x1F) === 0 && ((1 << (_la - 33)) & ((1 << (PostgreSQLParser.KW_AND - 33)) | (1 << (PostgreSQLParser.KW_ARRAY - 33)) | (1 << (PostgreSQLParser.KW_CASE - 33)) | (1 << (PostgreSQLParser.KW_CAST - 33)) | (1 << (PostgreSQLParser.KW_COLLATE - 33)) | (1 << (PostgreSQLParser.KW_COLUMN - 33)) | (1 << (PostgreSQLParser.KW_CONSTRAINT - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_CATALOG - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_DATE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_ROLE - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIME - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_TIMESTAMP - 33)) | (1 << (PostgreSQLParser.KW_CURRENT_USER - 33)) | (1 << (PostgreSQLParser.KW_DEFAULT - 33)) | (1 << (PostgreSQLParser.KW_DO - 33)) | (1 << (PostgreSQLParser.KW_FALSE - 33)) | (1 << (PostgreSQLParser.KW_FETCH - 33)))) !== 0) || ((((_la - 75)) & ~0x1F) === 0 && ((1 << (_la - 75)) & ((1 << (PostgreSQLParser.KW_LOCALTIME - 75)) | (1 << (PostgreSQLParser.KW_LOCALTIMESTAMP - 75)) | (1 << (PostgreSQLParser.KW_NOT - 75)) | (1 << (PostgreSQLParser.KW_NULL - 75)) | (1 << (PostgreSQLParser.KW_SESSION_USER - 75)) | (1 << (PostgreSQLParser.KW_TABLE - 75)) | (1 << (PostgreSQLParser.KW_TRUE - 75)) | (1 << (PostgreSQLParser.KW_UNIQUE - 75)) | (1 << (PostgreSQLParser.KW_USER - 75)) | (1 << (PostgreSQLParser.KW_AUTHORIZATION - 75)))) !== 0) || ((((_la - 107)) & ~0x1F) === 0 && ((1 << (_la - 107)) & ((1 << (PostgreSQLParser.KW_BINARY - 107)) | (1 << (PostgreSQLParser.KW_COLLATION - 107)) | (1 << (PostgreSQLParser.KW_CONCURRENTLY - 107)) | (1 << (PostgreSQLParser.KW_CROSS - 107)) | (1 << (PostgreSQLParser.KW_CURRENT_SCHEMA - 107)) | (1 << (PostgreSQLParser.KW_FREEZE - 107)) | (1 << (PostgreSQLParser.KW_FULL - 107)) | (1 << (PostgreSQLParser.KW_ILIKE - 107)) | (1 << (PostgreSQLParser.KW_INNER - 107)) | (1 << (PostgreSQLParser.KW_IS - 107)) | (1 << (PostgreSQLParser.KW_ISNULL - 107)) | (1 << (PostgreSQLParser.KW_JOIN - 107)) | (1 << (PostgreSQLParser.KW_LEFT - 107)) | (1 << (PostgreSQLParser.KW_LIKE - 107)) | (1 << (PostgreSQLParser.KW_NATURAL - 107)) | (1 << (PostgreSQLParser.KW_NOTNULL - 107)) | (1 << (PostgreSQLParser.KW_OUTER - 107)) | (1 << (PostgreSQLParser.KW_OVER - 107)) | (1 << (PostgreSQLParser.KW_OVERLAPS - 107)) | (1 << (PostgreSQLParser.KW_RIGHT - 107)) | (1 << (PostgreSQLParser.KW_SIMILAR - 107)) | (1 << (PostgreSQLParser.KW_VERBOSE - 107)) | (1 << (PostgreSQLParser.KW_ABORT - 107)) | (1 << (PostgreSQLParser.KW_ABSOLUTE - 107)) | (1 << (PostgreSQLParser.KW_ACCESS - 107)) | (1 << (PostgreSQLParser.KW_ACTION - 107)) | (1 << (PostgreSQLParser.KW_ADD - 107)) | (1 << (PostgreSQLParser.KW_ADMIN - 107)) | (1 << (PostgreSQLParser.KW_AFTER - 107)) | (1 << (PostgreSQLParser.KW_AGGREGATE - 107)) | (1 << (PostgreSQLParser.KW_ALSO - 107)) | (1 << (PostgreSQLParser.KW_ALTER - 107)))) !== 0) || ((((_la - 139)) & ~0x1F) === 0 && ((1 << (_la - 139)) & ((1 << (PostgreSQLParser.KW_ALWAYS - 139)) | (1 << (PostgreSQLParser.KW_ASSERTION - 139)) | (1 << (PostgreSQLParser.KW_ASSIGNMENT - 139)) | (1 << (PostgreSQLParser.KW_AT - 139)) | (1 << (PostgreSQLParser.KW_ATTRIBUTE - 139)) | (1 << (PostgreSQLParser.KW_BACKWARD - 139)) | (1 << (PostgreSQLParser.KW_BEFORE - 139)) | (1 << (PostgreSQLParser.KW_BEGIN - 139)) | (1 << (PostgreSQLParser.KW_BY - 139)) | (1 << (PostgreSQLParser.KW_CACHE - 139)) | (1 << (PostgreSQLParser.KW_CALLED - 139)) | (1 << (PostgreSQLParser.KW_CASCADE - 139)) | (1 << (PostgreSQLParser.KW_CASCADED - 139)) | (1 << (PostgreSQLParser.KW_CATALOG - 139)) | (1 << (PostgreSQLParser.KW_CHAIN - 139)) | (1 << (PostgreSQLParser.KW_CHARACTERISTICS - 139)) | (1 << (PostgreSQLParser.KW_CHECKPOINT - 139)) | (1 << (PostgreSQLParser.KW_CLASS - 139)) | (1 << (PostgreSQLParser.KW_CLOSE - 139)) | (1 << (PostgreSQLParser.KW_CLUSTER - 139)) | (1 << (PostgreSQLParser.KW_COMMENT - 139)) | (1 << (PostgreSQLParser.KW_COMMENTS - 139)) | (1 << (PostgreSQLParser.KW_COMMIT - 139)) | (1 << (PostgreSQLParser.KW_COMMITTED - 139)) | (1 << (PostgreSQLParser.KW_CONFIGURATION - 139)) | (1 << (PostgreSQLParser.KW_CONNECTION - 139)) | (1 << (PostgreSQLParser.KW_CONSTRAINTS - 139)) | (1 << (PostgreSQLParser.KW_CONTENT - 139)) | (1 << (PostgreSQLParser.KW_CONTINUE - 139)) | (1 << (PostgreSQLParser.KW_CONVERSION - 139)) | (1 << (PostgreSQLParser.KW_COPY - 139)) | (1 << (PostgreSQLParser.KW_COST - 139)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (PostgreSQLParser.KW_CSV - 171)) | (1 << (PostgreSQLParser.KW_CURSOR - 171)) | (1 << (PostgreSQLParser.KW_CYCLE - 171)) | (1 << (PostgreSQLParser.KW_DATA - 171)) | (1 << (PostgreSQLParser.KW_DATABASE - 171)) | (1 << (PostgreSQLParser.KW_DAY - 171)) | (1 << (PostgreSQLParser.KW_DEALLOCATE - 171)) | (1 << (PostgreSQLParser.KW_DECLARE - 171)) | (1 << (PostgreSQLParser.KW_DEFAULTS - 171)) | (1 << (PostgreSQLParser.KW_DEFERRED - 171)) | (1 << (PostgreSQLParser.KW_DEFINER - 171)) | (1 << (PostgreSQLParser.KW_DELETE - 171)) | (1 << (PostgreSQLParser.KW_DELIMITER - 171)) | (1 << (PostgreSQLParser.KW_DELIMITERS - 171)) | (1 << (PostgreSQLParser.KW_DICTIONARY - 171)) | (1 << (PostgreSQLParser.KW_DISABLE - 171)) | (1 << (PostgreSQLParser.KW_DISCARD - 171)) | (1 << (PostgreSQLParser.KW_DOCUMENT - 171)) | (1 << (PostgreSQLParser.KW_DOMAIN - 171)) | (1 << (PostgreSQLParser.KW_DOUBLE - 171)) | (1 << (PostgreSQLParser.KW_DROP - 171)) | (1 << (PostgreSQLParser.KW_EACH - 171)) | (1 << (PostgreSQLParser.KW_ENABLE - 171)) | (1 << (PostgreSQLParser.KW_ENCODING - 171)) | (1 << (PostgreSQLParser.KW_ENCRYPTED - 171)) | (1 << (PostgreSQLParser.KW_ENUM - 171)) | (1 << (PostgreSQLParser.KW_ESCAPE - 171)) | (1 << (PostgreSQLParser.KW_EVENT - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDE - 171)) | (1 << (PostgreSQLParser.KW_EXCLUDING - 171)) | (1 << (PostgreSQLParser.KW_EXCLUSIVE - 171)) | (1 << (PostgreSQLParser.KW_EXECUTE - 171)))) !== 0) || ((((_la - 203)) & ~0x1F) === 0 && ((1 << (_la - 203)) & ((1 << (PostgreSQLParser.KW_EXPLAIN - 203)) | (1 << (PostgreSQLParser.KW_EXTENSION - 203)) | (1 << (PostgreSQLParser.KW_EXTERNAL - 203)) | (1 << (PostgreSQLParser.KW_FAMILY - 203)) | (1 << (PostgreSQLParser.KW_FIRST - 203)) | (1 << (PostgreSQLParser.KW_FOLLOWING - 203)) | (1 << (PostgreSQLParser.KW_FORCE - 203)) | (1 << (PostgreSQLParser.KW_FORWARD - 203)) | (1 << (PostgreSQLParser.KW_FUNCTION - 203)) | (1 << (PostgreSQLParser.KW_FUNCTIONS - 203)) | (1 << (PostgreSQLParser.KW_GLOBAL - 203)) | (1 << (PostgreSQLParser.KW_GRANTED - 203)) | (1 << (PostgreSQLParser.KW_HANDLER - 203)) | (1 << (PostgreSQLParser.KW_HEADER - 203)) | (1 << (PostgreSQLParser.KW_HOLD - 203)) | (1 << (PostgreSQLParser.KW_HOUR - 203)) | (1 << (PostgreSQLParser.KW_IDENTITY - 203)) | (1 << (PostgreSQLParser.KW_IF - 203)) | (1 << (PostgreSQLParser.KW_IMMEDIATE - 203)) | (1 << (PostgreSQLParser.KW_IMMUTABLE - 203)) | (1 << (PostgreSQLParser.KW_IMPLICIT - 203)) | (1 << (PostgreSQLParser.KW_INCLUDING - 203)) | (1 << (PostgreSQLParser.KW_INCREMENT - 203)) | (1 << (PostgreSQLParser.KW_INDEX - 203)) | (1 << (PostgreSQLParser.KW_INDEXES - 203)) | (1 << (PostgreSQLParser.KW_INHERIT - 203)))) !== 0) || ((((_la - 238)) & ~0x1F) === 0 && ((1 << (_la - 238)) & ((1 << (PostgreSQLParser.KW_INHERITS - 238)) | (1 << (PostgreSQLParser.KW_INLINE - 238)) | (1 << (PostgreSQLParser.KW_INSENSITIVE - 238)) | (1 << (PostgreSQLParser.KW_INSERT - 238)) | (1 << (PostgreSQLParser.KW_INSTEAD - 238)) | (1 << (PostgreSQLParser.KW_INVOKER - 238)) | (1 << (PostgreSQLParser.KW_ISOLATION - 238)) | (1 << (PostgreSQLParser.KW_KEY - 238)) | (1 << (PostgreSQLParser.KW_LABEL - 238)) | (1 << (PostgreSQLParser.KW_LANGUAGE - 238)) | (1 << (PostgreSQLParser.KW_LARGE - 238)) | (1 << (PostgreSQLParser.KW_LAST - 238)) | (1 << (PostgreSQLParser.KW_LEAKPROOF - 238)) | (1 << (PostgreSQLParser.KW_LEVEL - 238)) | (1 << (PostgreSQLParser.KW_LISTEN - 238)) | (1 << (PostgreSQLParser.KW_LOAD - 238)) | (1 << (PostgreSQLParser.KW_LOCAL - 238)) | (1 << (PostgreSQLParser.KW_LOCATION - 238)) | (1 << (PostgreSQLParser.KW_LOCK - 238)) | (1 << (PostgreSQLParser.KW_MAPPING - 238)) | (1 << (PostgreSQLParser.KW_MATCH - 238)) | (1 << (PostgreSQLParser.KW_MATERIALIZED - 238)) | (1 << (PostgreSQLParser.KW_MAXVALUE - 238)) | (1 << (PostgreSQLParser.KW_MINUTE - 238)) | (1 << (PostgreSQLParser.KW_MINVALUE - 238)) | (1 << (PostgreSQLParser.KW_MODE - 238)) | (1 << (PostgreSQLParser.KW_MONTH - 238)) | (1 << (PostgreSQLParser.KW_MOVE - 238)) | (1 << (PostgreSQLParser.KW_NAME - 238)) | (1 << (PostgreSQLParser.KW_NAMES - 238)) | (1 << (PostgreSQLParser.KW_NEXT - 238)) | (1 << (PostgreSQLParser.KW_NO - 238)))) !== 0) || ((((_la - 270)) & ~0x1F) === 0 && ((1 << (_la - 270)) & ((1 << (PostgreSQLParser.KW_NOTHING - 270)) | (1 << (PostgreSQLParser.KW_NOTIFY - 270)) | (1 << (PostgreSQLParser.KW_NOWAIT - 270)) | (1 << (PostgreSQLParser.KW_NULLS - 270)) | (1 << (PostgreSQLParser.KW_OBJECT - 270)) | (1 << (PostgreSQLParser.KW_OF - 270)) | (1 << (PostgreSQLParser.KW_OFF - 270)) | (1 << (PostgreSQLParser.KW_OIDS - 270)) | (1 << (PostgreSQLParser.KW_OPERATOR - 270)) | (1 << (PostgreSQLParser.KW_OPTION - 270)) | (1 << (PostgreSQLParser.KW_OPTIONS - 270)) | (1 << (PostgreSQLParser.KW_OWNED - 270)) | (1 << (PostgreSQLParser.KW_OWNER - 270)) | (1 << (PostgreSQLParser.KW_PARSER - 270)) | (1 << (PostgreSQLParser.KW_PARTIAL - 270)) | (1 << (PostgreSQLParser.KW_PARTITION - 270)) | (1 << (PostgreSQLParser.KW_PASSING - 270)) | (1 << (PostgreSQLParser.KW_PASSWORD - 270)) | (1 << (PostgreSQLParser.KW_PLANS - 270)) | (1 << (PostgreSQLParser.KW_PRECEDING - 270)) | (1 << (PostgreSQLParser.KW_PREPARE - 270)) | (1 << (PostgreSQLParser.KW_PREPARED - 270)) | (1 << (PostgreSQLParser.KW_PRESERVE - 270)) | (1 << (PostgreSQLParser.KW_PRIOR - 270)) | (1 << (PostgreSQLParser.KW_PRIVILEGES - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURAL - 270)) | (1 << (PostgreSQLParser.KW_PROCEDURE - 270)) | (1 << (PostgreSQLParser.KW_PROGRAM - 270)) | (1 << (PostgreSQLParser.KW_QUOTE - 270)) | (1 << (PostgreSQLParser.KW_RANGE - 270)) | (1 << (PostgreSQLParser.KW_READ - 270)) | (1 << (PostgreSQLParser.KW_REASSIGN - 270)))) !== 0) || ((((_la - 302)) & ~0x1F) === 0 && ((1 << (_la - 302)) & ((1 << (PostgreSQLParser.KW_RECHECK - 302)) | (1 << (PostgreSQLParser.KW_RECURSIVE - 302)) | (1 << (PostgreSQLParser.KW_REF - 302)) | (1 << (PostgreSQLParser.KW_REFRESH - 302)) | (1 << (PostgreSQLParser.KW_REINDEX - 302)) | (1 << (PostgreSQLParser.KW_RELATIVE - 302)) | (1 << (PostgreSQLParser.KW_RELEASE - 302)) | (1 << (PostgreSQLParser.KW_RENAME - 302)) | (1 << (PostgreSQLParser.KW_REPEATABLE - 302)) | (1 << (PostgreSQLParser.KW_REPLACE - 302)) | (1 << (PostgreSQLParser.KW_REPLICA - 302)) | (1 << (PostgreSQLParser.KW_RESET - 302)) | (1 << (PostgreSQLParser.KW_RESTART - 302)) | (1 << (PostgreSQLParser.KW_RESTRICT - 302)) | (1 << (PostgreSQLParser.KW_RETURNS - 302)) | (1 << (PostgreSQLParser.KW_REVOKE - 302)) | (1 << (PostgreSQLParser.KW_ROLE - 302)) | (1 << (PostgreSQLParser.KW_ROLLBACK - 302)) | (1 << (PostgreSQLParser.KW_ROWS - 302)) | (1 << (PostgreSQLParser.KW_RULE - 302)) | (1 << (PostgreSQLParser.KW_SAVEPOINT - 302)) | (1 << (PostgreSQLParser.KW_SCHEMA - 302)) | (1 << (PostgreSQLParser.KW_SCROLL - 302)) | (1 << (PostgreSQLParser.KW_SEARCH - 302)) | (1 << (PostgreSQLParser.KW_SECOND - 302)) | (1 << (PostgreSQLParser.KW_SECURITY - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCE - 302)) | (1 << (PostgreSQLParser.KW_SEQUENCES - 302)) | (1 << (PostgreSQLParser.KW_SERIALIZABLE - 302)) | (1 << (PostgreSQLParser.KW_SERVER - 302)) | (1 << (PostgreSQLParser.KW_SESSION - 302)) | (1 << (PostgreSQLParser.KW_SET - 302)))) !== 0) || ((((_la - 334)) & ~0x1F) === 0 && ((1 << (_la - 334)) & ((1 << (PostgreSQLParser.KW_SHARE - 334)) | (1 << (PostgreSQLParser.KW_SHOW - 334)) | (1 << (PostgreSQLParser.KW_SIMPLE - 334)) | (1 << (PostgreSQLParser.KW_SNAPSHOT - 334)) | (1 << (PostgreSQLParser.KW_STABLE - 334)) | (1 << (PostgreSQLParser.KW_STANDALONE - 334)) | (1 << (PostgreSQLParser.KW_START - 334)) | (1 << (PostgreSQLParser.KW_STATEMENT - 334)) | (1 << (PostgreSQLParser.KW_STATISTICS - 334)) | (1 << (PostgreSQLParser.KW_STDIN - 334)) | (1 << (PostgreSQLParser.KW_STDOUT - 334)) | (1 << (PostgreSQLParser.KW_STORAGE - 334)) | (1 << (PostgreSQLParser.KW_STRICT - 334)) | (1 << (PostgreSQLParser.KW_STRIP - 334)) | (1 << (PostgreSQLParser.KW_SYSID - 334)) | (1 << (PostgreSQLParser.KW_SYSTEM - 334)) | (1 << (PostgreSQLParser.KW_TABLES - 334)) | (1 << (PostgreSQLParser.KW_TABLESPACE - 334)) | (1 << (PostgreSQLParser.KW_TEMP - 334)) | (1 << (PostgreSQLParser.KW_TEMPLATE - 334)) | (1 << (PostgreSQLParser.KW_TEMPORARY - 334)) | (1 << (PostgreSQLParser.KW_TEXT - 334)) | (1 << (PostgreSQLParser.KW_TRANSACTION - 334)) | (1 << (PostgreSQLParser.KW_TRIGGER - 334)) | (1 << (PostgreSQLParser.KW_TRUNCATE - 334)) | (1 << (PostgreSQLParser.KW_TRUSTED - 334)) | (1 << (PostgreSQLParser.KW_TYPE - 334)) | (1 << (PostgreSQLParser.KW_TYPES - 334)) | (1 << (PostgreSQLParser.KW_UNBOUNDED - 334)) | (1 << (PostgreSQLParser.KW_UNCOMMITTED - 334)) | (1 << (PostgreSQLParser.KW_UNENCRYPTED - 334)) | (1 << (PostgreSQLParser.KW_UNKNOWN - 334)))) !== 0) || ((((_la - 366)) & ~0x1F) === 0 && ((1 << (_la - 366)) & ((1 << (PostgreSQLParser.KW_UNLISTEN - 366)) | (1 << (PostgreSQLParser.KW_UNLOGGED - 366)) | (1 << (PostgreSQLParser.KW_UNTIL - 366)) | (1 << (PostgreSQLParser.KW_UPDATE - 366)) | (1 << (PostgreSQLParser.KW_VACUUM - 366)) | (1 << (PostgreSQLParser.KW_VALID - 366)) | (1 << (PostgreSQLParser.KW_VALIDATE - 366)) | (1 << (PostgreSQLParser.KW_VALIDATOR - 366)) | (1 << (PostgreSQLParser.KW_VARYING - 366)) | (1 << (PostgreSQLParser.KW_VERSION - 366)) | (1 << (PostgreSQLParser.KW_VIEW - 366)) | (1 << (PostgreSQLParser.KW_VOLATILE - 366)) | (1 << (PostgreSQLParser.KW_WHITESPACE - 366)) | (1 << (PostgreSQLParser.KW_WITHOUT - 366)) | (1 << (PostgreSQLParser.KW_WORK - 366)) | (1 << (PostgreSQLParser.KW_WRAPPER - 366)) | (1 << (PostgreSQLParser.KW_WRITE - 366)) | (1 << (PostgreSQLParser.KW_XML - 366)) | (1 << (PostgreSQLParser.KW_YEAR - 366)) | (1 << (PostgreSQLParser.KW_YES - 366)) | (1 << (PostgreSQLParser.KW_ZONE - 366)) | (1 << (PostgreSQLParser.KW_BETWEEN - 366)) | (1 << (PostgreSQLParser.KW_BIGINT - 366)) | (1 << (PostgreSQLParser.KW_BIT - 366)) | (1 << (PostgreSQLParser.KW_BOOLEAN - 366)) | (1 << (PostgreSQLParser.KW_CHAR - 366)) | (1 << (PostgreSQLParser.KW_CHARACTER - 366)) | (1 << (PostgreSQLParser.KW_COALESCE - 366)) | (1 << (PostgreSQLParser.KW_DEC - 366)) | (1 << (PostgreSQLParser.KW_DECIMAL - 366)) | (1 << (PostgreSQLParser.KW_EXISTS - 366)) | (1 << (PostgreSQLParser.KW_EXTRACT - 366)))) !== 0) || ((((_la - 398)) & ~0x1F) === 0 && ((1 << (_la - 398)) & ((1 << (PostgreSQLParser.KW_FLOAT - 398)) | (1 << (PostgreSQLParser.KW_GREATEST - 398)) | (1 << (PostgreSQLParser.KW_INOUT - 398)) | (1 << (PostgreSQLParser.KW_INT - 398)) | (1 << (PostgreSQLParser.KW_INTEGER - 398)) | (1 << (PostgreSQLParser.KW_INTERVAL - 398)) | (1 << (PostgreSQLParser.KW_LEAST - 398)) | (1 << (PostgreSQLParser.KW_NATIONAL - 398)) | (1 << (PostgreSQLParser.KW_NCHAR - 398)) | (1 << (PostgreSQLParser.KW_NONE - 398)) | (1 << (PostgreSQLParser.KW_NULLIF - 398)) | (1 << (PostgreSQLParser.KW_NUMERIC - 398)) | (1 << (PostgreSQLParser.KW_OVERLAY - 398)) | (1 << (PostgreSQLParser.KW_POSITION - 398)) | (1 << (PostgreSQLParser.KW_PRECISION - 398)) | (1 << (PostgreSQLParser.KW_REAL - 398)) | (1 << (PostgreSQLParser.KW_ROW - 398)) | (1 << (PostgreSQLParser.KW_SETOF - 398)) | (1 << (PostgreSQLParser.KW_SMALLINT - 398)) | (1 << (PostgreSQLParser.KW_SUBSTRING - 398)) | (1 << (PostgreSQLParser.KW_TIME - 398)) | (1 << (PostgreSQLParser.KW_TIMESTAMP - 398)) | (1 << (PostgreSQLParser.KW_TREAT - 398)) | (1 << (PostgreSQLParser.KW_TRIM - 398)) | (1 << (PostgreSQLParser.KW_VALUES - 398)) | (1 << (PostgreSQLParser.KW_VARCHAR - 398)) | (1 << (PostgreSQLParser.KW_XMLATTRIBUTES - 398)) | (1 << (PostgreSQLParser.KW_XMLCONCAT - 398)) | (1 << (PostgreSQLParser.KW_XMLELEMENT - 398)) | (1 << (PostgreSQLParser.KW_XMLEXISTS - 398)) | (1 << (PostgreSQLParser.KW_XMLFOREST - 398)) | (1 << (PostgreSQLParser.KW_XMLPARSE - 398)))) !== 0) || ((((_la - 430)) & ~0x1F) === 0 && ((1 << (_la - 430)) & ((1 << (PostgreSQLParser.KW_XMLPI - 430)) | (1 << (PostgreSQLParser.KW_XMLROOT - 430)) | (1 << (PostgreSQLParser.KW_XMLSERIALIZE - 430)) | (1 << (PostgreSQLParser.KW_CALL - 430)) | (1 << (PostgreSQLParser.KW_CURRENT - 430)) | (1 << (PostgreSQLParser.KW_ATTACH - 430)) | (1 << (PostgreSQLParser.KW_DETACH - 430)) | (1 << (PostgreSQLParser.KW_EXPRESSION - 430)) | (1 << (PostgreSQLParser.KW_GENERATED - 430)) | (1 << (PostgreSQLParser.KW_LOGGED - 430)) | (1 << (PostgreSQLParser.KW_STORED - 430)) | (1 << (PostgreSQLParser.KW_INCLUDE - 430)) | (1 << (PostgreSQLParser.KW_ROUTINE - 430)) | (1 << (PostgreSQLParser.KW_TRANSFORM - 430)) | (1 << (PostgreSQLParser.KW_IMPORT - 430)) | (1 << (PostgreSQLParser.KW_POLICY - 430)) | (1 << (PostgreSQLParser.KW_METHOD - 430)) | (1 << (PostgreSQLParser.KW_REFERENCING - 430)) | (1 << (PostgreSQLParser.KW_NEW - 430)) | (1 << (PostgreSQLParser.KW_OLD - 430)) | (1 << (PostgreSQLParser.KW_VALUE - 430)) | (1 << (PostgreSQLParser.KW_SUBSCRIPTION - 430)) | (1 << (PostgreSQLParser.KW_PUBLICATION - 430)) | (1 << (PostgreSQLParser.KW_OUT - 430)) | (1 << (PostgreSQLParser.KW_ROUTINES - 430)) | (1 << (PostgreSQLParser.KW_SCHEMAS - 430)) | (1 << (PostgreSQLParser.KW_PROCEDURES - 430)) | (1 << (PostgreSQLParser.KW_INPUT - 430)) | (1 << (PostgreSQLParser.KW_SUPPORT - 430)) | (1 << (PostgreSQLParser.KW_PARALLEL - 430)) | (1 << (PostgreSQLParser.KW_SQL - 430)))) !== 0) || ((((_la - 462)) & ~0x1F) === 0 && ((1 << (_la - 462)) & ((1 << (PostgreSQLParser.KW_DEPENDS - 462)) | (1 << (PostgreSQLParser.KW_OVERRIDING - 462)) | (1 << (PostgreSQLParser.KW_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_SKIP - 462)) | (1 << (PostgreSQLParser.KW_LOCKED - 462)) | (1 << (PostgreSQLParser.KW_TIES - 462)) | (1 << (PostgreSQLParser.KW_ROLLUP - 462)) | (1 << (PostgreSQLParser.KW_CUBE - 462)) | (1 << (PostgreSQLParser.KW_GROUPING - 462)) | (1 << (PostgreSQLParser.KW_SETS - 462)) | (1 << (PostgreSQLParser.KW_TABLESAMPLE - 462)) | (1 << (PostgreSQLParser.KW_ORDINALITY - 462)) | (1 << (PostgreSQLParser.KW_XMLTABLE - 462)) | (1 << (PostgreSQLParser.KW_COLUMNS - 462)) | (1 << (PostgreSQLParser.KW_XMLNAMESPACES - 462)) | (1 << (PostgreSQLParser.KW_ROWTYPE - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZED - 462)) | (1 << (PostgreSQLParser.KW_WITHIN - 462)) | (1 << (PostgreSQLParser.KW_FILTER - 462)) | (1 << (PostgreSQLParser.KW_GROUPS - 462)) | (1 << (PostgreSQLParser.KW_OTHERS - 462)) | (1 << (PostgreSQLParser.KW_NFC - 462)) | (1 << (PostgreSQLParser.KW_NFD - 462)) | (1 << (PostgreSQLParser.KW_NFKC - 462)) | (1 << (PostgreSQLParser.KW_NFKD - 462)) | (1 << (PostgreSQLParser.KW_UESCAPE - 462)) | (1 << (PostgreSQLParser.KW_VIEWS - 462)) | (1 << (PostgreSQLParser.KW_NORMALIZE - 462)) | (1 << (PostgreSQLParser.KW_DUMP - 462)) | (1 << (PostgreSQLParser.KW_PRINT_STRICT_PARAMS - 462)) | (1 << (PostgreSQLParser.KW_VARIABLE_CONFLICT - 462)) | (1 << (PostgreSQLParser.KW_ERROR - 462)))) !== 0) || ((((_la - 494)) & ~0x1F) === 0 && ((1 << (_la - 494)) & ((1 << (PostgreSQLParser.KW_USE_VARIABLE - 494)) | (1 << (PostgreSQLParser.KW_USE_COLUMN - 494)) | (1 << (PostgreSQLParser.KW_ALIAS - 494)) | (1 << (PostgreSQLParser.KW_CONSTANT - 494)) | (1 << (PostgreSQLParser.KW_PERFORM - 494)) | (1 << (PostgreSQLParser.KW_GET - 494)) | (1 << (PostgreSQLParser.KW_DIAGNOSTICS - 494)) | (1 << (PostgreSQLParser.KW_STACKED - 494)) | (1 << (PostgreSQLParser.KW_ELSIF - 494)) | (1 << (PostgreSQLParser.KW_REVERSE - 494)) | (1 << (PostgreSQLParser.KW_SLICE - 494)) | (1 << (PostgreSQLParser.KW_EXIT - 494)) | (1 << (PostgreSQLParser.KW_RETURN - 494)) | (1 << (PostgreSQLParser.KW_QUERY - 494)) | (1 << (PostgreSQLParser.KW_RAISE - 494)) | (1 << (PostgreSQLParser.KW_SQLSTATE - 494)) | (1 << (PostgreSQLParser.KW_DEBUG - 494)) | (1 << (PostgreSQLParser.KW_LOG - 494)) | (1 << (PostgreSQLParser.KW_INFO - 494)) | (1 << (PostgreSQLParser.KW_NOTICE - 494)) | (1 << (PostgreSQLParser.KW_WARNING - 494)) | (1 << (PostgreSQLParser.KW_EXCEPTION - 494)) | (1 << (PostgreSQLParser.KW_ASSERT - 494)) | (1 << (PostgreSQLParser.KW_OPEN - 494)) | (1 << (PostgreSQLParser.Identifier - 494)))) !== 0) || ((((_la - 526)) & ~0x1F) === 0 && ((1 << (_la - 526)) & ((1 << (PostgreSQLParser.QuotedIdentifier - 526)) | (1 << (PostgreSQLParser.UnicodeQuotedIdentifier - 526)) | (1 << (PostgreSQLParser.StringConstant - 526)) | (1 << (PostgreSQLParser.UnicodeEscapeStringConstant - 526)) | (1 << (PostgreSQLParser.BeginDollarStringConstant - 526)) | (1 << (PostgreSQLParser.BinaryStringConstant - 526)) | (1 << (PostgreSQLParser.HexadecimalStringConstant - 526)) | (1 << (PostgreSQLParser.Integral - 526)) | (1 << (PostgreSQLParser.Numeric - 526)) | (1 << (PostgreSQLParser.PLSQLVARIABLENAME - 526)) | (1 << (PostgreSQLParser.PLSQLIDENTIFIER - 526)))) !== 0) || _la === PostgreSQLParser.EscapeStringConstant) {
				{
				this.state = 11064;
				this.opt_target_list();
				}
			}

			this.state = 11068;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_INTO) {
				{
				this.state = 11067;
				this.into_clause();
				}
			}

			this.state = 11071;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_FROM) {
				{
				this.state = 11070;
				this.from_clause();
				}
			}

			this.state = 11074;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WHERE) {
				{
				this.state = 11073;
				this.where_clause();
				}
			}

			this.state = 11077;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_GROUP) {
				{
				this.state = 11076;
				this.group_clause();
				}
			}

			this.state = 11080;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_HAVING) {
				{
				this.state = 11079;
				this.having_clause();
				}
			}

			this.state = 11083;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_WINDOW) {
				{
				this.state = 11082;
				this.window_clause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_until_then(): Expr_until_thenContext {
		let _localctx: Expr_until_thenContext = new Expr_until_thenContext(this._ctx, this.state);
		this.enterRule(_localctx, 1620, PostgreSQLParser.RULE_expr_until_then);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11085;
			this.sql_expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_until_semi(): Expr_until_semiContext {
		let _localctx: Expr_until_semiContext = new Expr_until_semiContext(this._ctx, this.state);
		this.enterRule(_localctx, 1622, PostgreSQLParser.RULE_expr_until_semi);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11087;
			this.sql_expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_until_rightbracket(): Expr_until_rightbracketContext {
		let _localctx: Expr_until_rightbracketContext = new Expr_until_rightbracketContext(this._ctx, this.state);
		this.enterRule(_localctx, 1624, PostgreSQLParser.RULE_expr_until_rightbracket);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11089;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expr_until_loop(): Expr_until_loopContext {
		let _localctx: Expr_until_loopContext = new Expr_until_loopContext(this._ctx, this.state);
		this.enterRule(_localctx, 1626, PostgreSQLParser.RULE_expr_until_loop);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11091;
			this.a_expr();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public make_execsql_stmt(): Make_execsql_stmtContext {
		let _localctx: Make_execsql_stmtContext = new Make_execsql_stmtContext(this._ctx, this.state);
		this.enterRule(_localctx, 1628, PostgreSQLParser.RULE_make_execsql_stmt);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11093;
			this.stmt();
			this.state = 11095;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === PostgreSQLParser.KW_INTO) {
				{
				this.state = 11094;
				this.opt_returning_clause_into();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public opt_returning_clause_into(): Opt_returning_clause_intoContext {
		let _localctx: Opt_returning_clause_intoContext = new Opt_returning_clause_intoContext(this._ctx, this.state);
		this.enterRule(_localctx, 1630, PostgreSQLParser.RULE_opt_returning_clause_into);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 11097;
			this.match(PostgreSQLParser.KW_INTO);
			this.state = 11098;
			this.opt_strict();
			this.state = 11099;
			this.into_target();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 602:
			return this.b_expr_sempred(_localctx as B_exprContext, predIndex);
		}
		return true;
	}
	private b_expr_sempred(_localctx: B_exprContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.precpred(this._ctx, 8);

		case 1:
			return this.precpred(this._ctx, 7);

		case 2:
			return this.precpred(this._ctx, 6);

		case 3:
			return this.precpred(this._ctx, 5);

		case 4:
			return this.precpred(this._ctx, 4);

		case 5:
			return this.precpred(this._ctx, 10);

		case 6:
			return this.precpred(this._ctx, 2);

		case 7:
			return this.precpred(this._ctx, 1);
		}
		return true;
	}

	private static readonly _serializedATNSegments: number = 21;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0238\u2B60\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x04\xF4\t\xF4" +
		"\x04\xF5\t\xF5\x04\xF6\t\xF6\x04\xF7\t\xF7\x04\xF8\t\xF8\x04\xF9\t\xF9" +
		"\x04\xFA\t\xFA\x04\xFB\t\xFB\x04\xFC\t\xFC\x04\xFD\t\xFD\x04\xFE\t\xFE" +
		"\x04\xFF\t\xFF\x04\u0100\t\u0100\x04\u0101\t\u0101\x04\u0102\t\u0102\x04" +
		"\u0103\t\u0103\x04\u0104\t\u0104\x04\u0105\t\u0105\x04\u0106\t\u0106\x04" +
		"\u0107\t\u0107\x04\u0108\t\u0108\x04\u0109\t\u0109\x04\u010A\t\u010A\x04" +
		"\u010B\t\u010B\x04\u010C\t\u010C\x04\u010D\t\u010D\x04\u010E\t\u010E\x04" +
		"\u010F\t\u010F\x04\u0110\t\u0110\x04\u0111\t\u0111\x04\u0112\t\u0112\x04" +
		"\u0113\t\u0113\x04\u0114\t\u0114\x04\u0115\t\u0115\x04\u0116\t\u0116\x04" +
		"\u0117\t\u0117\x04\u0118\t\u0118\x04\u0119\t\u0119\x04\u011A\t\u011A\x04" +
		"\u011B\t\u011B\x04\u011C\t\u011C\x04\u011D\t\u011D\x04\u011E\t\u011E\x04" +
		"\u011F\t\u011F\x04\u0120\t\u0120\x04\u0121\t\u0121\x04\u0122\t\u0122\x04" +
		"\u0123\t\u0123\x04\u0124\t\u0124\x04\u0125\t\u0125\x04\u0126\t\u0126\x04" +
		"\u0127\t\u0127\x04\u0128\t\u0128\x04\u0129\t\u0129\x04\u012A\t\u012A\x04" +
		"\u012B\t\u012B\x04\u012C\t\u012C\x04\u012D\t\u012D\x04\u012E\t\u012E\x04" +
		"\u012F\t\u012F\x04\u0130\t\u0130\x04\u0131\t\u0131\x04\u0132\t\u0132\x04" +
		"\u0133\t\u0133\x04\u0134\t\u0134\x04\u0135\t\u0135\x04\u0136\t\u0136\x04" +
		"\u0137\t\u0137\x04\u0138\t\u0138\x04\u0139\t\u0139\x04\u013A\t\u013A\x04" +
		"\u013B\t\u013B\x04\u013C\t\u013C\x04\u013D\t\u013D\x04\u013E\t\u013E\x04" +
		"\u013F\t\u013F\x04\u0140\t\u0140\x04\u0141\t\u0141\x04\u0142\t\u0142\x04" +
		"\u0143\t\u0143\x04\u0144\t\u0144\x04\u0145\t\u0145\x04\u0146\t\u0146\x04" +
		"\u0147\t\u0147\x04\u0148\t\u0148\x04\u0149\t\u0149\x04\u014A\t\u014A\x04" +
		"\u014B\t\u014B\x04\u014C\t\u014C\x04\u014D\t\u014D\x04\u014E\t\u014E\x04" +
		"\u014F\t\u014F\x04\u0150\t\u0150\x04\u0151\t\u0151\x04\u0152\t\u0152\x04" +
		"\u0153\t\u0153\x04\u0154\t\u0154\x04\u0155\t\u0155\x04\u0156\t\u0156\x04" +
		"\u0157\t\u0157\x04\u0158\t\u0158\x04\u0159\t\u0159\x04\u015A\t\u015A\x04" +
		"\u015B\t\u015B\x04\u015C\t\u015C\x04\u015D\t\u015D\x04\u015E\t\u015E\x04" +
		"\u015F\t\u015F\x04\u0160\t\u0160\x04\u0161\t\u0161\x04\u0162\t\u0162\x04" +
		"\u0163\t\u0163\x04\u0164\t\u0164\x04\u0165\t\u0165\x04\u0166\t\u0166\x04" +
		"\u0167\t\u0167\x04\u0168\t\u0168\x04\u0169\t\u0169\x04\u016A\t\u016A\x04" +
		"\u016B\t\u016B\x04\u016C\t\u016C\x04\u016D\t\u016D\x04\u016E\t\u016E\x04" +
		"\u016F\t\u016F\x04\u0170\t\u0170\x04\u0171\t\u0171\x04\u0172\t\u0172\x04" +
		"\u0173\t\u0173\x04\u0174\t\u0174\x04\u0175\t\u0175\x04\u0176\t\u0176\x04" +
		"\u0177\t\u0177\x04\u0178\t\u0178\x04\u0179\t\u0179\x04\u017A\t\u017A\x04" +
		"\u017B\t\u017B\x04\u017C\t\u017C\x04\u017D\t\u017D\x04\u017E\t\u017E\x04" +
		"\u017F\t\u017F\x04\u0180\t\u0180\x04\u0181\t\u0181\x04\u0182\t\u0182\x04" +
		"\u0183\t\u0183\x04\u0184\t\u0184\x04\u0185\t\u0185\x04\u0186\t\u0186\x04" +
		"\u0187\t\u0187\x04\u0188\t\u0188\x04\u0189\t\u0189\x04\u018A\t\u018A\x04" +
		"\u018B\t\u018B\x04\u018C\t\u018C\x04\u018D\t\u018D\x04\u018E\t\u018E\x04" +
		"\u018F\t\u018F\x04\u0190\t\u0190\x04\u0191\t\u0191\x04\u0192\t\u0192\x04" +
		"\u0193\t\u0193\x04\u0194\t\u0194\x04\u0195\t\u0195\x04\u0196\t\u0196\x04" +
		"\u0197\t\u0197\x04\u0198\t\u0198\x04\u0199\t\u0199\x04\u019A\t\u019A\x04" +
		"\u019B\t\u019B\x04\u019C\t\u019C\x04\u019D\t\u019D\x04\u019E\t\u019E\x04" +
		"\u019F\t\u019F\x04\u01A0\t\u01A0\x04\u01A1\t\u01A1\x04\u01A2\t\u01A2\x04" +
		"\u01A3\t\u01A3\x04\u01A4\t\u01A4\x04\u01A5\t\u01A5\x04\u01A6\t\u01A6\x04" +
		"\u01A7\t\u01A7\x04\u01A8\t\u01A8\x04\u01A9\t\u01A9\x04\u01AA\t\u01AA\x04" +
		"\u01AB\t\u01AB\x04\u01AC\t\u01AC\x04\u01AD\t\u01AD\x04\u01AE\t\u01AE\x04" +
		"\u01AF\t\u01AF\x04\u01B0\t\u01B0\x04\u01B1\t\u01B1\x04\u01B2\t\u01B2\x04" +
		"\u01B3\t\u01B3\x04\u01B4\t\u01B4\x04\u01B5\t\u01B5\x04\u01B6\t\u01B6\x04" +
		"\u01B7\t\u01B7\x04\u01B8\t\u01B8\x04\u01B9\t\u01B9\x04\u01BA\t\u01BA\x04" +
		"\u01BB\t\u01BB\x04\u01BC\t\u01BC\x04\u01BD\t\u01BD\x04\u01BE\t\u01BE\x04" +
		"\u01BF\t\u01BF\x04\u01C0\t\u01C0\x04\u01C1\t\u01C1\x04\u01C2\t\u01C2\x04" +
		"\u01C3\t\u01C3\x04\u01C4\t\u01C4\x04\u01C5\t\u01C5\x04\u01C6\t\u01C6\x04" +
		"\u01C7\t\u01C7\x04\u01C8\t\u01C8\x04\u01C9\t\u01C9\x04\u01CA\t\u01CA\x04" +
		"\u01CB\t\u01CB\x04\u01CC\t\u01CC\x04\u01CD\t\u01CD\x04\u01CE\t\u01CE\x04" +
		"\u01CF\t\u01CF\x04\u01D0\t\u01D0\x04\u01D1\t\u01D1\x04\u01D2\t\u01D2\x04" +
		"\u01D3\t\u01D3\x04\u01D4\t\u01D4\x04\u01D5\t\u01D5\x04\u01D6\t\u01D6\x04" +
		"\u01D7\t\u01D7\x04\u01D8\t\u01D8\x04\u01D9\t\u01D9\x04\u01DA\t\u01DA\x04" +
		"\u01DB\t\u01DB\x04\u01DC\t\u01DC\x04\u01DD\t\u01DD\x04\u01DE\t\u01DE\x04" +
		"\u01DF\t\u01DF\x04\u01E0\t\u01E0\x04\u01E1\t\u01E1\x04\u01E2\t\u01E2\x04" +
		"\u01E3\t\u01E3\x04\u01E4\t\u01E4\x04\u01E5\t\u01E5\x04\u01E6\t\u01E6\x04" +
		"\u01E7\t\u01E7\x04\u01E8\t\u01E8\x04\u01E9\t\u01E9\x04\u01EA\t\u01EA\x04" +
		"\u01EB\t\u01EB\x04\u01EC\t\u01EC\x04\u01ED\t\u01ED\x04\u01EE\t\u01EE\x04" +
		"\u01EF\t\u01EF\x04\u01F0\t\u01F0\x04\u01F1\t\u01F1\x04\u01F2\t\u01F2\x04" +
		"\u01F3\t\u01F3\x04\u01F4\t\u01F4\x04\u01F5\t\u01F5\x04\u01F6\t\u01F6\x04" +
		"\u01F7\t\u01F7\x04\u01F8\t\u01F8\x04\u01F9\t\u01F9\x04\u01FA\t\u01FA\x04" +
		"\u01FB\t\u01FB\x04\u01FC\t\u01FC\x04\u01FD\t\u01FD\x04\u01FE\t\u01FE\x04" +
		"\u01FF\t\u01FF\x04\u0200\t\u0200\x04\u0201\t\u0201\x04\u0202\t\u0202\x04" +
		"\u0203\t\u0203\x04\u0204\t\u0204\x04\u0205\t\u0205\x04\u0206\t\u0206\x04" +
		"\u0207\t\u0207\x04\u0208\t\u0208\x04\u0209\t\u0209\x04\u020A\t\u020A\x04" +
		"\u020B\t\u020B\x04\u020C\t\u020C\x04\u020D\t\u020D\x04\u020E\t\u020E\x04" +
		"\u020F\t\u020F\x04\u0210\t\u0210\x04\u0211\t\u0211\x04\u0212\t\u0212\x04" +
		"\u0213\t\u0213\x04\u0214\t\u0214\x04\u0215\t\u0215\x04\u0216\t\u0216\x04" +
		"\u0217\t\u0217\x04\u0218\t\u0218\x04\u0219\t\u0219\x04\u021A\t\u021A\x04" +
		"\u021B\t\u021B\x04\u021C\t\u021C\x04\u021D\t\u021D\x04\u021E\t\u021E\x04" +
		"\u021F\t\u021F\x04\u0220\t\u0220\x04\u0221\t\u0221\x04\u0222\t\u0222\x04" +
		"\u0223\t\u0223\x04\u0224\t\u0224\x04\u0225\t\u0225\x04\u0226\t\u0226\x04" +
		"\u0227\t\u0227\x04\u0228\t\u0228\x04\u0229\t\u0229\x04\u022A\t\u022A\x04" +
		"\u022B\t\u022B\x04\u022C\t\u022C\x04\u022D\t\u022D\x04\u022E\t\u022E\x04" +
		"\u022F\t\u022F\x04\u0230\t\u0230\x04\u0231\t\u0231\x04\u0232\t\u0232\x04" +
		"\u0233\t\u0233\x04\u0234\t\u0234\x04\u0235\t\u0235\x04\u0236\t\u0236\x04" +
		"\u0237\t\u0237\x04\u0238\t\u0238\x04\u0239\t\u0239\x04\u023A\t\u023A\x04" +
		"\u023B\t\u023B\x04\u023C\t\u023C\x04\u023D\t\u023D\x04\u023E\t\u023E\x04" +
		"\u023F\t\u023F\x04\u0240\t\u0240\x04\u0241\t\u0241\x04\u0242\t\u0242\x04" +
		"\u0243\t\u0243\x04\u0244\t\u0244\x04\u0245\t\u0245\x04\u0246\t\u0246\x04" +
		"\u0247\t\u0247\x04\u0248\t\u0248\x04\u0249\t\u0249\x04\u024A\t\u024A\x04" +
		"\u024B\t\u024B\x04\u024C\t\u024C\x04\u024D\t\u024D\x04\u024E\t\u024E\x04" +
		"\u024F\t\u024F\x04\u0250\t\u0250\x04\u0251\t\u0251\x04\u0252\t\u0252\x04" +
		"\u0253\t\u0253\x04\u0254\t\u0254\x04\u0255\t\u0255\x04\u0256\t\u0256\x04" +
		"\u0257\t\u0257\x04\u0258\t\u0258\x04\u0259\t\u0259\x04\u025A\t\u025A\x04" +
		"\u025B\t\u025B\x04\u025C\t\u025C\x04\u025D\t\u025D\x04\u025E\t\u025E\x04" +
		"\u025F\t\u025F\x04\u0260\t\u0260\x04\u0261\t\u0261\x04\u0262\t\u0262\x04" +
		"\u0263\t\u0263\x04\u0264\t\u0264\x04\u0265\t\u0265\x04\u0266\t\u0266\x04" +
		"\u0267\t\u0267\x04\u0268\t\u0268\x04\u0269\t\u0269\x04\u026A\t\u026A\x04" +
		"\u026B\t\u026B\x04\u026C\t\u026C\x04\u026D\t\u026D\x04\u026E\t\u026E\x04" +
		"\u026F\t\u026F\x04\u0270\t\u0270\x04\u0271\t\u0271\x04\u0272\t\u0272\x04" +
		"\u0273\t\u0273\x04\u0274\t\u0274\x04\u0275\t\u0275\x04\u0276\t\u0276\x04" +
		"\u0277\t\u0277\x04\u0278\t\u0278\x04\u0279\t\u0279\x04\u027A\t\u027A\x04" +
		"\u027B\t\u027B\x04\u027C\t\u027C\x04\u027D\t\u027D\x04\u027E\t\u027E\x04" +
		"\u027F\t\u027F\x04\u0280\t\u0280\x04\u0281\t\u0281\x04\u0282\t\u0282\x04" +
		"\u0283\t\u0283\x04\u0284\t\u0284\x04\u0285\t\u0285\x04\u0286\t\u0286\x04" +
		"\u0287\t\u0287\x04\u0288\t\u0288\x04\u0289\t\u0289\x04\u028A\t\u028A\x04" +
		"\u028B\t\u028B\x04\u028C\t\u028C\x04\u028D\t\u028D\x04\u028E\t\u028E\x04" +
		"\u028F\t\u028F\x04\u0290\t\u0290\x04\u0291\t\u0291\x04\u0292\t\u0292\x04" +
		"\u0293\t\u0293\x04\u0294\t\u0294\x04\u0295\t\u0295\x04\u0296\t\u0296\x04" +
		"\u0297\t\u0297\x04\u0298\t\u0298\x04\u0299\t\u0299\x04\u029A\t\u029A\x04" +
		"\u029B\t\u029B\x04\u029C\t\u029C\x04\u029D\t\u029D\x04\u029E\t\u029E\x04" +
		"\u029F\t\u029F\x04\u02A0\t\u02A0\x04\u02A1\t\u02A1\x04\u02A2\t\u02A2\x04" +
		"\u02A3\t\u02A3\x04\u02A4\t\u02A4\x04\u02A5\t\u02A5\x04\u02A6\t\u02A6\x04" +
		"\u02A7\t\u02A7\x04\u02A8\t\u02A8\x04\u02A9\t\u02A9\x04\u02AA\t\u02AA\x04" +
		"\u02AB\t\u02AB\x04\u02AC\t\u02AC\x04\u02AD\t\u02AD\x04\u02AE\t\u02AE\x04" +
		"\u02AF\t\u02AF\x04\u02B0\t\u02B0\x04\u02B1\t\u02B1\x04\u02B2\t\u02B2\x04" +
		"\u02B3\t\u02B3\x04\u02B4\t\u02B4\x04\u02B5\t\u02B5\x04\u02B6\t\u02B6\x04" +
		"\u02B7\t\u02B7\x04\u02B8\t\u02B8\x04\u02B9\t\u02B9\x04\u02BA\t\u02BA\x04" +
		"\u02BB\t\u02BB\x04\u02BC\t\u02BC\x04\u02BD\t\u02BD\x04\u02BE\t\u02BE\x04" +
		"\u02BF\t\u02BF\x04\u02C0\t\u02C0\x04\u02C1\t\u02C1\x04\u02C2\t\u02C2\x04" +
		"\u02C3\t\u02C3\x04\u02C4\t\u02C4\x04\u02C5\t\u02C5\x04\u02C6\t\u02C6\x04" +
		"\u02C7\t\u02C7\x04\u02C8\t\u02C8\x04\u02C9\t\u02C9\x04\u02CA\t\u02CA\x04" +
		"\u02CB\t\u02CB\x04\u02CC\t\u02CC\x04\u02CD\t\u02CD\x04\u02CE\t\u02CE\x04" +
		"\u02CF\t\u02CF\x04\u02D0\t\u02D0\x04\u02D1\t\u02D1\x04\u02D2\t\u02D2\x04" +
		"\u02D3\t\u02D3\x04\u02D4\t\u02D4\x04\u02D5\t\u02D5\x04\u02D6\t\u02D6\x04" +
		"\u02D7\t\u02D7\x04\u02D8\t\u02D8\x04\u02D9\t\u02D9\x04\u02DA\t\u02DA\x04" +
		"\u02DB\t\u02DB\x04\u02DC\t\u02DC\x04\u02DD\t\u02DD\x04\u02DE\t\u02DE\x04" +
		"\u02DF\t\u02DF\x04\u02E0\t\u02E0\x04\u02E1\t\u02E1\x04\u02E2\t\u02E2\x04" +
		"\u02E3\t\u02E3\x04\u02E4\t\u02E4\x04\u02E5\t\u02E5\x04\u02E6\t\u02E6\x04" +
		"\u02E7\t\u02E7\x04\u02E8\t\u02E8\x04\u02E9\t\u02E9\x04\u02EA\t\u02EA\x04" +
		"\u02EB\t\u02EB\x04\u02EC\t\u02EC\x04\u02ED\t\u02ED\x04\u02EE\t\u02EE\x04" +
		"\u02EF\t\u02EF\x04\u02F0\t\u02F0\x04\u02F1\t\u02F1\x04\u02F2\t\u02F2\x04" +
		"\u02F3\t\u02F3\x04\u02F4\t\u02F4\x04\u02F5\t\u02F5\x04\u02F6\t\u02F6\x04" +
		"\u02F7\t\u02F7\x04\u02F8\t\u02F8\x04\u02F9\t\u02F9\x04\u02FA\t\u02FA\x04" +
		"\u02FB\t\u02FB\x04\u02FC\t\u02FC\x04\u02FD\t\u02FD\x04\u02FE\t\u02FE\x04" +
		"\u02FF\t\u02FF\x04\u0300\t\u0300\x04\u0301\t\u0301\x04\u0302\t\u0302\x04" +
		"\u0303\t\u0303\x04\u0304\t\u0304\x04\u0305\t\u0305\x04\u0306\t\u0306\x04" +
		"\u0307\t\u0307\x04\u0308\t\u0308\x04\u0309\t\u0309\x04\u030A\t\u030A\x04" +
		"\u030B\t\u030B\x04\u030C\t\u030C\x04\u030D\t\u030D\x04\u030E\t\u030E\x04" +
		"\u030F\t\u030F\x04\u0310\t\u0310\x04\u0311\t\u0311\x04\u0312\t\u0312\x04" +
		"\u0313\t\u0313\x04\u0314\t\u0314\x04\u0315\t\u0315\x04\u0316\t\u0316\x04" +
		"\u0317\t\u0317\x04\u0318\t\u0318\x04\u0319\t\u0319\x04\u031A\t\u031A\x04" +
		"\u031B\t\u031B\x04\u031C\t\u031C\x04\u031D\t\u031D\x04\u031E\t\u031E\x04" +
		"\u031F\t\u031F\x04\u0320\t\u0320\x04\u0321\t\u0321\x04\u0322\t\u0322\x04" +
		"\u0323\t\u0323\x04\u0324\t\u0324\x04\u0325\t\u0325\x04\u0326\t\u0326\x04" +
		"\u0327\t\u0327\x04\u0328\t\u0328\x04\u0329\t\u0329\x04\u032A\t\u032A\x04" +
		"\u032B\t\u032B\x04\u032C\t\u032C\x04\u032D\t\u032D\x04\u032E\t\u032E\x04" +
		"\u032F\t\u032F\x04\u0330\t\u0330\x04\u0331\t\u0331\x03\x02\x03\x02\x03" +
		"\x03\x03\x03\x03\x04\x03\x04\x05\x04\u0669\n\x04\x07\x04\u066B\n\x04\f" +
		"\x04\x0E\x04\u066E\v\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x05\x05\u06EC\n\x05\x03\x06\x03\x06\x05\x06\u06F0\n\x06\x03\x07" +
		"\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x05\b\u06F9\n\b\x03\b\x03\b\x03" +
		"\t\x03\t\x03\n\x07\n\u0700\n\n\f\n\x0E\n\u0703\v\n\x03\v\x07\v\u0706\n" +
		"\v\f\v\x0E\v\u0709\v\v\x03\f\x03\f\x03\f\x05\f\u070E\n\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x05\f\u0721\n\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x05\r\u072D\n\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x05" +
		"\x0E\u0733\n\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F" +
		"\u073B\n\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x05\x10\u0743" +
		"\n\x10\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\u0749\n\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12\u0752\n\x12\x03\x12" +
		"\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13\u075A\n\x13\x03\x13\x03" +
		"\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03" +
		"\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16\u076C\n\x16\x03\x16" +
		"\x05\x16\u076F\n\x16\x03\x16\x03\x16\x03\x16\x05\x16\u0774\n\x16\x03\x16" +
		"\x03\x16\x03\x17\x03\x17\x03\x18\x07\x18\u077B\n\x18\f\x18\x0E\x18\u077E" +
		"\v\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19\u0786\n" +
		"\x19\x03\x1A\x03\x1A\x05\x1A\u078A\n\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B" +
		"\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\u0796\n\x1B\x03" +
		"\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05" +
		"\x1D\u07AA\n\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u07B7\n\x1D\x03\x1E\x03\x1E\x03" +
		"\x1E\x07\x1E\u07BC\n\x1E\f\x1E\x0E\x1E\u07BF\v\x1E\x03\x1F\x03\x1F\x03" +
		"\x1F\x07\x1F\u07C4\n\x1F\f\x1F\x0E\x1F\u07C7\v\x1F\x03 \x03 \x05 \u07CB" +
		"\n \x03!\x03!\x03!\x03!\x03!\x05!\u07D2\n!\x03\"\x03\"\x03\"\x03\"\x05" +
		"\"\u07D8\n\"\x03#\x03#\x03#\x03#\x03#\x05#\u07DF\n#\x03#\x03#\x03#\x03" +
		"#\x03#\x03#\x03#\x03#\x03#\x05#\u07EA\n#\x03$\x03$\x05$\u07EE\n$\x03%" +
		"\x03%\x05%\u07F2\n%\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'" +
		"\x03\'\x03\'\x05\'\u07FF\n\'\x03(\x03(\x05(\u0803\n(\x03)\x03)\x03)\x05" +
		")\u0808\n)\x03*\x03*\x03*\x05*\u080D\n*\x03+\x03+\x03+\x03+\x03+\x03+" +
		"\x03+\x03+\x03+\x03+\x05+\u0819\n+\x03,\x03,\x03,\x03,\x03,\x03-\x03-" +
		"\x05-\u0822\n-\x03.\x03.\x03/\x03/\x030\x030\x030\x031\x031\x031\x031" +
		"\x051\u082F\n1\x031\x031\x031\x051\u0834\n1\x031\x031\x031\x031\x031\x03" +
		"1\x031\x031\x031\x051\u083F\n1\x031\x031\x031\x031\x051\u0845\n1\x031" +
		"\x031\x031\x031\x051\u084B\n1\x031\x031\x031\x051\u0850\n1\x031\x031\x03" +
		"1\x031\x031\x031\x031\x031\x031\x051\u085B\n1\x031\x031\x031\x031\x05" +
		"1\u0861\n1\x031\x031\x031\x031\x051\u0867\n1\x031\x031\x031\x031\x031" +
		"\x031\x031\x051\u0870\n1\x031\x031\x031\x031\x031\x031\x031\x031\x051" +
		"\u087A\n1\x031\x031\x031\x031\x031\x031\x031\x031\x031\x031\x031\x031" +
		"\x031\x051\u0889\n1\x031\x031\x031\x031\x051\u088F\n1\x031\x031\x031\x03" +
		"1\x031\x051\u0896\n1\x031\x031\x031\x051\u089B\n1\x032\x032\x032\x072" +
		"\u08A0\n2\f2\x0E2\u08A3\v2\x033\x033\x033\x033\x033\x033\x033\x033\x05" +
		"3\u08AD\n3\x034\x034\x034\x034\x035\x035\x035\x035\x035\x035\x035\x03" +
		"5\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x055\u08C5\n5\x03" +
		"5\x035\x035\x035\x035\x055\u08CC\n5\x035\x035\x035\x035\x035\x035\x03" +
		"5\x055\u08D5\n5\x035\x035\x035\x035\x035\x035\x035\x055\u08DE\n5\x035" +
		"\x035\x035\x035\x035\x035\x055\u08E6\n5\x035\x035\x035\x035\x035\x035" +
		"\x035\x035\x055\u08F0\n5\x035\x035\x035\x035\x035\x035\x035\x055\u08F9" +
		"\n5\x035\x035\x035\x035\x035\x035\x035\x055\u0902\n5\x035\x035\x035\x03" +
		"5\x035\x035\x055\u090A\n5\x035\x035\x035\x035\x035\x035\x055\u0912\n5" +
		"\x035\x035\x035\x035\x035\x035\x035\x055\u091B\n5\x035\x035\x035\x035" +
		"\x035\x035\x035\x055\u0924\n5\x035\x035\x055\u0928\n5\x035\x035\x035\x03" +
		"5\x035\x055\u092F\n5\x035\x035\x035\x035\x035\x035\x055\u0937\n5\x035" +
		"\x035\x035\x035\x035\x035\x035\x035\x055\u0941\n5\x035\x035\x035\x035" +
		"\x055\u0947\n5\x035\x035\x055\u094B\n5\x035\x035\x055\u094F\n5\x035\x03" +
		"5\x055\u0953\n5\x035\x035\x055\u0957\n5\x035\x035\x035\x055\u095C\n5\x03" +
		"5\x055\u095F\n5\x035\x035\x055\u0963\n5\x035\x035\x035\x035\x035\x035" +
		"\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x05" +
		"5\u0978\n5\x035\x035\x035\x035\x055\u097E\n5\x035\x035\x035\x035\x035" +
		"\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x03" +
		"5\x035";
	private static readonly _serializedATNSegment1: string =
		"\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x03" +
		"5\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x03" +
		"5\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x03" +
		"5\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x03" +
		"5\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x035\x03" +
		"5\x035\x035\x035\x055\u09DD\n5\x036\x036\x036\x036\x036\x056\u09E4\n6" +
		"\x037\x037\x038\x038\x038\x039\x039\x039\x03:\x03:\x03:\x03:\x03:\x03" +
		":\x05:\u09F4\n:\x03;\x03;\x03;\x03;\x03<\x03<\x03<\x03=\x03=\x03=\x07" +
		"=\u0A00\n=\f=\x0E=\u0A03\v=\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x05>\u0A0C" +
		"\n>\x05>\u0A0E\n>\x03?\x06?\u0A11\n?\r?\x0E?\u0A12\x03@\x03@\x05@\u0A17" +
		"\n@\x03@\x05@\u0A1A\n@\x03@\x03@\x03@\x03@\x05@\u0A20\n@\x05@\u0A22\n" +
		"@\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03" +
		"A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x05A\u0A3E" +
		"\nA\x03B\x03B\x03B\x03C\x03C\x03C\x07C\u0A46\nC\fC\x0EC\u0A49\vC\x03D" +
		"\x03D\x03D\x03D\x03D\x03E\x03E\x03E\x07E\u0A53\nE\fE\x0EE\u0A56\vE\x03" +
		"F\x03F\x03F\x03F\x05F\u0A5C\nF\x03F\x03F\x03F\x03F\x05F\u0A62\nF\x03F" +
		"\x03F\x05F\u0A66\nF\x03F\x03F\x03F\x03F\x05F\u0A6C\nF\x03F\x03F\x03F\x05" +
		"F\u0A71\nF\x03F\x05F\u0A74\nF\x05F\u0A76\nF\x03G\x03G\x03G\x05G\u0A7B" +
		"\nG\x03H\x03H\x05H\u0A7F\nH\x03H\x03H\x05H\u0A83\nH\x03H\x03H\x05H\u0A87" +
		"\nH\x03H\x03H\x05H\u0A8B\nH\x03H\x05H\u0A8E\nH\x03H\x03H\x05H\u0A92\n" +
		"H\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u0A9A\nH\x03H\x03H\x05H\u0A9E\nH" +
		"\x03H\x03H\x05H\u0AA2\nH\x03I\x03I\x03J\x03J\x03K\x03K\x03K\x05K\u0AAB" +
		"\nK\x03L\x03L\x03L\x03L\x03L\x05L\u0AB2\nL\x03M\x07M\u0AB5\nM\fM\x0EM" +
		"\u0AB8\vM\x03N\x03N\x03N\x03N\x05N\u0ABE\nN\x03N\x03N\x03N\x05N\u0AC3" +
		"\nN\x03N\x03N\x03N\x03N\x03N\x05N\u0ACA\nN\x03N\x03N\x03N\x05N\u0ACF\n" +
		"N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03N\x03" +
		"N\x03N\x03N\x05N\u0AE1\nN\x03O\x03O\x03P\x05P\u0AE6\nP\x03P\x03P\x03P" +
		"\x03Q\x03Q\x03R\x03R\x03R\x07R\u0AF0\nR\fR\x0ER\u0AF3\vR\x03S\x03S\x05" +
		"S\u0AF7\nS\x03T\x03T\x03T\x03T\x03T\x03T\x03T\x05T\u0B00\nT\x03U\x03U" +
		"\x03U\x07U\u0B05\nU\fU\x0EU\u0B08\vU\x03V\x03V\x03W\x03W\x05W\u0B0E\n" +
		"W\x03W\x03W\x03W\x03W\x05W\u0B14\nW\x03W\x03W\x03W\x05W\u0B19\nW\x03W" +
		"\x03W\x05W\u0B1D\nW\x03W\x05W\u0B20\nW\x03W\x05W\u0B23\nW\x03W\x05W\u0B26" +
		"\nW\x03W\x05W\u0B29\nW\x03W\x05W\u0B2C\nW\x03W\x03W\x03W\x05W\u0B31\n" +
		"W\x03W\x05W\u0B34\nW\x03W\x05W\u0B37\nW\x03W\x05W\u0B3A\nW\x03W\x05W\u0B3D" +
		"\nW\x03W\x05W\u0B40\nW\x03W\x03W\x03W\x03W\x05W\u0B46\nW\x03W\x03W\x05" +
		"W\u0B4A\nW\x03W\x05W\u0B4D\nW\x03W\x05W\u0B50\nW\x03W\x05W\u0B53\nW\x03" +
		"W\x05W\u0B56\nW\x05W\u0B58\nW\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x05X" +
		"\u0B61\nX\x03Y\x03Y\x03Z\x03Z\x03[\x03[\x03[\x03[\x03\\\x03\\\x03\\\x07" +
		"\\\u0B6E\n\\\f\\\x0E\\\u0B71\v\\\x03]\x03]\x03]\x07]\u0B76\n]\f]\x0E]" +
		"\u0B79\v]\x03^\x03^\x03^\x05^\u0B7E\n^\x03_\x03_\x05_\u0B82\n_\x03`\x03" +
		"`\x03`\x05`\u0B87\n`\x03`\x03`\x05`\u0B8B\n`\x03`\x03`\x03a\x03a\x03a" +
		"\x05a\u0B92\na\x03a\x03a\x03b\x07b\u0B97\nb\fb\x0Eb\u0B9A\vb\x03c\x03" +
		"c\x05c\u0B9E\nc\x03c\x03c\x05c\u0BA2\nc\x03c\x05c\u0BA5\nc\x03c\x03c\x05" +
		"c\u0BA9\nc\x03c\x05c\u0BAC\nc\x05c\u0BAE\nc\x03d\x03d\x03d\x03d\x03d\x05" +
		"d\u0BB5\nd\x03d\x05d\u0BB8\nd\x03d\x03d\x03d\x05d\u0BBD\nd\x03d\x05d\u0BC0" +
		"\nd\x03d\x03d\x03d\x03d\x03d\x05d\u0BC7\nd\x03d\x03d\x03d\x03d\x03d\x03" +
		"d\x03d\x05d\u0BD0\nd\x03d\x03d\x03d\x03d\x03d\x05d\u0BD7\nd\x03d\x03d" +
		"\x03d\x05d\u0BDC\nd\x03d\x05d\u0BDF\nd\x03d\x05d\u0BE2\nd\x05d\u0BE4\n" +
		"d\x03e\x03e\x03e\x05e\u0BE9\ne\x03f\x03f\x03f\x05f\u0BEE\nf\x03g\x03g" +
		"\x03g\x03h\x03h\x03h\x03h\x03i\x03i\x07i\u0BF9\ni\fi\x0Ei\u0BFC\vi\x03" +
		"j\x03j\x03k\x03k\x03k\x03k\x03k\x05k\u0C05\nk\x03l\x03l\x03l\x03l\x03" +
		"l\x03l\x03l\x03l\x03l\x03l\x03l\x05l\u0C12\nl\x03l\x05l\u0C15\nl\x03l" +
		"\x05l\u0C18\nl\x03l\x03l\x03l\x03l\x03l\x05l\u0C1F\nl\x03l\x03l\x03l\x03" +
		"l\x03l\x03l\x05l\u0C27\nl\x03l\x05l\u0C2A\nl\x03l\x05l\u0C2D\nl\x03l\x03" +
		"l\x03l\x03l\x03l\x05l\u0C34\nl\x03l\x03l\x05l\u0C38\nl\x03l\x03l\x03l" +
		"\x03l\x05l\u0C3E\nl\x03l\x05l\u0C41\nl\x03l\x05l\u0C44\nl\x03l\x05l\u0C47" +
		"\nl\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x03l\x05l\u0C53\nl\x03" +
		"l\x05l\u0C56\nl\x03l\x05l\u0C59\nl\x03l\x03l\x05l\u0C5D\nl\x03m\x03m\x03" +
		"m\x03n\x03n\x03n\x03n\x03o\x03o\x03o\x07o\u0C69\no\fo\x0Eo\u0C6C\vo\x03" +
		"p\x03p\x03q\x03q\x03q\x03q\x03q\x03r\x03r\x03r\x03s\x03s\x03s\x07s\u0C7B" +
		"\ns\fs\x0Es\u0C7E\vs\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x03t\x05t\u0C88" +
		"\nt\x03u\x03u\x03u\x03u\x03u\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x03v\x05" +
		"v\u0C97\nv\x03w\x03w\x03w\x03w\x03x\x03x\x03x\x03x\x03y\x03y\x03y\x03" +
		"y\x03y\x03y\x05y\u0CA7\ny\x03z\x03z\x03z\x03z\x03z\x03{\x03{\x03|\x03" +
		"|\x03|\x03|\x03|\x03|\x03|\x03}\x03}\x03}\x07}\u0CBA\n}\f}\x0E}\u0CBD" +
		"\v}\x03~\x03~\x05~\u0CC1\n~\x03~\x05~\u0CC4\n~\x03~\x03~\x05~\u0CC8\n" +
		"~\x03~\x05~\u0CCB\n~\x03~\x03~\x03~\x03~\x05~\u0CD1\n~\x03~\x05~\u0CD4" +
		"\n~\x05~\u0CD6\n~\x03\x7F\x03\x7F\x03\x7F\x03\x80\x03\x80\x03\x80\x03" +
		"\x80\x03\x80\x03\x80\x05\x80\u0CE1\n\x80\x03\x81\x03\x81\x03\x81\x03\x81" +
		"\x03\x81\x03\x81\x03\x81\x05\x81\u0CEA\n\x81\x03\x82\x03\x82\x03\x82\x03" +
		"\x83\x03\x83\x03\x83\x03\x83\x03\x83\x03\x84\x03\x84\x03\x84\x03\x84\x03" +
		"\x85\x03\x85\x03\x85\x03\x85\x03\x85\x05\x85\u0CFD\n\x85\x03\x85\x03\x85" +
		"\x05\x85\u0D01\n\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x85\x03\x86\x03" +
		"\x86\x03\x86\x03\x86\x05\x86\u0D0C\n\x86\x03\x86\x03\x86\x03\x86\x03\x86" +
		"\x03\x86\x03\x87\x03\x87\x05\x87\u0D15\n\x87\x03\x87\x03\x87\x03\x87\x03" +
		"\x87\x05\x87\u0D1B\n\x87\x03\x87\x03\x87\x03\x87\x03\x87\x05\x87\u0D21" +
		"\n\x87\x03\x88\x03\x88\x05\x88\u0D25\n\x88\x03\x88\x05\x88\u0D28\n\x88" +
		"\x03\x88\x05\x88\u0D2B\n\x88\x03\x88\x05\x88\u0D2E\n\x88\x03\x88\x05\x88" +
		"\u0D31\n\x88\x03\x89\x03\x89\x03\x89\x03\x89\x05\x89\u0D37\n\x89\x03\x8A" +
		"\x03\x8A\x05\x8A\u0D3B\n\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x05" +
		"\x8A\u0D42\n\x8A\x03\x8A\x03\x8A\x03\x8A\x03\x8A\x05\x8A\u0D48\n\x8A\x03" +
		"\x8B\x03\x8B\x05\x8B\u0D4C\n\x8B\x03\x8B\x05\x8B\u0D4F\n\x8B\x03\x8B\x05" +
		"\x8B\u0D52\n\x8B\x03\x8B\x05\x8B\u0D55\n\x8B\x03\x8C\x03\x8C\x03\x8D\x03" +
		"\x8D\x03\x8D\x03\x8D\x05\x8D\u0D5D\n\x8D\x03\x8D\x03\x8D\x05\x8D\u0D61" +
		"\n\x8D\x03\x8E\x03\x8E\x05\x8E\u0D65\n\x8E\x03\x8E\x03\x8E\x03\x8E\x03" +
		"\x8E\x05\x8E\u0D6B\n\x8E\x03\x8E\x03\x8E\x05\x8E\u0D6F\n\x8E\x03\x8F\x03" +
		"\x8F\x03\x8F\x03\x8F\x05\x8F\u0D75\n\x8F\x03\x8F\x03\x8F\x03\x8F\x03\x90" +
		"\x03\x90\x03\x91\x03\x91\x03\x91\x03\x91\x03\x92\x06\x92\u0D81\n\x92\r" +
		"\x92\x0E\x92\u0D82\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03" +
		"\x93\x05\x93\u0D8C\n\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93" +
		"\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93" +
		"\x05\x93\u0D9D\n\x93\x03\x93\x03\x93\x03\x93\x05\x93\u0DA2\n\x93\x03\x93" +
		"\x05\x93\u0DA5\n\x93\x05\x93\u0DA7\n\x93\x03\x94\x03\x94\x03\x95\x03\x95" +
		"\x03\x95\x03\x95\x03\x95\x03\x95\x05\x95\u0DB1\n\x95\x03\x96\x03\x96\x03" +
		"\x96\x07\x96\u0DB6\n\x96\f\x96\x0E\x96\u0DB9\v\x96\x03\x97\x03\x97\x05" +
		"\x97\u0DBD\n\x97\x03\x97\x05\x97\u0DC0\n\x97\x03\x97\x05\x97\u0DC3\n\x97" +
		"\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x05\x97\u0DCA\n\x97\x03\x97\x05" +
		"\x97\u0DCD\n\x97\x05\x97\u0DCF\n\x97\x03\x98\x03\x98\x03\x99\x03\x99\x05" +
		"\x99\u0DD5\n\x99\x03\x9A\x03\x9A\x03\x9A\x03\x9B\x03\x9B\x03\x9B\x03\x9B" +
		"\x05\x9B\u0DDE\n\x9B\x03\x9C\x03\x9C\x03\x9D\x03\x9D\x03\x9E\x03\x9E\x03" +
		"\x9E\x03\x9E\x05\x9E\u0DE8\n\x9E\x03\x9E\x03\x9E\x03\x9E\x05\x9E\u0DED" +
		"\n\x9E\x03\x9F\x03\x9F\x03\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA0\x05\xA0" +
		"\u0DF6\n\xA0\x03\xA0\x03\xA0\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x03\xA1\x05" +
		"\xA1\u0DFF\n\xA1\x03\xA1\x03\xA1\x05\xA1\u0E03\n\xA1\x03\xA1\x03\xA1\x03" +
		"\xA2\x07\xA2\u0E08\n\xA2\f\xA2\x0E\xA2\u0E0B\v\xA2\x03\xA3\x03\xA3\x03" +
		"\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x05\xA3\u0E14\n\xA3\x03\xA4\x03\xA4" +
		"\x03\xA4\x03\xA4\x03\xA4\x03\xA4\x03\xA5\x07\xA5\u0E1D\n\xA5\f\xA5\x0E" +
		"\xA5\u0E20\v\xA5\x03\xA6\x03\xA6\x03\xA6\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x03\xA7\x05\xA7\u0E8D\n\xA7\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03\xA8\x03" +
		"\xA8\x05\xA8\u0E95\n\xA8\x03\xA8\x05\xA8\u0E98\n\xA8\x03\xA9\x03\xA9\x03" +
		"\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x05\xA9\u0EA2\n\xA9\x03\xAA" +
		"\x06\xAA\u0EA5\n\xAA\r\xAA\x0E\xAA\u0EA6\x03\xAB\x03\xAB\x03\xAC\x03\xAC" +
		"\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0EB1\n\xAC\x03\xAC\x03\xAC\x03" +
		"\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u0EBC\n\xAC" +
		"\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x03\xAE\x03\xAE\x03\xAE\x07\xAE" +
		"\u0EC6\n\xAE\f\xAE\x0E\xAE\u0EC9\v\xAE\x03\xAF\x03\xAF\x03\xAF\x03\xAF" +
		"\x03\xAF\x03\xB0\x03\xB0\x03\xB0\x07\xB0\u0ED3\n\xB0\f\xB0\x0E\xB0\u0ED6" +
		"\v\xB0\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x03\xB1\x05\xB1" +
		"\u0EDF\n\xB1\x03\xB2\x03\xB2\x03\xB2\x03\xB3\x03\xB3\x03\xB4\x03\xB4\x03" +
		"\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u0EEC\n\xB5\x03\xB5\x05\xB5\u0EEF" +
		"\n\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u0EF6\n\xB5\x03" +
		"\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05\xB5\u0EFF\n\xB5" +
		"\x03\xB5\x05\xB5\u0F02\n\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x03\xB5\x05" +
		"\xB5\u0F09\n\xB5\x05\xB5\u0F0B\n\xB5\x03\xB6\x03\xB6\x03\xB6\x03\xB7\x03" +
		"\xB7\x03\xB7\x05\xB7\u0F13\n\xB7\x03\xB8\x03\xB8\x03\xB9\x03\xB9\x03\xB9" +
		"\x03\xB9\x03\xB9\x03\xB9\x05\xB9\u0F1D\n\xB9\x05\xB9\u0F1F\n\xB9\x03\xBA" +
		"\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u0F27\n\xBA\x03\xBA\x03" +
		"\xBA\x05\xBA\u0F2B\n\xBA\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u0F30\n\xBA\x03" +
		"\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x05" +
		"\xBA\u0F3B\n\xBA\x03\xBA\x03\xBA\x05\xBA\u0F3F\n\xBA\x03\xBA\x03\xBA\x03" +
		"\xBA\x05\xBA\u0F44\n\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA" +
		"\x03\xBA\x03\xBA\x05\xBA\u0F4E\n\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x05" +
		"\xBA\u0F54\n\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA" +
		"\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x05\xBA\u0F61\n\xBA\x03\xBA\x03\xBA\x03" +
		"\xBA\x03\xBA\x05\xBA\u0F67\n\xBA\x05\xBA\u0F69\n\xBA\x03\xBB\x03\xBB\x03" +
		"\xBB\x03\xBB\x03\xBB\x05\xBB\u0F70\n\xBB\x03\xBB\x03\xBB\x03\xBB\x03\xBB" +
		"\x03\xBB\x03\xBB\x05\xBB\u0F78\n\xBB\x03\xBC\x03\xBC\x03\xBC\x05\xBC\u0F7D" +
		"\n\xBC\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBD\x03\xBE\x03\xBE\x03\xBE" +
		"\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x05\xBE\u0F8C\n\xBE\x03\xBE\x03" +
		"\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBE\x03" +
		"\xBE\x05\xBE\u0F99\n\xBE\x05\xBE\u0F9B\n\xBE\x03\xBF\x03\xBF\x05\xBF\u0F9F" +
		"\n\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0" +
		"\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0" +
		"\x03\xC0\x05\xC0\u0FB3\n\xC0\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03" +
		"\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03" +
		"\xC2\x05\xC2\u0FC4\n\xC2\x03\xC2\x05\xC2\u0FC7\n\xC2\x03\xC2\x05\xC2\u0FCA" +
		"\n\xC2\x03\xC2\x05\xC2\u0FCD\n\xC2\x03\xC2\x05\xC2\u0FD0\n\xC2\x03\xC3" +
		"\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x05\xC3\u0FD8\n\xC3\x03\xC3\x05" +
		"\xC3\u0FDB\n\xC3\x03\xC3\x05\xC3\u0FDE\n\xC3\x03\xC4\x03\xC4\x03\xC4\x03" +
		"\xC4\x03\xC4\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC6\x03" +
		"\xC6\x03\xC6\x03\xC7\x03\xC7\x03\xC7\x03\xC8\x03\xC8\x03\xC8\x03\xC9\x03" +
		"\xC9\x03\xC9\x03\xCA\x03\xCA\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCB\x03" +
		"\xCB\x03\xCB\x03\xCB\x03\xCB\x03\xCC\x03\xCC\x03\xCD\x03\xCD\x03\xCD\x03" +
		"\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x05\xCD\u100C\n\xCD\x03\xCD\x05\xCD" +
		"\u100F\n\xCD\x03\xCD\x05\xCD\u1012\n\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD" +
		"\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x05\xCD\u101D\n\xCD\x03\xCD\x03" +
		"\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x05\xCD\u1026\n\xCD\x03\xCD" +
		"\x03\xCD\x05\xCD\u102A\n\xCD\x03\xCD\x05\xCD\u102D\n\xCD\x03\xCD\x03\xCD" +
		"\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x03\xCD\x05\xCD\u1036\n\xCD\x03\xCE\x03" +
		"\xCE\x03\xCE\x03\xCE\x05\xCE\u103C\n\xCE\x03\xCF\x03\xCF\x05\xCF\u1040" +
		"\n\xCF\x03\xCF\x03\xCF\x03\xD0\x03\xD0\x03\xD1\x03\xD1\x03\xD1\x07\xD1" +
		"\u1049\n\xD1\f\xD1\x0E\xD1\u104C\v\xD1\x03\xD2\x03\xD2\x03\xD2\x03\xD2" +
		"\x03\xD2\x03\xD2\x03\xD2\x05\xD2\u1055\n\xD2\x03\xD3\x03\xD3\x03\xD3\x03" +
		"\xD4\x06\xD4\u105B\n\xD4\r\xD4\x0E\xD4\u105C\x03\xD5\x03\xD5\x03\xD5\x05" +
		"\xD5\u1062\n\xD5\x03\xD5\x03\xD5\x03\xD6\x03\xD6\x03\xD7\x03\xD7\x03\xD8" +
		"\x03\xD8\x03\xD9\x03\xD9\x05\xD9\u106E\n\xD9\x03\xD9\x03\xD9\x03\xDA\x03" +
		"\xDA\x03\xDB\x03\xDB\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDD\x03" +
		"\xDD\x03\xDE\x03\xDE\x05\xDE\u107F\n\xDE\x03\xDE\x03\xDE\x07\xDE\u1083" +
		"\n\xDE\f\xDE\x0E\xDE\u1086\v\xDE\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF" +
		"\u108C\n\xDF\x03\xE0\x03\xE0\x03\xE0\x03\xE1\x07\xE1\u1092\n\xE1\f\xE1" +
		"\x0E\xE1\u1095\v\xE1\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x03" +
		"\xE2\x03\xE2\x03\xE2\x03\xE2\x03\xE2\x05\xE2\u10A2\n\xE2\x03\xE3\x03\xE3" +
		"\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3" +
		"\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3" +
		"\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x03\xE3\x05\xE3\u10BE\n\xE3\x03" +
		"\xE4\x03\xE4\x03\xE4\x07\xE4\u10C3\n\xE4\f\xE4\x0E\xE4\u10C6\v\xE4\x03" +
		"\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE5\x03\xE6\x03\xE6\x03\xE6\x07" +
		"\xE6\u10D1\n\xE6\f\xE6\x0E\xE6\u10D4\v\xE6\x03\xE7\x03\xE7\x03\xE7\x03" +
		"\xE7\x03\xE7\x03\xE7\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x05" +
		"\xE8\u10E2\n\xE8\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9\x03\xE9" +
		"\x03\xE9\x03\xE9\x03\xEA\x03\xEA\x05\xEA\u10EF\n\xEA\x03\xEA\x03\xEA\x03" +
		"\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x05\xEA\u10F8\n\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x05\xEA\u1111\n\xEA\x03\xEA\x03\xEA\x03\xEA\x03" +
		"\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x05\xEA\u111C\n\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA\x03\xEA" +
		"\x03\xEA\x05\xEA\u115F\n\xEA\x03\xEB\x03\xEB\x03\xEB\x03\xEB\x03\xEC\x03" +
		"\xEC\x03\xEC\x07\xEC\u1168\n\xEC\f\xEC\x0E\xEC\u116B\v\xEC\x03\xED\x03" +
		"\xED\x03\xED\x05\xED\u1170\n\xED\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE" +
		"\x03\xEE\x05\xEE\u1178\n\xEE\x03\xEF\x03\xEF\x03\xEF\x03\xEF\x03\xF0\x03" +
		"\xF0\x03\xF0\x07\xF0\u1181\n\xF0\f\xF0\x0E\xF0\u1184\v\xF0\x03\xF1\x03" +
		"\xF1\x03\xF1\x03\xF1\x03\xF2\x03\xF2\x03\xF3\x03\xF3\x03\xF3\x07\xF3\u118F" +
		"\n\xF3\f\xF3\x0E\xF3\u1192\v\xF3\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4" +
		"\x03\xF4\x05\xF4\u119A\n\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03" +
		"\xF4\x03\xF4\x03\xF4\x05\xF4\u11A4\n\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4" +
		"\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x05\xF4\u11B0\n\xF4\x03" +
		"\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03\xF4\x03" +
		"\xF4\x03\xF4\x03\xF4\x03\xF4\x05\xF4\u11BF\n\xF4\x03\xF5\x03\xF5\x03\xF5" +
		"\x03\xF5\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x05\xF6\u11CA\n\xF6\x03" +
		"\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x03\xF6\x05\xF6\u11D2\n\xF6\x03\xF6" +
		"\x03\xF6\x03\xF6\x03\xF7\x03\xF7\x03\xF7\x07\xF7\u11DA\n\xF7\f\xF7\x0E" +
		"\xF7\u11DD\v\xF7\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x05\xF8\u11E3\n\xF8\x03" +
		"\xF8\x05\xF8\u11E6\n\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x05\xF8\u11EC" +
		"\n\xF8\x03\xF8\x05\xF8\u11EF\n\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03" +
		"\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x03\xF8\x05" +
		"\xF8\u11FE\n\xF8\x03\xF9\x03\xF9\x03\xFA\x03\xFA\x03\xFA\x03\xFB\x03\xFB" +
		"\x03\xFB\x03\xFB\x03\xFB\x03\xFB\x05\xFB\u120B\n\xFB\x03\xFC\x03\xFC\x03" +
		"\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFD\x03\xFE\x03\xFE\x03" +
		"\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03" +
		"\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x03\xFE\x05\xFE\u1228\n\xFE" +
		"\x03\xFF\x03\xFF\x03\xFF\x07\xFF\u122D\n\xFF\f\xFF\x0E\xFF\u1230\v\xFF" +
		"\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100" +
		"\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x03\u0100\x05\u0100\u123E\n\u0100" +
		"\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101" +
		"\x05\u0101\u1247\n\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x03\u0101" +
		"\x03\u0101\x03\u0101\x03\u0101\x03\u0101\x05\u0101\u1252\n\u0101\x05\u0101" +
		"\u1254\n\u0101\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102" +
		"\x03\u0102\x05\u0102\u125D\n\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102" +
		"\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x03\u0102\x05\u0102\u1268\n\u0102" +
		"\x05\u0102\u126A\n\u0102\x03\u0103\x03\u0103\x03\u0103\x03\u0103\x03\u0103" +
		"\x05\u0103\u1271\n\u0103\x03\u0104\x03\u0104\x03\u0104\x03\u0104\x03\u0104" +
		"\x03\u0104\x03\u0104\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x05\u0105\u1280\n\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x05\u0105\u1286\n\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x05\u0105\u128E\n\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x05\u0105\u1294\n\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x05\u0105\u129C\n\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x05\u0105\u12A6\n\u0105\x03\u0105" +
		"\x03\u0105\x03\u0105\x03\u0105\x05\u0105\u12AC\n\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x05\u0105\u12B4\n\u0105\x03\u0105" +
		"\x03";
	private static readonly _serializedATNSegment2: string =
		"\u0105\x03\u0105\x03\u0105\x05\u0105\u12BA\n\u0105\x03\u0105\x03\u0105" +
		"\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x05\u0105\u12C2\n\u0105\x03\u0105" +
		"\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x05\u0105\u12C9\n\u0105\x03\u0105" +
		"\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x03\u0105\x05\u0105" +
		"\u12D2\n\u0105\x05\u0105\u12D4\n\u0105\x03\u0106\x03\u0106\x03\u0106\x03" +
		"\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03" +
		"\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03" +
		"\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x03\u0106\x05\u0106\u12ED" +
		"\n\u0106\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x03\u0107\x05\u0107\u12F4" +
		"\n\u0107\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03\u0108\x03" +
		"\u0108\x03\u0108\x03\u0108\x05\u0108\u12FF\n\u0108\x03\u0108\x03\u0108" +
		"\x03\u0108\x03\u0108\x05\u0108\u1305\n\u0108\x03\u0109\x03\u0109\x03\u010A" +
		"\x03\u010A\x03\u010A\x07\u010A\u130C\n\u010A\f\u010A\x0E\u010A\u130F\v" +
		"\u010A\x03\u010B\x03\u010B\x05\u010B\u1313\n\u010B\x03\u010C\x03\u010C" +
		"\x06\u010C\u1317\n\u010C\r\u010C\x0E\u010C\u1318\x03\u010D\x03\u010D\x03" +
		"\u010D\x07\u010D\u131E\n\u010D\f\u010D\x0E\u010D\u1321\v\u010D\x03\u010E" +
		"\x03\u010E\x05\u010E\u1325\n\u010E\x03\u010E\x03\u010E\x05\u010E\u1329" +
		"\n\u010E\x03\u010E\x05\u010E\u132C\n\u010E\x03\u010F\x03\u010F\x03\u010F" +
		"\x03\u010F\x05\u010F\u1332\n\u010F\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110\x03\u0110" +
		"\x03\u0110\x03\u0110\x03\u0110\x05\u0110\u13C7\n\u0110\x03\u0111\x03\u0111" +
		"\x05\u0111\u13CB\n\u0111\x03\u0112\x03\u0112\x03\u0112\x05\u0112\u13D0" +
		"\n\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03" +
		"\u0112\x03\u0112\x03\u0112\x05\u0112\u13DB\n\u0112\x03\u0112\x03\u0112" +
		"\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112" +
		"\x05\u0112\u13E6\n\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112" +
		"\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x05\u0112\u13F1\n\u0112\x03\u0112" +
		"\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112" +
		"\x03\u0112\x05\u0112\u13FC\n\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112" +
		"\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x05\u0112\u1407\n\u0112" +
		"\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112" +
		"\x03\u0112\x03\u0112\x05\u0112\u1412\n\u0112\x03\u0112\x03\u0112\x03\u0112" +
		"\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x05\u0112" +
		"\u141D\n\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112" +
		"\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x05\u0112\u1429\n\u0112\x03\u0112" +
		"\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112" +
		"\x03\u0112\x05\u0112\u1434\n\u0112\x03\u0112\x03\u0112\x03\u0112\x03\u0112" +
		"\x03\u0112\x03\u0112\x05\u0112\u143C\n\u0112\x03\u0113\x03\u0113\x03\u0113" +
		"\x03\u0114\x03\u0114\x05\u0114\u1443\n\u0114\x03\u0115\x03\u0115\x03\u0115" +
		"\x03\u0115\x05\u0115\u1449\n\u0115\x03\u0116\x03\u0116\x03\u0116\x03\u0116" +
		"\x03\u0116\x03\u0116\x05\u0116\u1451\n\u0116\x03\u0116\x03\u0116\x03\u0116" +
		"\x05\u0116\u1456\n\u0116\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u145B" +
		"\n\u0116\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u1460\n\u0116\x03\u0116" +
		"\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u1466\n\u0116\x03\u0116\x03\u0116" +
		"\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u146D\n\u0116\x03\u0116\x03\u0116" +
		"\x03\u0116\x03\u0116\x05\u0116\u1473\n\u0116\x03\u0116\x03\u0116\x03\u0116" +
		"\x03\u0116\x05\u0116\u1479\n\u0116\x03\u0116\x03\u0116\x03\u0116\x05\u0116" +
		"\u147E\n\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u1484" +
		"\n\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u148B" +
		"\n\u0116\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u1490\n\u0116\x03\u0116" +
		"\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u1496\n\u0116\x03\u0116\x03\u0116" +
		"\x03\u0116\x03\u0116\x03\u0116\x05\u0116\u149D\n\u0116\x03\u0116\x05\u0116" +
		"\u14A0\n\u0116\x03\u0117\x03\u0117\x03\u0118\x03\u0118\x03\u0119\x03\u0119" +
		"\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x03\u0119\x05\u0119\u14AD\n\u0119" +
		"\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A" +
		"\x05\u011A\u14B6\n\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A" +
		"\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x03\u011A\x05\u011A\u14C2\n\u011A" +
		"\x05\u011A\u14C4\n\u011A\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x03\u011B" +
		"\x03\u011B\x03\u011B\x03\u011B\x03\u011B\x05\u011B\u14D6\n\u011B\x03\u011C" +
		"\x03\u011C\x03\u011C\x07\u011C\u14DB\n\u011C\f\u011C\x0E\u011C\u14DE\v" +
		"\u011C\x03\u011D\x03\u011D\x03\u011E\x03\u011E\x03\u011E\x07\u011E\u14E5" +
		"\n\u011E\f\u011E\x0E\u011E\u14E8\v\u011E\x03\u011F\x03\u011F\x05\u011F" +
		"\u14EC\n\u011F\x03\u011F\x03\u011F\x05\u011F\u14F0\n\u011F\x03\u011F\x03" +
		"\u011F\x05\u011F\u14F4\n\u011F\x03\u011F\x03\u011F\x05\u011F\u14F8\n\u011F" +
		"\x05\u011F\u14FA\n\u011F\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x03\u0120" +
		"\x03\u0120\x03\u0120\x03\u0120\x03\u0120\x05\u0120\u1536\n\u0120\x03\u0121" +
		"\x03\u0121\x03\u0121\x07\u0121\u153B\n\u0121\f\u0121\x0E\u0121\u153E\v" +
		"\u0121\x03\u0122\x03\u0122\x03\u0122\x05\u0122\u1543\n\u0122\x03\u0123" +
		"\x03\u0123\x03\u0123\x03\u0123\x03\u0124\x03\u0124\x03\u0124\x03\u0124" +
		"\x03\u0124\x05\u0124\u154E\n\u0124\x03\u0124\x05\u0124\u1551\n\u0124\x03" +
		"\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x05\u0125\u1558\n\u0125" +
		"\x03\u0125\x05\u0125\u155B\n\u0125\x03\u0125\x03\u0125\x03\u0125\x03\u0125" +
		"\x03\u0125\x03\u0125\x03\u0125\x03\u0125\x05\u0125\u1565\n\u0125\x03\u0125" +
		"\x05\u0125\u1568\n\u0125\x05\u0125\u156A\n\u0125\x03\u0126\x03\u0126\x03" +
		"\u0126\x03\u0126\x03\u0127\x03\u0127\x03\u0127\x03\u0127\x03\u0128\x03" +
		"\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0128\x03\u0129\x07\u0129\u157B" +
		"\n\u0129\f\u0129\x0E\u0129\u157E\v\u0129\x03\u012A\x03\u012A\x03\u012A" +
		"\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x03\u012A\x05\u012A" +
		"\u1589\n\u012A\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B" +
		"\x03\u012B\x05\u012B\u1592\n\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B" +
		"\x03\u012B\x03\u012B\x03\u012B\x05\u012B\u159B\n\u012B\x03\u012B\x03\u012B" +
		"\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B\x03\u012B" +
		"\x03\u012B\x05\u012B\u15A7\n\u012B\x05\u012B\u15A9\n\u012B\x03\u012C\x03" +
		"\u012C\x03\u012D\x03\u012D\x05\u012D\u15AF\n\u012D\x03\u012D\x03\u012D" +
		"\x05\u012D\u15B3\n\u012D\x03\u012D\x05\u012D\u15B6\n\u012D\x03\u012D\x03" +
		"\u012D\x03\u012D\x05\u012D\u15BB\n\u012D\x03\u012D\x03\u012D\x03\u012D" +
		"\x03\u012D\x05\u012D\u15C1\n\u012D\x03\u012D\x05\u012D\u15C4\n\u012D\x03" +
		"\u012D\x05\u012D\u15C7\n\u012D\x03\u012D\x05\u012D\u15CA\n\u012D\x03\u012D" +
		"\x03\u012D\x05\u012D\u15CE\n\u012D\x03\u012D\x03\u012D\x05\u012D\u15D2" +
		"\n\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D\x03" +
		"\u012D\x05\u012D\u15DB\n\u012D\x03\u012D\x03\u012D\x03\u012D\x03\u012D" +
		"\x05\u012D\u15E1\n\u012D\x03\u012D\x05\u012D\u15E4\n\u012D\x03\u012D\x05" +
		"\u012D\u15E7\n\u012D\x03\u012D\x05\u012D\u15EA\n\u012D\x05\u012D\u15EC" +
		"\n\u012D\x03\u012E\x03\u012E\x03\u012F\x03\u012F\x03\u0130\x03\u0130\x03" +
		"\u0131\x03\u0131\x03\u0131\x03\u0132\x03\u0132\x03\u0132\x07\u0132\u15FA" +
		"\n\u0132\f\u0132\x0E\u0132\u15FD\v\u0132\x03\u0133\x05\u0133\u1600\n\u0133" +
		"\x03\u0133\x05\u0133\u1603\n\u0133\x03\u0133\x05\u0133\u1606\n\u0133\x03" +
		"\u0133\x05\u0133\u1609\n\u0133\x03\u0133\x05\u0133\u160C\n\u0133\x03\u0133" +
		"\x03\u0133\x03\u0133\x05\u0133\u1611\n\u0133\x03\u0133\x05\u0133\u1614" +
		"\n\u0133\x05\u0133\u1616\n\u0133\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134\x03\u0134" +
		"\x05\u0134\u1623\n\u0134\x03\u0135\x03\u0135\x03\u0135\x03\u0135\x03\u0135" +
		"\x03\u0136\x03\u0136\x03\u0136\x07\u0136\u162D\n\u0136\f\u0136\x0E\u0136" +
		"\u1630\v\u0136\x03\u0137\x03\u0137\x03\u0137\x03\u0138\x03\u0138\x03\u0139" +
		"\x03\u0139\x03\u013A\x03\u013A\x03\u013A\x03\u013A\x05\u013A\u163D\n\u013A" +
		"\x03\u013B\x03\u013B\x05\u013B\u1641\n\u013B\x03\u013B\x03\u013B\x03\u013B" +
		"\x03\u013B\x03\u013B\x03\u013B\x03\u013B\x03\u013B\x03\u013B\x03\u013B" +
		"\x05\u013B\u164D\n\u013B\x05\u013B\u164F\n\u013B\x03\u013B\x03\u013B\x03" +
		"\u013B\x05\u013B\u1654\n\u013B\x03\u013C\x03\u013C\x03\u013C\x03\u013C" +
		"\x07\u013C\u165A\n\u013C\f\u013C\x0E\u013C\u165D\v\u013C\x03\u013C\x03" +
		"\u013C\x03\u013D\x03\u013D\x03\u013D\x03\u013E\x03\u013E\x05\u013E\u1666" +
		"\n\u013E\x03\u013E\x03\u013E\x03\u013F\x03\u013F\x03\u013F\x07\u013F\u166D" +
		"\n\u013F\f\u013F\x0E\u013F\u1670\v\u013F\x03\u0140\x03\u0140\x03\u0140" +
		"\x07\u0140\u1675\n\u0140\f\u0140\x0E\u0140\u1678\v\u0140\x03\u0141\x03" +
		"\u0141\x03\u0141\x03\u0141\x03\u0141\x03\u0141\x05\u0141\u1680\n\u0141" +
		"\x05\u0141\u1682\n\u0141\x03\u0142\x03\u0142\x05\u0142\u1686\n\u0142\x03" +
		"\u0142\x03\u0142\x03\u0143\x03\u0143\x03\u0143\x07\u0143\u168D\n\u0143" +
		"\f\u0143\x0E\u0143\u1690\v\u0143\x03\u0144\x03\u0144\x05\u0144\u1694\n" +
		"\u0144\x03\u0144\x03\u0144\x03\u0144\x03\u0144\x05\u0144\u169A\n\u0144" +
		"\x03\u0144\x03\u0144\x03\u0144\x05\u0144\u169F\n\u0144\x03\u0145\x03\u0145" +
		"\x05\u0145\u16A3\n\u0145\x03\u0145\x03\u0145\x03\u0145\x05\u0145\u16A8" +
		"\n\u0145\x03\u0146\x03\u0146\x03\u0147\x03\u0147\x03\u0148\x03\u0148\x03" +
		"\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03\u0148\x03" +
		"\u0148\x03\u0148\x03\u0148\x05\u0148\u16BA\n\u0148\x03\u0149\x03\u0149" +
		"\x03\u0149\x05\u0149\u16BF\n\u0149\x03\u014A\x03\u014A\x03\u014B\x03\u014B" +
		"\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B\x03\u014B" +
		"\x03\u014B\x03\u014B\x05\u014B\u16CE\n\u014B\x03\u014B\x03\u014B\x03\u014C" +
		"\x03\u014C\x03\u014C\x07\u014C\u16D5\n\u014C\f\u014C\x0E\u014C\u16D8\v" +
		"\u014C\x03\u014D\x03\u014D\x03\u014D\x03\u014E\x03\u014E\x03\u014E\x07" +
		"\u014E\u16E0\n\u014E\f\u014E\x0E\u014E\u16E3\v\u014E\x03\u014F\x06\u014F" +
		"\u16E6\n\u014F\r\u014F\x0E\u014F\u16E7\x03\u0150\x03\u0150\x03\u0150\x03" +
		"\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03" +
		"\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03" +
		"\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03" +
		"\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03\u0150\x03" +
		"\u0150\x03\u0150\x03\u0150\x03\u0150\x05\u0150\u170D\n\u0150\x03\u0151" +
		"\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x03\u0151\x03\u0151" +
		"\x05\u0151\u1717\n\u0151\x03\u0152\x03\u0152\x03\u0152\x03\u0152\x03\u0152" +
		"\x05\u0152\u171E\n\u0152\x03\u0153\x03\u0153\x03\u0153\x03\u0153\x03\u0153" +
		"\x03\u0153\x03\u0153\x07\u0153\u1727\n\u0153\f\u0153\x0E\u0153\u172A\v" +
		"\u0153\x03\u0154\x03\u0154\x03\u0154\x03\u0155\x03\u0155\x03\u0155\x03" +
		"\u0156\x03\u0156\x03\u0156\x07\u0156\u1735\n\u0156\f\u0156\x0E\u0156\u1738" +
		"\v\u0156\x03\u0157\x03\u0157\x03\u0157\x03\u0157\x03\u0157\x05\u0157\u173F" +
		"\n\u0157\x03\u0158\x06\u0158\u1742\n\u0158\r\u0158\x0E\u0158\u1743\x03" +
		"\u0159\x03\u0159\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x05\u015A\u174C" +
		"\n\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x05" +
		"\u015A\u1754\n\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x05\u015A" +
		"\u175A\n\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A" +
		"\x05\u015A\u1762\n\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x05\u015A" +
		"\u1768\n\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A\x03\u015A" +
		"\x05\u015A\u1770\n\u015A\x05\u015A\u1772\n\u015A\x03\u015B\x03\u015B\x03" +
		"\u015B\x03\u015B\x05\u015B\u1778\n\u015B\x03\u015B\x03\u015B\x03\u015B" +
		"\x03\u015B\x03\u015B\x03\u015B\x05\u015B\u1780\n\u015B\x05\u015B\u1782" +
		"\n\u015B\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x05\u015C\u1788\n\u015C" +
		"\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x03\u015C\x05\u015C" +
		"\u1790\n\u015C\x05\u015C\u1792\n\u015C\x03\u015D\x03\u015D\x03\u015D\x03" +
		"\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03" +
		"\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x03" +
		"\u015D\x03\u015D\x03\u015D\x03\u015D\x03\u015D\x05\u015D\u17AA\n\u015D" +
		"\x03\u015E\x03\u015E\x03\u015E\x07\u015E\u17AF\n\u015E\f\u015E\x0E\u015E" +
		"\u17B2\v\u015E\x03\u015E\x03\u015E\x03\u015F\x03\u015F\x03\u015F\x07\u015F" +
		"\u17B9\n\u015F\f\u015F\x0E\u015F\u17BC\v\u015F\x03\u0160\x03\u0160\x03" +
		"\u0160\x03\u0161\x03\u0161\x03\u0161\x03\u0162\x06\u0162\u17C5\n\u0162" +
		"\r\u0162\x0E\u0162\u17C6\x03\u0163\x03\u0163\x03\u0163\x05\u0163\u17CC" +
		"\n\u0163\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03" +
		"\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u17D9\n\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x05\u0164\u17E5\n\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164\x03\u0164" +
		"\x03\u0164\x05\u0164\u17F1\n\u0164\x05\u0164\u17F3\n\u0164\x03\u0165\x03" +
		"\u0165\x03\u0165\x03\u0165\x05\u0165\u17F9\n\u0165\x03\u0166\x03\u0166" +
		"\x03\u0166\x05\u0166\u17FE\n\u0166\x03\u0166\x03\u0166\x03\u0166\x03\u0166" +
		"\x03\u0166\x03\u0166\x05\u0166\u1806\n\u0166\x03\u0167\x03\u0167\x03\u0167" +
		"\x03\u0168\x03\u0168\x05\u0168\u180D\n\u0168\x03\u0168\x03\u0168\x03\u0168" +
		"\x03\u0168\x03\u0168\x03\u0168\x03\u0168\x03\u0168\x03\u0168\x03\u0169" +
		"\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169" +
		"\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169" +
		"\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169" +
		"\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169" +
		"\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x03\u0169\x05\u0169\u183A\n\u0169" +
		"\x03\u016A\x03\u016A\x03\u016A\x05\u016A\u183F\n\u016A\x03\u016A\x03\u016A" +
		"\x03\u016A\x03\u016A\x03\u016A\x05\u016A\u1846\n\u016A\x03\u016B\x03\u016B" +
		"\x03\u016B\x05\u016B\u184B\n\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B" +
		"\x03\u016B\x05\u016B\u1852\n\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B" +
		"\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x05\u016B\u185C\n\u016B\x03\u016B" +
		"\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B\x03\u016B" +
		"\x05\u016B\u1866\n\u016B\x03\u016B\x03\u016B\x05\u016B\u186A\n\u016B\x03" +
		"\u016C\x03\u016C\x03\u016D\x03\u016D\x03\u016E\x03\u016E\x03\u016E\x07" +
		"\u016E\u1873\n\u016E\f\u016E\x0E\u016E\u1876\v\u016E\x03\u016F\x03\u016F" +
		"\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170" +
		"\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x03\u0170\x05\u0170\u1886\n\u0170" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x05\u0171" +
		"\u18CD\n\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x05\u0171\u1990\n\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x05\u0171\u199D\n\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x05\u0171\u19A8\n\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x05\u0171\u19B5\n\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x05\u0171\u19C1\n\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x05\u0171\u19CF\n\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x05\u0171\u19EF\n\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x05\u0171\u19FD\n\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171\x03\u0171" +
		"\x03\u0171\x03\u0171\x05\u0171\u1A6D\n\u0171\x05\u0171\u1A6F\n\u0171\x03" +
		"\u0172\x03\u0172\x03\u0173\x03\u0173\x03\u0173\x03\u0174\x03\u0174\x03" +
		"\u0174\x03\u0174\x05\u0174\u1A7A\n\u0174\x03\u0174\x03\u0174\x03\u0174" +
		"\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x05\u0174" +
		"\u1A85\n\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174" +
		"\x03\u0174\x03\u0174\x03\u0174\x05\u0174\u1A90\n\u0174\x03\u0174\x03\u0174" +
		"\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174" +
		"\x03\u0174\x03\u0174\x05\u0174\u1A9D\n\u0174\x03\u0174\x03\u0174\x03\u0174" +
		"\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174" +
		"\x05\u0174\u1AA9\n\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x03\u0174" +
		"\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x05\u0174\u1AB4\n\u0174\x03\u0174" +
		"\x03\u0174\x03\u0174\x03\u0174\x03\u0174\x05\u0174\u1ABB\n\u0174\x03\u0175" +
		"\x03\u0175\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176\x03\u0176" +
		"\x03\u0176\x05\u0176\u1B98\n\u0176\x03\u0177\x03\u0177\x03\u0177\x03\u0177" +
		"\x03\u0177\x03\u0177\x03\u0177\x03\u0177\x03\u0178\x03\u0178\x03\u0178" +
		"\x07\u0178\u1BA5\n\u0178\f\u0178\x0E\u0178\u1BA8\v\u0178\x03\u0179\x03" +
		"\u0179\x03\u0179\x03\u0179\x03\u0179\x03\u0179\x03\u0179\x03\u0179\x05" +
		"\u0179\u1BB2\n\u0179\x03\u017A\x03\u017A\x03\u017A\x03\u017A\x03\u017A" +
		"\x05\u017A\u1BB9\n\u017A\x03\u017B\x03\u017B\x03\u017B\x03\u017B\x03\u017B" +
		"\x03\u017B\x03\u017B\x03\u017B\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x05\u017C\u1BEF\n\u017C" +
		"\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C" +
		"\x03\u017C\x03\u017C\x03";
	private static readonly _serializedATNSegment3: string =
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03\u017C\x03" +
		"\u017C\x03\u017C\x03\u017C\x03\u017C\x05\u017C\u1C7C\n\u017C\x03\u017D" +
		"\x03\u017D\x03\u017D\x03\u017D\x05\u017D\u1C82\n\u017D\x03\u017D\x05\u017D" +
		"\u1C85\n\u017D\x03\u017E\x03\u017E\x03\u017F\x03\u017F\x03\u017F\x03\u017F" +
		"\x03\u017F\x03\u017F\x05\u017F\u1C8F\n\u017F\x03\u0180\x03\u0180\x03\u0180" +
		"\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180" +
		"\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180" +
		"\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180\x03\u0180" +
		"\x03\u0180\x03\u0180\x03\u0180\x05\u0180\u1CAC\n\u0180\x03\u0181\x03\u0181" +
		"\x03\u0181\x03\u0181\x03\u0181\x03\u0181\x03\u0181\x03\u0181\x05\u0181" +
		"\u1CB6\n\u0181\x03\u0182\x03\u0182\x03\u0182\x07\u0182\u1CBB\n\u0182\f" +
		"\u0182\x0E\u0182\u1CBE\v\u0182\x03\u0183\x03\u0183\x03\u0184\x03\u0184" +
		"\x03\u0184\x03\u0184\x03\u0184\x03\u0184\x03\u0184\x03\u0184\x03\u0184" +
		"\x03\u0184\x03\u0184\x03\u0184\x03\u0184\x03\u0184\x03\u0184\x03\u0184" +
		"\x03\u0184\x03\u0184\x05\u0184\u1CD4\n\u0184\x03\u0184\x03\u0184\x03\u0184" +
		"\x03\u0184\x03\u0184\x03\u0184\x03\u0184\x05\u0184\u1CDD\n\u0184\x03\u0184" +
		"\x03\u0184\x03\u0184\x03\u0184\x03\u0184\x03\u0184\x03\u0184\x03\u0184" +
		"\x03\u0184\x03\u0184\x05\u0184\u1CE9\n\u0184\x03\u0185\x03\u0185\x03\u0185" +
		"\x03\u0185\x05\u0185\u1CEF\n\u0185\x03\u0185\x03\u0185\x03\u0185\x03\u0185" +
		"\x03\u0185\x03\u0185\x05\u0185\u1CF7\n\u0185\x05\u0185\u1CF9\n\u0185\x03" +
		"\u0186\x03\u0186\x05\u0186\u1CFD\n\u0186\x03\u0186\x03\u0186\x03\u0186" +
		"\x03\u0186\x03\u0186\x03\u0186\x03\u0186\x03\u0186\x05\u0186\u1D07\n\u0186" +
		"\x03\u0186\x03\u0186\x05\u0186\u1D0B\n\u0186\x03\u0186\x03\u0186\x03\u0187" +
		"\x03\u0187\x03\u0187\x03\u0187\x03\u0187\x03\u0187\x05\u0187\u1D15\n\u0187" +
		"\x03\u0188\x05\u0188\u1D18\n\u0188\x03\u0188\x03\u0188\x05\u0188\u1D1C" +
		"\n\u0188\x07\u0188\u1D1E\n\u0188\f\u0188\x0E\u0188\u1D21\v\u0188\x03\u0189" +
		"\x03\u0189\x03\u0189\x03\u0189\x03\u0189\x05\u0189\u1D28\n\u0189\x03\u018A" +
		"\x03\u018A\x03\u018B\x03\u018B\x03\u018C\x03\u018C\x03\u018D\x03\u018D" +
		"\x03\u018D\x05\u018D\u1D33\n\u018D\x03\u018E\x03\u018E\x03\u018E\x03\u018F" +
		"\x03\u018F\x03\u018F\x03\u0190\x03\u0190\x03\u0190\x03\u0190\x05\u0190" +
		"\u1D3F\n\u0190\x03\u0191\x03\u0191\x05\u0191\u1D43\n\u0191\x03\u0191\x05" +
		"\u0191\u1D46\n\u0191\x03\u0191\x03\u0191\x05\u0191\u1D4A\n\u0191\x03\u0191" +
		"\x05\u0191\u1D4D\n\u0191\x03\u0191\x03\u0191\x03\u0191\x05\u0191\u1D52" +
		"\n\u0191\x03\u0191\x03\u0191\x05\u0191\u1D56\n\u0191\x03\u0191\x05\u0191" +
		"\u1D59\n\u0191\x03\u0191\x03\u0191\x05\u0191\u1D5D\n\u0191\x03\u0191\x05" +
		"\u0191\u1D60\n\u0191\x03\u0191\x03\u0191\x05\u0191\u1D64\n\u0191\x03\u0191" +
		"\x05\u0191\u1D67\n\u0191\x03\u0191\x03\u0191\x03\u0191\x03\u0191\x03\u0191" +
		"\x03\u0191\x03\u0191\x03\u0191\x03\u0191\x05\u0191\u1D72\n\u0191\x03\u0191" +
		"\x03\u0191\x03\u0191\x03\u0191\x03\u0191\x05\u0191\u1D79\n\u0191\x03\u0191" +
		"\x03\u0191\x03\u0191\x03\u0191\x03\u0191\x03\u0191\x03\u0191\x03\u0191" +
		"\x03\u0191\x03\u0191\x03\u0191\x05\u0191\u1D86\n\u0191\x03\u0192\x03\u0192" +
		"\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193\x03\u0193" +
		"\x03\u0193\x03\u0193\x03\u0193\x05\u0193\u1D94\n\u0193\x03\u0194\x03\u0194" +
		"\x05\u0194\u1D98\n\u0194\x03\u0194\x07\u0194\u1D9B\n\u0194\f\u0194\x0E" +
		"\u0194\u1D9E\v\u0194\x03\u0195\x03\u0195\x03\u0196\x03\u0196\x05\u0196" +
		"\u1DA4\n\u0196\x03\u0196\x03\u0196\x03\u0197\x03\u0197\x03\u0197\x05\u0197" +
		"\u1DAB\n\u0197\x03\u0197\x05\u0197\u1DAE\n\u0197\x03\u0197\x03\u0197\x03" +
		"\u0197\x05\u0197\u1DB3\n\u0197\x03\u0197\x05\u0197\u1DB6\n\u0197\x03\u0197" +
		"\x03\u0197\x03\u0197\x03\u0197\x03\u0197\x03\u0197\x03\u0197\x05\u0197" +
		"\u1DBF\n\u0197\x05\u0197\u1DC1\n\u0197\x03\u0197\x03\u0197\x03\u0197\x05" +
		"\u0197\u1DC6\n\u0197\x03\u0198\x03\u0198\x05\u0198\u1DCA\n\u0198\x03\u0198" +
		"\x03\u0198\x03\u0198\x03\u0199\x03\u0199\x03\u0199\x03\u019A\x03\u019A" +
		"\x03\u019A\x03\u019A\x05\u019A\u1DD6\n\u019A\x03\u019A\x05\u019A\u1DD9" +
		"\n\u019A\x03\u019B\x03\u019B\x03\u019C\x06\u019C\u1DDE\n\u019C\r\u019C" +
		"\x0E\u019C\u1DDF\x03\u019D\x03\u019D\x05\u019D\u1DE4\n\u019D\x03\u019D" +
		"\x03\u019D\x03\u019D\x05\u019D\u1DE9\n\u019D\x03\u019E\x03\u019E\x03\u019E" +
		"\x03\u019E\x03\u019E\x03\u019E\x03\u019E\x03\u019E\x05\u019E\u1DF3\n\u019E" +
		"\x03\u019F\x03\u019F\x03\u01A0\x03\u01A0\x03\u01A0\x03\u01A0\x03\u01A0" +
		"\x05\u01A0\u1DFC\n\u01A0\x03\u01A0\x05\u01A0\u1DFF\n\u01A0\x03\u01A0\x03" +
		"\u01A0\x03\u01A0\x05\u01A0\u1E04\n\u01A0\x03\u01A1\x03\u01A1\x03\u01A1" +
		"\x03\u01A1\x03\u01A1\x03\u01A2\x03\u01A2\x03\u01A2\x03\u01A2\x05\u01A2" +
		"\u1E0F\n\u01A2\x03\u01A2\x03\u01A2\x05\u01A2\u1E13\n\u01A2\x03\u01A2\x03" +
		"\u01A2\x03\u01A2\x03\u01A2\x05\u01A2\u1E19\n\u01A2\x03\u01A3\x03\u01A3" +
		"\x03\u01A3\x07\u01A3\u1E1E\n\u01A3\f\u01A3\x0E\u01A3\u1E21\v\u01A3\x03" +
		"\u01A4\x03\u01A4\x03\u01A5\x03\u01A5\x03\u01A5\x03\u01A5\x03\u01A5\x03" +
		"\u01A5\x03\u01A6\x03\u01A6\x03\u01A6\x03\u01A6\x03\u01A6\x03\u01A7\x03" +
		"\u01A7\x03\u01A7\x03\u01A7\x05\u01A7\u1E34\n\u01A7\x03\u01A7\x03\u01A7" +
		"\x03\u01A7\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A8" +
		"\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A8\x03\u01A8" +
		"\x03\u01A8\x03\u01A8\x03\u01A8\x05\u01A8\u1E49\n\u01A8\x03\u01A8\x03\u01A8" +
		"\x05\u01A8\u1E4D\n\u01A8\x03\u01A8\x03\u01A8\x03\u01A8\x05\u01A8\u1E52" +
		"\n\u01A8\x03\u01A9\x03\u01A9\x03\u01AA\x03\u01AA\x03\u01AA\x03\u01AA\x03" +
		"\u01AA\x03\u01AA\x03\u01AA\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03" +
		"\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03" +
		"\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03" +
		"\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03" +
		"\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03" +
		"\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03" +
		"\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03" +
		"\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03" +
		"\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03" +
		"\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03" +
		"\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x03\u01AB\x05\u01AB\u1EA5\n\u01AB" +
		"\x03\u01AC\x03\u01AC\x03\u01AD\x03\u01AD\x05\u01AD\u1EAB\n\u01AD\x03\u01AD" +
		"\x03\u01AD\x03\u01AD\x03\u01AD\x03\u01AD\x03\u01AD\x03\u01AD\x03\u01AD" +
		"\x03\u01AD\x03\u01AE\x03\u01AE\x05\u01AE\u1EB8\n\u01AE\x03\u01AE\x03\u01AE" +
		"\x05\u01AE\u1EBC\n\u01AE\x03\u01AE\x03\u01AE\x05\u01AE\u1EC0\n\u01AE\x03" +
		"\u01AE\x03\u01AE\x05\u01AE\u1EC4\n\u01AE\x03\u01AE\x03\u01AE\x03\u01AE" +
		"\x03\u01AE\x05\u01AE\u1ECA\n\u01AE\x03\u01AF\x03\u01AF\x03\u01AF\x03\u01B0" +
		"\x03\u01B0\x05\u01B0\u1ED1\n\u01B0\x03\u01B0\x05\u01B0\u1ED4\n\u01B0\x03" +
		"\u01B0\x05\u01B0\u1ED7\n\u01B0\x03\u01B0\x05\u01B0\u1EDA\n\u01B0\x03\u01B0" +
		"\x05\u01B0\u1EDD\n\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0\x03\u01B0" +
		"\x05\u01B0\u1EE4\n\u01B0\x05\u01B0\u1EE6\n\u01B0\x03\u01B1\x03\u01B1\x05" +
		"\u01B1\u1EEA\n\u01B1\x03\u01B1\x05\u01B1\u1EED\n\u01B1\x03\u01B1\x03\u01B1" +
		"\x03\u01B1\x03\u01B1\x03\u01B1\x05\u01B1\u1EF4\n\u01B1\x05\u01B1\u1EF6" +
		"\n\u01B1\x03\u01B2\x03\u01B2\x03\u01B2\x07\u01B2\u1EFB\n\u01B2\f\u01B2" +
		"\x0E\u01B2\u1EFE\v\u01B2\x03\u01B3\x03\u01B3\x03\u01B4\x03\u01B4\x05\u01B4" +
		"\u1F04\n\u01B4\x03\u01B5\x03\u01B5\x05\u01B5\u1F08\n\u01B5\x03\u01B6\x03" +
		"\u01B6\x05\u01B6\u1F0C\n\u01B6\x03\u01B7\x03\u01B7\x03\u01B8\x03\u01B8" +
		"\x03\u01B9\x03\u01B9\x03\u01BA\x03\u01BA\x03\u01BB\x03\u01BB\x03\u01BB" +
		"\x03\u01BB\x03\u01BC\x03\u01BC\x05\u01BC\u1F1C\n\u01BC\x03\u01BD\x03\u01BD" +
		"\x03\u01BD\x07\u01BD\u1F21\n\u01BD\f\u01BD\x0E\u01BD\u1F24\v\u01BD\x03" +
		"\u01BE\x03\u01BE\x03\u01BF\x03\u01BF\x03\u01BF\x03\u01BF\x03\u01BF\x05" +
		"\u01BF\u1F2D\n\u01BF\x03\u01BF\x03\u01BF\x03\u01BF\x03\u01BF\x03\u01BF" +
		"\x03\u01BF\x03\u01BF\x03\u01BF\x03\u01BF\x03\u01BF\x03\u01BF\x05\u01BF" +
		"\u1F3A\n\u01BF\x03\u01C0\x03\u01C0\x03\u01C0\x03\u01C0\x03\u01C0\x03\u01C0" +
		"\x03\u01C0\x03\u01C0\x03\u01C0\x05\u01C0\u1F45\n\u01C0\x03\u01C1\x03\u01C1" +
		"\x03\u01C1\x07\u01C1\u1F4A\n\u01C1\f\u01C1\x0E\u01C1\u1F4D\v\u01C1\x03" +
		"\u01C2\x03\u01C2\x05\u01C2\u1F51\n\u01C2\x03\u01C3\x03\u01C3\x05\u01C3" +
		"\u1F55\n\u01C3\x03\u01C4\x03\u01C4\x05\u01C4\u1F59\n\u01C4\x03\u01C5\x03" +
		"\u01C5\x03\u01C5\x05\u01C5\u1F5E\n\u01C5\x03\u01C5\x03\u01C5\x03\u01C5" +
		"\x03\u01C6\x03\u01C6\x03\u01C6\x03\u01C6\x03\u01C7\x03\u01C7\x03\u01C7" +
		"\x03\u01C7\x05\u01C7\u1F6B\n\u01C7\x03\u01C8\x03\u01C8\x03\u01C8\x05\u01C8" +
		"\u1F70\n\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1F74\n\u01C8\x03\u01C8\x03" +
		"\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1F7C\n\u01C8" +
		"\x03\u01C8\x05\u01C8\u1F7F\n\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1F83" +
		"\n\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03\u01C8\x03" +
		"\u01C8\x03\u01C8\x03\u01C8\x05\u01C8\u1F8E\n\u01C8\x03\u01C8\x05\u01C8" +
		"\u1F91\n\u01C8\x05\u01C8\u1F93\n\u01C8\x03\u01C9\x03\u01C9\x03\u01C9\x03" +
		"\u01C9\x03\u01CA\x03\u01CA\x03\u01CA\x03\u01CA\x03\u01CA\x03\u01CA\x03" +
		"\u01CA\x03\u01CA\x03\u01CA\x03\u01CA\x05\u01CA\u1FA3\n\u01CA\x03\u01CB" +
		"\x05\u01CB\u1FA6\n\u01CB\x03\u01CB\x03\u01CB\x03\u01CB\x03\u01CB\x03\u01CB" +
		"\x05\u01CB\u1FAD\n\u01CB\x03\u01CB\x05\u01CB\u1FB0\n\u01CB\x03\u01CC\x03" +
		"\u01CC\x03\u01CC\x05\u01CC\u1FB5\n\u01CC\x03\u01CD\x03\u01CD\x03\u01CD" +
		"\x03\u01CD\x03\u01CD\x03\u01CD\x03\u01CD\x03\u01CD\x03\u01CD\x03\u01CD" +
		"\x03\u01CD\x03\u01CD\x03\u01CD\x05\u01CD\u1FC4\n\u01CD\x03\u01CD\x03\u01CD" +
		"\x03\u01CD\x03\u01CD\x05\u01CD\u1FCA\n\u01CD\x03\u01CE\x03\u01CE\x03\u01CF" +
		"\x03\u01CF\x03\u01CF\x07\u01CF\u1FD1\n\u01CF\f\u01CF\x0E\u01CF\u1FD4\v" +
		"\u01CF\x03\u01D0\x03\u01D0\x03\u01D0\x03\u01D1\x03\u01D1\x03\u01D1\x05" +
		"\u01D1\u1FDC\n\u01D1\x03\u01D1\x03\u01D1\x03\u01D1\x03\u01D1\x03\u01D1" +
		"\x05\u01D1\u1FE3\n\u01D1\x03\u01D1\x05\u01D1\u1FE6\n\u01D1\x03\u01D2\x03" +
		"\u01D2\x03\u01D2\x03\u01D2\x05\u01D2\u1FEC\n\u01D2\x03\u01D2\x03\u01D2" +
		"\x03\u01D2\x05\u01D2\u1FF1\n\u01D2\x03\u01D3\x03\u01D3\x03\u01D3\x03\u01D4" +
		"\x05\u01D4\u1FF7\n\u01D4\x03\u01D4\x03\u01D4\x03\u01D4\x03\u01D4\x05\u01D4" +
		"\u1FFD\n\u01D4\x03\u01D4\x05\u01D4\u2000\n\u01D4\x03\u01D4\x05\u01D4\u2003" +
		"\n\u01D4\x03\u01D5\x03\u01D5\x03\u01D5\x03\u01D6\x03\u01D6\x05\u01D6\u200A" +
		"\n\u01D6\x03\u01D6\x03\u01D6\x05\u01D6\u200E\n\u01D6\x03\u01D6\x05\u01D6" +
		"\u2011\n\u01D6\x03\u01D7\x03\u01D7\x03\u01D7\x03\u01D7\x03\u01D8\x03\u01D8" +
		"\x03\u01D8\x03\u01D8\x03\u01D8\x03\u01D8\x03\u01D8\x03\u01D8\x03\u01D8" +
		"\x05\u01D8\u2020\n\u01D8\x03\u01D8\x05\u01D8\u2023\n\u01D8\x03\u01D9\x03" +
		"\u01D9\x03\u01DA\x03\u01DA\x03\u01DA\x05\u01DA\u202A\n\u01DA\x03\u01DB" +
		"\x05\u01DB\u202D\n\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB\x03\u01DB" +
		"\x05\u01DB\u2034\n\u01DB\x03\u01DB\x05\u01DB\u2037\n\u01DB\x03\u01DB\x05" +
		"\u01DB\u203A\n\u01DB\x03\u01DC\x03\u01DC\x03\u01DC\x07\u01DC\u203F\n\u01DC" +
		"\f\u01DC\x0E\u01DC\u2042\v\u01DC\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD" +
		"\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD\x03\u01DD\x05\u01DD" +
		"\u204E\n\u01DD\x03\u01DE\x03\u01DE\x03\u01DE\x03\u01DF\x03\u01DF\x03\u01DF" +
		"\x07\u01DF\u2056\n\u01DF\f\u01DF\x0E\u01DF\u2059\v\u01DF\x03\u01E0\x03" +
		"\u01E0\x03\u01E0\x03\u01E0\x03\u01E0\x03\u01E0\x03\u01E0\x03\u01E0\x03" +
		"\u01E1\x03\u01E1\x03\u01E2\x03\u01E2\x03\u01E2\x03\u01E2\x03\u01E2\x07" +
		"\u01E2\u206A\n\u01E2\f\u01E2\x0E\u01E2\u206D\v\u01E2\x03\u01E3\x03\u01E3" +
		"\x03\u01E3\x03\u01E3\x03\u01E3\x05\u01E3\u2074\n\u01E3\x03\u01E4\x03\u01E4" +
		"\x05\u01E4\u2078\n\u01E4\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E5\x03\u01E5" +
		"\x03\u01E5\x03\u01E5\x03\u01E5\x05\u01E5\u2082\n\u01E5\x03\u01E6\x03\u01E6" +
		"\x05\u01E6\u2086\n\u01E6\x03\u01E6\x03\u01E6\x05\u01E6\u208A\n\u01E6\x03" +
		"\u01E6\x03\u01E6\x05\u01E6\u208E\n\u01E6\x05\u01E6\u2090\n\u01E6\x03\u01E6" +
		"\x03\u01E6\x03\u01E6\x05\u01E6\u2095\n\u01E6\x03\u01E6\x03\u01E6\x05\u01E6" +
		"\u2099\n\u01E6\x03\u01E6\x03\u01E6\x05\u01E6\u209D\n\u01E6\x05\u01E6\u209F" +
		"\n\u01E6\x05\u01E6\u20A1\n\u01E6\x03\u01E7\x03\u01E7\x05\u01E7\u20A5\n" +
		"\u01E7\x03\u01E8\x03\u01E8\x05\u01E8\u20A9\n\u01E8\x03\u01E8\x05\u01E8" +
		"\u20AC\n\u01E8\x03\u01E8\x05\u01E8\u20AF\n\u01E8\x03\u01E8\x05\u01E8\u20B2" +
		"\n\u01E8\x03\u01E8\x05\u01E8\u20B5\n\u01E8\x05\u01E8\u20B7\n\u01E8\x03" +
		"\u01E8\x05\u01E8\u20BA\n\u01E8\x03\u01E8\x05\u01E8\u20BD\n\u01E8\x03\u01E8" +
		"\x05\u01E8\u20C0\n\u01E8\x03\u01E8\x05\u01E8\u20C3\n\u01E8\x03\u01E8\x05" +
		"\u01E8\u20C6\n\u01E8\x03\u01E8\x05\u01E8\u20C9\n\u01E8\x03\u01E8\x03\u01E8" +
		"\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E8\x03\u01E8\x05\u01E8\u20D2\n\u01E8" +
		"\x05\u01E8\u20D4\n\u01E8\x03\u01E8\x03\u01E8\x03\u01E8\x05\u01E8\u20D9" +
		"\n\u01E8\x07\u01E8\u20DB\n\u01E8\f\u01E8\x0E\u01E8\u20DE\v\u01E8\x03\u01E9" +
		"\x03\u01E9\x03\u01E9\x05\u01E9\u20E3\n\u01E9\x03\u01EA\x03\u01EA\x05\u01EA" +
		"\u20E7\n\u01EA\x03\u01EB\x03\u01EB\x05\u01EB\u20EB\n\u01EB\x03\u01EB\x03" +
		"\u01EB\x03\u01EC\x03\u01EC\x03\u01EC\x07\u01EC\u20F2\n\u01EC\f\u01EC\x0E" +
		"\u01EC\u20F5\v\u01EC\x03\u01ED\x03\u01ED\x05\u01ED\u20F9\n\u01ED\x03\u01ED" +
		"\x03\u01ED\x05\u01ED\u20FD\n\u01ED\x03\u01ED\x03\u01ED\x03\u01ED\x03\u01ED" +
		"\x03\u01EE\x03\u01EE\x03\u01EE\x05\u01EE\u2106\n\u01EE\x03\u01EF\x03\u01EF" +
		"\x03\u01F0\x03\u01F0\x03\u01F0\x03\u01F0\x03\u01F0\x05\u01F0\u210F\n\u01F0" +
		"\x03\u01F1\x03\u01F1\x05\u01F1\u2113\n\u01F1\x03\u01F2\x05\u01F2\u2116" +
		"\n\u01F2\x03\u01F2\x03\u01F2\x05\u01F2\u211A\n\u01F2\x03\u01F2\x03\u01F2" +
		"\x03\u01F2\x05\u01F2\u211F\n\u01F2\x03\u01F2\x03\u01F2\x03\u01F2\x03\u01F2" +
		"\x05\u01F2\u2125\n\u01F2\x03\u01F3\x03\u01F3\x03\u01F4\x03\u01F4\x03\u01F5" +
		"\x03\u01F5\x03\u01F5\x03\u01F5\x03\u01F5\x03\u01F5\x05\u01F5\u2131\n\u01F5" +
		"\x03\u01F6\x03\u01F6\x03\u01F7\x03\u01F7\x03\u01F8\x03\u01F8\x03\u01F8" +
		"\x03\u01F8\x03\u01F9\x03\u01F9\x03\u01F9\x07\u01F9\u213E\n\u01F9\f\u01F9" +
		"\x0E\u01F9\u2141\v\u01F9\x03\u01FA\x03\u01FA\x03\u01FA\x03\u01FA\x05\u01FA" +
		"\u2147\n\u01FA\x03\u01FA\x05\u01FA\u214A\n\u01FA\x03\u01FB\x03\u01FB\x05" +
		"\u01FB\u214E\n\u01FB\x03\u01FB\x03\u01FB\x05\u01FB\u2152\n\u01FB\x05\u01FB" +
		"\u2154\n\u01FB\x03\u01FC\x03\u01FC\x03\u01FD\x03\u01FD\x03\u01FD\x03\u01FD" +
		"\x05\u01FD\u215C\n\u01FD\x03\u01FD\x03\u01FD\x03\u01FD\x03\u01FD\x03\u01FD" +
		"\x03\u01FD\x03\u01FD\x05\u01FD\u2165\n\u01FD\x03\u01FD\x03\u01FD\x03\u01FD" +
		"\x03\u01FD\x05\u01FD\u216B\n\u01FD\x05\u01FD\u216D\n\u01FD\x05\u01FD\u216F" +
		"\n\u01FD\x03\u01FE\x03\u01FE\x03\u01FE\x03\u01FE\x03\u01FE\x05\u01FE\u2176" +
		"\n\u01FE\x03\u01FF\x03\u01FF\x05\u01FF\u217A\n\u01FF\x03\u0200\x03\u0200" +
		"\x03\u0201\x03\u0201\x03\u0201\x03\u0201\x03\u0201\x05\u0201\u2183\n\u0201" +
		"\x03\u0202\x03\u0202\x05\u0202\u2187\n\u0202\x03\u0203\x03\u0203\x03\u0204" +
		"\x03\u0204\x03\u0205\x03\u0205\x03\u0205\x03\u0205\x03\u0206\x03\u0206" +
		"\x03\u0206\x07\u0206\u2194\n\u0206\f\u0206\x0E\u0206\u2197\v\u0206\x03" +
		"\u0207\x03\u0207\x03\u0207\x03\u0207\x03\u0207\x05\u0207\u219E\n\u0207" +
		"\x03\u0208\x03\u0208\x03\u0208\x03\u0209\x03\u0209\x03\u0209\x03\u0209" +
		"\x03\u0209\x03\u020A\x03\u020A\x03\u020A\x03\u020A\x03\u020A\x03\u020B" +
		"\x03\u020B\x03\u020B\x03\u020B\x03\u020B\x03\u020B\x03\u020C\x03\u020C" +
		"\x03\u020C\x03\u020D\x03\u020D\x03\u020D\x03\u020D\x05\u020D\u21BA\n\u020D" +
		"\x03\u020E\x03\u020E\x03\u020F\x06\u020F\u21BF\n\u020F\r\u020F\x0E\u020F" +
		"\u21C0\x03\u0210\x03\u0210\x05\u0210\u21C5\n\u0210\x03\u0210\x05\u0210" +
		"\u21C8\n\u0210\x03\u0211\x03\u0211\x03\u0211\x05\u0211\u21CD\n\u0211\x03" +
		"\u0211\x03\u0211\x05\u0211\u21D1\n\u0211\x03\u0211\x05\u0211\u21D4\n\u0211" +
		"\x03\u0212\x03\u0212\x03\u0212\x03\u0213\x03\u0213\x03\u0213\x03\u0213" +
		"\x03\u0213\x03\u0213\x03\u0213\x03\u0213\x03\u0213\x07\u0213\u21E2\n\u0213" +
		"\f\u0213\x0E\u0213\u21E5\v\u0213\x03\u0214\x03\u0214\x03\u0214\x03\u0215" +
		"\x03\u0215\x03\u0215\x07\u0215\u21ED\n\u0215\f\u0215\x0E\u0215\u21F0\v" +
		"\u0215\x03\u0216\x03\u0216\x05\u0216\u21F4\n\u0216\x03\u0216\x05\u0216" +
		"\u21F7\n\u0216\x03\u0216\x03\u0216\x05\u0216\u21FB\n\u0216\x03\u0216\x03" +
		"\u0216\x05\u0216\u21FF\n\u0216\x03\u0216\x03\u0216\x05\u0216\u2203\n\u0216" +
		"\x03\u0216\x03\u0216\x03\u0216\x05\u0216\u2208\n\u0216\x03\u0216\x03\u0216" +
		"\x05\u0216\u220C\n\u0216\x03\u0216\x03\u0216\x05\u0216\u2210\n\u0216\x05" +
		"\u0216\u2212\n\u0216\x03\u0216\x03\u0216\x03\u0216\x03\u0216\x03\u0216" +
		"\x03\u0216\x03\u0216\x05\u0216\u221B\n\u0216\x03\u0216\x03\u0216\x03\u0216" +
		"\x05\u0216\u2220\n\u0216\x03\u0216\x03\u0216\x03\u0216\x03\u0216\x05\u0216" +
		"\u2226\n\u0216\x03\u0216\x03\u0216\x05\u0216\u222A\n\u0216\x05\u0216\u222C" +
		"\n\u0216\x03\u0216\x03\u0216\x03\u0216\x03\u0216\x03\u0216\x05\u0216\u2233" +
		"\n\u0216\x03\u0216\x03\u0216\x03\u0216\x05\u0216\u2238\n\u0216\x03\u0216" +
		"\x03\u0216\x03\u0216\x03\u0216\x07\u0216\u223E\n\u0216\f\u0216\x0E\u0216" +
		"\u2241\v\u0216\x03\u0217\x05\u0217\u2244\n\u0217\x03\u0217\x03\u0217\x03" +
		"\u0217\x03\u0217\x03\u0217\x05\u0217\u224B\n\u0217\x03\u0218\x03\u0218" +
		"\x03\u0219\x03\u0219\x03\u0219\x05\u0219\u2252\n\u0219\x03\u0219\x05\u0219" +
		"\u2255\n\u0219\x03\u0219\x03\u0219\x03\u0219\x03\u0219\x05\u0219\u225B" +
		"\n\u0219\x03\u021A\x03\u021A\x05\u021A\u225F\n\u021A\x03\u021B\x03\u021B" +
		"\x03\u021B\x03\u021B\x03\u021B\x03\u021B\x03\u021B\x05\u021B\u2268\n\u021B" +
		"\x03\u021C\x05\u021C\u226B\n\u021C\x03\u021C\x03\u021C\x05\u021C\u226F" +
		"\n\u021C\x03\u021C\x03\u021C\x03\u021C\x03\u021C\x03\u021C\x03\u021C\x05" +
		"\u021C\u2277\n\u021C\x05\u021C\u2279\n\u021C\x03\u021D\x03\u021D\x03\u021D" +
		"\x07\u021D\u227E\n\u021D\f\u021D\x0E\u021D\u2281\v\u021D\x03\u021E\x03" +
		"\u021E\x05\u021E\u2285\n\u021E\x03\u021E\x05\u021E\u2288\n\u021E\x03\u021F" +
		"\x03\u021F\x03\u021F\x03\u021F\x03\u021F\x03\u021F\x05\u021F\u2290\n\u021F" +
		"\x03\u0220\x03\u0220\x03\u0220\x03\u0220\x03\u0220\x03\u0221\x03\u0221" +
		"\x05\u0221\u2299\n\u0221\x03\u0221\x03\u0221\x03\u0221\x03\u0221\x03\u0221" +
		"\x03\u0221\x05\u0221\u22A1\n\u0221\x05\u0221\u22A3\n\u0221\x03\u0222\x03" +
		"\u0222\x05\u0222\u22A7\n\u0222\x03\u0223\x03\u0223\x03\u0223\x07\u0223" +
		"\u22AC\n\u0223\f\u0223\x0E\u0223\u22AF\v\u0223\x03\u0224\x03\u0224\x03" +
		"\u0224\x03\u0224\x03\u0224\x03\u0225\x03\u0225\x03\u0225\x03\u0226\x03" +
		"\u0226\x03\u0226\x03\u0227\x03\u0227\x03\u0227\x03\u0227\x03\u0227\x05" +
		"\u0227\u22C1\n\u0227\x03\u0228\x03\u0228\x03\u0229\x03\u0229\x03\u0229" +
		"\x07\u0229\u22C8\n\u0229\f\u0229\x0E\u0229\u22CB\v\u0229\x03\u022A\x03" +
		"\u022A\x03\u022A\x05\u022A\u22D0\n\u022A\x03\u022B\x03\u022B\x03\u022B" +
		"\x03\u022B\x03\u022B\x03\u022B\x03\u022B\x03\u022B\x03\u022B\x03\u022B" +
		"\x03\u022B\x03\u022B\x03\u022B\x03\u022B\x03\u022B\x03\u022B\x03\u022B" +
		"\x05\u022B\u22E3\n\u022B\x03\u022B\x03\u022B\x03\u022C\x03\u022C\x03\u022C" +
		"\x07\u022C\u22EA\n\u022C\f\u022C\x0E\u022C\u22ED\v\u022C\x03\u022D\x03" +
		"\u022D\x03\u022D\x05\u022D\u22F2\n\u022D\x03\u022D\x03\u022D\x05\u022D" +
		"\u22F6\n\u022D\x03\u022E\x06\u022E\u22F9\n\u022E\r\u022E\x0E\u022E\u22FA" +
		"\x03\u022F\x03\u022F\x03\u022F\x03\u022F\x03\u022F\x03\u022F\x03\u022F" +
		"\x03\u022F\x05\u022F\u2305\n\u022F\x03\u0230\x03\u0230\x03\u0230\x07\u0230" +
		"\u230A\n\u0230\f\u0230\x0E\u0230\u230D\v\u0230\x03\u0231\x03\u0231\x03" +
		"\u0231\x03\u0231\x03\u0231\x03\u0231\x05\u0231\u2315\n\u0231\x03\u0232" +
		"\x05\u0232\u2318\n\u0232\x03\u0232\x03\u0232\x03\u0232\x03\u0232\x03\u0232" +
		"\x03\u0232\x03\u0232\x05\u0232\u2321\n\u0232\x05\u0232\u2323\n\u0232\x03" +
		"\u0232\x03\u0232\x03\u0232\x03\u0232\x05\u0232\u2329\n\u0232\x03\u0233" +
		"\x03\u0233\x05\u0233\u232D\n\u0233\x03\u0233\x07\u0233\u2330\n\u0233\f" +
		"\u0233\x0E\u0233\u2333\v\u0233\x03\u0234\x03\u0234\x03\u0234\x03\u0234" +
		"\x03\u0234\x03\u0234\x03\u0234\x05\u0234\u233C\n\u0234\x03\u0234\x03\u0234" +
		"\x03\u0234\x03\u0234\x05\u0234\u2342\n\u0234\x05\u0234\u2344\n\u0234\x03" +
		"\u0235\x03\u0235\x03\u0235\x03\u0235\x05\u0235\u234A\n\u0235\x03\u0236" +
		"\x03\u0236\x05\u0236\u234E\n\u0236\x03\u0236\x05\u0236\u2351\n\u0236\x03" +
		"\u0237\x03\u0237\x03\u0237\x03\u0237\x03\u0238\x03\u0238\x03\u0238\x03" +
		"\u0238\x03\u0238\x03\u0238\x03\u0238\x05\u0238\u235E\n\u0238\x03\u0238" +
		"\x03\u0238\x03\u0238\x03\u0238\x05\u0238\u2364\n\u0238\x03\u0238\x03\u0238" +
		"\x05\u0238\u2368\n\u0238\x03\u0238\x03\u0238\x05\u0238\u236C\n\u0238\x03" +
		"\u0238\x05\u0238\u236F\n\u0238\x03\u0239\x03\u0239\x03\u0239\x03\u0239" +
		"\x03\u023A\x03\u023A\x05\u023A\u2377\n\u023A\x03\u023B\x03\u023B\x05\u023B" +
		"\u237B\n\u023B\x03\u023C\x03\u023C\x05\u023C\u237F\n\u023C\x03\u023C\x03" +
		"\u023C\x03\u023C\x03\u023C\x03\u023D\x03\u023D\x05\u023D\u2387\n\u023D" +
		"\x03\u023E\x03\u023E\x03\u023E\x03\u023E\x03\u023E\x05\u023E\u238E\n\u023E" +
		"\x03\u023F\x03\u023F\x03\u023F\x03\u023F\x03\u023F\x05\u023F\u2395\n\u023F" +
		"\x03\u0240\x03\u0240\x05\u0240\u2399\n\u0240\x03\u0240\x03\u0240\x03\u0240" +
		"\x03\u0240\x05\u0240\u239F\n\u0240\x05\u0240\u23A1\n\u0240\x03\u0241\x03" +
		"\u0241\x03\u0242\x03\u0242\x03\u0242\x03\u0242\x03\u0242\x05\u0242\u23AA" +
		"\n\u0242\x03\u0242\x05\u0242\u23AD\n\u0242\x03\u0243\x03\u0243\x03\u0244" +
		"\x03\u0244\x03\u0244\x03\u0244\x03\u0244\x03\u0244\x05\u0244\u23B7\n\u0244" +
		"\x03\u0245\x03\u0245\x03\u0245\x03\u0245\x03\u0245\x03\u0245\x03\u0245" +
		"\x03\u0245\x03\u0245\x03\u0245\x03\u0245\x03\u0245\x03\u0245\x03\u0245" +
		"\x05\u0245\u23C7\n\u0245\x03\u0245\x03\u0245\x03\u0245\x03\u0245\x05\u0245" +
		"\u23CD\n\u0245\x03\u0245\x03\u0245\x03\u0245\x05\u0245\u23D2\n\u0245\x03" +
		"\u0246\x03\u0246\x03\u0246\x03\u0246\x03\u0246\x05\u0246\u23D9\n\u0246" +
		"\x03\u0247\x03\u0247\x03\u0247\x03\u0248\x03\u0248\x03\u0249\x03\u0249" +
		"\x05\u0249\u23E2\n\u0249\x03\u024A\x03\u024A\x03\u024A\x07\u024A\u23E7" +
		"\n\u024A\f\u024A\x0E\u024A\u23EA\v\u024A\x03\u024B\x03\u024B\x03\u024B" +
		"\x07\u024B\u23EF\n\u024B\f\u024B\x0E\u024B\u23F2\v\u024B\x03\u024C\x03" +
		"\u024C\x03\u024C\x07\u024C\u23F7\n\u024C\f\u024C\x0E\u024C\u23FA\v\u024C" +
		"\x03\u024D\x03\u024D\x05\u024D\u23FE\n\u024D\x03\u024D\x03\u024D\x05\u024D" +
		"\u2402\n\u024D\x03\u024E\x05\u024E\u2405\n\u024E\x03\u024E\x03\u024E\x03" +
		"\u024F\x03\u024F\x05\u024F\u240B\n\u024F\x03\u0250\x03\u0250\x03\u0250" +
		"\x05\u0250\u2410\n\u0250\x03\u0250\x03\u0250\x03\u0250\x03\u0250\x03\u0250" +
		"\x03\u0250\x03\u0250\x03\u0250\x03\u0250\x03\u0250\x03\u0250\x03\u0250" +
		"\x03\u0250\x03\u0250\x05\u0250\u2420\n\u0250\x03\u0250\x05\u0250\u2423" +
		"\n\u0250\x05\u0250\u2425\n\u0250\x03\u0251\x03\u0251\x03\u0251\x03\u0251" +
		"\x03\u0251\x03\u0251\x03\u0251\x03\u0251\x03\u0251\x03\u0251\x05\u0251" +
		"\u2431\n\u0251\x05\u0251\u2433\n\u0251\x03\u0252\x03\u0252\x05\u0252\u2437" +
		"\n\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x03\u0252\x05" +
		"\u0252\u243F\n\u0252\x05\u0252\u2441\n\u0252\x03\u0252\x03\u0252\x05\u0252" +
		"\u2445\n\u0252\x05\u0252\u2447\n\u0252\x03\u0253\x03\u0253\x03\u0253\x03" +
		"\u0253\x07\u0253\u244D\n\u0253\f\u0253\x0E\u0253\u2450\v\u0253\x03\u0254" +
		"\x05\u0254\u2453\n\u0254\x03\u0254\x03\u0254\x03\u0255\x03\u0255\x03\u0255" +
		"\x07\u0255\u245A\n\u0255\f\u0255\x0E\u0255\u245D\v\u0255\x03\u0256\x03" +
		"\u0256\x03\u0256\x07\u0256\u2462\n\u0256\f\u0256\x0E\u0256\u2465\v\u0256" +
		"\x03\u0257\x03\u0257\x03\u0257\x05\u0257\u246A\n\u0257\x03\u0258\x05\u0258" +
		"\u246D\n\u0258\x03\u0258\x03\u0258\x03\u0259\x03\u0259\x03\u0259\x03\u0259" +
		"\x03\u0259\x05\u0259\u2476\n\u0259\x03\u025A\x03\u025A\x03\u025A\x05\u025A" +
		"\u247B\n\u025A\x03\u025B\x03\u025B\x03\u025B\x07\u025B\u2480\n\u025B\f" +
		"\u025B\x0E\u025B\u2483\v\u025B\x03\u025C\x03\u025C\x03\u025C\x03\u025C" +
		"\x03\u025C\x03\u025C\x03\u025C\x05\u025C\u248C\n\u025C\x03\u025C\x03\u025C" +
		"\x03\u025C\x03\u025C\x03\u025C\x03\u025C\x03\u025C\x03\u025C\x03\u025C" +
		"\x03\u025C\x03\u025C\x03\u025C\x03\u025C\x03\u025C\x03\u025C\x03\u025C" +
		"\x03\u025C\x03\u025C\x03\u025C\x03\u025C\x03\u025C\x03\u025C\x03\u025C" +
		"\x03\u025C\x05\u025C\u24A6\n\u025C\x03\u025C\x03\u025C\x03\u025C\x03\u025C" +
		"\x03\u025C\x03\u025C\x03\u025C\x03\u025C\x03\u025C\x05\u025C\u24B1\n\u025C" +
		"\x07\u025C\u24B3\n\u025C\f\u025C\x0E\u025C\u24B6\v\u025C\x03\u025D\x03" +
		"\u025D\x03\u025D\x03\u025D\x03\u025D\x05\u025D\u24BD\n\u025D\x03\u025D" +
		"\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x03\u025D" +
		"\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x03\u025D" +
		"\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x05\u025D" +
		"\u24D4\n\u025D\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x03\u025D\x03\u025D" +
		"\x05\u025D\u24DC\n\u025D\x03\u025E\x03\u025E\x03\u025F\x03\u025F\x03\u025F" +
		"\x03\u025F\x03\u025F\x03\u025F\x05\u025F\u24E6\n\u025F\x03\u025F\x05\u025F" +
		"\u24E9\n\u025F\x03\u025F\x03\u025F\x03\u025F\x05\u025F\u24EE\n\u025F\x03" +
		"\u025F\x03\u025F\x03\u025F\x05\u025F\u24F3\n\u025F\x03\u025F\x03\u025F" +
		"\x05\u025F\u24F7\n\u025F\x03\u025F\x03\u025F\x03\u0260\x03\u0260\x05\u0260" +
		"\u24FD\n\u0260\x03\u0260\x05\u0260\u2500\n\u0260\x03\u0260\x05\u0260\u2503" +
		"\n\u0260\x03\u0260\x05\u0260\u2506\n\u0260\x03\u0261\x03\u0261\x05\u0261" +
		"\u250A\n\u0261\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x05\u0262" +
		"\u2518\n\u0262\x03\u0262";
	private static readonly _serializedATNSegment4: string =
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x05\u0262\u251F\n\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x05\u0262\u2526\n\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x05\u0262\u252D\n\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x05\u0262\u253F\n\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x05\u0262\u2547\n\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x05\u0262\u2553\n\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x05\u0262" +
		"\u2559\n\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x05\u0262\u2566\n\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x05\u0262\u258D\n\u0262\x05\u0262\u258F\n\u0262\x03" +
		"\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03" +
		"\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03" +
		"\u0262\x03\u0262\x03\u0262\x03\u0262\x05\u0262\u25A3\n\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x05\u0262\u25AD\n\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x05\u0262\u25B8\n\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262\x03\u0262" +
		"\x03\u0262\x03\u0262\x05\u0262\u25C4\n\u0262\x03\u0263\x03\u0263\x03\u0263" +
		"\x03\u0263\x03\u0263\x05\u0263\u25CB\n\u0263\x03\u0264\x03\u0264\x03\u0264" +
		"\x03\u0264\x03\u0264\x03\u0264\x03\u0264\x03\u0264\x03\u0264\x03\u0264" +
		"\x05\u0264\u25D7\n\u0264\x03\u0265\x03\u0265\x03\u0265\x03\u0265\x03\u0265" +
		"\x03\u0266\x03\u0266\x03\u0266\x07\u0266\u25E1\n\u0266\f\u0266\x0E\u0266" +
		"\u25E4\v\u0266\x03\u0267\x03\u0267\x03\u0267\x05\u0267\u25E9\n\u0267\x03" +
		"\u0268\x03\u0268\x03\u0269\x03\u0269\x03\u0269\x03\u0269\x05\u0269\u25F1" +
		"\n\u0269\x03\u026A\x03\u026A\x03\u026A\x03\u026A\x03\u026A\x03\u026A\x03" +
		"\u026A\x03\u026A\x03\u026A\x03\u026A\x03\u026A\x03\u026A\x03\u026A\x03" +
		"\u026A\x03\u026A\x05\u026A\u2602\n\u026A\x03\u026B\x03\u026B\x03\u026B" +
		"\x03\u026C\x03\u026C\x03\u026C\x03\u026C\x03\u026C\x03\u026C\x03\u026D" +
		"\x03\u026D\x03\u026D\x03\u026D\x03\u026D\x03\u026D\x03\u026E\x03\u026E" +
		"\x03\u026E\x03\u026F\x03\u026F\x03\u026F\x07\u026F\u2619\n\u026F\f\u026F" +
		"\x0E\u026F\u261C\v\u026F\x03\u0270\x03\u0270\x03\u0270\x03\u0270\x03\u0271" +
		"\x03\u0271\x03\u0271\x05\u0271\u2625\n\u0271\x03\u0272\x03\u0272\x05\u0272" +
		"\u2629\n\u0272\x03\u0272\x05\u0272\u262C\n\u0272\x03\u0272\x05\u0272\u262F" +
		"\n\u0272\x03\u0272\x05\u0272\u2632\n\u0272\x03\u0272\x03\u0272\x03\u0273" +
		"\x03\u0273\x03\u0274\x03\u0274\x03\u0274\x03\u0274\x03\u0275\x03\u0275" +
		"\x03\u0275\x05\u0275\u263F\n\u0275\x03\u0275\x03\u0275\x03\u0275\x05\u0275" +
		"\u2644\n\u0275\x03\u0275\x03\u0275\x03\u0275\x05\u0275\u2649\n\u0275\x05" +
		"\u0275\u264B\n\u0275\x03\u0276\x03\u0276\x03\u0276\x03\u0276\x03\u0276" +
		"\x03\u0276\x05\u0276\u2653\n\u0276\x03\u0277\x03\u0277\x03\u0277\x03\u0277" +
		"\x03\u0277\x03\u0277\x03\u0277\x05\u0277\u265C\n\u0277\x03\u0278\x03\u0278" +
		"\x03\u0278\x03\u0278\x03\u0278\x03\u0278\x03\u0278\x05\u0278\u2665\n\u0278" +
		"\x03\u0279\x03\u0279\x03\u0279\x05\u0279\u266A\n\u0279\x03\u0279\x03\u0279" +
		"\x03\u0279\x03\u0279\x03\u0279\x03\u0279\x03\u0279\x05\u0279\u2673\n\u0279" +
		"\x03\u027A\x03\u027A\x03\u027A\x05\u027A\u2678\n\u027A\x03\u027A\x03\u027A" +
		"\x03\u027B\x03\u027B\x03\u027B\x03\u027B\x03\u027B\x03\u027B\x03\u027C" +
		"\x03\u027C\x03\u027D\x03\u027D\x05\u027D\u2686\n\u027D\x03\u027E\x03\u027E" +
		"\x03\u027F\x03\u027F\x03\u027F\x03\u027F\x03\u027F\x03\u027F\x05\u027F" +
		"\u2690\n\u027F\x03\u0280\x03\u0280\x03\u0280\x03\u0280\x03\u0280\x03\u0280" +
		"\x05\u0280\u2698\n\u0280\x03\u0281\x03\u0281\x03\u0281\x03\u0281\x03\u0281" +
		"\x03\u0281\x03\u0281\x03\u0281\x03\u0281\x03\u0281\x03\u0281\x03\u0281" +
		"\x05\u0281\u26A6\n\u0281\x03\u0282\x03\u0282\x03\u0282\x07\u0282\u26AB" +
		"\n\u0282\f\u0282\x0E\u0282\u26AE\v\u0282\x03\u0283\x03\u0283\x03\u0283" +
		"\x07\u0283\u26B3\n\u0283\f\u0283\x0E\u0283\u26B6\v\u0283\x03\u0284\x03" +
		"\u0284\x03\u0284\x03\u0284\x03\u0284\x05\u0284\u26BD\n\u0284\x03\u0285" +
		"\x03\u0285\x03\u0285\x07\u0285\u26C2\n\u0285\f\u0285\x0E\u0285\u26C5\v" +
		"\u0285\x03\u0286\x03\u0286\x03\u0286\x05\u0286\u26CA\n\u0286\x03\u0286" +
		"\x03\u0286\x03\u0287\x03\u0287\x03\u0287\x07\u0287\u26D1\n\u0287\f\u0287" +
		"\x0E\u0287\u26D4\v\u0287\x03\u0288\x03\u0288\x03\u0288\x03\u0288\x03\u0289" +
		"\x03\u0289\x03\u0289\x03\u0289\x03\u0289\x03\u0289\x03\u0289\x03\u0289" +
		"\x05\u0289\u26E2\n\u0289\x03\u028A\x03\u028A\x03\u028B\x03\u028B\x03\u028B" +
		"\x03\u028B\x03\u028B\x03\u028B\x03\u028B\x05\u028B\u26ED\n\u028B\x03\u028C" +
		"\x03\u028C\x03\u028C\x03\u028C\x03\u028D\x03\u028D\x03\u028D\x03\u028D" +
		"\x03\u028D\x03\u028D\x03\u028D\x03\u028D\x03\u028D\x03\u028D\x03\u028D" +
		"\x03\u028D\x03\u028D\x03\u028D\x03\u028D\x03\u028D\x03\u028D\x03\u028D" +
		"\x03\u028D\x03\u028D\x03\u028D\x03\u028D\x03\u028D\x03\u028D\x03\u028D" +
		"\x03\u028D\x03\u028D\x05\u028D\u270E\n\u028D\x03\u028E\x03\u028E\x03\u028E" +
		"\x03\u028E\x03\u028E\x03\u028E\x03\u028E\x05\u028E\u2717\n\u028E\x03\u028F" +
		"\x03\u028F\x03\u028F\x03\u028F\x03\u028F\x05\u028F\u271E\n\u028F\x03\u0290" +
		"\x03\u0290\x05\u0290\u2722\n\u0290\x03\u0290\x03\u0290\x05\u0290\u2726" +
		"\n\u0290\x03\u0290\x03\u0290\x03\u0291\x06\u0291\u272B\n\u0291\r\u0291" +
		"\x0E\u0291\u272C\x03\u0292\x03\u0292\x03\u0292\x03\u0292\x03\u0292\x03" +
		"\u0293\x03\u0293\x03\u0293\x03\u0294\x03\u0294\x03\u0295\x03\u0295\x05" +
		"\u0295\u273B\n\u0295\x03\u0296\x03\u0296\x03\u0296\x05\u0296\u2740\n\u0296" +
		"\x03\u0296\x03\u0296\x03\u0296\x05\u0296\u2745\n\u0296\x03\u0296\x03\u0296" +
		"\x05\u0296\u2749\n\u0296\x05\u0296\u274B\n\u0296\x03\u0296\x05\u0296\u274E" +
		"\n\u0296\x03\u0297\x03\u0297\x03\u0298\x06\u0298\u2753\n\u0298\r\u0298" +
		"\x0E\u0298\u2754\x03\u0299\x07\u0299\u2758\n\u0299\f\u0299\x0E\u0299\u275B" +
		"\v\u0299\x03\u029A\x03\u029A\x03\u029B\x03\u029B\x03\u029B\x07\u029B\u2762" +
		"\n\u029B\f\u029B\x0E\u029B\u2765\v\u029B\x03\u029C\x03\u029C\x03\u029C" +
		"\x03\u029C\x03\u029C\x05\u029C\u276C\n\u029C\x03\u029C\x05\u029C\u276F" +
		"\n\u029C\x03\u029D\x03\u029D\x03\u029D\x07\u029D\u2774\n\u029D\f\u029D" +
		"\x0E\u029D\u2777\v\u029D\x03\u029E\x03\u029E\x05\u029E\u277B\n\u029E\x03" +
		"\u029F\x03\u029F\x05\u029F\u277F\n\u029F\x03\u02A0\x03\u02A0\x03\u02A0" +
		"\x07\u02A0\u2784\n\u02A0\f\u02A0\x0E\u02A0\u2787\v\u02A0\x03\u02A1\x03" +
		"\u02A1\x03\u02A2\x03\u02A2\x03\u02A3\x03\u02A3\x03\u02A4\x03\u02A4\x03" +
		"\u02A4\x03\u02A4\x05\u02A4\u2793\n\u02A4\x03\u02A5\x03\u02A5\x03\u02A5" +
		"\x03\u02A5\x03\u02A5\x03\u02A5\x03\u02A5\x03\u02A5\x03\u02A5\x03\u02A5" +
		"\x05\u02A5\u279F\n\u02A5\x03\u02A5\x03\u02A5\x03\u02A5\x05\u02A5\u27A4" +
		"\n\u02A5\x03\u02A5\x03\u02A5\x03\u02A5\x03\u02A5\x03\u02A5\x03\u02A5\x05" +
		"\u02A5\u27AC\n\u02A5\x03\u02A5\x03\u02A5\x03\u02A5\x03\u02A5\x03\u02A5" +
		"\x05\u02A5\u27B3\n\u02A5\x03\u02A5\x03\u02A5\x03\u02A5\x05\u02A5\u27B8" +
		"\n\u02A5\x03\u02A6\x03\u02A6\x03\u02A7\x03\u02A7\x03\u02A8\x03\u02A8\x03" +
		"\u02A9\x03\u02A9\x03\u02AA\x03\u02AA\x05\u02AA\u27C4\n\u02AA\x03\u02AB" +
		"\x03\u02AB\x03\u02AB\x03\u02AB\x07\u02AB\u27CA\n\u02AB\f\u02AB\x0E\u02AB" +
		"\u27CD\v\u02AB\x03\u02AB\x03\u02AB\x05\u02AB\u27D1\n\u02AB\x03\u02AC\x03" +
		"\u02AC\x03\u02AC\x03\u02AD\x03\u02AD\x03\u02AD\x03\u02AD\x03\u02AD\x05" +
		"\u02AD\u27DB\n\u02AD\x03\u02AE\x03\u02AE\x03\u02AF\x03\u02AF\x03\u02B0" +
		"\x03\u02B0\x03\u02B0\x03\u02B0\x05\u02B0\u27E5\n\u02B0\x03\u02B1\x03\u02B1" +
		"\x03\u02B1\x07\u02B1\u27EA\n\u02B1\f\u02B1\x0E\u02B1\u27ED\v\u02B1\x03" +
		"\u02B2\x03\u02B2\x03\u02B2\x03\u02B2\x05\u02B2\u27F3\n\u02B2\x03\u02B3" +
		"\x03\u02B3\x03\u02B4\x03\u02B4\x03\u02B4\x03\u02B4\x03\u02B4\x03\u02B4" +
		"\x03\u02B4\x05\u02B4\u27FE\n\u02B4\x03\u02B4\x05\u02B4\u2801\n\u02B4\x05" +
		"\u02B4\u2803\n\u02B4\x03\u02B5\x03\u02B5\x05\u02B5\u2807\n\u02B5\x03\u02B5" +
		"\x05\u02B5\u280A\n\u02B5\x03\u02B6\x03\u02B6\x03\u02B6\x03\u02B7\x03\u02B7" +
		"\x03\u02B7\x03\u02B7\x05\u02B7\u2813\n\u02B7\x03\u02B8\x03\u02B8\x03\u02B8" +
		"\x03\u02B8\x05\u02B8\u2819\n\u02B8\x03\u02B9\x03\u02B9\x03\u02B9\x03\u02B9" +
		"\x03\u02B9\x03\u02B9\x05\u02B9\u2821\n\u02B9\x03\u02BA\x03\u02BA\x05\u02BA" +
		"\u2825\n\u02BA\x03\u02BA\x03\u02BA\x03\u02BA\x03\u02BA\x03\u02BA\x05\u02BA" +
		"\u282C\n\u02BA\x03\u02BB\x03\u02BB\x03\u02BC\x03\u02BC\x03\u02BD\x03\u02BD" +
		"\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD" +
		"\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD" +
		"\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD" +
		"\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD" +
		"\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD" +
		"\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD" +
		"\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD\x03\u02BD" +
		"\x05\u02BD\u2865\n\u02BD\x03\u02BE\x03\u02BE\x03\u02BF\x03\u02BF\x03\u02C0" +
		"\x03\u02C0\x03\u02C0\x03\u02C0\x03\u02C1\x07\u02C1\u2870\n\u02C1\f\u02C1" +
		"\x0E\u02C1\u2873\v\u02C1\x03\u02C2\x03\u02C2\x03\u02C2\x03\u02C2\x03\u02C2" +
		"\x03\u02C2\x03\u02C2\x03\u02C2\x03\u02C2\x03\u02C2\x03\u02C2\x03\u02C2" +
		"\x03\u02C2\x03\u02C2\x03\u02C2\x03\u02C2\x03\u02C2\x03\u02C2\x03\u02C2" +
		"\x03\u02C2\x05\u02C2\u2889\n\u02C2\x03\u02C3\x03\u02C3\x03\u02C4\x03\u02C4" +
		"\x03\u02C4\x03\u02C4\x05\u02C4\u2891\n\u02C4\x03\u02C5\x03\u02C5\x05\u02C5" +
		"\u2895\n\u02C5\x03\u02C6\x03\u02C6\x03\u02C6\x03\u02C6\x03\u02C6\x03\u02C6" +
		"\x03\u02C6\x03\u02C7\x03\u02C7\x03\u02C7\x05\u02C7\u28A1\n\u02C7\x05\u02C7" +
		"\u28A3\n\u02C7\x03\u02C8\x03\u02C8\x03\u02C9\x06\u02C9\u28A8\n\u02C9\r" +
		"\u02C9\x0E\u02C9\u28A9\x03\u02CA\x03\u02CA\x03\u02CA\x03\u02CA\x03\u02CB" +
		"\x03\u02CB\x03\u02CB\x05\u02CB\u28B3\n\u02CB\x03\u02CC\x03\u02CC\x03\u02CC" +
		"\x03\u02CC\x03\u02CC\x03\u02CC\x03\u02CC\x03\u02CC\x03\u02CC\x03\u02CC" +
		"\x03\u02CC\x03\u02CC\x03\u02CC\x03\u02CC\x03\u02CC\x03\u02CC\x05\u02CC" +
		"\u28C5\n\u02CC\x03\u02CC\x03\u02CC\x03\u02CD\x03\u02CD\x03\u02CD\x03\u02CD" +
		"\x05\u02CD\u28CD\n\u02CD\x03\u02CE\x03\u02CE\x03\u02CF\x03\u02CF\x03\u02CF" +
		"\x03\u02CF\x03\u02CF\x05\u02CF\u28D6\n\u02CF\x03\u02D0\x03\u02D0\x03\u02D0" +
		"\x07\u02D0\u28DB\n\u02D0\f\u02D0\x0E\u02D0\u28DE\v\u02D0\x03\u02D1\x03" +
		"\u02D1\x03\u02D1\x03\u02D2\x03\u02D2\x03\u02D3\x03\u02D3\x05\u02D3\u28E7" +
		"\n\u02D3\x03\u02D4\x03\u02D4\x03\u02D5\x03\u02D5\x05\u02D5\u28ED\n\u02D5" +
		"\x03\u02D6\x03\u02D6\x03\u02D7\x03\u02D7\x03\u02D7\x05\u02D7\u28F4\n\u02D7" +
		"\x03\u02D8\x03\u02D8\x03\u02D8\x05\u02D8\u28F9\n\u02D8\x03\u02D9\x03\u02D9" +
		"\x03\u02D9\x03\u02D9\x05\u02D9\u28FF\n\u02D9\x03\u02DA\x03\u02DA\x05\u02DA" +
		"\u2903\n\u02DA\x03\u02DB\x03\u02DB\x03\u02DC\x07\u02DC\u2908\n\u02DC\f" +
		"\u02DC\x0E\u02DC\u290B\v\u02DC\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD" +
		"\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD" +
		"\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD" +
		"\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD\x03\u02DD" +
		"\x03\u02DD\x03\u02DD\x05\u02DD\u2928\n\u02DD\x03\u02DE\x03\u02DE\x03\u02DE" +
		"\x03\u02DE\x03\u02DF\x03\u02DF\x03\u02DF\x03\u02DF\x03\u02DF\x03\u02DF" +
		"\x03\u02DF\x03\u02DF\x03\u02DF\x03\u02DF\x03\u02DF\x03\u02DF\x03\u02DF" +
		"\x03\u02DF\x05\u02DF\u293C\n\u02DF\x03\u02E0\x03\u02E0\x05\u02E0\u2940" +
		"\n\u02E0\x03\u02E1\x03\u02E1\x03\u02E1\x03\u02E1\x03\u02E1\x03\u02E2\x03" +
		"\u02E2\x03\u02E2\x03\u02E2\x03\u02E2\x03\u02E2\x03\u02E3\x03\u02E3\x03" +
		"\u02E3\x05\u02E3\u2950\n\u02E3\x03\u02E4\x03\u02E4\x03\u02E4\x07\u02E4" +
		"\u2955\n\u02E4\f\u02E4\x0E\u02E4\u2958\v\u02E4\x03\u02E5\x03\u02E5\x03" +
		"\u02E5\x03\u02E5\x03\u02E6\x03\u02E6\x03\u02E7\x03\u02E7\x03\u02E8\x03" +
		"\u02E8\x05\u02E8\u2964\n\u02E8\x03\u02E8\x03\u02E8\x03\u02E8\x03\u02E8" +
		"\x07\u02E8\u296A\n\u02E8\f\u02E8\x0E\u02E8\u296D\v\u02E8\x03\u02E9\x03" +
		"\u02E9\x03\u02E9\x03\u02E9\x03\u02E9\x03\u02E9\x03\u02E9\x03\u02E9\x03" +
		"\u02E9\x03\u02E9\x03\u02EA\x03\u02EA\x03\u02EA\x03\u02EA\x03\u02EA\x07" +
		"\u02EA\u297E\n\u02EA\f\u02EA\x0E\u02EA\u2981\v\u02EA\x03\u02EB\x03\u02EB" +
		"\x03\u02EB\x05\u02EB\u2986\n\u02EB\x03\u02EC\x03\u02EC\x03\u02EC\x03\u02EC" +
		"\x03\u02EC\x03\u02EC\x03\u02EC\x03\u02EC\x03\u02ED\x03\u02ED\x05\u02ED" +
		"\u2992\n\u02ED\x03\u02EE\x06\u02EE\u2995\n\u02EE\r\u02EE\x0E\u02EE\u2996" +
		"\x03\u02EF\x03\u02EF\x03\u02EF\x03\u02EF\x03\u02EF\x03\u02F0\x03\u02F0" +
		"\x03\u02F0\x05\u02F0\u29A1\n\u02F0\x03\u02F1\x03\u02F1\x03\u02F1\x03\u02F2" +
		"\x03\u02F2\x03\u02F2\x03\u02F2\x03\u02F2\x03\u02F3\x03\u02F3\x03\u02F3" +
		"\x03\u02F3\x03\u02F3\x03\u02F4\x03\u02F4\x03\u02F4\x03\u02F4\x03\u02F4" +
		"\x03\u02F4\x03\u02F4\x03\u02F4\x03\u02F4\x03\u02F4\x03\u02F4\x03\u02F4" +
		"\x03\u02F4\x03\u02F4\x03\u02F4\x03\u02F4\x03\u02F4\x05\u02F4\u29C1\n\u02F4" +
		"\x03\u02F5\x03\u02F5\x03\u02F5\x05\u02F5\u29C6\n\u02F5\x03\u02F6\x03\u02F6" +
		"\x03\u02F6\x03\u02F6\x03\u02F6\x07\u02F6\u29CD\n\u02F6\f\u02F6\x0E\u02F6" +
		"\u29D0\v\u02F6\x03\u02F6\x03\u02F6\x05\u02F6\u29D4\n\u02F6\x03\u02F7\x03" +
		"\u02F7\x05\u02F7\u29D8\n\u02F7\x03\u02F8\x03\u02F8\x03\u02F8\x05\u02F8" +
		"\u29DD\n\u02F8\x03\u02F9\x03\u02F9\x03\u02FA\x03\u02FA\x03\u02FA\x03\u02FA" +
		"\x03\u02FA\x03\u02FA\x03\u02FA\x03\u02FA\x03\u02FA\x03\u02FB\x03\u02FB" +
		"\x03\u02FB\x05\u02FB\u29ED\n\u02FB\x03\u02FC\x03\u02FC\x03\u02FC\x05\u02FC" +
		"\u29F2\n\u02FC\x03\u02FC\x03\u02FC\x03\u02FD\x03\u02FD\x03\u02FE\x03\u02FE" +
		"\x03\u02FE\x03\u02FE\x03\u02FE\x03\u02FE\x03\u02FE\x03\u02FE\x03\u02FE" +
		"\x05\u02FE\u2A01\n\u02FE\x03\u02FE\x05\u02FE\u2A04\n\u02FE\x03\u02FE\x03" +
		"\u02FE\x03\u02FF\x03\u02FF\x05\u02FF\u2A0A\n\u02FF\x03\u0300\x03\u0300" +
		"\x05\u0300\u2A0E\n\u0300\x03\u0300\x03\u0300\x03\u0300\x03\u0300\x03\u0300" +
		"\x03\u0300\x03\u0300\x05\u0300\u2A17\n\u0300\x03\u0300\x03\u0300\x03\u0300" +
		"\x03\u0300\x03\u0300\x03\u0300\x05\u0300\u2A1F\n\u0300\x03\u0300\x03\u0300" +
		"\x03\u0300\x03\u0300\x03\u0300\x03\u0300\x03\u0300\x05\u0300\u2A28\n\u0300" +
		"\x03\u0300\x03\u0300\x03\u0300\x03\u0300\x05\u0300\u2A2E\n\u0300\x03\u0301" +
		"\x03\u0301\x03\u0302\x03\u0302\x03\u0302\x06\u0302\u2A35\n\u0302\r\u0302" +
		"\x0E\u0302\u2A36\x05\u0302\u2A39\n\u0302\x03\u0303\x03\u0303\x03\u0303" +
		"\x05\u0303\u2A3E\n\u0303\x03\u0304\x03\u0304\x03\u0304\x03\u0304\x03\u0305" +
		"\x03\u0305\x03\u0305\x07\u0305\u2A47\n\u0305\f\u0305\x0E\u0305\u2A4A\v" +
		"\u0305\x03\u0306\x03\u0306\x03\u0306\x03\u0306\x03\u0306\x03\u0307\x03" +
		"\u0307\x03\u0307\x05\u0307\u2A54\n\u0307\x03\u0308\x03\u0308\x03\u0308" +
		"\x03\u0308\x03\u0308\x03\u0308\x03\u0308\x03\u0309\x03\u0309\x03\u0309" +
		"\x03\u030A\x03\u030A\x03\u030A\x03\u030A\x03\u030A\x03\u030A\x03\u030A" +
		"\x03\u030A\x03\u030A\x05\u030A\u2A69\n\u030A\x03\u030A\x03\u030A\x03\u030B" +
		"\x03\u030B\x03\u030B\x05\u030B\u2A70\n\u030B\x03\u030C\x03\u030C\x03\u030C" +
		"\x07\u030C\u2A75\n\u030C\f\u030C\x0E\u030C\u2A78\v\u030C\x03\u030D\x03" +
		"\u030D\x03\u030D\x05\u030D\u2A7D\n\u030D\x03\u030D\x05\u030D\u2A80\n\u030D" +
		"\x03\u030E\x03\u030E\x03\u030E\x03\u030E\x03\u030E\x03\u030E\x03\u030E" +
		"\x03\u030E\x03\u030E\x05\u030E\u2A8B\n\u030E\x03\u030E\x03\u030E\x03\u030E" +
		"\x03\u030E\x03\u030E\x05\u030E\u2A92\n\u030E\x05\u030E\u2A94\n\u030E\x03" +
		"\u030E\x03\u030E\x03\u030F\x03\u030F\x03\u030F\x03\u030F\x03\u030F\x05" +
		"\u030F\u2A9D\n\u030F\x03\u0310\x03\u0310\x03\u0310\x07\u0310\u2AA2\n\u0310" +
		"\f\u0310\x0E\u0310\u2AA5\v\u0310\x03\u0311\x03\u0311\x03\u0311\x05\u0311" +
		"\u2AAA\n\u0311\x03\u0312\x03\u0312\x03\u0312\x03\u0312\x05\u0312\u2AB0" +
		"\n\u0312\x03\u0313\x03\u0313\x05\u0313\u2AB4\n\u0313\x03\u0314\x03\u0314" +
		"\x05\u0314\u2AB8\n\u0314\x03\u0314\x03\u0314\x03\u0314\x03\u0314\x03\u0314" +
		"\x03\u0314\x03\u0315\x03\u0315\x03\u0316\x03\u0316\x03\u0316\x05\u0316" +
		"\u2AC5\n\u0316\x03\u0317\x03\u0317\x03\u0317\x03\u0317\x03\u0317\x03\u0317" +
		"\x03\u0317\x03\u0317\x03\u0317\x03\u0317\x03\u0317\x03\u0317\x03\u0317" +
		"\x05\u0317\u2AD4\n\u0317\x05\u0317\u2AD6\n\u0317\x03\u0318\x03\u0318\x05" +
		"\u0318\u2ADA\n\u0318\x03\u0318\x03\u0318\x03\u0318\x03\u0319\x03\u0319" +
		"\x03\u0319\x03\u0319\x03\u031A\x03\u031A\x03\u031A\x03\u031B\x03\u031B" +
		"\x05\u031B\u2AE8\n\u031B\x03\u031B\x03\u031B\x03\u031C\x03\u031C\x05\u031C" +
		"\u2AEE\n\u031C\x03\u031C\x03\u031C\x03\u031D\x03\u031D\x05\u031D\u2AF4" +
		"\n\u031D\x03\u031D\x03\u031D\x03\u031E\x03\u031E\x03\u031E\x03\u031E\x03" +
		"\u031E\x03\u031E\x03\u031E\x03\u031E\x03\u031E\x05\u031E\u2B01\n\u031E" +
		"\x03\u031E\x05\u031E\u2B04\n\u031E\x03\u031F\x03\u031F\x05\u031F\u2B08" +
		"\n\u031F\x03\u0320\x03\u0320\x03\u0320\x05\u0320\u2B0D\n\u0320\x03\u0321" +
		"\x06\u0321\u2B10\n\u0321\r\u0321\x0E\u0321\u2B11\x03\u0322\x03\u0322\x03" +
		"\u0322\x03\u0322\x03\u0322\x03\u0323\x03\u0323\x03\u0323\x07\u0323\u2B1C" +
		"\n\u0323\f\u0323\x0E\u0323\u2B1F\v\u0323\x03\u0324\x03\u0324\x03\u0324" +
		"\x05\u0324\u2B24\n\u0324\x03\u0325\x03\u0325\x05\u0325\u2B28\n\u0325\x03" +
		"\u0326\x03\u0326\x05\u0326\u2B2C\n\u0326\x03\u0327\x03\u0327\x05\u0327" +
		"\u2B30\n\u0327\x03\u0328\x03\u0328\x03\u0328\x03\u0329\x03\u0329\x05\u0329" +
		"\u2B37\n\u0329\x03\u032A\x03\u032A\x03\u032B\x05\u032B\u2B3C\n\u032B\x03" +
		"\u032B\x05\u032B\u2B3F\n\u032B\x03\u032B\x05\u032B\u2B42\n\u032B\x03\u032B" +
		"\x05\u032B\u2B45\n\u032B\x03\u032B\x05\u032B\u2B48\n\u032B\x03\u032B\x05" +
		"\u032B\u2B4B\n\u032B\x03\u032B\x05\u032B\u2B4E\n\u032B\x03\u032C\x03\u032C" +
		"\x03\u032D\x03\u032D\x03\u032E\x03\u032E\x03\u032F\x03\u032F\x03\u0330" +
		"\x03\u0330\x05\u0330\u2B5A\n\u0330\x03\u0331\x03\u0331\x03\u0331\x03\u0331" +
		"\x03\u0331\x02\x02\x03\u04B6\u0332\x02\x02\x04\x02\x06\x02\b\x02\n\x02" +
		"\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C\x02" +
		"\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026\x02" +
		"8\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02R\x02" +
		"T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02n\x02" +
		"p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02\x86\x02" +
		"\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02\x98\x02" +
		"\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02\xAA\x02" +
		"\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02\xBC\x02" +
		"\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02\xCE\x02" +
		"\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02\xE0\x02" +
		"\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02\xF2\x02" +
		"\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102\x02\u0104" +
		"\x02\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110\x02\u0112" +
		"\x02\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E\x02\u0120" +
		"\x02\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C\x02\u012E" +
		"\x02\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A\x02\u013C" +
		"\x02\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148\x02\u014A" +
		"\x02\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156\x02\u0158" +
		"\x02\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164\x02\u0166" +
		"\x02\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172\x02\u0174" +
		"\x02\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180\x02\u0182" +
		"\x02\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E\x02\u0190" +
		"\x02\u0192\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C\x02\u019E" +
		"\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA\x02\u01AC" +
		"\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8\x02\u01BA" +
		"\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6\x02\u01C8" +
		"\x02\u01CA\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4\x02\u01D6" +
		"\x02\u01D8\x02\u01DA\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2\x02\u01E4" +
		"\x02\u01E6\x02\u01E8\x02\u01EA\x02\u01EC\x02\u01EE\x02\u01F0\x02\u01F2" +
		"\x02\u01F4\x02\u01F6\x02\u01F8\x02\u01FA\x02\u01FC\x02\u01FE\x02\u0200" +
		"\x02\u0202\x02\u0204\x02\u0206\x02\u0208\x02\u020A\x02\u020C\x02\u020E" +
		"\x02\u0210\x02\u0212\x02\u0214\x02\u0216\x02\u0218\x02\u021A\x02\u021C" +
		"\x02\u021E\x02\u0220\x02\u0222\x02\u0224\x02\u0226\x02\u0228\x02\u022A" +
		"\x02\u022C\x02\u022E\x02\u0230\x02\u0232\x02\u0234\x02\u0236\x02\u0238" +
		"\x02\u023A\x02\u023C\x02\u023E\x02\u0240\x02\u0242\x02\u0244\x02\u0246" +
		"\x02\u0248\x02\u024A\x02\u024C\x02\u024E\x02\u0250\x02\u0252\x02\u0254" +
		"\x02\u0256\x02\u0258\x02\u025A\x02\u025C\x02\u025E\x02\u0260\x02\u0262" +
		"\x02\u0264\x02\u0266\x02\u0268\x02\u026A\x02\u026C\x02\u026E\x02\u0270" +
		"\x02\u0272\x02\u0274\x02\u0276\x02\u0278\x02\u027A\x02\u027C\x02\u027E" +
		"\x02\u0280\x02\u0282\x02\u0284\x02\u0286\x02\u0288\x02\u028A\x02\u028C" +
		"\x02\u028E\x02\u0290\x02\u0292\x02\u0294\x02\u0296\x02\u0298\x02\u029A" +
		"\x02\u029C\x02\u029E\x02\u02A0\x02\u02A2\x02\u02A4\x02\u02A6\x02\u02A8" +
		"\x02\u02AA\x02\u02AC\x02\u02AE\x02\u02B0\x02\u02B2\x02\u02B4\x02\u02B6" +
		"\x02\u02B8\x02\u02BA\x02\u02BC\x02\u02BE\x02\u02C0\x02\u02C2\x02\u02C4" +
		"\x02\u02C6\x02\u02C8\x02\u02CA\x02\u02CC\x02\u02CE\x02\u02D0\x02\u02D2" +
		"\x02\u02D4\x02\u02D6\x02\u02D8\x02\u02DA\x02\u02DC\x02\u02DE\x02\u02E0" +
		"\x02\u02E2\x02\u02E4\x02\u02E6\x02\u02E8\x02\u02EA\x02\u02EC\x02\u02EE" +
		"\x02\u02F0\x02\u02F2\x02\u02F4\x02\u02F6\x02\u02F8\x02\u02FA\x02\u02FC" +
		"\x02\u02FE\x02\u0300\x02\u0302\x02\u0304\x02\u0306\x02\u0308\x02\u030A" +
		"\x02\u030C\x02\u030E\x02\u0310\x02\u0312\x02\u0314\x02\u0316\x02\u0318" +
		"\x02\u031A\x02\u031C\x02\u031E\x02\u0320\x02\u0322\x02\u0324\x02\u0326" +
		"\x02\u0328\x02\u032A\x02\u032C\x02\u032E\x02\u0330\x02\u0332\x02\u0334" +
		"\x02\u0336\x02\u0338\x02\u033A\x02\u033C\x02\u033E\x02\u0340\x02\u0342" +
		"\x02\u0344\x02\u0346\x02\u0348\x02\u034A\x02\u034C\x02\u034E\x02\u0350" +
		"\x02\u0352\x02\u0354\x02\u0356\x02\u0358\x02\u035A\x02\u035C\x02\u035E" +
		"\x02\u0360\x02\u0362\x02\u0364\x02\u0366\x02\u0368\x02\u036A\x02\u036C" +
		"\x02\u036E\x02\u0370\x02\u0372\x02\u0374\x02\u0376\x02\u0378\x02\u037A" +
		"\x02\u037C\x02\u037E\x02\u0380\x02\u0382\x02\u0384\x02\u0386\x02\u0388" +
		"\x02\u038A\x02\u038C\x02\u038E\x02\u0390\x02\u0392\x02\u0394\x02\u0396" +
		"\x02\u0398\x02\u039A\x02\u039C\x02\u039E\x02\u03A0\x02\u03A2\x02\u03A4" +
		"\x02\u03A6\x02\u03A8\x02\u03AA\x02\u03AC\x02\u03AE\x02\u03B0\x02\u03B2" +
		"\x02\u03B4\x02\u03B6\x02\u03B8\x02\u03BA\x02\u03BC\x02\u03BE\x02\u03C0" +
		"\x02\u03C2\x02\u03C4\x02\u03C6\x02\u03C8\x02\u03CA\x02\u03CC\x02\u03CE" +
		"\x02\u03D0\x02\u03D2\x02\u03D4\x02\u03D6\x02\u03D8\x02\u03DA\x02\u03DC" +
		"\x02\u03DE\x02\u03E0\x02\u03E2\x02\u03E4\x02\u03E6\x02\u03E8\x02\u03EA" +
		"\x02\u03EC\x02\u03EE\x02\u03F0\x02\u03F2\x02\u03F4\x02\u03F6\x02\u03F8" +
		"\x02\u03FA\x02\u03FC\x02\u03FE\x02\u0400\x02\u0402\x02\u0404\x02\u0406" +
		"\x02\u0408\x02\u040A\x02\u040C\x02\u040E\x02\u0410\x02\u0412\x02\u0414" +
		"\x02\u0416\x02\u0418\x02\u041A\x02\u041C\x02\u041E\x02\u0420\x02\u0422" +
		"\x02\u0424\x02\u0426\x02\u0428\x02\u042A\x02\u042C\x02\u042E\x02\u0430" +
		"\x02\u0432\x02\u0434\x02\u0436\x02\u0438\x02\u043A\x02\u043C\x02\u043E" +
		"\x02\u0440\x02\u0442\x02\u0444\x02\u0446\x02\u0448\x02\u044A\x02\u044C" +
		"\x02\u044E\x02\u0450\x02\u0452\x02\u0454\x02\u0456\x02\u0458\x02\u045A" +
		"\x02\u045C\x02\u045E\x02\u0460\x02\u0462\x02\u0464\x02\u0466\x02\u0468" +
		"\x02\u046A\x02\u046C\x02\u046E\x02\u0470\x02\u0472\x02\u0474\x02\u0476" +
		"\x02\u0478\x02\u047A\x02\u047C\x02\u047E\x02\u0480\x02\u0482\x02\u0484" +
		"\x02\u0486\x02\u0488\x02\u048A\x02\u048C\x02\u048E\x02\u0490\x02\u0492" +
		"\x02\u0494\x02\u0496\x02\u0498\x02\u049A\x02\u049C\x02\u049E\x02\u04A0" +
		"\x02\u04A2\x02\u04A4\x02\u04A6\x02\u04A8\x02\u04AA\x02\u04AC\x02\u04AE" +
		"\x02\u04B0\x02\u04B2\x02\u04B4\x02\u04B6\x02\u04B8\x02\u04BA\x02\u04BC" +
		"\x02\u04BE\x02\u04C0\x02\u04C2\x02\u04C4\x02\u04C6\x02\u04C8\x02\u04CA" +
		"\x02\u04CC\x02\u04CE\x02\u04D0\x02\u04D2\x02\u04D4\x02\u04D6\x02\u04D8" +
		"\x02\u04DA\x02\u04DC\x02\u04DE\x02\u04E0\x02\u04E2\x02\u04E4\x02\u04E6" +
		"\x02\u04E8\x02\u04EA\x02\u04EC\x02\u04EE\x02\u04F0\x02\u04F2\x02\u04F4" +
		"\x02\u04F6\x02\u04F8\x02\u04FA\x02\u04FC\x02\u04FE\x02\u0500\x02\u0502" +
		"\x02\u0504\x02\u0506\x02\u0508\x02\u050A\x02\u050C\x02\u050E\x02\u0510" +
		"\x02\u0512\x02\u0514\x02\u0516\x02\u0518\x02\u051A\x02\u051C\x02\u051E" +
		"\x02\u0520\x02\u0522\x02\u0524\x02\u0526\x02\u0528\x02\u052A\x02\u052C" +
		"\x02\u052E\x02\u0530\x02\u0532\x02\u0534\x02\u0536\x02\u0538\x02\u053A" +
		"\x02\u053C\x02\u053E\x02\u0540\x02\u0542\x02\u0544\x02\u0546\x02\u0548" +
		"\x02\u054A\x02\u054C\x02\u054E\x02\u0550\x02\u0552\x02\u0554\x02\u0556" +
		"\x02\u0558\x02\u055A\x02\u055C\x02\u055E\x02\u0560\x02\u0562\x02\u0564" +
		"\x02\u0566\x02\u0568\x02\u056A\x02\u056C\x02\u056E\x02\u0570\x02\u0572" +
		"\x02\u0574\x02\u0576\x02\u0578\x02\u057A\x02\u057C\x02\u057E\x02\u0580" +
		"\x02\u0582\x02\u0584\x02\u0586\x02\u0588\x02\u058A\x02\u058C\x02\u058E" +
		"\x02\u0590\x02\u0592\x02\u0594\x02\u0596\x02\u0598\x02\u059A\x02\u059C" +
		"\x02\u059E\x02\u05A0\x02\u05A2\x02\u05A4\x02\u05A6\x02\u05A8\x02\u05AA" +
		"\x02\u05AC\x02\u05AE\x02\u05B0\x02\u05B2\x02\u05B4\x02\u05B6\x02\u05B8" +
		"\x02\u05BA\x02\u05BC\x02\u05BE\x02\u05C0\x02\u05C2\x02\u05C4\x02\u05C6" +
		"\x02\u05C8\x02\u05CA\x02\u05CC\x02\u05CE\x02\u05D0\x02\u05D2\x02\u05D4" +
		"\x02\u05D6\x02\u05D8\x02\u05DA\x02\u05DC\x02\u05DE\x02\u05E0\x02\u05E2" +
		"\x02\u05E4\x02\u05E6\x02\u05E8\x02\u05EA\x02\u05EC\x02\u05EE\x02\u05F0" +
		"\x02\u05F2\x02\u05F4\x02\u05F6\x02\u05F8\x02\u05FA\x02\u05FC\x02\u05FE" +
		"\x02\u0600\x02\u0602\x02\u0604\x02\u0606\x02\u0608\x02\u060A\x02\u060C" +
		"\x02\u060E\x02\u0610\x02\u0612\x02\u0614\x02\u0616\x02\u0618\x02\u061A" +
		"\x02\u061C\x02\u061E\x02\u0620\x02\u0622";
	private static readonly _serializedATNSegment5: string =
		"\x02\u0624\x02\u0626\x02\u0628\x02\u062A\x02\u062C\x02\u062E\x02\u0630" +
		"\x02\u0632\x02\u0634\x02\u0636\x02\u0638\x02\u063A\x02\u063C\x02\u063E" +
		"\x02\u0640\x02\u0642\x02\u0644\x02\u0646\x02\u0648\x02\u064A\x02\u064C" +
		"\x02\u064E\x02\u0650\x02\u0652\x02\u0654\x02\u0656\x02\u0658\x02\u065A" +
		"\x02\u065C\x02\u065E\x02\u0660\x02\x02N\x04\x02\xC5\xC5\u016E\u016E\x03" +
		"\x02\xE6\xE7\x03\x02\xEE\xEF\x03\x02\xEC\xED\x03\x02\xEA\xEB\x03\x02\xE8" +
		"\xE9\x04\x02DD\u0140\u0140\x04\x02ee\u0140\u0140\x05\x02DDee\u0140\u0140" +
		"\x04\x02\x87\x87\xC1\xC1\x04\x02\u0100\u0100\u014E\u014E\x04\x02\f\f`" +
		"`\x04\x02\xA4\xA4\u016D\u016D\x04\x02\xB6\xB6\xDF\xDF\x07\x02  \u0122" +
		"\u0122\u014B\u014B\u0162\u0162\u0164\u0164\x04\x02\x98\x98\u013D\u013D" +
		"\x04\x02BB``\x04\x02\u0162\u0162\u0164\u0164\x04\x02\xCA\xCA\xE2\xE2\v" +
		"\x02  \xA2\xA2\xA7\xA7\xB5\xB5\xDD\xDD\xE5\xE5\u0158\u0158\u015B\u015B" +
		"\u01B8\u01B8\x05\x02ss\u011E\u011E\u0152\u0152\x04\x0277PP\x05\x02\xAF" +
		"\xAF\u0106\u0106\u0108\u0108\x07\x02  ZZ\xB8\xB8\xF3\xF3\u0173\u0173\x04" +
		"\x02^^\xE4\xE4\x04\x02\u0157\u0157\u01A0\u01A0\x03\x02\u01C2\u01C3\x04" +
		"\x02^^\u01A0\u01A0\x04\x02\xD5\xD5\u012A\u012A\x05\x02\u0143\u0143\u0167" +
		"\u0167\u01BF\u01BF\x04\x02BBFF\f\x0200ZZ\xB8\xB8\xCC\xCC\xF3\xF3\u0162" +
		"\u0162\u0164\u0164\u0167\u0168\u0173\u0173\u020B\u020D\x07\x02\xD6\xD6" +
		"\u014B\u014B\u0160\u0160\u016B\u016B\u01C9\u01CA\x04\x02\'\'99\x04\x02" +
		"\f\f77\x05\x02\xD5\xD5\u012A\u012A\u01BC\u01BC\x05\x02\xB1\xB1\u0145\u0145" +
		"\u015F\u015F\x06\x02ZZ\xB8\xB8\xF3\xF3\u0173\u0173\x04\x02\x8B\x8B\xF4" +
		"\xF4\x04\x02\u0166\u0166\u017E\u017E\x04\x02\x99\x99\u0100\u0100\x04\x02" +
		"\u013B\u013B\u014F\u014F\x03\x02!\"\x04\x02ee\u015F\u015F\x04\x02\xCB" +
		"\xCB\u0150\u0150\x04\x02\xD7\xD7\u0100\u0100\x04\x02  ::\x04\x02\u0142" +
		"\u0142\u01A0\u01A0\x04\x02\xD1\xD1\u010E\u010E\x06\x02ssuuyy\x80\x80\x04" +
		"\x02\u016A\u016A\u01DF\u01DF\x04\x02\u0189\u018A\u0198\u0198\x03\x02\u0189" +
		"\u018A\x03\x02\u01A4\u01A5\x03\x02\x14\x15\x04\x02ww||\x07\x02\f\f\x12" +
		"\x13\x17\x17\x19\x19\x1B\x1B\x03\x02\x0E\x0F\x05\x02\v\v\x10\x10\x1D\x1D" +
		"\x05\x02))KKaa\x04\x02\xA8\xA8\xBE\xBE\x04\x02\u0132\u0132\u01C4\u01C4" +
		"\x04\x02\xD2\xD2\u0123\u0123\x05\x02  $$\\\\\b\x02\v\f\x0E\x13\x17\x17" +
		"\x19\x19\x1B\x1B\x1D\x1D\x04\x02\x16\x16\x18\x18\x03\x02\u01E5\u01E8\v" +
		"\x02~~\x83\xE6\xF0\u0184\u01B3\u01C6\u01C9\u01D7\u01D9\u01D9\u01DB\u01DB" +
		"\u01DD\u01DD\u01E0\u01EA\x05\x02l}\x7F\x82\u01DA\u01DA\x06\x02 68HJk\u01C8" +
		"\u01C8\x04\x02@@vv\x04\x02\f\f\x16\x16\x04\x02\xA9\xA9\u01FD\u01FD\x03" +
		"\x02\u0202\u0207\x04\x02\x92\x92\xD4\xD4&\x02##%%-/77;;??^^vv}}\x84\x84" +
		"\x92\x92\x9B\x9B\x9F\x9F\xA3\xA3\xA9\xA9\xAE\xAE\xD1\xD1\xD4\xD4\xF3\xF3" +
		"\xFB\xFB\u010B\u010B\u010E\u010F\u0119\u0119\u0127\u0127\u0135\u0135\u013B" +
		"\u013B\u0141\u0141\u0145\u0146\u014F\u014F\u016A\u016A\u01B3\u01B4\u01DF" +
		"\u01DF\u01EC\u01F8\u01FA\u01FA\u01FC\u0208\u020A\u020A\x02\u2FE7\x02\u0662" +
		"\x03\x02\x02\x02\x04\u0664\x03\x02\x02\x02\x06\u066C\x03\x02\x02\x02\b" +
		"\u06EB\x03\x02\x02\x02\n\u06ED\x03\x02\x02\x02\f\u06F1\x03\x02\x02\x02" +
		"\x0E\u06F4\x03\x02\x02\x02\x10\u06FC\x03\x02\x02\x02\x12\u0701\x03\x02" +
		"\x02\x02\x14\u0707\x03\x02\x02\x02\x16\u0720\x03\x02\x02\x02\x18\u072C" +
		"\x03\x02\x02\x02\x1A\u072E\x03\x02\x02\x02\x1C\u0736\x03\x02\x02\x02\x1E" +
		"\u0742\x03\x02\x02\x02 \u0744\x03\x02\x02\x02\"\u074D\x03\x02\x02\x02" +
		"$\u0755\x03\x02\x02\x02&\u075D\x03\x02\x02\x02(\u0764\x03\x02\x02\x02" +
		"*\u0766\x03\x02\x02\x02,\u0777\x03\x02\x02\x02.\u077C\x03\x02\x02\x02" +
		"0\u0785\x03\x02\x02\x022\u0787\x03\x02\x02\x024\u0795\x03\x02\x02\x02" +
		"6\u0797\x03\x02\x02\x028\u07B6\x03\x02\x02\x02:\u07B8\x03\x02\x02\x02" +
		"<\u07C0\x03\x02\x02\x02>\u07CA\x03\x02\x02\x02@\u07D1\x03\x02\x02\x02" +
		"B\u07D7\x03\x02\x02\x02D\u07E9\x03\x02\x02\x02F\u07ED\x03\x02\x02\x02" +
		"H\u07F1\x03\x02\x02\x02J\u07F3\x03\x02\x02\x02L\u07FE\x03\x02\x02\x02" +
		"N\u0802\x03\x02\x02\x02P\u0807\x03\x02\x02\x02R\u080C\x03\x02\x02\x02" +
		"T\u080E\x03\x02\x02\x02V\u081A\x03\x02\x02\x02X\u0821\x03\x02\x02\x02" +
		"Z\u0823\x03\x02\x02\x02\\\u0825\x03\x02\x02\x02^\u0827\x03\x02\x02\x02" +
		"`\u089A\x03\x02\x02\x02b\u089C\x03\x02\x02\x02d\u08AC\x03\x02\x02\x02" +
		"f\u08AE\x03\x02\x02\x02h\u09DC\x03\x02\x02\x02j\u09E3\x03\x02\x02\x02" +
		"l\u09E5\x03\x02\x02\x02n\u09E7\x03\x02\x02\x02p\u09EA\x03\x02\x02\x02" +
		"r\u09F3\x03\x02\x02\x02t\u09F5\x03\x02\x02\x02v\u09F9\x03\x02\x02\x02" +
		"x\u09FC\x03\x02\x02\x02z\u0A04\x03\x02\x02\x02|\u0A10\x03\x02\x02\x02" +
		"~\u0A21\x03\x02\x02\x02\x80\u0A3D\x03\x02\x02\x02\x82\u0A3F\x03\x02\x02" +
		"\x02\x84\u0A42\x03\x02\x02\x02\x86\u0A4A\x03\x02\x02\x02\x88\u0A4F\x03" +
		"\x02\x02\x02\x8A\u0A75\x03\x02\x02\x02\x8C\u0A77\x03\x02\x02\x02\x8E\u0AA1" +
		"\x03\x02\x02\x02\x90\u0AA3\x03\x02\x02\x02\x92\u0AA5\x03\x02\x02\x02\x94" +
		"\u0AAA\x03\x02\x02\x02\x96\u0AB1\x03\x02\x02\x02\x98\u0AB6\x03\x02\x02" +
		"\x02\x9A\u0AE0\x03\x02\x02\x02\x9C\u0AE2\x03\x02\x02\x02\x9E\u0AE5\x03" +
		"\x02\x02\x02\xA0\u0AEA\x03\x02\x02\x02\xA2\u0AEC\x03\x02\x02\x02\xA4\u0AF4" +
		"\x03\x02\x02\x02\xA6\u0AFF\x03\x02\x02\x02\xA8\u0B01\x03\x02\x02\x02\xAA" +
		"\u0B09\x03\x02\x02\x02\xAC\u0B0B\x03\x02\x02\x02\xAE\u0B60\x03\x02\x02" +
		"\x02\xB0\u0B62\x03\x02\x02\x02\xB2\u0B64\x03\x02\x02\x02\xB4\u0B66\x03" +
		"\x02\x02\x02\xB6\u0B6A\x03\x02\x02\x02\xB8\u0B72\x03\x02\x02\x02\xBA\u0B7D" +
		"\x03\x02\x02\x02\xBC\u0B81\x03\x02\x02\x02\xBE\u0B83\x03\x02\x02\x02\xC0" +
		"\u0B8E\x03\x02\x02\x02\xC2\u0B98\x03\x02\x02\x02\xC4\u0BAD\x03\x02\x02" +
		"\x02\xC6\u0BE3\x03\x02\x02\x02\xC8\u0BE8\x03\x02\x02\x02\xCA\u0BED\x03" +
		"\x02\x02\x02\xCC\u0BEF\x03\x02\x02\x02\xCE\u0BF2\x03\x02\x02\x02\xD0\u0BFA" +
		"\x03\x02\x02\x02\xD2\u0BFD\x03\x02\x02\x02\xD4\u0C04\x03\x02\x02\x02\xD6" +
		"\u0C5C\x03\x02\x02\x02\xD8\u0C5E\x03\x02\x02\x02\xDA\u0C61\x03\x02\x02" +
		"\x02\xDC\u0C65\x03\x02\x02\x02\xDE\u0C6D\x03\x02\x02\x02\xE0\u0C6F\x03" +
		"\x02\x02\x02\xE2\u0C74\x03\x02\x02\x02\xE4\u0C77\x03\x02\x02\x02\xE6\u0C7F" +
		"\x03\x02\x02\x02\xE8\u0C89\x03\x02\x02\x02\xEA\u0C96\x03\x02\x02\x02\xEC" +
		"\u0C98\x03\x02\x02\x02\xEE\u0C9C\x03\x02\x02\x02\xF0\u0CA6\x03\x02\x02" +
		"\x02\xF2\u0CA8\x03\x02\x02\x02\xF4\u0CAD\x03\x02\x02\x02\xF6\u0CAF\x03" +
		"\x02\x02\x02\xF8\u0CB6\x03\x02\x02\x02\xFA\u0CD5\x03\x02\x02\x02\xFC\u0CD7" +
		"\x03\x02\x02\x02\xFE\u0CE0\x03\x02\x02\x02\u0100\u0CE2\x03\x02\x02\x02" +
		"\u0102\u0CEB\x03\x02\x02\x02\u0104\u0CEE\x03\x02\x02\x02\u0106\u0CF3\x03" +
		"\x02\x02\x02\u0108\u0CF7\x03\x02\x02\x02\u010A\u0D07\x03\x02\x02\x02\u010C" +
		"\u0D12\x03\x02\x02\x02\u010E\u0D22\x03\x02\x02\x02\u0110\u0D32\x03\x02" +
		"\x02\x02\u0112\u0D38\x03\x02\x02\x02\u0114\u0D49\x03\x02\x02\x02\u0116" +
		"\u0D56\x03\x02\x02\x02\u0118\u0D58\x03\x02\x02\x02\u011A\u0D62\x03\x02" +
		"\x02\x02\u011C\u0D70\x03\x02\x02\x02\u011E\u0D79\x03\x02\x02\x02\u0120" +
		"\u0D7B\x03\x02\x02\x02\u0122\u0D80\x03\x02\x02\x02\u0124\u0DA6\x03\x02" +
		"\x02\x02\u0126\u0DA8\x03\x02\x02\x02\u0128\u0DB0\x03\x02\x02\x02\u012A" +
		"\u0DB2\x03\x02\x02\x02\u012C\u0DBA\x03\x02\x02\x02\u012E\u0DD0\x03\x02" +
		"\x02\x02\u0130\u0DD2\x03\x02\x02\x02\u0132\u0DD6\x03\x02\x02\x02\u0134" +
		"\u0DDD\x03\x02\x02\x02\u0136\u0DDF\x03\x02\x02\x02\u0138\u0DE1\x03\x02" +
		"\x02\x02\u013A\u0DE3\x03\x02\x02\x02\u013C\u0DEE\x03\x02\x02\x02\u013E" +
		"\u0DF1\x03\x02\x02\x02\u0140\u0DF9\x03\x02\x02\x02\u0142\u0E09\x03\x02" +
		"\x02\x02\u0144\u0E13\x03\x02\x02\x02\u0146\u0E15\x03\x02\x02\x02\u0148" +
		"\u0E1E\x03\x02\x02\x02\u014A\u0E21\x03\x02\x02\x02\u014C\u0E8C\x03\x02" +
		"\x02\x02\u014E\u0E8E\x03\x02\x02\x02\u0150\u0EA1\x03\x02\x02\x02\u0152" +
		"\u0EA4\x03\x02\x02\x02\u0154\u0EA8\x03\x02\x02\x02\u0156\u0EBB\x03\x02" +
		"\x02\x02\u0158\u0EBD\x03\x02\x02\x02\u015A\u0EC2\x03\x02\x02\x02\u015C" +
		"\u0ECA\x03\x02\x02\x02\u015E\u0ECF\x03\x02\x02\x02\u0160\u0EDE\x03\x02" +
		"\x02\x02\u0162\u0EE0\x03\x02\x02\x02\u0164\u0EE3\x03\x02\x02\x02\u0166" +
		"\u0EE5\x03\x02\x02\x02\u0168\u0F0A\x03\x02\x02\x02\u016A\u0F0C\x03\x02" +
		"\x02\x02\u016C\u0F0F\x03\x02\x02\x02\u016E\u0F14\x03\x02\x02\x02\u0170" +
		"\u0F16\x03\x02\x02\x02\u0172\u0F68\x03\x02\x02\x02\u0174\u0F6A\x03\x02" +
		"\x02\x02\u0176\u0F7C\x03\x02\x02\x02\u0178\u0F7E\x03\x02\x02\x02\u017A" +
		"\u0F9A\x03\x02\x02\x02\u017C\u0F9E\x03\x02\x02\x02\u017E\u0FB2\x03\x02" +
		"\x02\x02\u0180\u0FB4\x03\x02\x02\x02\u0182\u0FBD\x03\x02\x02\x02\u0184" +
		"\u0FD1\x03\x02\x02\x02\u0186\u0FDF\x03\x02\x02\x02\u0188\u0FE4\x03\x02" +
		"\x02\x02\u018A\u0FEA\x03\x02\x02\x02\u018C\u0FED\x03\x02\x02\x02\u018E" +
		"\u0FF0\x03\x02\x02\x02\u0190\u0FF3\x03\x02\x02\x02\u0192\u0FF6\x03\x02" +
		"\x02\x02\u0194\u0FF8\x03\x02\x02\x02\u0196\u1001\x03\x02\x02\x02\u0198" +
		"\u1035\x03\x02\x02\x02\u019A\u103B\x03\x02\x02\x02\u019C\u103D\x03\x02" +
		"\x02\x02\u019E\u1043\x03\x02\x02\x02\u01A0\u1045\x03\x02\x02\x02\u01A2" +
		"\u1054\x03\x02\x02\x02\u01A4\u1056\x03\x02\x02\x02\u01A6\u105A\x03\x02" +
		"\x02\x02\u01A8\u105E\x03\x02\x02\x02\u01AA\u1065\x03\x02\x02\x02\u01AC" +
		"\u1067\x03\x02\x02\x02\u01AE\u1069\x03\x02\x02\x02\u01B0\u106B\x03\x02" +
		"\x02\x02\u01B2\u1071\x03\x02\x02\x02\u01B4\u1073\x03\x02\x02\x02\u01B6" +
		"\u1075\x03\x02\x02\x02\u01B8\u107A\x03\x02\x02\x02\u01BA\u107E\x03\x02" +
		"\x02\x02\u01BC\u108B\x03\x02\x02\x02\u01BE\u108D\x03\x02\x02\x02\u01C0" +
		"\u1093\x03\x02\x02\x02\u01C2\u10A1\x03\x02\x02\x02\u01C4\u10BD\x03\x02" +
		"\x02\x02\u01C6\u10BF\x03\x02\x02\x02\u01C8\u10C7\x03\x02\x02\x02\u01CA" +
		"\u10CD\x03\x02\x02\x02\u01CC\u10D5\x03\x02\x02\x02\u01CE\u10E1\x03\x02" +
		"\x02\x02\u01D0\u10E3\x03\x02\x02\x02\u01D2\u115E\x03\x02\x02\x02\u01D4" +
		"\u1160\x03\x02\x02\x02\u01D6\u1164\x03\x02\x02\x02\u01D8\u116C\x03\x02" +
		"\x02\x02\u01DA\u1177\x03\x02\x02\x02\u01DC\u1179\x03\x02\x02\x02\u01DE" +
		"\u117D\x03\x02\x02\x02\u01E0\u1185\x03\x02\x02\x02\u01E2\u1189\x03\x02" +
		"\x02\x02\u01E4\u118B\x03\x02\x02\x02\u01E6\u11BE\x03\x02\x02\x02\u01E8" +
		"\u11C0\x03\x02\x02\x02\u01EA\u11C4\x03\x02\x02\x02\u01EC\u11D6\x03\x02" +
		"\x02\x02\u01EE\u11FD\x03\x02\x02\x02\u01F0\u11FF\x03\x02\x02\x02\u01F2" +
		"\u1201\x03\x02\x02\x02\u01F4\u120A\x03\x02\x02\x02\u01F6\u120C\x03\x02" +
		"\x02\x02\u01F8\u120E\x03\x02\x02\x02\u01FA\u1227\x03\x02\x02\x02\u01FC" +
		"\u1229\x03\x02\x02\x02\u01FE\u123D\x03\x02\x02\x02\u0200\u1253\x03\x02" +
		"\x02\x02\u0202\u1269\x03\x02\x02\x02\u0204\u126B\x03\x02\x02\x02\u0206" +
		"\u1272\x03\x02\x02\x02\u0208\u12D3\x03\x02\x02\x02\u020A\u12EC\x03\x02" +
		"\x02\x02\u020C\u12F3\x03\x02\x02\x02\u020E\u1304\x03\x02\x02\x02\u0210" +
		"\u1306\x03\x02\x02\x02\u0212\u1308\x03\x02\x02\x02\u0214\u1310\x03\x02" +
		"\x02\x02\u0216\u1316\x03\x02\x02\x02\u0218\u131A\x03\x02\x02\x02\u021A" +
		"\u1322\x03\x02\x02\x02\u021C\u1331\x03\x02\x02\x02\u021E\u13C6\x03\x02" +
		"\x02\x02\u0220\u13CA\x03\x02\x02\x02\u0222\u143B\x03\x02\x02\x02\u0224" +
		"\u143D\x03\x02\x02\x02\u0226\u1442\x03\x02\x02\x02\u0228\u1448\x03\x02" +
		"\x02\x02\u022A\u149F\x03\x02\x02\x02\u022C\u14A1\x03\x02\x02\x02\u022E" +
		"\u14A3\x03\x02\x02\x02\u0230\u14A5\x03\x02\x02\x02\u0232\u14C3\x03\x02" +
		"\x02\x02\u0234\u14D5\x03\x02\x02\x02\u0236\u14D7\x03\x02\x02\x02\u0238" +
		"\u14DF\x03\x02\x02\x02\u023A\u14E1\x03\x02\x02\x02\u023C\u14F9\x03\x02" +
		"\x02\x02\u023E\u1535\x03\x02\x02\x02\u0240\u1537\x03\x02\x02\x02\u0242" +
		"\u1542\x03\x02\x02\x02\u0244\u1544\x03\x02\x02\x02\u0246\u1548\x03\x02" +
		"\x02\x02\u0248\u1569\x03\x02\x02\x02\u024A\u156B\x03\x02\x02\x02\u024C" +
		"\u156F\x03\x02\x02\x02\u024E\u1573\x03\x02\x02\x02\u0250\u157C\x03\x02" +
		"\x02\x02\u0252\u1588\x03\x02\x02\x02\u0254\u15A8\x03\x02\x02\x02\u0256" +
		"\u15AA\x03\x02\x02\x02\u0258\u15EB\x03\x02\x02\x02\u025A\u15ED\x03\x02" +
		"\x02\x02\u025C\u15EF\x03\x02\x02\x02\u025E\u15F1\x03\x02\x02\x02\u0260" +
		"\u15F3\x03\x02\x02\x02\u0262\u15F6\x03\x02\x02\x02\u0264\u1615\x03\x02" +
		"\x02\x02\u0266\u1622\x03\x02\x02\x02\u0268\u1624\x03\x02\x02\x02\u026A" +
		"\u1629\x03\x02\x02\x02\u026C\u1631\x03\x02\x02\x02\u026E\u1634\x03\x02" +
		"\x02\x02\u0270\u1636\x03\x02\x02\x02\u0272\u163C\x03\x02\x02\x02\u0274" +
		"\u163E\x03\x02\x02\x02\u0276\u1655\x03\x02\x02\x02\u0278\u1660\x03\x02" +
		"\x02\x02\u027A\u1663\x03\x02\x02\x02\u027C\u1669\x03\x02\x02\x02\u027E" +
		"\u1671\x03\x02\x02\x02\u0280\u1681\x03\x02\x02\x02\u0282\u1683\x03\x02" +
		"\x02\x02\u0284\u1689\x03\x02\x02\x02\u0286\u169E\x03\x02\x02\x02\u0288" +
		"\u16A7\x03\x02\x02\x02\u028A\u16A9\x03\x02\x02\x02\u028C\u16AB\x03\x02" +
		"\x02\x02\u028E\u16B9\x03\x02\x02\x02\u0290\u16BB\x03\x02\x02\x02\u0292" +
		"\u16C0\x03\x02\x02\x02\u0294\u16C2\x03\x02\x02\x02\u0296\u16D1\x03\x02" +
		"\x02\x02\u0298\u16D9\x03\x02\x02\x02\u029A\u16DC\x03\x02\x02\x02\u029C" +
		"\u16E5\x03\x02\x02\x02\u029E\u170C\x03\x02\x02\x02\u02A0\u1716\x03\x02" +
		"\x02\x02\u02A2\u171D\x03\x02\x02\x02\u02A4\u171F\x03\x02\x02\x02\u02A6" +
		"\u172B\x03\x02\x02\x02\u02A8\u172E\x03\x02\x02\x02\u02AA\u1731\x03\x02" +
		"\x02\x02\u02AC\u1739\x03\x02\x02\x02\u02AE\u1741\x03\x02\x02\x02\u02B0" +
		"\u1745\x03\x02\x02\x02\u02B2\u1771\x03\x02\x02\x02\u02B4\u1781\x03\x02" +
		"\x02\x02\u02B6\u1791\x03\x02\x02\x02\u02B8\u17A9\x03\x02\x02\x02\u02BA" +
		"\u17B0\x03\x02\x02\x02\u02BC\u17B5\x03\x02\x02\x02\u02BE\u17BD\x03\x02" +
		"\x02\x02\u02C0\u17C0\x03\x02\x02\x02\u02C2\u17C4\x03\x02\x02\x02\u02C4" +
		"\u17CB\x03\x02\x02\x02\u02C6\u17F2\x03\x02\x02\x02\u02C8\u17F8\x03\x02" +
		"\x02\x02\u02CA\u17FA\x03\x02\x02\x02\u02CC\u1807\x03\x02\x02\x02\u02CE" +
		"\u180A\x03\x02\x02\x02\u02D0\u1839\x03\x02\x02\x02\u02D2\u183B\x03\x02" +
		"\x02\x02\u02D4\u1869\x03\x02\x02\x02\u02D6\u186B\x03\x02\x02\x02\u02D8" +
		"\u186D\x03\x02\x02\x02\u02DA\u186F\x03\x02\x02\x02\u02DC\u1877\x03\x02" +
		"\x02\x02\u02DE\u1885\x03\x02\x02\x02\u02E0\u1A6E\x03\x02\x02\x02\u02E2" +
		"\u1A70\x03\x02\x02\x02\u02E4\u1A72\x03\x02\x02\x02\u02E6\u1ABA\x03\x02" +
		"\x02\x02\u02E8\u1ABC\x03\x02\x02\x02\u02EA\u1B97\x03\x02\x02\x02\u02EC" +
		"\u1B99\x03\x02\x02\x02\u02EE\u1BA1\x03\x02\x02\x02\u02F0\u1BB1\x03\x02" +
		"\x02\x02\u02F2\u1BB8\x03\x02\x02\x02\u02F4\u1BBA\x03\x02\x02\x02\u02F6" +
		"\u1C7B\x03\x02\x02\x02\u02F8\u1C7D\x03\x02\x02\x02\u02FA\u1C86\x03\x02" +
		"\x02\x02\u02FC\u1C8E\x03\x02\x02\x02\u02FE\u1CAB\x03\x02\x02\x02\u0300" +
		"\u1CAD\x03\x02\x02\x02\u0302\u1CB7\x03\x02\x02\x02\u0304\u1CBF\x03\x02" +
		"\x02\x02\u0306\u1CE8\x03\x02\x02\x02\u0308\u1CF8\x03\x02\x02\x02\u030A" +
		"\u1CFA\x03\x02\x02\x02\u030C\u1D14\x03\x02\x02\x02\u030E\u1D17\x03\x02" +
		"\x02\x02\u0310\u1D27\x03\x02\x02\x02\u0312\u1D29\x03\x02\x02\x02\u0314" +
		"\u1D2B\x03\x02\x02\x02\u0316\u1D2D\x03\x02\x02\x02\u0318\u1D2F\x03\x02" +
		"\x02\x02\u031A\u1D34\x03\x02\x02\x02\u031C\u1D37\x03\x02\x02\x02\u031E" +
		"\u1D3E\x03\x02\x02\x02\u0320\u1D85\x03\x02\x02\x02\u0322\u1D87\x03\x02" +
		"\x02\x02\u0324\u1D93\x03\x02\x02\x02\u0326\u1D95\x03\x02\x02\x02\u0328" +
		"\u1D9F\x03\x02\x02\x02\u032A\u1DA1\x03\x02\x02\x02\u032C\u1DA7\x03\x02" +
		"\x02\x02\u032E\u1DC7\x03\x02\x02\x02\u0330\u1DCE\x03\x02\x02\x02\u0332" +
		"\u1DD1\x03\x02\x02\x02\u0334\u1DDA\x03\x02\x02\x02\u0336\u1DDD\x03\x02" +
		"\x02\x02\u0338\u1DE1\x03\x02\x02\x02\u033A\u1DF2\x03\x02\x02\x02\u033C" +
		"\u1DF4\x03\x02\x02\x02\u033E\u1DF6\x03\x02\x02\x02\u0340\u1E05\x03\x02" +
		"\x02\x02\u0342\u1E0A\x03\x02\x02\x02\u0344\u1E1A\x03\x02\x02\x02\u0346" +
		"\u1E22\x03\x02\x02\x02\u0348\u1E24\x03\x02\x02\x02\u034A\u1E2A\x03\x02" +
		"\x02\x02\u034C\u1E2F\x03\x02\x02\x02\u034E\u1E38\x03\x02\x02\x02\u0350" +
		"\u1E53\x03\x02\x02\x02\u0352\u1E55\x03\x02\x02\x02\u0354\u1EA4\x03\x02" +
		"\x02\x02\u0356\u1EA6\x03\x02\x02\x02\u0358\u1EA8\x03\x02\x02\x02\u035A" +
		"\u1EC9\x03\x02\x02\x02\u035C\u1ECB\x03\x02\x02\x02\u035E\u1EE5\x03\x02" +
		"\x02\x02\u0360\u1EF5\x03\x02\x02\x02\u0362\u1EF7\x03\x02\x02\x02\u0364" +
		"\u1EFF\x03\x02\x02\x02\u0366\u1F01\x03\x02\x02\x02\u0368\u1F07\x03\x02" +
		"\x02\x02\u036A\u1F0B\x03\x02\x02\x02\u036C\u1F0D\x03\x02\x02\x02\u036E" +
		"\u1F0F\x03\x02\x02\x02\u0370\u1F11\x03\x02\x02\x02\u0372\u1F13\x03\x02" +
		"\x02\x02\u0374\u1F15\x03\x02\x02\x02\u0376\u1F19\x03\x02\x02\x02\u0378" +
		"\u1F1D\x03\x02\x02\x02\u037A\u1F25\x03\x02\x02\x02\u037C\u1F39\x03\x02" +
		"\x02\x02\u037E\u1F44\x03\x02\x02\x02\u0380\u1F46\x03\x02\x02\x02\u0382" +
		"\u1F4E\x03\x02\x02\x02\u0384\u1F54\x03\x02\x02\x02\u0386\u1F58\x03\x02" +
		"\x02\x02\u0388\u1F5A\x03\x02\x02\x02\u038A\u1F62\x03\x02\x02\x02\u038C" +
		"\u1F6A\x03\x02\x02\x02\u038E\u1F92\x03\x02\x02\x02\u0390\u1F94\x03\x02" +
		"\x02\x02\u0392\u1FA2\x03\x02\x02\x02\u0394\u1FA5\x03\x02\x02\x02\u0396" +
		"\u1FB1\x03\x02\x02\x02\u0398\u1FC9\x03\x02\x02\x02\u039A\u1FCB\x03\x02" +
		"\x02\x02\u039C\u1FCD\x03\x02\x02\x02\u039E\u1FD5\x03\x02\x02\x02\u03A0" +
		"\u1FD8\x03\x02\x02\x02\u03A2\u1FF0\x03\x02\x02\x02\u03A4\u1FF2\x03\x02" +
		"\x02\x02\u03A6\u1FF6\x03\x02\x02\x02\u03A8\u2004\x03\x02\x02\x02\u03AA" +
		"\u2007\x03\x02\x02\x02\u03AC\u2012\x03\x02\x02\x02\u03AE\u2022\x03\x02" +
		"\x02\x02\u03B0\u2024\x03\x02\x02\x02\u03B2\u2029\x03\x02\x02\x02\u03B4" +
		"\u202C\x03\x02\x02\x02\u03B6\u203B\x03\x02\x02\x02\u03B8\u204D\x03\x02" +
		"\x02\x02\u03BA\u204F\x03\x02\x02\x02\u03BC\u2052\x03\x02\x02\x02\u03BE" +
		"\u205A\x03\x02\x02\x02\u03C0\u2062\x03\x02\x02\x02\u03C2\u206B\x03\x02" +
		"\x02\x02\u03C4\u2073\x03\x02\x02\x02\u03C6\u2077\x03\x02\x02\x02\u03C8" +
		"\u2081\x03\x02\x02\x02\u03CA\u20A0\x03\x02\x02\x02\u03CC\u20A4\x03\x02" +
		"\x02\x02\u03CE\u20D3\x03\x02\x02\x02\u03D0\u20E2\x03\x02\x02\x02\u03D2" +
		"\u20E4\x03\x02\x02\x02\u03D4\u20E8\x03\x02\x02\x02\u03D6\u20EE\x03\x02" +
		"\x02\x02\u03D8\u20F6\x03\x02\x02\x02\u03DA\u2105\x03\x02\x02\x02\u03DC" +
		"\u2107\x03\x02\x02\x02\u03DE\u2109\x03\x02\x02\x02\u03E0\u2112\x03\x02" +
		"\x02\x02\u03E2\u2124\x03\x02\x02\x02\u03E4\u2126\x03\x02\x02\x02\u03E6" +
		"\u2128\x03\x02\x02\x02\u03E8\u212A\x03\x02\x02\x02\u03EA\u2132\x03\x02" +
		"\x02\x02\u03EC\u2134\x03\x02\x02\x02\u03EE\u2136\x03\x02\x02\x02\u03F0" +
		"\u213A\x03\x02\x02\x02\u03F2\u2142\x03\x02\x02\x02\u03F4\u2153\x03\x02" +
		"\x02\x02\u03F6\u2155\x03\x02\x02\x02\u03F8\u216E\x03\x02\x02\x02\u03FA" +
		"\u2170\x03\x02\x02\x02\u03FC\u2179\x03\x02\x02\x02\u03FE\u217B\x03\x02" +
		"\x02\x02\u0400\u2182\x03\x02\x02\x02\u0402\u2186\x03\x02\x02\x02\u0404" +
		"\u2188\x03\x02\x02\x02\u0406\u218A\x03\x02\x02\x02\u0408\u218C\x03\x02" +
		"\x02\x02\u040A\u2190\x03\x02\x02\x02\u040C\u219D\x03\x02\x02\x02\u040E" +
		"\u219F\x03\x02\x02\x02\u0410\u21A2\x03\x02\x02\x02\u0412\u21A7\x03\x02" +
		"\x02\x02\u0414\u21AC\x03\x02\x02\x02\u0416\u21B2\x03\x02\x02\x02\u0418" +
		"\u21B9\x03\x02\x02\x02\u041A\u21BB\x03\x02\x02\x02\u041C\u21BE\x03\x02" +
		"\x02\x02\u041E\u21C2\x03\x02\x02\x02\u0420\u21C9\x03\x02\x02\x02\u0422" +
		"\u21D5\x03\x02\x02\x02\u0424\u21D8\x03\x02\x02\x02\u0426\u21E6\x03\x02" +
		"\x02\x02\u0428\u21E9\x03\x02\x02\x02\u042A\u222B\x03\x02\x02\x02\u042C" +
		"\u2243\x03\x02\x02\x02\u042E\u224C\x03\x02\x02\x02\u0430\u225A\x03\x02" +
		"\x02\x02\u0432\u225C\x03\x02\x02\x02\u0434\u2267\x03\x02\x02\x02\u0436" +
		"\u2278\x03\x02\x02\x02\u0438\u227A\x03\x02\x02\x02\u043A\u2282\x03\x02" +
		"\x02\x02\u043C\u2289\x03\x02\x02\x02\u043E\u2291\x03\x02\x02\x02\u0440" +
		"\u22A2\x03\x02\x02\x02\u0442\u22A4\x03\x02\x02\x02\u0444\u22A8\x03\x02" +
		"\x02\x02\u0446\u22B0\x03\x02\x02\x02\u0448\u22B5\x03\x02\x02\x02\u044A" +
		"\u22B8\x03\x02\x02\x02\u044C\u22BB\x03\x02\x02\x02\u044E\u22C2\x03\x02" +
		"\x02\x02\u0450\u22C4\x03\x02\x02\x02\u0452\u22CC\x03\x02\x02\x02\u0454" +
		"\u22D1\x03\x02\x02\x02\u0456\u22E6\x03\x02\x02\x02\u0458\u22EE\x03\x02" +
		"\x02\x02\u045A\u22F8\x03\x02\x02\x02\u045C\u2304\x03\x02\x02\x02\u045E" +
		"\u2306\x03\x02\x02\x02\u0460\u2314\x03\x02\x02\x02\u0462\u2328\x03\x02" +
		"\x02\x02\u0464\u2331\x03\x02\x02\x02\u0466\u2343\x03\x02\x02\x02\u0468" +
		"\u2349\x03\x02\x02\x02\u046A\u234B\x03\x02\x02\x02\u046C\u2352\x03\x02" +
		"\x02\x02\u046E\u236E\x03\x02\x02\x02\u0470\u2370\x03\x02\x02\x02\u0472" +
		"\u2376\x03\x02\x02\x02\u0474\u237A\x03\x02\x02\x02\u0476\u237C\x03\x02" +
		"\x02\x02\u0478\u2384\x03\x02\x02\x02\u047A\u2388\x03\x02\x02\x02\u047C" +
		"\u238F\x03\x02\x02\x02\u047E\u23A0\x03\x02\x02\x02\u0480\u23A2\x03\x02" +
		"\x02\x02\u0482\u23A4\x03\x02\x02\x02\u0484\u23AE\x03\x02\x02\x02\u0486" +
		"\u23B6\x03\x02\x02\x02\u0488\u23D1\x03\x02\x02\x02\u048A\u23D3\x03\x02" +
		"\x02\x02\u048C\u23DA\x03\x02\x02\x02\u048E\u23DD\x03\x02\x02\x02\u0490" +
		"\u23DF\x03\x02\x02\x02\u0492\u23E3\x03\x02\x02\x02\u0494\u23EB\x03\x02" +
		"\x02\x02\u0496\u23F3\x03\x02\x02\x02\u0498\u23FB\x03\x02\x02\x02\u049A" +
		"\u2404\x03\x02\x02\x02\u049C\u2408\x03\x02\x02\x02\u049E\u240C\x03\x02" +
		"\x02\x02\u04A0\u2426\x03\x02\x02\x02\u04A2\u2434\x03\x02\x02\x02\u04A4" +
		"\u2448\x03\x02\x02\x02\u04A6\u2452\x03\x02\x02\x02\u04A8\u2456\x03\x02" +
		"\x02\x02\u04AA\u245E\x03\x02\x02\x02\u04AC\u2466\x03\x02\x02\x02\u04AE" +
		"\u246C\x03\x02\x02\x02\u04B0\u2470\x03\x02\x02\x02\u04B2\u2477\x03\x02" +
		"\x02\x02\u04B4\u247C\x03\x02\x02\x02\u04B6\u248B\x03\x02\x02\x02\u04B8" +
		"\u24DB\x03\x02\x02\x02\u04BA\u24DD\x03\x02\x02\x02\u04BC\u24DF\x03\x02" +
		"\x02\x02\u04BE\u2505\x03\x02\x02\x02\u04C0\u2509\x03\x02\x02\x02\u04C2" +
		"\u25C3\x03\x02\x02\x02\u04C4\u25CA\x03\x02\x02\x02\u04C6\u25D6\x03\x02" +
		"\x02\x02\u04C8\u25D8\x03\x02\x02\x02\u04CA\u25DD\x03\x02\x02\x02\u04CC" +
		"\u25E5\x03\x02\x02\x02\u04CE\u25EA\x03\x02\x02\x02\u04D0\u25F0\x03\x02" +
		"\x02\x02\u04D2\u2601\x03\x02\x02\x02\u04D4\u2603\x03\x02\x02\x02\u04D6" +
		"\u2606\x03\x02\x02\x02\u04D8\u260C\x03\x02\x02\x02\u04DA\u2612\x03\x02" +
		"\x02\x02\u04DC\u2615\x03\x02\x02\x02\u04DE\u261D\x03\x02\x02\x02\u04E0" +
		"\u2621\x03\x02\x02\x02\u04E2\u2626\x03\x02\x02\x02\u04E4\u2635\x03\x02" +
		"\x02\x02\u04E6\u2637\x03\x02\x02\x02\u04E8\u264A\x03\x02\x02\x02\u04EA" +
		"\u2652\x03\x02\x02\x02\u04EC\u265B\x03\x02\x02\x02\u04EE\u265D\x03\x02" +
		"\x02\x02\u04F0\u2672\x03\x02\x02\x02\u04F2\u2674\x03\x02\x02\x02\u04F4" +
		"\u267B\x03\x02\x02\x02\u04F6\u2681\x03\x02\x02\x02\u04F8\u2685\x03\x02" +
		"\x02\x02\u04FA\u2687\x03\x02\x02\x02\u04FC\u268F\x03\x02\x02\x02\u04FE" +
		"\u2697\x03\x02\x02\x02\u0500\u26A5\x03\x02\x02\x02\u0502\u26A7\x03\x02" +
		"\x02\x02\u0504\u26AF\x03\x02\x02\x02\u0506\u26BC\x03\x02\x02\x02\u0508" +
		"\u26BE\x03\x02\x02\x02\u050A\u26C6\x03\x02\x02\x02\u050C\u26CD\x03\x02" +
		"\x02\x02\u050E\u26D5\x03\x02\x02\x02\u0510\u26E1\x03\x02\x02\x02\u0512" +
		"\u26E3\x03\x02\x02\x02\u0514\u26E5\x03\x02\x02\x02\u0516\u26EE\x03\x02" +
		"\x02\x02\u0518\u270D\x03\x02\x02\x02\u051A\u2716\x03\x02\x02\x02\u051C" +
		"\u271D\x03\x02\x02\x02\u051E\u271F\x03\x02\x02\x02\u0520\u272A\x03\x02" +
		"\x02\x02\u0522\u272E\x03\x02\x02\x02\u0524\u2733\x03\x02\x02\x02\u0526" +
		"\u2736\x03\x02\x02\x02\u0528\u2738\x03\x02\x02\x02\u052A\u274D\x03\x02" +
		"\x02\x02\u052C\u274F\x03\x02\x02\x02\u052E\u2752\x03\x02\x02\x02\u0530" +
		"\u2759\x03\x02\x02\x02\u0532\u275C\x03\x02\x02\x02\u0534\u275E\x03\x02" +
		"\x02\x02\u0536\u276E\x03\x02\x02\x02\u0538\u2770\x03\x02\x02\x02\u053A" +
		"\u2778\x03\x02\x02\x02\u053C\u277C\x03\x02\x02\x02\u053E\u2780\x03\x02" +
		"\x02\x02\u0540\u2788\x03\x02\x02\x02\u0542\u278A\x03\x02\x02\x02\u0544" +
		"\u278C\x03\x02\x02\x02\u0546\u2792\x03\x02\x02\x02\u0548\u27B7\x03\x02" +
		"\x02\x02\u054A\u27B9\x03\x02\x02\x02\u054C\u27BB\x03\x02\x02\x02\u054E" +
		"\u27BD\x03\x02\x02\x02\u0550\u27BF\x03\x02\x02\x02\u0552\u27C1\x03\x02" +
		"\x02\x02\u0554\u27D0\x03\x02\x02\x02\u0556\u27D2\x03\x02\x02\x02\u0558" +
		"\u27DA\x03\x02\x02\x02\u055A\u27DC\x03\x02\x02\x02\u055C\u27DE\x03\x02" +
		"\x02\x02\u055E\u27E4\x03\x02\x02\x02\u0560\u27E6\x03\x02\x02\x02\u0562" +
		"\u27F2\x03\x02\x02\x02\u0564\u27F4\x03\x02\x02\x02\u0566\u2802\x03\x02" +
		"\x02\x02\u0568\u2806\x03\x02\x02\x02\u056A\u280B\x03\x02\x02\x02\u056C" +
		"\u2812\x03\x02\x02\x02\u056E\u2818\x03\x02\x02\x02\u0570\u2820\x03\x02" +
		"\x02\x02\u0572\u282B\x03\x02\x02\x02\u0574\u282D\x03\x02\x02\x02\u0576" +
		"\u282F\x03\x02\x02\x02\u0578\u2864\x03\x02\x02\x02\u057A\u2866\x03\x02" +
		"\x02\x02\u057C\u2868\x03\x02\x02\x02\u057E\u286A\x03\x02\x02\x02\u0580" +
		"\u2871\x03\x02\x02\x02\u0582\u2888\x03\x02\x02\x02\u0584\u288A\x03\x02" +
		"\x02\x02\u0586\u2890\x03\x02\x02\x02\u0588\u2894\x03\x02\x02\x02\u058A" +
		"\u2896\x03\x02\x02\x02\u058C\u289D\x03\x02\x02\x02\u058E\u28A4\x03\x02" +
		"\x02\x02\u0590\u28A7\x03\x02\x02\x02\u0592\u28AB\x03\x02\x02\x02\u0594" +
		"\u28B2\x03\x02\x02\x02\u0596\u28B4\x03\x02\x02\x02\u0598\u28CC\x03\x02" +
		"\x02\x02\u059A\u28CE\x03\x02\x02\x02\u059C\u28D5\x03\x02\x02\x02\u059E" +
		"\u28D7\x03\x02\x02\x02\u05A0\u28DF\x03\x02\x02\x02\u05A2\u28E2\x03\x02" +
		"\x02\x02\u05A4";
	private static readonly _serializedATNSegment6: string =
		"\u28E6\x03\x02\x02\x02\u05A6\u28E8\x03\x02\x02\x02\u05A8\u28EC\x03\x02" +
		"\x02\x02\u05AA\u28EE\x03\x02\x02\x02\u05AC\u28F3\x03\x02\x02\x02\u05AE" +
		"\u28F8\x03\x02\x02\x02\u05B0\u28FE\x03\x02\x02\x02\u05B2\u2902\x03\x02" +
		"\x02\x02\u05B4\u2904\x03\x02\x02\x02\u05B6\u2909\x03\x02\x02\x02\u05B8" +
		"\u2927\x03\x02\x02\x02\u05BA\u2929\x03\x02\x02\x02\u05BC\u293B\x03\x02" +
		"\x02\x02\u05BE\u293F\x03\x02\x02\x02\u05C0\u2941\x03\x02\x02\x02\u05C2" +
		"\u2946\x03\x02\x02\x02\u05C4\u294F\x03\x02\x02\x02\u05C6\u2951\x03\x02" +
		"\x02\x02\u05C8\u2959\x03\x02\x02\x02\u05CA\u295D\x03\x02\x02\x02\u05CC" +
		"\u295F\x03\x02\x02\x02\u05CE\u2963\x03\x02\x02\x02\u05D0\u296E\x03\x02" +
		"\x02\x02\u05D2\u297F\x03\x02\x02\x02\u05D4\u2985\x03\x02\x02\x02\u05D6" +
		"\u2987\x03\x02\x02\x02\u05D8\u2991\x03\x02\x02\x02\u05DA\u2994\x03\x02" +
		"\x02\x02\u05DC\u2998\x03\x02\x02\x02\u05DE\u29A0\x03\x02\x02\x02\u05E0" +
		"\u29A2\x03\x02\x02\x02\u05E2\u29A5\x03\x02\x02\x02\u05E4\u29AA\x03\x02" +
		"\x02\x02\u05E6\u29AF\x03\x02\x02\x02\u05E8\u29C5\x03\x02\x02\x02\u05EA" +
		"\u29D3\x03\x02\x02\x02\u05EC\u29D7\x03\x02\x02\x02\u05EE\u29DC\x03\x02" +
		"\x02\x02\u05F0\u29DE\x03\x02\x02\x02\u05F2\u29E0\x03\x02\x02\x02\u05F4" +
		"\u29EC\x03\x02\x02\x02\u05F6\u29EE\x03\x02\x02\x02\u05F8\u29F5\x03\x02" +
		"\x02\x02\u05FA\u29F7\x03\x02\x02\x02\u05FC\u2A09\x03\x02\x02\x02\u05FE" +
		"\u2A2D\x03\x02\x02\x02\u0600\u2A2F\x03\x02\x02\x02\u0602\u2A38\x03\x02" +
		"\x02\x02\u0604\u2A3D\x03\x02\x02\x02\u0606\u2A3F\x03\x02\x02\x02\u0608" +
		"\u2A43\x03\x02\x02\x02\u060A\u2A4B\x03\x02\x02\x02\u060C\u2A53\x03\x02" +
		"\x02\x02\u060E\u2A55\x03\x02\x02\x02\u0610\u2A5C\x03\x02\x02\x02\u0612" +
		"\u2A5F\x03\x02\x02\x02\u0614\u2A6F\x03\x02\x02\x02\u0616\u2A71\x03\x02" +
		"\x02\x02\u0618\u2A7F\x03\x02\x02\x02\u061A\u2A81\x03\x02\x02\x02\u061C" +
		"\u2A9C\x03\x02\x02\x02\u061E\u2A9E\x03\x02\x02\x02\u0620\u2AA9\x03\x02" +
		"\x02\x02\u0622\u2AAF\x03\x02\x02\x02\u0624\u2AB3\x03\x02\x02\x02\u0626" +
		"\u2AB5\x03\x02\x02\x02\u0628\u2ABF\x03\x02\x02\x02\u062A\u2AC4\x03\x02" +
		"\x02\x02\u062C\u2AD5\x03\x02\x02\x02\u062E\u2AD7\x03\x02\x02\x02\u0630" +
		"\u2ADE\x03\x02\x02\x02\u0632\u2AE2\x03\x02\x02\x02\u0634\u2AE5\x03\x02" +
		"\x02\x02\u0636\u2AEB\x03\x02\x02\x02\u0638\u2AF1\x03\x02\x02\x02\u063A" +
		"\u2B03\x03\x02\x02\x02\u063C\u2B07\x03\x02\x02\x02\u063E\u2B0C\x03\x02" +
		"\x02\x02\u0640\u2B0F\x03\x02\x02\x02\u0642\u2B13\x03\x02\x02\x02\u0644" +
		"\u2B18\x03\x02\x02\x02\u0646\u2B23\x03\x02\x02\x02\u0648\u2B27\x03\x02" +
		"\x02\x02\u064A\u2B2B\x03\x02\x02\x02\u064C\u2B2F\x03\x02\x02\x02\u064E" +
		"\u2B31\x03\x02\x02\x02\u0650\u2B36\x03\x02\x02\x02\u0652\u2B38\x03\x02" +
		"\x02\x02\u0654\u2B3B\x03\x02\x02\x02\u0656\u2B4F\x03\x02\x02\x02\u0658" +
		"\u2B51\x03\x02\x02\x02\u065A\u2B53\x03\x02\x02\x02\u065C\u2B55\x03\x02" +
		"\x02\x02\u065E\u2B57\x03\x02\x02\x02\u0660\u2B5B\x03\x02\x02\x02\u0662" +
		"\u0663\x05\x06\x04\x02\u0663\x03\x03\x02\x02\x02\u0664\u0665\x05\u057E" +
		"\u02C0\x02\u0665\x05\x03\x02\x02\x02\u0666\u0668\x05\b\x05\x02\u0667\u0669" +
		"\x07\t\x02\x02\u0668\u0667\x03\x02\x02\x02\u0668\u0669\x03\x02\x02\x02" +
		"\u0669\u066B\x03\x02\x02\x02\u066A\u0666\x03\x02\x02\x02\u066B\u066E\x03" +
		"\x02\x02\x02\u066C\u066A\x03\x02\x02\x02\u066C\u066D\x03\x02\x02\x02\u066D" +
		"\x07\x03\x02\x02\x02\u066E\u066C\x03\x02\x02\x02\u066F\u06EC\x05\u01CC" +
		"\xE7\x02\u0670\u06EC\x05\u0348\u01A5\x02\u0671\u06EC\x05\u033E\u01A0\x02" +
		"\u0672\u06EC\x05\u0340\u01A1\x02\u0673\u06EC\x05\u024E\u0128\x02\u0674" +
		"\u06EC\x05\u034E\u01A8\x02\u0675\u06EC\x05\u01E6\xF4\x02\u0676\u06EC\x05" +
		"\u0146\xA4\x02\u0677\u06EC\x05\u014C\xA7\x02\u0678\u06EC\x05\u0156\xAC" +
		"\x02\u0679\u06EC\x05\u0170\xB9\x02\u067A\u06EC\x05\u02AC\u0157\x02\u067B" +
		"\u06EC\x05&\x14\x02\u067C\u06EC\x05\u02E6\u0174\x02\u067D\u06EC\x05\u02EA" +
		"\u0176\x02\u067E\u06EC\x05\u02F6\u017C\x02\u067F\u06EC\x05\u02EC\u0177" +
		"\x02\u0680\u06EC\x05\u02F4\u017B\x02\u0681\u06EC\x05\u0184\xC3\x02\u0682" +
		"\u06EC\x05\u011C\x8F\x02\u0683\u06EC\x05\u034A\u01A6\x02\u0684\u06EC\x05" +
		"`1\x02\u0685\u06EC\x05\u02DE\u0170\x02\u0686\u06EC\x05\x86D\x02\u0687" +
		"\u06EC\x05\u02FE\u0180\x02\u0688\u06EC\x05 \x11\x02\u0689\u06EC\x05\x1C" +
		"\x0F\x02\u068A\u06EC\x05\u0306\u0184\x02\u068B\u06EC\x05\u010A\x86\x02" +
		"\u068C\u06EC\x05\u0354\u01AB\x02\u068D\u06EC\x05\u0352\u01AA\x02\u068E" +
		"\u06EC\x05\u0180\xC1\x02\u068F\u06EC\x05\u0360\u01B1\x02\u0690\u06EC\x05" +
		"\f\x07\x02\u0691\u06EC\x05\\/\x02\u0692\u06EC\x05\x8CG\x02\u0693\u06EC" +
		"\x05\u035A\u01AE\x02\u0694\u06EC\x05\u021E\u0110\x02\u0695\u06EC\x05V" +
		",\x02\u0696\u06EC\x05\x8EH\x02\u0697\u06EC\x05\u0194\xCB\x02\u0698\u06EC" +
		"\x05\u010C\x87\x02\u0699\u06EC\x05\u01D0\xE9\x02\u069A\u06EC\x05\u02C6" +
		"\u0164\x02\u069B\u06EC\x05\u0358\u01AD\x02\u069C\u06EC\x05\u034C\u01A7" +
		"\x02\u069D\u06EC\x05\u0140\xA1\x02\u069E\u06EC\x05\u014E\xA8\x02\u069F" +
		"\u06EC\x05\u0168\xB5\x02\u06A0\u06EC\x05\u0172\xBA\x02\u06A1\u06EC\x05" +
		"\u0274\u013B\x02\u06A2\u06EC\x05$\x13\x02\u06A3\u06EC\x05\u0112\x8A\x02" +
		"\u06A4\u06EC\x05\u01EA\xF6\x02\u06A5\u06EC\x05\u01F8\xFD\x02\u06A6\u06EC" +
		"\x05\u02F8\u017D\x02\u06A7\u06EC\x05\u01FA\xFE\x02\u06A8\u06EC\x05\u0182" +
		"\xC2\x02\u06A9\u06EC\x05\u012C\x97\x02\u06AA\u06EC\x05*\x16\x02\u06AB" +
		"\u06EC\x05\u011A\x8E\x02\u06AC\u06EC\x05\xACW\x02\u06AD\u06EC\x05\u0300" +
		"\u0181\x02\u06AE\u06EC\x05\u0108\x85\x02\u06AF\u06EC\x05\u013A\x9E\x02" +
		"\u06B0\u06EC\x05\u02CE\u0168\x02\u06B1\u06EC\x05\u0198\xCD\x02\u06B2\u06EC" +
		"\x05\u01C4\xE3\x02\u06B3\u06EC\x05\x0E\b\x02\u06B4\u06EC\x05\x1A\x0E\x02" +
		"\u06B5\u06EC\x05\u017A\xBE\x02\u06B6\u06EC\x05\u0332\u019A\x02\u06B7\u06EC" +
		"\x05\u0392\u01CA\x02\u06B8\u06EC\x05\u03BE\u01E0\x02\u06B9\u06EC\x05\u01D2" +
		"\xEA\x02\u06BA\u06EC\x05\u03A6\u01D4\x02\u06BB\u06EC\x05^0\x02\u06BC\u06EC" +
		"\x05\u02C0\u0161\x02\u06BD\u06EC\x05\u02CA\u0166\x02\u06BE\u06EC\x05\u0200" +
		"\u0101\x02\u06BF\u06EC\x05\u0202\u0102\x02\u06C0\u06EC\x05\u0204\u0103" +
		"\x02\u06C1\u06EC\x05\u0208\u0105\x02\u06C2\u06EC\x05\u0308\u0185\x02\u06C3" +
		"\u06EC\x05\u013E\xA0\x02\u06C4\u06EC\x05\u02D2\u016A\x02\u06C5\u06EC\x05" +
		"\"\x12\x02\u06C6\u06EC\x05\u017E\xC0\x02\u06C7\u06EC\x05\u0342\u01A2\x02" +
		"\u06C8\u06EC\x05\u038E\u01C8\x02\u06C9\u06EC\x05\u037C\u01BF\x02\u06CA" +
		"\u06EC\x05\u0228\u0115\x02\u06CB\u06EC\x05\u0230\u0119\x02\u06CC\u06EC" +
		"\x05\u0246\u0124\x02\u06CD\u06EC\x05\u0174\xBB\x02\u06CE\u06EC\x05\u0258" +
		"\u012D\x02\u06CF\u06EC\x05\u0394\u01CB\x02\u06D0\u06EC\x05\u031C\u018F" +
		"\x02\u06D1\u06EC\x05\u0118\x8D\x02\u06D2\u06EC\x05\u0330\u0199\x02\u06D3" +
		"\u06EC\x05\u03AA\u01D6\x02\u06D4\u06EC\x05\u0318\u018D\x02\u06D5\u06EC" +
		"\x05\u0388\u01C5\x02\u06D6\u06EC\x05\u0206\u0104\x02\u06D7\u06EC\x05\u02D4" +
		"\u016B\x02\u06D8\u06EC\x05\u02B4\u015B\x02\u06D9\u06EC\x05\u02B2\u015A" +
		"\x02\u06DA\u06EC\x05\u02B6\u015C\x02\u06DB\u06EC\x05\u02E0\u0171\x02\u06DC" +
		"\u06EC\x05\u0232\u011A\x02\u06DD\u06EC\x05\u0248\u0125\x02\u06DE\u06EC" +
		"\x05\u030A\u0186\x02\u06DF\u06EC\x05\u0222\u0112\x02\u06E0\u06EC\x05\u03C6" +
		"\u01E4\x02\u06E1\u06EC\x05\u0320\u0191\x02\u06E2\u06EC\x05\u021A\u010E" +
		"\x02\u06E3\u06EC\x05\u031E\u0190\x02\u06E4\u06EC\x05\u03B4\u01DB\x02\u06E5" +
		"\u06EC\x05\u035E\u01B0\x02\u06E6\u06EC\x05J&\x02\u06E7\u06EC\x052\x1A" +
		"\x02\u06E8\u06EC\x05T+\x02\u06E9\u06EC\x05\u032C\u0197\x02\u06EA\u06EC" +
		"\x05\n\x06\x02\u06EB\u066F\x03\x02\x02\x02\u06EB\u0670\x03\x02\x02\x02" +
		"\u06EB\u0671\x03\x02\x02\x02\u06EB\u0672\x03\x02\x02\x02\u06EB\u0673\x03" +
		"\x02\x02\x02\u06EB\u0674\x03\x02\x02\x02\u06EB\u0675\x03\x02\x02\x02\u06EB" +
		"\u0676\x03\x02\x02\x02\u06EB\u0677\x03\x02\x02\x02\u06EB\u0678\x03\x02" +
		"\x02\x02\u06EB\u0679\x03\x02\x02\x02\u06EB\u067A\x03\x02\x02\x02\u06EB" +
		"\u067B\x03\x02\x02\x02\u06EB\u067C\x03\x02\x02\x02\u06EB\u067D\x03\x02" +
		"\x02\x02\u06EB\u067E\x03\x02\x02\x02\u06EB\u067F\x03\x02\x02\x02\u06EB" +
		"\u0680\x03\x02\x02\x02\u06EB\u0681\x03\x02\x02\x02\u06EB\u0682\x03\x02" +
		"\x02\x02\u06EB\u0683\x03\x02\x02\x02\u06EB\u0684\x03\x02\x02\x02\u06EB" +
		"\u0685\x03\x02\x02\x02\u06EB\u0686\x03\x02\x02\x02\u06EB\u0687\x03\x02" +
		"\x02\x02\u06EB\u0688\x03\x02\x02\x02\u06EB\u0689\x03\x02\x02\x02\u06EB" +
		"\u068A\x03\x02\x02\x02\u06EB\u068B\x03\x02\x02\x02\u06EB\u068C\x03\x02" +
		"\x02\x02\u06EB\u068D\x03\x02\x02\x02\u06EB\u068E\x03\x02\x02\x02\u06EB" +
		"\u068F\x03\x02\x02\x02\u06EB\u0690\x03\x02\x02\x02\u06EB\u0691\x03\x02" +
		"\x02\x02\u06EB\u0692\x03\x02\x02\x02\u06EB\u0693\x03\x02\x02\x02\u06EB" +
		"\u0694\x03\x02\x02\x02\u06EB\u0695\x03\x02\x02\x02\u06EB\u0696\x03\x02" +
		"\x02\x02\u06EB\u0697\x03\x02\x02\x02\u06EB\u0698\x03\x02\x02\x02\u06EB" +
		"\u0699\x03\x02\x02\x02\u06EB\u069A\x03\x02\x02\x02\u06EB\u069B\x03\x02" +
		"\x02\x02\u06EB\u069C\x03\x02\x02\x02\u06EB\u069D\x03\x02\x02\x02\u06EB" +
		"\u069E\x03\x02\x02\x02\u06EB\u069F\x03\x02\x02\x02\u06EB\u06A0\x03\x02" +
		"\x02\x02\u06EB\u06A1\x03\x02\x02\x02\u06EB\u06A2\x03\x02\x02\x02\u06EB" +
		"\u06A3\x03\x02\x02\x02\u06EB\u06A4\x03\x02\x02\x02\u06EB\u06A5\x03\x02" +
		"\x02\x02\u06EB\u06A6\x03\x02\x02\x02\u06EB\u06A7\x03\x02\x02\x02\u06EB" +
		"\u06A8\x03\x02\x02\x02\u06EB\u06A9\x03\x02\x02\x02\u06EB\u06AA\x03\x02" +
		"\x02\x02\u06EB\u06AB\x03\x02\x02\x02\u06EB\u06AC\x03\x02\x02\x02\u06EB" +
		"\u06AD\x03\x02\x02\x02\u06EB\u06AE\x03\x02\x02\x02\u06EB\u06AF\x03\x02" +
		"\x02\x02\u06EB\u06B0\x03\x02\x02\x02\u06EB\u06B1\x03\x02\x02\x02\u06EB" +
		"\u06B2\x03\x02\x02\x02\u06EB\u06B3\x03\x02\x02\x02\u06EB\u06B4\x03\x02" +
		"\x02\x02\u06EB\u06B5\x03\x02\x02\x02\u06EB\u06B6\x03\x02\x02\x02\u06EB" +
		"\u06B7\x03\x02\x02\x02\u06EB\u06B8\x03\x02\x02\x02\u06EB\u06B9\x03\x02" +
		"\x02\x02\u06EB\u06BA\x03\x02\x02\x02\u06EB\u06BB\x03\x02\x02\x02\u06EB" +
		"\u06BC\x03\x02\x02\x02\u06EB\u06BD\x03\x02\x02\x02\u06EB\u06BE\x03\x02" +
		"\x02\x02\u06EB\u06BF\x03\x02\x02\x02\u06EB\u06C0\x03\x02\x02\x02\u06EB" +
		"\u06C1\x03\x02\x02\x02\u06EB\u06C2\x03\x02\x02\x02\u06EB\u06C3\x03\x02" +
		"\x02\x02\u06EB\u06C4\x03\x02\x02\x02\u06EB\u06C5\x03\x02\x02\x02\u06EB" +
		"\u06C6\x03\x02\x02\x02\u06EB\u06C7\x03\x02\x02\x02\u06EB\u06C8\x03\x02" +
		"\x02\x02\u06EB\u06C9\x03\x02\x02\x02\u06EB\u06CA\x03\x02\x02\x02\u06EB" +
		"\u06CB\x03\x02\x02\x02\u06EB\u06CC\x03\x02\x02\x02\u06EB\u06CD\x03\x02" +
		"\x02\x02\u06EB\u06CE\x03\x02\x02\x02\u06EB\u06CF\x03\x02\x02\x02\u06EB" +
		"\u06D0\x03\x02\x02\x02\u06EB\u06D1\x03\x02\x02\x02\u06EB\u06D2\x03\x02" +
		"\x02\x02\u06EB\u06D3\x03\x02\x02\x02\u06EB\u06D4\x03\x02\x02\x02\u06EB" +
		"\u06D5\x03\x02\x02\x02\u06EB\u06D6\x03\x02\x02\x02\u06EB\u06D7\x03\x02" +
		"\x02\x02\u06EB\u06D8\x03\x02\x02\x02\u06EB\u06D9\x03\x02\x02\x02\u06EB" +
		"\u06DA\x03\x02\x02\x02\u06EB\u06DB\x03\x02\x02\x02\u06EB\u06DC\x03\x02" +
		"\x02\x02\u06EB\u06DD\x03\x02\x02\x02\u06EB\u06DE\x03\x02\x02\x02\u06EB" +
		"\u06DF\x03\x02\x02\x02\u06EB\u06E0\x03\x02\x02\x02\u06EB\u06E1\x03\x02" +
		"\x02\x02\u06EB\u06E2\x03\x02\x02\x02\u06EB\u06E3\x03\x02\x02\x02\u06EB" +
		"\u06E4\x03\x02\x02\x02\u06EB\u06E5\x03\x02\x02\x02\u06EB\u06E6\x03\x02" +
		"\x02\x02\u06EB\u06E7\x03\x02\x02\x02\u06EB\u06E8\x03\x02\x02\x02\u06EB" +
		"\u06E9\x03\x02\x02\x02\u06EB\u06EA\x03\x02\x02\x02\u06EC\t\x03\x02\x02" +
		"\x02\u06ED\u06EF\x07\u022F\x02\x02\u06EE\u06F0\x07\u0230\x02\x02\u06EF" +
		"\u06EE\x03\x02\x02\x02\u06EF\u06F0\x03\x02\x02\x02\u06F0\v\x03\x02\x02" +
		"\x02\u06F1\u06F2\x07\u01B3\x02\x02\u06F2\u06F3\x05\u04BC\u025F\x02\u06F3" +
		"\r\x03\x02\x02\x02\u06F4\u06F5\x070\x02\x02\u06F5\u06F6\x07\u0140\x02" +
		"\x02\u06F6\u06F8\x05\u055C\u02AF\x02\u06F7\u06F9\x05\x10\t\x02\u06F8\u06F7" +
		"\x03\x02\x02\x02\u06F8\u06F9\x03\x02\x02\x02\u06F9\u06FA\x03\x02\x02\x02" +
		"\u06FA\u06FB\x05\x12\n\x02\u06FB\x0F\x03\x02\x02\x02\u06FC\u06FD\x07k" +
		"\x02\x02\u06FD\x11\x03\x02\x02\x02\u06FE\u0700\x05\x18\r\x02\u06FF\u06FE" +
		"\x03\x02\x02\x02\u0700\u0703\x03\x02\x02\x02\u0701\u06FF\x03\x02\x02\x02" +
		"\u0701\u0702\x03\x02\x02\x02\u0702\x13\x03\x02\x02\x02\u0703\u0701\x03" +
		"\x02\x02\x02\u0704\u0706\x05\x16\f\x02\u0705\u0704\x03\x02\x02\x02\u0706" +
		"\u0709\x03\x02\x02\x02\u0707\u0705\x03\x02\x02\x02\u0707\u0708\x03\x02" +
		"\x02\x02\u0708\x15\x03\x02\x02\x02\u0709\u0707\x03\x02\x02\x02\u070A\u070D" +
		"\x07\u0121\x02\x02\u070B\u070E\x05\u0552\u02AA\x02\u070C\u070E\x07P\x02" +
		"\x02\u070D\u070B\x03\x02\x02\x02\u070D\u070C\x03\x02\x02\x02\u070E\u0721" +
		"\x03\x02\x02\x02\u070F\u0710\t\x02\x02\x02\u0710\u0711\x07\u0121\x02\x02" +
		"\u0711\u0721\x05\u0552\u02AA\x02\u0712\u0721\t\x03\x02\x02\u0713\u0721" +
		"\t\x04\x02\x02\u0714\u0721\t\x05\x02\x02\u0715\u0721\t\x06\x02\x02\u0716" +
		"\u0721\t\x07\x02\x02\u0717\u0718\x07\xA6\x02\x02\u0718\u0719\x07L\x02" +
		"\x02\u0719\u0721\x05\u0558\u02AD\x02\u071A\u071B\x07\u0175\x02\x02\u071B" +
		"\u071C\x07\u0172\x02\x02\u071C\u0721\x05\u0552\u02AA\x02\u071D\u071E\x07" +
		"e\x02\x02\u071E\u0721\x05\u0560\u02B1\x02\u071F\u0721\x05\u0572\u02BA" +
		"\x02\u0720\u070A\x03\x02\x02\x02\u0720\u070F\x03\x02\x02\x02\u0720\u0712" +
		"\x03\x02\x02\x02\u0720\u0713\x03\x02\x02\x02\u0720\u0714\x03\x02\x02\x02" +
		"\u0720\u0715\x03\x02\x02\x02\u0720\u0716\x03\x02\x02\x02\u0720\u0717\x03" +
		"\x02\x02\x02\u0720\u071A\x03\x02\x02\x02\u0720\u071D\x03\x02\x02\x02\u0720" +
		"\u071F\x03\x02\x02\x02\u0721\x17\x03\x02\x02\x02\u0722\u072D\x05\x16\f" +
		"\x02\u0723\u0724\x07\u015E\x02\x02\u0724\u072D\x05\u0550\u02A9\x02\u0725" +
		"\u0726\x07\x88\x02\x02\u0726\u072D\x05\u0560\u02B1\x02\u0727\u0728\x07" +
		"\u0140\x02\x02\u0728\u072D\x05\u0560\u02B1\x02\u0729\u072A\x07F\x02\x02" +
		"\u072A\u072B\t\b\x02\x02\u072B\u072D\x05\u0560\u02B1\x02\u072C\u0722\x03" +
		"\x02\x02\x02\u072C\u0723\x03\x02\x02\x02\u072C\u0725\x03\x02\x02\x02\u072C" +
		"\u0727\x03\x02\x02\x02\u072C\u0729\x03\x02\x02\x02\u072D\x19\x03\x02\x02" +
		"\x02\u072E\u072F\x070\x02\x02\u072F\u0730\x07e\x02\x02\u0730\u0732\x05" +
		"\u055C\u02AF\x02\u0731\u0733\x05\x10\t\x02\u0732\u0731\x03\x02\x02\x02" +
		"\u0732\u0733\x03\x02\x02\x02\u0733\u0734\x03\x02\x02\x02\u0734\u0735\x05" +
		"\x12\n\x02\u0735\x1B\x03\x02\x02\x02\u0736\u0737\x07\x8C\x02\x02\u0737" +
		"\u0738\t\t\x02\x02\u0738\u073A\x05\u055E\u02B0\x02\u0739\u073B\x05\x10" +
		"\t\x02\u073A\u0739\x03\x02\x02\x02\u073A\u073B\x03\x02\x02\x02\u073B\u073C" +
		"\x03\x02\x02\x02\u073C\u073D\x05\x14\v\x02\u073D\x1D\x03\x02\x02\x02\u073E" +
		"\u0743\x03\x02\x02\x02\u073F\u0740\x07F\x02\x02\u0740\u0741\x07\xB1\x02" +
		"\x02\u0741\u0743\x05\u0540\u02A1\x02\u0742\u073E\x03\x02\x02\x02\u0742" +
		"\u073F\x03\x02\x02\x02\u0743\x1F\x03\x02\x02\x02\u0744\u0745\x07\x8C\x02" +
		"\x02\u0745\u0748\t\t\x02\x02\u0746\u0749\x07 \x02\x02\u0747\u0749\x05" +
		"\u055E\u02B0\x02\u0748\u0746\x03\x02\x02\x02\u0748\u0747\x03\x02\x02\x02" +
		"\u0749\u074A\x03\x02\x02\x02\u074A\u074B\x05\x1E\x10\x02\u074B\u074C\x05" +
		"P)\x02\u074C!\x03\x02\x02\x02\u074D\u074E\x07\xC1\x02\x02\u074E\u0751" +
		"\t\n\x02\x02\u074F\u0750\x07\xDE\x02\x02\u0750\u0752\x07\u018E\x02\x02" +
		"\u0751\u074F\x03\x02\x02\x02\u0751\u0752\x03\x02\x02\x02\u0752\u0753\x03" +
		"\x02\x02\x02\u0753\u0754\x05\u0560\u02B1\x02\u0754#\x03\x02\x02\x02\u0755" +
		"\u0756\x070\x02\x02\u0756\u0757\x07D\x02\x02\u0757\u0759\x05\u055A\u02AE" +
		"\x02\u0758\u075A\x05\x10\t\x02\u0759\u0758\x03\x02\x02\x02\u0759\u075A" +
		"\x03\x02\x02\x02\u075A\u075B\x03\x02\x02\x02\u075B\u075C\x05\x12\n\x02" +
		"\u075C%\x03\x02\x02\x02\u075D\u075E\x07\x8C\x02\x02\u075E\u075F\x07D\x02" +
		"\x02\u075F\u0760\x05\u055E\u02B0\x02\u0760\u0761\x05(\x15\x02\u0761\u0762" +
		"\x07e\x02\x02\u0762\u0763\x05\u0560\u02B1\x02\u0763\'\x03\x02\x02\x02" +
		"\u0764\u0765\t\v\x02\x02\u0765)\x03\x02\x02\x02\u0766\u0767\x070\x02\x02" +
		"\u0767\u076B\x07\u0145\x02\x02\u0768\u0769\x07\xDE\x02\x02\u0769\u076A" +
		"\x07O\x02\x02\u076A\u076C\x07\u018E\x02\x02\u076B\u0768\x03\x02\x02\x02" +
		"\u076B\u076C\x03\x02\x02\x02\u076C\u0773\x03\x02\x02\x02\u076D\u076F\x05" +
		",\x17\x02\u076E\u076D\x03\x02\x02\x02\u076E\u076F\x03\x02\x02\x02\u076F" +
		"\u0770\x03\x02\x02\x02\u0770\u0771\x07l\x02\x02\u0771\u0774\x05\u055E" +
		"\u02B0\x02\u0772\u0774\x05\u0562\u02B2\x02\u0773\u076E\x03\x02\x02\x02" +
		"\u0773\u0772\x03\x02\x02\x02\u0774\u0775\x03\x02\x02\x02\u0775\u0776\x05" +
		".\x18\x02\u0776+\x03\x02\x02\x02\u0777\u0778\x05\u0562\u02B2\x02\u0778" +
		"-\x03\x02\x02\x02\u0779\u077B\x050\x19\x02\u077A\u0779\x03\x02\x02\x02" +
		"\u077B\u077E\x03\x02\x02\x02\u077C\u077A\x03\x02\x02\x02\u077C\u077D\x03" +
		"\x02\x02\x02\u077D/\x03\x02\x02\x02\u077E\u077C\x03\x02\x02\x02\u077F" +
		"\u0786\x05\xACW\x02\u0780\u0786\x05\u0258\u012D\x02\u0781\u0786\x05\u011A" +
		"\x8E\x02\u0782\u0786\x05\u0198\xCD\x02\u0783\u0786\x05\u0230\u0119\x02" +
		"\u0784\u0786\x05\u032C\u0197\x02\u0785\u077F\x03\x02\x02\x02\u0785\u0780" +
		"\x03\x02\x02\x02\u0785\u0781\x03\x02\x02\x02\u0785\u0782\x03\x02\x02\x02" +
		"\u0785\u0783\x03\x02\x02\x02\u0785\u0784\x03\x02\x02\x02\u07861\x03\x02" +
		"\x02\x02\u0787\u0789\x07\u014F\x02\x02\u0788\u078A\t\f\x02\x02\u0789\u0788" +
		"\x03\x02\x02\x02\u0789\u078A\x03\x02\x02\x02\u078A\u078B\x03\x02\x02\x02" +
		"\u078B\u078C\x054\x1B\x02\u078C3\x03\x02\x02\x02\u078D\u078E\x07\u0166" +
		"\x02\x02\u078E\u0796\x05\u0326\u0194\x02\u078F\u0790\x07\u014E\x02\x02" +
		"\u0790\u0791\x07\x9C\x02\x02\u0791\u0792\x07&\x02\x02\u0792\u0793\x07" +
		"\u0166\x02\x02\u0793\u0796\x05\u0326\u0194\x02\u0794\u0796\x058\x1D\x02" +
		"\u0795\u078D\x03\x02\x02\x02\u0795\u078F\x03\x02\x02\x02\u0795\u0794\x03" +
		"\x02\x02\x02\u07965\x03\x02\x02\x02\u0797\u0798\x05:\x1E\x02\u0798\u0799" +
		"\t\r\x02\x02\u0799\u079A\x05<\x1F\x02\u079A7\x03\x02\x02\x02\u079B\u07B7" +
		"\x056\x1C\x02\u079C\u079D\x05:\x1E\x02\u079D\u079E\x07B\x02\x02\u079E" +
		"\u079F\x07\u01B4\x02\x02\u079F\u07B7\x03\x02\x02\x02\u07A0\u07A1\x07\u01A4" +
		"\x02\x02\u07A1\u07A2\x07\u0184\x02\x02\u07A2\u07B7\x05D#\x02\u07A3\u07A4" +
		"\x07\x9A\x02\x02\u07A4\u07B7\x05\u0552\u02AA\x02\u07A5\u07A6\x07\u0145" +
		"\x02\x02\u07A6\u07B7\x05\u0552\u02AA\x02\u07A7\u07A9\x07\u010D\x02\x02" +
		"\u07A8\u07AA\x05F$\x02\u07A9\u07A8\x03\x02\x02\x02\u07A9\u07AA\x03\x02" +
		"\x02\x02\u07AA\u07B7\x03\x02\x02\x02\u07AB\u07AC\x07\u0140\x02\x02\u07AC" +
		"\u07B7\x05H%\x02\u07AD\u07AE\x07\u014E\x02\x02\u07AE\u07AF\x07l\x02\x02" +
		"\u07AF\u07B7\x05H%\x02\u07B0\u07B1\x07\u0181\x02\x02\u07B1\u07B2\x07\u0119" +
		"\x02\x02\u07B2\u07B7\x05\u04CE\u0268\x02\u07B3\u07B4\x07\u0166\x02\x02" +
		"\u07B4\u07B5\x07\u0153\x02\x02\u07B5\u07B7\x05\u0552\u02AA\x02\u07B6\u079B" +
		"\x03\x02\x02\x02\u07B6\u079C\x03\x02\x02\x02\u07B6\u07A0\x03\x02\x02\x02" +
		"\u07B6\u07A3\x03\x02\x02\x02\u07B6\u07A5\x03\x02\x02\x02\u07B6\u07A7\x03" +
		"\x02\x02\x02\u07B6\u07AB\x03\x02\x02\x02\u07B6\u07AD\x03\x02\x02\x02\u07B6" +
		"\u07B0\x03\x02\x02\x02\u07B6\u07B3\x03\x02\x02\x02\u07B79\x03\x02\x02" +
		"\x02\u07B8\u07BD\x05\u0562\u02B2\x02\u07B9\u07BA\x07\r\x02\x02\u07BA\u07BC" +
		"\x05\u0562\u02B2\x02\u07BB\u07B9\x03\x02\x02\x02\u07BC\u07BF\x03\x02\x02" +
		"\x02\u07BD\u07BB\x03\x02\x02\x02\u07BD\u07BE\x03\x02\x02\x02\u07BE;\x03" +
		"\x02\x02\x02\u07BF\u07BD\x03\x02\x02\x02\u07C0\u07C5\x05> \x02\u07C1\u07C2" +
		"\x07\b\x02\x02\u07C2\u07C4\x05> \x02\u07C3\u07C1\x03\x02\x02\x02\u07C4" +
		"\u07C7\x03\x02\x02\x02\u07C5\u07C3\x03\x02\x02\x02\u07C5\u07C6\x03\x02" +
		"\x02\x02\u07C6=\x03\x02\x02\x02\u07C7\u07C5\x03\x02\x02\x02\u07C8\u07CB" +
		"\x05B\"\x02\u07C9\u07CB\x05\u0128\x95\x02\u07CA\u07C8\x03\x02\x02\x02" +
		"\u07CA\u07C9\x03\x02\x02\x02\u07CB?\x03\x02\x02\x02\u07CC\u07CD\x07\u012E" +
		"\x02\x02\u07CD\u07D2\t\x0E\x02\x02\u07CE\u07CF\x07\u0138\x02\x02\u07CF" +
		"\u07D2\x07\u012E\x02\x02\u07D0\u07D2\x07\u014C\x02\x02\u07D1\u07CC\x03" +
		"\x02\x02\x02\u07D1\u07CE\x03\x02\x02\x02\u07D1\u07D0\x03\x02\x02\x02\u07D2" +
		"A\x03\x02\x02\x02\u07D3\u07D8\x07b\x02\x02\u07D4\u07D8\x07>\x02\x02\u07D5" +
		"\u07D8\x07R\x02\x02\u07D6\u07D8\x05H%\x02\u07D7\u07D3\x03\x02\x02\x02" +
		"\u07D7\u07D4\x03\x02\x02\x02\u07D7\u07D5\x03\x02\x02\x02\u07D7\u07D6\x03" +
		"\x02\x02\x02\u07D8C\x03\x02\x02\x02\u07D9\u07EA\x05\u0552\u02AA\x02\u07DA" +
		"\u07EA\x05\u0572\u02BA\x02\u07DB\u07DC\x05\u0484\u0243\x02\u07DC\u07DE" +
		"\x05\u0552\u02AA\x02\u07DD\u07DF\x05\u0488\u0245\x02\u07DE\u07DD\x03\x02" +
		"\x02\x02\u07DE\u07DF\x03\x02\x02\x02\u07DF\u07EA\x03\x02\x02\x02\u07E0" +
		"\u07E1\x05\u0484\u0243\x02\u07E1\u07E2\x07\x04\x02\x02\u07E2\u07E3\x05" +
		"\u0550\u02A9\x02\u07E3\u07E4\x07\x05\x02\x02\u07E4\u07E5\x05\u0552\u02AA" +
		"\x02\u07E5\u07EA\x03\x02\x02\x02\u07E6\u07EA\x05\u0128\x95\x02\u07E7\u07EA" +
		"\x077\x02\x02\u07E8\u07EA\x07\u0100\x02\x02\u07E9\u07D9\x03\x02\x02\x02" +
		"\u07E9\u07DA\x03\x02\x02\x02\u07E9\u07DB\x03\x02\x02\x02\u07E9\u07E0\x03" +
		"\x02\x02\x02\u07E9\u07E6\x03\x02\x02\x02\u07E9\u07E7\x03\x02\x02\x02\u07E9" +
		"\u07E8\x03\x02\x02\x02\u07EAE\x03\x02\x02\x02\u07EB\u07EE\x05\u0552\u02AA" +
		"\x02\u07EC\u07EE\x077\x02\x02\u07ED\u07EB\x03\x02\x02\x02\u07ED\u07EC" +
		"\x03\x02\x02\x02\u07EEG\x03\x02\x02\x02\u07EF\u07F2\x05\u056E\u02B8\x02" +
		"\u07F0\u07F2\x05\u0552\u02AA\x02\u07F1\u07EF\x03\x02\x02\x02\u07F1\u07F0" +
		"\x03\x02\x02\x02\u07F2I\x03\x02\x02\x02\u07F3\u07F4\x07\u013B\x02\x02" +
		"\u07F4\u07F5\x05L\'\x02\u07F5K\x03\x02\x02\x02\u07F6\u07FF\x05N(\x02\u07F7" +
		"\u07F8\x07\u01A4\x02\x02\u07F8\u07FF\x07\u0184\x02\x02\u07F9\u07FA\x07" +
		"\u0166\x02\x02\u07FA\u07FB\x07\xF6\x02\x02\u07FB\u07FF\x07\xFD\x02\x02" +
		"\u07FC\u07FD\x07\u014E\x02\x02\u07FD\u07FF\x07l\x02\x02\u07FE\u07F6\x03" +
		"\x02\x02\x02\u07FE\u07F7\x03\x02\x02\x02\u07FE\u07F9\x03\x02\x02\x02\u07FE" +
		"\u07FC\x03\x02\x02\x02\u07FFM\x03\x02\x02\x02\u0800\u0803\x05:\x1E\x02" +
		"\u0801\u0803\x07 \x02\x02\u0802\u0800\x03\x02\x02\x02\u0802\u0801\x03" +
		"\x02\x02\x02\u0803O\x03\x02\x02\x02\u0804\u0805\x07\u014F\x02\x02\u0805" +
		"\u0808\x054\x1B\x02\u0806\u0808\x05J&\x02\u0807\u0804\x03\x02\x02\x02" +
		"\u0807\u0806\x03\x02\x02\x02\u0808Q\x03\x02\x02\x02\u0809\u080A\x07\u014F" +
		"\x02\x02\u080A\u080D\x058\x1D\x02\u080B\u080D\x05J&\x02\u080C\u0809\x03" +
		"\x02\x02\x02\u080C\u080B\x03\x02\x02\x02\u080DS\x03\x02\x02\x02\u080E" +
		"\u0818\x07\u0151\x02\x02\u080F\u0819\x05:\x1E\x02\u0810\u0811\x07\u01A4" +
		"\x02\x02\u0811\u0819\x07\u0184\x02\x02\u0812\u0813\x07\u0166\x02\x02\u0813" +
		"\u0814\x07\xF6\x02\x02\u0814\u0819\x07\xFD\x02\x02\u0815\u0816\x07\u014E" +
		"\x02\x02\u0816\u0819\x07l\x02\x02\u0817\u0819\x07 \x02\x02\u0818\u080F" +
		"\x03\x02\x02\x02\u0818\u0810\x03\x02\x02\x02\u0818\u0812\x03\x02\x02\x02" +
		"\u0818\u0815\x03\x02\x02\x02\u0818\u0817\x03\x02\x02\x02\u0819U\x03\x02" +
		"\x02\x02\u081A\u081B\x07\u014F\x02\x02\u081B\u081C\x07\xA7\x02\x02\u081C" +
		"\u081D\x05X-\x02\u081D\u081E\x05Z.\x02\u081EW\x03\x02\x02\x02\u081F\u0822" +
		"\x07 \x02\x02\u0820\u0822\x05\u0538\u029D\x02\u0821\u081F\x03\x02\x02" +
		"\x02\u0821\u0820\x03\x02\x02\x02\u0822Y\x03\x02\x02\x02\u0823\u0824\t" +
		"\x0F\x02\x02\u0824[\x03\x02\x02\x02\u0825\u0826\x07\x9D\x02\x02\u0826" +
		"]\x03\x02\x02\x02\u0827\u0828\x07\xBD\x02\x02\u0828\u0829\t\x10\x02\x02" +
		"\u0829_\x03\x02\x02\x02\u082A\u082B\x07\x8C\x02\x02\u082B\u082E\x07^\x02" +
		"\x02\u082C\u082D\x07\xDE\x02\x02\u082D\u082F\x07\u018E\x02\x02\u082E\u082C" +
		"\x03\x02\x02\x02\u082E\u082F\x03\x02\x02\x02\u082F\u0830\x03\x02\x02\x02" +
		"\u0830\u0833\x05\u0436\u021C\x02\u0831\u0834\x05b2\x02\u0832\u0834\x05" +
		"d3\x02\u0833\u0831\x03\x02\x02\x02\u0833\u0832\x03\x02\x02\x02\u0834\u089B" +
		"\x03\x02\x02\x02\u0835\u0836\x07\x8C\x02\x02\u0836\u0837\x07^\x02\x02" +
		"\u0837\u0838\x07 \x02\x02\u0838\u0839\x07F\x02\x02\u0839\u083A\x07\u0161" +
		"\x02\x02\u083A\u083E\x05\u0540\u02A1\x02\u083B\u083C\x07\u011B\x02\x02" +
		"\u083C\u083D\x07\x95\x02\x02\u083D\u083F\x05\u0560\u02B1\x02\u083E\u083B" +
		"\x03\x02\x02\x02\u083E\u083F\x03\x02\x02\x02\u083F\u0840\x03\x02\x02\x02" +
		"\u0840\u0841\x07\u014F\x02\x02\u0841\u0842\x07\u0161\x02\x02\u0842\u0844" +
		"\x05\u0540\u02A1\x02\u0843\u0845\x05\u03B0\u01D9\x02\u0844\u0843\x03\x02" +
		"\x02\x02\u0844\u0845\x03\x02\x02\x02\u0845\u089B\x03\x02\x02\x02\u0846" +
		"\u0847\x07\x8C\x02\x02\u0847\u084A\x07\xE4\x02\x02\u0848\u0849\x07\xDE" +
		"\x02\x02\u0849\u084B\x07\u018E\x02\x02\u084A\u0848\x03\x02\x02\x02\u084A" +
		"\u084B\x03\x02\x02\x02\u084B\u084C\x03\x02\x02\x02\u084C\u084F\x05\u053C" +
		"\u029F\x02\u084D\u0850\x05b2\x02\u084E\u0850\x05f4\x02\u084F\u084D\x03" +
		"\x02\x02\x02\u084F\u084E\x03\x02\x02\x02\u0850\u089B\x03\x02\x02\x02\u0851" +
		"\u0852\x07\x8C\x02\x02\u0852\u0853\x07\xE4\x02\x02\u0853\u0854\x07 \x02" +
		"\x02\u0854\u0855\x07F\x02\x02\u0855\u0856\x07\u0161\x02\x02\u0856\u085A" +
		"\x05\u0540\u02A1\x02\u0857\u0858\x07\u011B\x02\x02\u0858\u0859\x07\x95" +
		"\x02\x02\u0859\u085B\x05\u0560\u02B1\x02\u085A\u0857\x03\x02\x02\x02\u085A" +
		"\u085B\x03\x02\x02\x02\u085B\u085C\x03\x02\x02\x02\u085C\u085D\x07\u014F" +
		"\x02\x02\u085D\u085E\x07\u0161\x02\x02\u085E\u0860\x05\u0540\u02A1\x02" +
		"\u085F\u0861\x05\u03B0\u01D9\x02\u0860\u085F\x03\x02\x02\x02\u0860\u0861" +
		"\x03\x02\x02\x02\u0861\u089B\x03\x02\x02\x02\u0862\u0863\x07\x8C\x02\x02" +
		"\u0863\u0866\x07\u014A\x02\x02\u0864\u0865\x07\xDE\x02\x02\u0865\u0867" +
		"\x07\u018E\x02\x02\u0866\u0864\x03\x02\x02\x02\u0866\u0867\x03\x02\x02" +
		"\x02\u0867\u0868\x03\x02\x02\x02\u0868\u0869\x05\u053C\u029F\x02\u0869" +
		"\u086A\x05b2\x02\u086A\u089B\x03\x02\x02\x02\u086B\u086C\x07\x8C\x02\x02" +
		"\u086C\u086F\x07\u017A\x02\x02\u086D\u086E\x07\xDE\x02\x02\u086E\u0870" +
		"\x07\u018E\x02\x02\u086F\u086D\x03\x02\x02\x02\u086F\u0870\x03\x02\x02" +
		"\x02\u0870\u0871\x03\x02\x02\x02\u0871\u0872\x05\u053C\u029F\x02\u0872" +
		"\u0873\x05";
	private static readonly _serializedATNSegment7: string =
		"b2\x02\u0873\u089B\x03\x02\x02\x02\u0874\u0875\x07\x8C\x02\x02\u0875\u0876" +
		"\x07\u0105\x02\x02\u0876\u0879\x07\u017A\x02\x02\u0877\u0878\x07\xDE\x02" +
		"\x02\u0878\u087A\x07\u018E\x02\x02\u0879\u0877\x03\x02\x02\x02\u0879\u087A" +
		"\x03\x02\x02\x02\u087A\u087B\x03\x02\x02\x02\u087B\u087C\x05\u053C\u029F" +
		"\x02\u087C\u087D\x05b2\x02\u087D\u089B\x03\x02\x02\x02\u087E\u087F\x07" +
		"\x8C\x02\x02\u087F\u0880\x07\u0105\x02\x02\u0880\u0881\x07\u017A\x02\x02" +
		"\u0881\u0882\x07 \x02\x02\u0882\u0883\x07F\x02\x02\u0883\u0884\x07\u0161" +
		"\x02\x02\u0884\u0888\x05\u0540\u02A1\x02\u0885\u0886\x07\u011B\x02\x02" +
		"\u0886\u0887\x07\x95\x02\x02\u0887\u0889\x05\u0560\u02B1\x02\u0888\u0885" +
		"\x03\x02\x02\x02\u0888\u0889\x03\x02\x02\x02\u0889\u088A\x03\x02\x02\x02" +
		"\u088A\u088B\x07\u014F\x02\x02\u088B\u088C\x07\u0161\x02\x02\u088C\u088E" +
		"\x05\u0540\u02A1\x02\u088D\u088F\x05\u03B0\u01D9\x02\u088E\u088D\x03\x02" +
		"\x02\x02\u088E\u088F\x03\x02\x02\x02\u088F\u089B\x03\x02\x02\x02\u0890" +
		"\u0891\x07\x8C\x02\x02\u0891\u0892\x07A\x02\x02\u0892\u0895\x07^\x02\x02" +
		"\u0893\u0894\x07\xDE\x02\x02\u0894\u0896\x07\u018E\x02\x02\u0895\u0893" +
		"\x03\x02\x02\x02\u0895\u0896\x03\x02\x02\x02\u0896\u0897\x03\x02\x02\x02" +
		"\u0897\u0898\x05\u0436\u021C\x02\u0898\u0899\x05b2\x02\u0899\u089B\x03" +
		"\x02\x02\x02\u089A\u082A\x03\x02\x02\x02\u089A\u0835\x03\x02\x02\x02\u089A" +
		"\u0846\x03\x02\x02\x02\u089A\u0851\x03\x02\x02\x02\u089A\u0862\x03\x02" +
		"\x02\x02\u089A\u086B\x03\x02\x02\x02\u089A\u0874\x03\x02\x02\x02\u089A" +
		"\u087E\x03\x02\x02\x02\u089A\u0890\x03\x02\x02\x02\u089Ba\x03\x02\x02" +
		"\x02\u089C\u08A1\x05h5\x02\u089D\u089E\x07\b\x02\x02\u089E\u08A0\x05h" +
		"5\x02\u089F\u089D\x03\x02\x02\x02\u08A0\u08A3\x03\x02\x02\x02\u08A1\u089F" +
		"\x03\x02\x02\x02\u08A1\u08A2\x03\x02\x02\x02\u08A2c\x03\x02\x02\x02\u08A3" +
		"\u08A1\x03\x02\x02\x02\u08A4\u08A5\x07\u01B5\x02\x02\u08A5\u08A6\x07\u011F" +
		"\x02\x02\u08A6\u08A7\x05\u053C\u029F\x02\u08A7\u08A8\x05\x80A\x02\u08A8" +
		"\u08AD\x03\x02\x02\x02\u08A9\u08AA\x07\u01B6\x02\x02\u08AA\u08AB\x07\u011F" +
		"\x02\x02\u08AB\u08AD\x05\u053C\u029F\x02\u08AC\u08A4\x03\x02\x02\x02\u08AC" +
		"\u08A9\x03\x02\x02\x02\u08ADe\x03\x02\x02\x02\u08AE\u08AF\x07\u01B5\x02" +
		"\x02\u08AF\u08B0\x07\u011F\x02\x02\u08B0\u08B1\x05\u053C\u029F\x02\u08B1" +
		"g\x03\x02\x02\x02\u08B2\u08B3\x07\x87\x02\x02\u08B3\u09DD\x05\xBE`\x02" +
		"\u08B4\u08B5\x07\x87\x02\x02\u08B5\u08B6\x07\xDE\x02\x02\u08B6\u08B7\x07" +
		"O\x02\x02\u08B7\u08B8\x07\u018E\x02\x02\u08B8\u09DD\x05\xBE`\x02\u08B9" +
		"\u08BA\x07\x87\x02\x02\u08BA\u08BB\x07.\x02\x02\u08BB\u09DD\x05\xBE`\x02" +
		"\u08BC\u08BD\x07\x87\x02\x02\u08BD\u08BE\x07.\x02\x02\u08BE\u08BF\x07" +
		"\xDE\x02\x02\u08BF\u08C0\x07O\x02\x02\u08C0\u08C1\x07\u018E\x02\x02\u08C1" +
		"\u09DD\x05\xBE`\x02\u08C2\u08C4\x07\x8C\x02\x02\u08C3\u08C5\x05\u02E2" +
		"\u0172\x02\u08C4\u08C3\x03\x02\x02\x02\u08C4\u08C5\x03\x02\x02\x02\u08C5" +
		"\u08C6\x03\x02\x02\x02\u08C6\u08C7\x05\u0562\u02B2\x02\u08C7\u08C8\x05" +
		"j6\x02\u08C8\u09DD\x03\x02\x02\x02\u08C9\u08CB\x07\x8C\x02\x02\u08CA\u08CC" +
		"\x05\u02E2\u0172\x02\u08CB\u08CA\x03\x02\x02\x02\u08CB\u08CC\x03\x02\x02" +
		"\x02\u08CC\u08CD\x03\x02\x02\x02\u08CD\u08CE\x05\u0562\u02B2\x02\u08CE" +
		"\u08CF\x07\xC1\x02\x02\u08CF\u08D0\x07O\x02\x02\u08D0\u08D1\x07P\x02\x02" +
		"\u08D1\u09DD\x03\x02\x02\x02\u08D2\u08D4\x07\x8C\x02\x02\u08D3\u08D5\x05" +
		"\u02E2\u0172\x02\u08D4\u08D3\x03\x02\x02\x02\u08D4\u08D5\x03\x02\x02\x02" +
		"\u08D5\u08D6\x03\x02\x02\x02\u08D6\u08D7\x05\u0562\u02B2\x02\u08D7\u08D8" +
		"\x07\u014F\x02\x02\u08D8\u08D9\x07O\x02\x02\u08D9\u08DA\x07P\x02\x02\u08DA" +
		"\u09DD\x03\x02\x02\x02\u08DB\u08DD\x07\x8C\x02\x02\u08DC\u08DE\x05\u02E2" +
		"\u0172\x02\u08DD\u08DC\x03\x02\x02\x02\u08DD\u08DE\x03\x02\x02\x02\u08DE" +
		"\u08DF\x03\x02\x02\x02\u08DF\u08E0\x05\u0562\u02B2\x02\u08E0\u08E1\x07" +
		"\xC1\x02\x02\u08E1\u08E2\x07\u01B7\x02\x02\u08E2\u09DD\x03\x02\x02\x02" +
		"\u08E3\u08E5\x07\x8C\x02\x02\u08E4\u08E6\x05\u02E2\u0172\x02\u08E5\u08E4" +
		"\x03\x02\x02\x02\u08E5\u08E6\x03\x02\x02\x02\u08E6\u08E7\x03\x02\x02\x02" +
		"\u08E7\u08E8\x05\u0562\u02B2\x02\u08E8\u08E9\x07\xC1\x02\x02\u08E9\u08EA" +
		"\x07\u01B7\x02\x02\u08EA\u08EB\x07\xDE\x02\x02\u08EB\u08EC\x07\u018E\x02" +
		"\x02\u08EC\u09DD\x03\x02\x02\x02\u08ED\u08EF\x07\x8C\x02\x02\u08EE\u08F0" +
		"\x05\u02E2\u0172\x02\u08EF\u08EE\x03\x02\x02\x02\u08EF\u08F0\x03\x02\x02" +
		"\x02\u08F0\u08F1\x03\x02\x02\x02\u08F1\u08F2\x05\u0562\u02B2\x02\u08F2" +
		"\u08F3\x07\u014F\x02\x02\u08F3\u08F4\x07\u0158\x02\x02\u08F4\u08F5\x05" +
		"\u0558\u02AD\x02\u08F5\u09DD\x03\x02\x02\x02\u08F6\u08F8\x07\x8C\x02\x02" +
		"\u08F7\u08F9\x05\u02E2\u0172\x02\u08F8\u08F7\x03\x02\x02\x02\u08F8\u08F9" +
		"\x03\x02\x02\x02\u08F9\u08FA\x03\x02\x02\x02\u08FA\u08FB\x05\u0550\u02A9" +
		"\x02\u08FB\u08FC\x07\u014F\x02\x02\u08FC\u08FD\x07\u0158\x02\x02\u08FD" +
		"\u08FE\x05\u0558\u02AD\x02\u08FE\u09DD\x03\x02\x02\x02\u08FF\u0901\x07" +
		"\x8C\x02\x02\u0900\u0902\x05\u02E2\u0172\x02\u0901\u0900\x03\x02\x02\x02" +
		"\u0901\u0902\x03\x02\x02\x02\u0902\u0903\x03\x02\x02\x02\u0903\u0904\x05" +
		"\u0562\u02B2\x02\u0904\u0905\x07\u014F\x02\x02\u0905\u0906\x05t;\x02\u0906" +
		"\u09DD\x03\x02\x02\x02\u0907\u0909\x07\x8C\x02\x02\u0908\u090A\x05\u02E2" +
		"\u0172\x02\u0909\u0908\x03\x02\x02\x02\u0909\u090A\x03\x02\x02\x02\u090A" +
		"\u090B\x03\x02\x02\x02\u090B\u090C\x05\u0562\u02B2\x02\u090C\u090D\x07" +
		"\u013B\x02\x02\u090D\u090E\x05t;\x02\u090E\u09DD\x03\x02\x02\x02\u090F" +
		"\u0911\x07\x8C\x02\x02\u0910\u0912\x05\u02E2\u0172\x02\u0911\u0910\x03" +
		"\x02\x02\x02\u0911\u0912\x03\x02\x02\x02\u0912\u0913\x03\x02\x02\x02\u0913" +
		"\u0914\x05\u0562\u02B2\x02\u0914\u0915\x07\u014F\x02\x02\u0915\u0916\x07" +
		"\u015B\x02\x02\u0916\u0917\x05\u0562\u02B2\x02\u0917\u09DD\x03\x02\x02" +
		"\x02\u0918\u091A\x07\x8C\x02\x02\u0919\u091B\x05\u02E2\u0172\x02\u091A" +
		"\u0919\x03\x02\x02\x02\u091A\u091B\x03\x02\x02\x02\u091B\u091C\x03\x02" +
		"\x02\x02\u091C\u091D\x05\u0562\u02B2\x02\u091D\u091E\x07\x87\x02\x02\u091E" +
		"\u091F\x07\u01B8\x02\x02\u091F\u0920\x05\xC8e\x02\u0920\u0921\x07&\x02" +
		"\x02\u0921\u0923\x07\xDD\x02\x02\u0922\u0924\x05\u0120\x91\x02\u0923\u0922" +
		"\x03\x02\x02\x02\u0923\u0924\x03\x02\x02\x02\u0924\u09DD\x03\x02\x02\x02" +
		"\u0925\u0927\x07\x8C\x02\x02\u0926\u0928\x05\u02E2\u0172\x02\u0927\u0926" +
		"\x03\x02\x02\x02\u0927\u0928\x03\x02\x02\x02\u0928\u0929\x03\x02\x02\x02" +
		"\u0929\u092A\x05\u0562\u02B2\x02\u092A\u092B\x05|?\x02\u092B\u09DD\x03" +
		"\x02\x02\x02\u092C\u092E\x07\x8C\x02\x02\u092D\u092F\x05\u02E2\u0172\x02" +
		"\u092E\u092D\x03\x02\x02\x02\u092E\u092F\x03\x02\x02\x02\u092F\u0930\x03" +
		"\x02\x02\x02\u0930\u0931\x05\u0562\u02B2\x02\u0931\u0932\x07\xC1\x02\x02" +
		"\u0932\u0933\x07\xDD\x02\x02\u0933\u09DD\x03\x02\x02\x02\u0934\u0936\x07" +
		"\x8C\x02\x02\u0935\u0937\x05\u02E2\u0172\x02\u0936\u0935\x03\x02\x02\x02" +
		"\u0936\u0937\x03\x02\x02\x02\u0937\u0938\x03\x02\x02\x02\u0938\u0939\x05" +
		"\u0562\u02B2\x02\u0939\u093A\x07\xC1\x02\x02\u093A\u093B\x07\xDD\x02\x02" +
		"\u093B\u093C\x07\xDE\x02\x02\u093C\u093D\x07\u018E\x02\x02\u093D\u09DD" +
		"\x03\x02\x02\x02\u093E\u0940\x07\xC1\x02\x02\u093F\u0941\x05\u02E2\u0172" +
		"\x02\u0940\u093F\x03\x02\x02\x02\u0940\u0941\x03\x02\x02\x02\u0941\u0942" +
		"\x03\x02\x02\x02\u0942\u0943\x07\xDE\x02\x02\u0943\u0944\x07\u018E\x02" +
		"\x02\u0944\u0946\x05\u0562\u02B2\x02\u0945\u0947\x05l7\x02\u0946\u0945" +
		"\x03\x02\x02\x02\u0946\u0947\x03\x02\x02\x02\u0947\u09DD\x03\x02\x02\x02" +
		"\u0948\u094A\x07\xC1\x02\x02\u0949\u094B\x05\u02E2\u0172\x02\u094A\u0949" +
		"\x03\x02\x02\x02\u094A\u094B\x03\x02\x02\x02\u094B\u094C\x03\x02\x02\x02" +
		"\u094C\u094E\x05\u0562\u02B2\x02\u094D\u094F\x05l7\x02\u094E\u094D\x03" +
		"\x02\x02\x02\u094E\u094F\x03\x02\x02\x02\u094F\u09DD\x03\x02\x02\x02\u0950" +
		"\u0952\x07\x8C\x02\x02\u0951\u0953\x05\u02E2\u0172\x02\u0952\u0951\x03" +
		"\x02\x02\x02\u0952\u0953\x03\x02\x02\x02\u0953\u0954\x03\x02\x02\x02\u0954" +
		"\u0956\x05\u0562\u02B2\x02\u0955\u0957\x05\u02E4\u0173\x02\u0956\u0955" +
		"\x03\x02\x02\x02\u0956\u0957\x03\x02\x02\x02\u0957\u0958\x03\x02\x02\x02" +
		"\u0958\u0959\x07\u016A\x02\x02\u0959\u095B\x05\u0462\u0232\x02\u095A\u095C" +
		"\x05n8\x02\u095B\u095A\x03\x02\x02\x02\u095B\u095C\x03\x02\x02\x02\u095C" +
		"\u095E\x03\x02\x02\x02\u095D\u095F\x05p9\x02\u095E\u095D\x03\x02\x02\x02" +
		"\u095E\u095F\x03\x02\x02\x02\u095F\u09DD\x03\x02\x02\x02\u0960\u0962\x07" +
		"\x8C\x02\x02\u0961\u0963\x05\u02E2\u0172\x02\u0962\u0961\x03\x02\x02\x02" +
		"\u0962\u0963\x03\x02\x02\x02\u0963\u0964\x03\x02\x02\x02\u0964\u0965\x05" +
		"\u0562\u02B2\x02\u0965\u0966\x05\u015C\xAF\x02\u0966\u09DD\x03\x02\x02" +
		"\x02\u0967\u0968\x07\x87\x02\x02\u0968\u09DD\x05\xD4k\x02\u0969\u096A" +
		"\x07\x8C\x02\x02\u096A\u096B\x07/\x02\x02\u096B\u096C\x05\u0540\u02A1" +
		"\x02\u096C\u096D\x05\u01C0\xE1\x02\u096D\u09DD\x03\x02\x02\x02\u096E\u096F" +
		"\x07\u0176\x02\x02\u096F\u0970\x07/\x02\x02\u0970\u09DD\x05\u0540\u02A1" +
		"\x02\u0971\u0972\x07\xC1\x02\x02\u0972\u0973\x07/\x02\x02\u0973\u0974" +
		"\x07\xDE\x02\x02\u0974\u0975\x07\u018E\x02\x02\u0975\u0977\x05\u0540\u02A1" +
		"\x02\u0976\u0978\x05l7\x02\u0977\u0976\x03\x02\x02\x02\u0977\u0978\x03" +
		"\x02\x02\x02\u0978\u09DD\x03\x02\x02\x02\u0979\u097A\x07\xC1\x02\x02\u097A" +
		"\u097B\x07/\x02\x02\u097B\u097D\x05\u0540\u02A1\x02\u097C\u097E\x05l7" +
		"\x02\u097D\u097C\x03\x02\x02\x02\u097D\u097E\x03\x02\x02\x02\u097E\u09DD" +
		"\x03\x02\x02\x02\u097F\u0980\x07\u014F\x02\x02\u0980\u0981\x07\u017D\x02" +
		"\x02\u0981\u09DD\x07\u0117\x02\x02\u0982\u0983\x07\xA0\x02\x02\u0983\u0984" +
		"\x07R\x02\x02\u0984\u09DD\x05\u0540\u02A1\x02\u0985\u0986\x07\u014F\x02" +
		"\x02\u0986\u0987\x07\u017D\x02\x02\u0987\u09DD\x07\xA0\x02\x02\u0988\u0989" +
		"\x07\u014F\x02\x02\u0989\u09DD\x07\u01B9\x02\x02\u098A\u098B\x07\u014F" +
		"\x02\x02\u098B\u09DD\x07\u0171\x02\x02\u098C\u098D\x07\xC3\x02\x02\u098D" +
		"\u098E\x07\u0167\x02\x02\u098E\u09DD\x05\u0540\u02A1\x02\u098F\u0990\x07" +
		"\xC3\x02\x02\u0990\u0991\x07\x8D\x02\x02\u0991\u0992\x07\u0167\x02\x02" +
		"\u0992\u09DD\x05\u0540\u02A1\x02\u0993\u0994\x07\xC3\x02\x02\u0994\u0995" +
		"\x07\u013A\x02\x02\u0995\u0996\x07\u0167\x02\x02\u0996\u09DD\x05\u0540" +
		"\u02A1\x02\u0997\u0998\x07\xC3\x02\x02\u0998\u0999\x07\u0167\x02\x02\u0999" +
		"\u09DD\x07 \x02\x02\u099A\u099B\x07\xC3\x02\x02\u099B\u099C\x07\u0167" +
		"\x02\x02\u099C\u09DD\x07e\x02\x02\u099D\u099E\x07\xBC\x02\x02\u099E\u099F" +
		"\x07\u0167\x02\x02\u099F\u09DD\x05\u0540\u02A1\x02\u09A0\u09A1\x07\xBC" +
		"\x02\x02\u09A1\u09A2\x07\u0167\x02\x02\u09A2\u09DD\x07 \x02\x02\u09A3" +
		"\u09A4\x07\xBC\x02\x02\u09A4\u09A5\x07\u0167\x02\x02\u09A5\u09DD\x07e" +
		"\x02\x02\u09A6\u09A7\x07\xC3\x02\x02\u09A7\u09A8\x07\u0143\x02\x02\u09A8" +
		"\u09DD\x05\u0540\u02A1\x02\u09A9\u09AA\x07\xC3\x02\x02\u09AA\u09AB\x07" +
		"\x8D\x02\x02\u09AB\u09AC\x07\u0143\x02\x02\u09AC\u09DD\x05\u0540\u02A1" +
		"\x02\u09AD\u09AE\x07\xC3\x02\x02\u09AE\u09AF\x07\u013A\x02\x02\u09AF\u09B0" +
		"\x07\u0143\x02\x02\u09B0\u09DD\x05\u0540\u02A1\x02\u09B1\u09B2\x07\xBC" +
		"\x02\x02\u09B2\u09B3\x07\u0143\x02\x02\u09B3\u09DD\x05\u0540\u02A1\x02" +
		"\u09B4\u09B5\x07\xE6\x02\x02\u09B5\u09DD\x05\u053C\u029F\x02\u09B6\u09B7" +
		"\x07\u010F\x02\x02\u09B7\u09B8\x07\xE6\x02\x02\u09B8\u09DD\x05\u053C\u029F" +
		"\x02\u09B9\u09BA\x07\u0115\x02\x02\u09BA\u09DD\x05\u0214\u010B\x02\u09BB" +
		"\u09BC\x07O\x02\x02\u09BC\u09DD\x07\u0115\x02\x02\u09BD\u09BE\x07\u011C" +
		"\x02\x02\u09BE\u09BF\x07`\x02\x02\u09BF\u09DD\x05\u055E\u02B0\x02\u09C0" +
		"\u09C1\x07\u014F\x02\x02\u09C1\u09C2\x07\u0161\x02\x02\u09C2\u09DD\x05" +
		"\u0540\u02A1\x02\u09C3\u09C4\x07\u014F\x02\x02\u09C4\u09DD\x05t;\x02\u09C5" +
		"\u09C6\x07\u013B\x02\x02\u09C6\u09DD\x05t;\x02\u09C7\u09C8\x07\u013A\x02" +
		"\x02\u09C8\u09C9\x07\xDD\x02\x02\u09C9\u09DD\x05r:\x02\u09CA\u09CB\x07" +
		"\xC3\x02\x02\u09CB\u09CC\x07\u01A0\x02\x02\u09CC\u09CD\x07\xFD\x02\x02" +
		"\u09CD\u09DD\x07\u0149\x02\x02\u09CE\u09CF\x07\xBC\x02\x02\u09CF\u09D0" +
		"\x07\u01A0\x02\x02\u09D0\u09D1\x07\xFD\x02\x02\u09D1\u09DD\x07\u0149\x02" +
		"\x02\u09D2\u09D3\x07\xD3\x02\x02\u09D3\u09D4\x07\u01A0\x02\x02\u09D4\u09D5" +
		"\x07\xFD\x02\x02\u09D5\u09DD\x07\u0149\x02\x02\u09D6\u09D7\x07\u010F\x02" +
		"\x02\u09D7\u09D8\x07\xD3\x02\x02\u09D8\u09D9\x07\u01A0\x02\x02\u09D9\u09DA" +
		"\x07\xFD\x02\x02\u09DA\u09DD\x07\u0149\x02\x02\u09DB\u09DD\x05\u015C\xAF" +
		"\x02\u09DC\u08B2\x03\x02\x02\x02\u09DC\u08B4\x03\x02\x02\x02\u09DC\u08B9" +
		"\x03\x02\x02\x02\u09DC\u08BC\x03\x02\x02\x02\u09DC\u08C2\x03\x02\x02\x02" +
		"\u09DC\u08C9\x03\x02\x02\x02\u09DC\u08D2\x03\x02\x02\x02\u09DC\u08DB\x03" +
		"\x02\x02\x02\u09DC\u08E3\x03\x02\x02\x02\u09DC\u08ED\x03\x02\x02\x02\u09DC" +
		"\u08F6\x03\x02\x02\x02\u09DC\u08FF\x03\x02\x02\x02\u09DC\u0907\x03\x02" +
		"\x02\x02\u09DC\u090F\x03\x02\x02\x02\u09DC\u0918\x03\x02\x02\x02\u09DC" +
		"\u0925\x03\x02\x02\x02\u09DC\u092C\x03\x02\x02\x02\u09DC\u0934\x03\x02" +
		"\x02\x02\u09DC\u093E\x03\x02\x02\x02\u09DC\u0948\x03\x02\x02\x02\u09DC" +
		"\u0950\x03\x02\x02\x02\u09DC\u0960\x03\x02\x02\x02\u09DC\u0967\x03\x02" +
		"\x02\x02\u09DC\u0969\x03\x02\x02\x02\u09DC\u096E\x03\x02\x02\x02\u09DC" +
		"\u0971\x03\x02\x02\x02\u09DC\u0979\x03\x02\x02\x02\u09DC\u097F\x03\x02" +
		"\x02\x02\u09DC\u0982\x03\x02\x02\x02\u09DC\u0985\x03\x02\x02\x02\u09DC" +
		"\u0988\x03\x02\x02\x02\u09DC\u098A\x03\x02\x02\x02\u09DC\u098C\x03\x02" +
		"\x02\x02\u09DC\u098F\x03\x02\x02\x02\u09DC\u0993\x03\x02\x02\x02\u09DC" +
		"\u0997\x03\x02\x02\x02\u09DC\u099A\x03\x02\x02\x02\u09DC\u099D\x03\x02" +
		"\x02\x02\u09DC\u09A0\x03\x02\x02\x02\u09DC\u09A3\x03\x02\x02\x02\u09DC" +
		"\u09A6\x03\x02\x02\x02\u09DC\u09A9\x03\x02\x02\x02\u09DC\u09AD\x03\x02" +
		"\x02\x02\u09DC\u09B1\x03\x02\x02\x02\u09DC\u09B4\x03\x02\x02\x02\u09DC" +
		"\u09B6\x03\x02\x02\x02\u09DC\u09B9\x03\x02\x02\x02\u09DC\u09BB\x03\x02" +
		"\x02\x02\u09DC\u09BD\x03\x02\x02\x02\u09DC\u09C0\x03\x02\x02\x02\u09DC" +
		"\u09C3\x03\x02\x02\x02\u09DC\u09C5\x03\x02\x02\x02\u09DC\u09C7\x03\x02" +
		"\x02\x02\u09DC\u09CA\x03\x02\x02\x02\u09DC\u09CE\x03\x02\x02\x02\u09DC" +
		"\u09D2\x03\x02\x02\x02\u09DC\u09D6\x03\x02\x02\x02\u09DC\u09DB\x03\x02" +
		"\x02\x02\u09DDi\x03\x02\x02\x02\u09DE\u09DF\x07\u014F\x02\x02\u09DF\u09E0" +
		"\x077\x02\x02\u09E0\u09E4\x05\u048E\u0248\x02\u09E1\u09E2\x07\xC1\x02" +
		"\x02\u09E2\u09E4\x077\x02\x02\u09E3\u09DE\x03\x02\x02\x02\u09E3\u09E1" +
		"\x03\x02\x02\x02\u09E4k\x03\x02\x02\x02\u09E5\u09E6\t\x11\x02\x02\u09E6" +
		"m\x03\x02\x02\x02\u09E7\u09E8\x07-\x02\x02\u09E8\u09E9\x05\u0214\u010B" +
		"\x02\u09E9o\x03\x02\x02\x02\u09EA\u09EB\x07f\x02\x02\u09EB\u09EC\x05\u048E" +
		"\u0248\x02\u09ECq\x03\x02\x02\x02\u09ED\u09F4\x07\u0110\x02\x02\u09EE" +
		"\u09F4\x07s\x02\x02\u09EF\u09F4\x077\x02\x02\u09F0\u09F1\x07f\x02\x02" +
		"\u09F1\u09F2\x07\xE4\x02\x02\u09F2\u09F4\x05\u0540\u02A1\x02\u09F3\u09ED" +
		"\x03\x02\x02\x02\u09F3\u09EE\x03\x02\x02\x02\u09F3\u09EF\x03\x02\x02\x02" +
		"\u09F3\u09F0\x03\x02\x02\x02\u09F4s\x03\x02\x02\x02\u09F5\u09F6\x07\x04" +
		"\x02\x02\u09F6\u09F7\x05x=\x02\u09F7\u09F8\x07\x05\x02\x02\u09F8u\x03" +
		"\x02\x02\x02\u09F9\u09FA\x07k\x02\x02\u09FA\u09FB\x05t;\x02\u09FBw\x03" +
		"\x02\x02\x02\u09FC\u0A01\x05z>\x02\u09FD\u09FE\x07\b\x02\x02\u09FE\u0A00" +
		"\x05z>\x02\u09FF\u09FD\x03\x02\x02\x02\u0A00\u0A03\x03\x02\x02\x02\u0A01" +
		"\u09FF\x03\x02\x02\x02\u0A01\u0A02\x03\x02\x02\x02\u0A02y\x03\x02\x02" +
		"\x02\u0A03\u0A01\x03\x02\x02\x02\u0A04\u0A0D\x05\u0570\u02B9\x02\u0A05" +
		"\u0A06\x07\f\x02\x02\u0A06\u0A0E\x05\u01DA\xEE\x02\u0A07\u0A08\x07\r\x02" +
		"\x02\u0A08\u0A0B\x05\u0570\u02B9\x02\u0A09\u0A0A\x07\f\x02\x02\u0A0A\u0A0C" +
		"\x05\u01DA\xEE\x02\u0A0B\u0A09\x03\x02\x02\x02\u0A0B\u0A0C\x03\x02\x02" +
		"\x02\u0A0C\u0A0E\x03\x02\x02\x02\u0A0D\u0A05\x03\x02\x02\x02\u0A0D\u0A07" +
		"\x03\x02\x02\x02\u0A0D\u0A0E\x03\x02\x02\x02\u0A0E{\x03\x02\x02\x02\u0A0F" +
		"\u0A11\x05~@\x02\u0A10\u0A0F\x03\x02\x02\x02\u0A11\u0A12\x03\x02\x02\x02" +
		"\u0A12\u0A10\x03\x02\x02\x02\u0A12\u0A13\x03\x02\x02\x02\u0A13}\x03\x02" +
		"\x02\x02\u0A14\u0A19\x07\u013C\x02\x02\u0A15\u0A17\x05\x10\t\x02\u0A16" +
		"\u0A15\x03\x02\x02\x02\u0A16\u0A17\x03\x02\x02\x02\u0A17\u0A18\x03\x02" +
		"\x02\x02\u0A18\u0A1A\x05\u0128\x95\x02\u0A19\u0A16\x03\x02\x02\x02\u0A19" +
		"\u0A1A\x03\x02\x02\x02\u0A1A\u0A22\x03\x02\x02\x02\u0A1B\u0A1F\x07\u014F" +
		"\x02\x02\u0A1C\u0A20\x05\u0124\x93\x02\u0A1D\u0A1E\x07\u01B8\x02\x02\u0A1E" +
		"\u0A20\x05\xC8e\x02\u0A1F\u0A1C\x03\x02\x02\x02\u0A1F\u0A1D\x03\x02\x02" +
		"\x02\u0A20\u0A22\x03\x02\x02\x02\u0A21\u0A14\x03\x02\x02\x02\u0A21\u0A1B" +
		"\x03\x02\x02\x02\u0A22\x7F\x03\x02\x02\x02\u0A23\u0A24\x07@\x02\x02\u0A24" +
		"\u0A25\x07\u01A8\x02\x02\u0A25\u0A26\x07k\x02\x02\u0A26\u0A27\x07\x04" +
		"\x02\x02\u0A27\u0A28\x05\x84C\x02\u0A28\u0A29\x07\x05\x02\x02\u0A29\u0A3E" +
		"\x03\x02\x02\x02\u0A2A\u0A2B\x07@\x02\x02\u0A2B\u0A2C\x07\u01A8\x02\x02" +
		"\u0A2C\u0A2D\x07F\x02\x02\u0A2D\u0A2E\x07\x04\x02\x02\u0A2E\u0A2F\x05" +
		"\u0502\u0282\x02\u0A2F\u0A30\x07\x05\x02\x02\u0A30\u0A3E\x03\x02\x02\x02" +
		"\u0A31\u0A32\x07@\x02\x02\u0A32\u0A33\x07\u01A8\x02\x02\u0A33\u0A34\x07" +
		"B\x02\x02\u0A34\u0A35\x07\x04\x02\x02\u0A35\u0A36\x05\u0502\u0282\x02" +
		"\u0A36\u0A37\x07\x05\x02\x02\u0A37\u0A38\x07`\x02\x02\u0A38\u0A39\x07" +
		"\x04\x02\x02\u0A39\u0A3A\x05\u0502\u0282\x02\u0A3A\u0A3B\x07\x05\x02\x02" +
		"\u0A3B\u0A3E\x03\x02\x02\x02\u0A3C\u0A3E\x077\x02\x02\u0A3D\u0A23\x03" +
		"\x02\x02\x02\u0A3D\u0A2A\x03\x02\x02\x02\u0A3D\u0A31\x03\x02\x02\x02\u0A3D" +
		"\u0A3C\x03\x02\x02\x02\u0A3E\x81\x03\x02\x02\x02\u0A3F\u0A40\x05\u056E" +
		"\u02B8\x02\u0A40\u0A41\x05\u0550\u02A9\x02\u0A41\x83\x03\x02\x02\x02\u0A42" +
		"\u0A47\x05\x82B\x02\u0A43\u0A44\x07\b\x02\x02\u0A44\u0A46\x05\x82B\x02" +
		"\u0A45\u0A43\x03\x02\x02\x02\u0A46\u0A49\x03\x02\x02\x02\u0A47\u0A45\x03" +
		"\x02\x02\x02\u0A47\u0A48\x03\x02\x02\x02\u0A48\x85\x03\x02\x02\x02\u0A49" +
		"\u0A47\x03\x02\x02\x02\u0A4A\u0A4B\x07\x8C\x02\x02\u0A4B\u0A4C\x07\u016A" +
		"\x02\x02\u0A4C\u0A4D\x05\u0214\u010B\x02\u0A4D\u0A4E\x05\x88E\x02\u0A4E" +
		"\x87\x03\x02\x02\x02\u0A4F\u0A54\x05\x8AF\x02\u0A50\u0A51\x07\b\x02\x02" +
		"\u0A51\u0A53\x05\x8AF\x02\u0A52\u0A50\x03\x02\x02\x02\u0A53\u0A56\x03" +
		"\x02\x02\x02\u0A54\u0A52\x03\x02\x02\x02\u0A54\u0A55\x03\x02\x02\x02\u0A55" +
		"\x89\x03\x02\x02\x02\u0A56\u0A54\x03\x02\x02\x02\u0A57\u0A58\x07\x87\x02" +
		"\x02\u0A58\u0A59\x07\x91\x02\x02\u0A59\u0A5B\x05\u0452\u022A\x02\u0A5A" +
		"\u0A5C\x05l7\x02\u0A5B\u0A5A\x03\x02\x02\x02\u0A5B\u0A5C\x03\x02\x02\x02" +
		"\u0A5C\u0A76\x03\x02\x02\x02\u0A5D\u0A5E\x07\xC1\x02\x02\u0A5E\u0A61\x07" +
		"\x91\x02\x02\u0A5F\u0A60\x07\xDE\x02\x02\u0A60\u0A62\x07\u018E\x02\x02" +
		"\u0A61\u0A5F\x03\x02\x02\x02\u0A61\u0A62\x03\x02\x02\x02\u0A62\u0A63\x03" +
		"\x02\x02\x02\u0A63\u0A65\x05\u0562\u02B2\x02\u0A64\u0A66\x05l7\x02\u0A65" +
		"\u0A64\x03\x02\x02\x02\u0A65\u0A66\x03\x02\x02\x02\u0A66\u0A76\x03\x02" +
		"\x02\x02\u0A67\u0A68\x07\x8C\x02\x02\u0A68\u0A69\x07\x91\x02\x02\u0A69" +
		"\u0A6B\x05\u0562\u02B2\x02\u0A6A\u0A6C\x05\u02E4\u0173\x02\u0A6B\u0A6A" +
		"\x03\x02\x02\x02\u0A6B\u0A6C\x03\x02\x02\x02\u0A6C\u0A6D\x03\x02\x02\x02" +
		"\u0A6D\u0A6E\x07\u016A\x02\x02\u0A6E\u0A70\x05\u0462\u0232\x02\u0A6F\u0A71" +
		"\x05n8\x02\u0A70\u0A6F\x03\x02\x02\x02\u0A70\u0A71\x03\x02\x02\x02\u0A71" +
		"\u0A73\x03\x02\x02\x02\u0A72\u0A74\x05l7\x02\u0A73\u0A72\x03\x02\x02\x02" +
		"\u0A73\u0A74\x03\x02\x02\x02\u0A74\u0A76\x03\x02\x02\x02\u0A75\u0A57\x03" +
		"\x02\x02\x02\u0A75\u0A5D\x03\x02\x02\x02\u0A75\u0A67\x03\x02\x02\x02\u0A76" +
		"\x8B\x03\x02\x02\x02\u0A77\u0A7A\x07\x9F\x02\x02\u0A78\u0A7B\x05\u03C0" +
		"\u01E1\x02\u0A79\u0A7B\x07 \x02\x02\u0A7A\u0A78\x03\x02\x02\x02\u0A7A" +
		"\u0A79\x03\x02\x02\x02\u0A7B\x8D\x03\x02\x02\x02\u0A7C\u0A7E\x07\xAB\x02" +
		"\x02\u0A7D\u0A7F\x05\x9CO\x02\u0A7E\u0A7D\x03\x02\x02\x02\u0A7E\u0A7F" +
		"\x03\x02\x02\x02\u0A7F\u0A80\x03\x02\x02\x02\u0A80\u0A82\x05\u053C\u029F" +
		"\x02\u0A81\u0A83\x05\xDAn\x02\u0A82\u0A81\x03\x02\x02\x02\u0A82\u0A83" +
		"\x03\x02\x02\x02\u0A83\u0A84\x03\x02\x02\x02\u0A84\u0A86\x05\x90I\x02" +
		"\u0A85\u0A87\x05\x92J\x02\u0A86\u0A85\x03\x02\x02\x02\u0A86\u0A87\x03" +
		"\x02\x02\x02\u0A87\u0A88\x03\x02\x02\x02\u0A88\u0A8A\x05\x94K\x02\u0A89" +
		"\u0A8B\x05\x9EP\x02\u0A8A\u0A89\x03\x02\x02\x02\u0A8A\u0A8B\x03\x02\x02" +
		"\x02\u0A8B\u0A8D\x03\x02\x02\x02\u0A8C\u0A8E\x05\x10\t\x02\u0A8D\u0A8C" +
		"\x03\x02\x02\x02\u0A8D\u0A8E\x03\x02\x02\x02\u0A8E\u0A8F\x03\x02\x02\x02" +
		"\u0A8F\u0A91\x05\x96L\x02\u0A90\u0A92\x05\u044A\u0226\x02\u0A91\u0A90" +
		"\x03\x02\x02\x02\u0A91\u0A92\x03\x02\x02\x02\u0A92\u0AA2\x03\x02\x02\x02" +
		"\u0A93\u0A94\x07\xAB\x02\x02\u0A94\u0A95\x07\x04\x02\x02\u0A95\u0A96\x05" +
		"\u038C\u01C7\x02\u0A96\u0A97\x07\x05\x02\x02\u0A97\u0A99\x07`\x02\x02" +
		"\u0A98\u0A9A\x05\x92J\x02\u0A99\u0A98\x03\x02\x02\x02\u0A99\u0A9A\x03" +
		"\x02\x02\x02\u0A9A\u0A9B\x03\x02\x02\x02\u0A9B\u0A9D\x05\x94K\x02\u0A9C" +
		"\u0A9E\x05\x10\t\x02\u0A9D\u0A9C\x03\x02\x02\x02\u0A9D\u0A9E\x03\x02\x02" +
		"\x02\u0A9E\u0A9F\x03\x02\x02\x02\u0A9F\u0AA0\x05\x96L\x02\u0AA0\u0AA2" +
		"\x03\x02\x02\x02\u0AA1\u0A7C\x03\x02\x02\x02\u0AA1\u0A93\x03\x02\x02\x02" +
		"\u0AA2\x8F\x03\x02\x02\x02\u0AA3\u0AA4\t\x12\x02\x02\u0AA4\x91\x03\x02" +
		"\x02\x02\u0AA5\u0AA6\x07\u012B\x02\x02\u0AA6\x93\x03\x02\x02\x02\u0AA7" +
		"\u0AAB\x05\u0552\u02AA\x02\u0AA8\u0AAB\x07\u0159\x02\x02\u0AA9\u0AAB\x07" +
		"\u015A\x02\x02\u0AAA\u0AA7\x03\x02\x02\x02\u0AAA\u0AA8\x03\x02\x02\x02" +
		"\u0AAA\u0AA9\x03\x02\x02\x02\u0AAB\x95\x03\x02\x02\x02\u0AAC\u0AB2\x05" +
		"\x98M\x02\u0AAD\u0AAE\x07\x04\x02\x02\u0AAE\u0AAF\x05\xA2R\x02\u0AAF\u0AB0" +
		"\x07\x05\x02\x02\u0AB0\u0AB2\x03\x02\x02\x02\u0AB1\u0AAC\x03\x02\x02\x02" +
		"\u0AB1\u0AAD\x03\x02\x02\x02\u0AB2\x97\x03\x02\x02\x02\u0AB3\u0AB5\x05" +
		"\x9AN\x02\u0AB4\u0AB3\x03\x02\x02\x02\u0AB5\u0AB8\x03\x02\x02\x02\u0AB6" +
		"\u0AB4\x03\x02\x02\x02\u0AB6\u0AB7\x03\x02\x02\x02\u0AB7\x99\x03\x02\x02" +
		"\x02\u0AB8\u0AB6\x03\x02\x02\x02\u0AB9\u0AE1\x07m\x02\x02\u0ABA\u0AE1" +
		"\x07r\x02\x02\u0ABB\u0ABD\x07\xB9\x02\x02\u0ABC\u0ABE\x05\u0350\u01A9" +
		"\x02\u0ABD\u0ABC\x03\x02\x02\x02\u0ABD\u0ABE\x03\x02\x02\x02\u0ABE\u0ABF" +
		"\x03\x02\x02\x02\u0ABF\u0AE1\x05\u0552\u02AA\x02\u0AC0\u0AC2\x07P\x02" +
		"\x02\u0AC1\u0AC3\x05\u0350\u01A9\x02\u0AC2\u0AC1\x03\x02\x02\x02\u0AC2" +
		"\u0AC3\x03\x02\x02\x02\u0AC3\u0AC4\x03\x02\x02\x02\u0AC4\u0AE1\x05\u0552" +
		"\u02AA\x02\u0AC5\u0AE1\x07\xAD\x02\x02\u0AC6\u0AE1\x07\xDA\x02\x02\u0AC7" +
		"\u0AC9\x07\u012C\x02\x02\u0AC8\u0ACA\x05\u0350\u01A9\x02\u0AC9\u0AC8\x03" +
		"\x02\x02\x02\u0AC9\u0ACA\x03\x02\x02\x02\u0ACA\u0ACB\x03\x02\x02\x02\u0ACB" +
		"\u0AE1\x05\u0552\u02AA\x02\u0ACC\u0ACE\x07\xC7\x02\x02\u0ACD\u0ACF\x05" +
		"\u0350\u01A9\x02\u0ACE\u0ACD\x03\x02\x02\x02\u0ACE\u0ACF\x03\x02\x02\x02" +
		"\u0ACF\u0AD0\x03\x02\x02\x02\u0AD0\u0AE1\x05\u0552\u02AA\x02\u0AD1\u0AD2" +
		"\x07\xD3\x02\x02\u0AD2\u0AD3\x07\u012C\x02\x02\u0AD3\u0AE1\x05\xDCo\x02" +
		"\u0AD4\u0AD5\x07\xD3\x02\x02\u0AD5\u0AD6\x07\u012C\x02\x02\u0AD6\u0AE1" +
		"\x07\v\x02\x02\u0AD7\u0AD8\x07\xD3\x02\x02\u0AD8\u0AD9\x07O\x02\x02\u0AD9" +
		"\u0ADA\x07P\x02\x02\u0ADA\u0AE1\x05\xDCo\x02\u0ADB\u0ADC\x07\xD3\x02\x02" +
		"\u0ADC\u0ADD\x07P\x02\x02\u0ADD\u0AE1\x05\xDCo\x02\u0ADE\u0ADF\x07\xC4" +
		"\x02\x02\u0ADF\u0AE1\x05\u0552\u02AA\x02\u0AE0\u0AB9\x03\x02\x02\x02\u0AE0" +
		"\u0ABA\x03\x02\x02\x02\u0AE0\u0ABB\x03\x02\x02\x02\u0AE0\u0AC0\x03\x02" +
		"\x02\x02\u0AE0\u0AC5\x03\x02\x02\x02\u0AE0\u0AC6\x03\x02\x02\x02\u0AE0" +
		"\u0AC7\x03\x02\x02\x02\u0AE0\u0ACC\x03\x02\x02\x02\u0AE0\u0AD1\x03\x02" +
		"\x02\x02\u0AE0\u0AD4\x03\x02\x02\x02\u0AE0\u0AD7\x03\x02\x02\x02\u0AE0" +
		"\u0ADB\x03\x02\x02\x02\u0AE0\u0ADE\x03\x02\x02\x02\u0AE1\x9B\x03\x02\x02" +
		"\x02\u0AE2\u0AE3\x07m\x02\x02\u0AE3\x9D\x03\x02\x02\x02\u0AE4\u0AE6\x05" +
		"\xA0Q\x02\u0AE5\u0AE4\x03\x02\x02\x02\u0AE5\u0AE6\x03\x02\x02\x02\u0AE6" +
		"\u0AE7\x03\x02\x02\x02\u0AE7\u0AE8\x07\xBA\x02\x02\u0AE8\u0AE9\x05\u0552" +
		"\u02AA\x02\u0AE9\x9F\x03\x02\x02\x02\u0AEA\u0AEB\x07f\x02\x02\u0AEB\xA1" +
		"\x03\x02\x02\x02\u0AEC\u0AF1\x05\xA4S\x02\u0AED\u0AEE\x07\b\x02\x02\u0AEE" +
		"\u0AF0\x05\xA4S\x02\u0AEF\u0AED\x03\x02\x02\x02\u0AF0\u0AF3\x03\x02\x02" +
		"\x02\u0AF1\u0AEF\x03\x02\x02\x02\u0AF1\u0AF2\x03\x02\x02\x02\u0AF2\xA3" +
		"\x03\x02\x02\x02\u0AF3\u0AF1\x03\x02\x02\x02\u0AF4\u0AF6\x05\u0570\u02B9" +
		"\x02\u0AF5\u0AF7\x05\xA6T\x02\u0AF6\u0AF5\x03\x02\x02\x02\u0AF6\u0AF7" +
		"\x03\x02\x02\x02\u0AF7\xA5\x03\x02\x02\x02\u0AF8\u0B00\x05B\"\x02\u0AF9" +
		"\u0B00\x05\u0128\x95\x02\u0AFA\u0B00\x07\v\x02\x02\u0AFB\u0AFC\x07\x04" +
		"\x02\x02\u0AFC\u0AFD\x05\xA8U\x02\u0AFD\u0AFE\x07\x05\x02\x02\u0AFE\u0B00" +
		"\x03\x02\x02\x02\u0AFF\u0AF8\x03\x02\x02\x02\u0AFF\u0AF9\x03\x02\x02\x02" +
		"\u0AFF\u0AFA\x03\x02\x02\x02\u0AFF\u0AFB\x03\x02\x02\x02\u0B00\xA7\x03" +
		"\x02\x02\x02\u0B01\u0B06\x05\xAAV\x02\u0B02\u0B03\x07\b\x02\x02\u0B03" +
		"\u0B05\x05\xAAV\x02\u0B04\u0B02\x03\x02\x02\x02\u0B05\u0B08\x03\x02\x02" +
		"\x02\u0B06\u0B04\x03\x02\x02\x02\u0B06\u0B07\x03\x02\x02\x02\u0B07\xA9" +
		"\x03\x02\x02\x02\u0B08\u0B06\x03\x02\x02\x02\u0B09\u0B0A\x05B\"\x02\u0B0A" +
		"\xAB\x03\x02\x02\x02\u0B0B\u0B0D\x070\x02\x02\u0B0C\u0B0E\x05\xAEX\x02" +
		"\u0B0D\u0B0C\x03\x02\x02\x02\u0B0D\u0B0E\x03\x02\x02\x02\u0B0E\u0B0F\x03" +
		"\x02\x02\x02\u0B0F\u0B13\x07^\x02\x02\u0B10\u0B11\x07\xDE\x02\x02\u0B11" +
		"\u0B12\x07O\x02\x02\u0B12\u0B14\x07\u018E\x02";
	private static readonly _serializedATNSegment8: string =
		"\x02\u0B13\u0B10\x03\x02\x02\x02\u0B13\u0B14\x03\x02\x02\x02\u0B14\u0B15" +
		"\x03\x02\x02\x02\u0B15\u0B57\x05\u053A\u029E\x02\u0B16\u0B18\x07\x04\x02" +
		"\x02\u0B17\u0B19\x05\xB0Y\x02\u0B18\u0B17\x03\x02\x02\x02\u0B18\u0B19" +
		"\x03\x02\x02\x02\u0B19\u0B1A\x03\x02\x02\x02\u0B1A\u0B1C\x07\x05\x02\x02" +
		"\u0B1B\u0B1D\x05\xF2z\x02\u0B1C\u0B1B\x03\x02\x02\x02\u0B1C\u0B1D\x03" +
		"\x02\x02\x02\u0B1D\u0B1F\x03\x02\x02\x02\u0B1E\u0B20\x05\xF4{\x02\u0B1F" +
		"\u0B1E\x03\x02\x02\x02\u0B1F\u0B20\x03\x02\x02\x02\u0B20\u0B22\x03\x02" +
		"\x02\x02\u0B21\u0B23\x05\xFC\x7F\x02\u0B22\u0B21\x03\x02\x02\x02\u0B22" +
		"\u0B23\x03\x02\x02\x02\u0B23\u0B25\x03\x02\x02\x02\u0B24\u0B26\x05\xFE" +
		"\x80\x02\u0B25\u0B24\x03\x02\x02\x02\u0B25\u0B26\x03\x02\x02\x02\u0B26" +
		"\u0B28\x03\x02\x02\x02\u0B27\u0B29\x05\u0100\x81\x02\u0B28\u0B27\x03\x02" +
		"\x02\x02\u0B28\u0B29\x03\x02\x02\x02\u0B29\u0B2B\x03\x02\x02\x02\u0B2A" +
		"\u0B2C\x05\u0102\x82\x02\u0B2B\u0B2A\x03\x02\x02\x02\u0B2B\u0B2C\x03\x02" +
		"\x02\x02\u0B2C\u0B58\x03\x02\x02\x02\u0B2D\u0B2E\x07\u0115\x02\x02\u0B2E" +
		"\u0B30\x05\u0214\u010B\x02\u0B2F\u0B31\x05\xB4[\x02\u0B30\u0B2F\x03\x02" +
		"\x02\x02\u0B30\u0B31\x03\x02\x02\x02\u0B31\u0B33\x03\x02\x02\x02\u0B32" +
		"\u0B34\x05\xF4{\x02\u0B33\u0B32\x03\x02\x02\x02\u0B33\u0B34\x03\x02\x02" +
		"\x02\u0B34\u0B36\x03\x02\x02\x02\u0B35\u0B37\x05\xFC\x7F\x02\u0B36\u0B35" +
		"\x03\x02\x02\x02\u0B36\u0B37\x03\x02\x02\x02\u0B37\u0B39\x03\x02\x02\x02" +
		"\u0B38\u0B3A\x05\xFE\x80\x02\u0B39\u0B38\x03\x02\x02\x02\u0B39\u0B3A\x03" +
		"\x02\x02\x02\u0B3A\u0B3C\x03\x02\x02\x02\u0B3B\u0B3D\x05\u0100\x81\x02" +
		"\u0B3C\u0B3B\x03\x02\x02\x02\u0B3C\u0B3D\x03\x02\x02\x02\u0B3D\u0B3F\x03" +
		"\x02\x02\x02\u0B3E\u0B40\x05\u0102\x82\x02\u0B3F\u0B3E\x03\x02\x02\x02" +
		"\u0B3F\u0B40\x03\x02\x02\x02\u0B40\u0B58\x03\x02\x02\x02\u0B41\u0B42\x07" +
		"\u011F\x02\x02\u0B42\u0B43\x07\u0115\x02\x02\u0B43\u0B45\x05\u053C\u029F" +
		"\x02\u0B44\u0B46\x05\xB4[\x02\u0B45\u0B44\x03\x02\x02\x02\u0B45\u0B46" +
		"\x03\x02\x02\x02\u0B46\u0B47\x03\x02\x02\x02\u0B47\u0B49\x05\x80A\x02" +
		"\u0B48\u0B4A\x05\xF4{\x02\u0B49\u0B48\x03\x02\x02\x02\u0B49\u0B4A\x03" +
		"\x02\x02\x02\u0B4A\u0B4C\x03\x02\x02\x02\u0B4B\u0B4D\x05\xFC\x7F\x02\u0B4C" +
		"\u0B4B\x03\x02\x02\x02\u0B4C\u0B4D\x03\x02\x02\x02\u0B4D\u0B4F\x03\x02" +
		"\x02\x02\u0B4E\u0B50\x05\xFE\x80\x02\u0B4F\u0B4E\x03\x02\x02\x02\u0B4F" +
		"\u0B50\x03\x02\x02\x02\u0B50\u0B52\x03\x02\x02\x02\u0B51\u0B53\x05\u0100" +
		"\x81\x02\u0B52\u0B51\x03\x02\x02\x02\u0B52\u0B53\x03\x02\x02\x02\u0B53" +
		"\u0B55\x03\x02\x02\x02\u0B54\u0B56\x05\u0102\x82\x02\u0B55\u0B54\x03\x02" +
		"\x02\x02\u0B55\u0B56\x03\x02\x02\x02\u0B56\u0B58\x03\x02\x02\x02\u0B57" +
		"\u0B16\x03\x02\x02\x02\u0B57\u0B2D\x03\x02\x02\x02\u0B57\u0B41\x03\x02" +
		"\x02\x02\u0B58\xAD\x03\x02\x02\x02\u0B59\u0B61\x07\u0164\x02\x02\u0B5A" +
		"\u0B61\x07\u0162\x02\x02\u0B5B\u0B5C\x07\u0100\x02\x02\u0B5C\u0B61\t\x13" +
		"\x02\x02\u0B5D\u0B5E\x07\xD7\x02\x02\u0B5E\u0B61\t\x13\x02\x02\u0B5F\u0B61" +
		"\x07\u0171\x02\x02\u0B60\u0B59\x03\x02\x02\x02\u0B60\u0B5A\x03\x02\x02" +
		"\x02\u0B60\u0B5B\x03\x02\x02\x02\u0B60\u0B5D\x03\x02\x02\x02\u0B60\u0B5F" +
		"\x03\x02\x02\x02\u0B61\xAF\x03\x02\x02\x02\u0B62\u0B63\x05\xB6\\\x02\u0B63" +
		"\xB1\x03\x02\x02\x02\u0B64\u0B65\x05\xB6\\\x02\u0B65\xB3\x03\x02\x02\x02" +
		"\u0B66\u0B67\x07\x04\x02\x02\u0B67\u0B68\x05\xB8]\x02\u0B68\u0B69\x07" +
		"\x05\x02\x02\u0B69\xB5\x03\x02\x02\x02\u0B6A\u0B6F\x05\xBA^\x02\u0B6B" +
		"\u0B6C\x07\b\x02\x02\u0B6C\u0B6E\x05\xBA^\x02\u0B6D\u0B6B\x03\x02\x02" +
		"\x02\u0B6E\u0B71\x03\x02\x02\x02\u0B6F\u0B6D\x03\x02\x02\x02\u0B6F\u0B70" +
		"\x03\x02\x02\x02\u0B70\xB7\x03\x02\x02\x02\u0B71\u0B6F\x03\x02\x02\x02" +
		"\u0B72\u0B77\x05\xBC_\x02\u0B73\u0B74\x07\b\x02\x02\u0B74\u0B76\x05\xBC" +
		"_\x02\u0B75\u0B73\x03\x02\x02\x02\u0B76\u0B79\x03\x02\x02\x02\u0B77\u0B75" +
		"\x03\x02\x02\x02\u0B77\u0B78\x03\x02\x02\x02\u0B78\xB9\x03\x02\x02\x02" +
		"\u0B79\u0B77\x03\x02\x02\x02\u0B7A\u0B7E\x05\xBE`\x02\u0B7B\u0B7E\x05" +
		"\xCEh\x02\u0B7C\u0B7E\x05\xD4k\x02\u0B7D\u0B7A\x03\x02\x02\x02\u0B7D\u0B7B" +
		"\x03\x02\x02\x02\u0B7D\u0B7C\x03\x02\x02\x02\u0B7E\xBB\x03\x02\x02\x02" +
		"\u0B7F\u0B82\x05\xC0a\x02\u0B80\u0B82\x05\xD4k\x02\u0B81\u0B7F\x03\x02" +
		"\x02\x02\u0B81\u0B80\x03\x02\x02\x02\u0B82\xBD\x03\x02\x02\x02\u0B83\u0B84" +
		"\x05\u0562\u02B2\x02\u0B84\u0B86\x05\u0462\u0232\x02\u0B85\u0B87\x05\u0158" +
		"\xAD\x02\u0B86\u0B85\x03\x02\x02\x02\u0B86\u0B87\x03\x02\x02\x02\u0B87" +
		"\u0B8A\x03\x02\x02\x02\u0B88\u0B89\x07-\x02\x02\u0B89\u0B8B\x05\u0214" +
		"\u010B\x02\u0B8A\u0B88\x03\x02\x02\x02\u0B8A\u0B8B\x03\x02\x02\x02\u0B8B" +
		"\u0B8C\x03\x02\x02\x02\u0B8C\u0B8D\x05\xC2b\x02\u0B8D\xBF\x03\x02\x02" +
		"\x02\u0B8E\u0B91\x05\u0562\u02B2\x02\u0B8F\u0B90\x07k\x02\x02\u0B90\u0B92" +
		"\x07\u011A\x02\x02\u0B91\u0B8F\x03\x02\x02\x02\u0B91\u0B92\x03\x02\x02" +
		"\x02\u0B92\u0B93\x03\x02\x02\x02\u0B93\u0B94\x05\xC2b\x02\u0B94\xC1\x03" +
		"\x02\x02\x02\u0B95\u0B97\x05\xC4c\x02\u0B96\u0B95\x03\x02\x02\x02\u0B97" +
		"\u0B9A\x03\x02\x02\x02\u0B98\u0B96\x03\x02\x02\x02\u0B98\u0B99\x03\x02" +
		"\x02\x02\u0B99\xC3\x03\x02\x02\x02\u0B9A\u0B98\x03\x02\x02\x02\u0B9B\u0B9C" +
		"\x07/\x02\x02\u0B9C\u0B9E\x05\u0540\u02A1\x02\u0B9D\u0B9B\x03\x02\x02" +
		"\x02\u0B9D\u0B9E\x03\x02\x02\x02\u0B9E\u0B9F\x03\x02\x02\x02\u0B9F\u0BA1" +
		"\x05\xC6d\x02\u0BA0\u0BA2\x05\xCAf\x02\u0BA1\u0BA0\x03\x02\x02\x02\u0BA1" +
		"\u0BA2\x03\x02\x02\x02\u0BA2\u0BA4\x03\x02\x02\x02\u0BA3\u0BA5\x05\xCC" +
		"g\x02\u0BA4\u0BA3\x03\x02\x02\x02\u0BA4\u0BA5\x03\x02\x02\x02\u0BA5\u0BAE" +
		"\x03\x02\x02\x02\u0BA6\u0BA8\x05\xC6d\x02\u0BA7\u0BA9\x05\xCAf\x02\u0BA8" +
		"\u0BA7\x03\x02\x02\x02\u0BA8\u0BA9\x03\x02\x02\x02\u0BA9\u0BAB\x03\x02" +
		"\x02\x02\u0BAA\u0BAC\x05\xCCg\x02\u0BAB\u0BAA\x03\x02\x02\x02\u0BAB\u0BAC" +
		"\x03\x02\x02\x02\u0BAC\u0BAE\x03\x02\x02\x02\u0BAD\u0B9D\x03\x02\x02\x02" +
		"\u0BAD\u0BA6\x03\x02\x02\x02\u0BAE\xC5\x03\x02\x02\x02\u0BAF\u0BB0\x07" +
		"O\x02\x02\u0BB0\u0BE4\x07P\x02\x02\u0BB1\u0BE4\x07P\x02\x02\u0BB2\u0BB4" +
		"\x07d\x02\x02\u0BB3\u0BB5\x05\u02A6\u0154\x02\u0BB4\u0BB3\x03\x02\x02" +
		"\x02\u0BB4\u0BB5\x03\x02\x02\x02\u0BB5\u0BB7\x03\x02\x02\x02\u0BB6\u0BB8" +
		"\x05\u0104\x83\x02\u0BB7\u0BB6\x03\x02\x02\x02\u0BB7\u0BB8\x03\x02\x02" +
		"\x02\u0BB8\u0BE4\x03\x02\x02\x02\u0BB9\u0BBA\x07W\x02\x02\u0BBA\u0BBC" +
		"\x07\xF7\x02\x02\u0BBB\u0BBD\x05\u02A6\u0154\x02\u0BBC\u0BBB\x03\x02\x02" +
		"\x02\u0BBC\u0BBD\x03\x02\x02\x02\u0BBD\u0BBF\x03\x02\x02\x02\u0BBE\u0BC0" +
		"\x05\u0104\x83\x02\u0BBF\u0BBE\x03\x02\x02\x02\u0BBF\u0BC0\x03\x02\x02" +
		"\x02\u0BC0\u0BE4\x03\x02\x02\x02\u0BC1\u0BC2\x07,\x02\x02\u0BC2\u0BC3" +
		"\x07\x04\x02\x02\u0BC3\u0BC4\x05\u048E\u0248\x02\u0BC4\u0BC6\x07\x05\x02" +
		"\x02\u0BC5\u0BC7\x05\xD8m\x02\u0BC6\u0BC5\x03\x02\x02\x02\u0BC6\u0BC7" +
		"\x03\x02\x02\x02\u0BC7\u0BE4\x03\x02\x02\x02\u0BC8\u0BC9\x077\x02\x02" +
		"\u0BC9\u0BE4\x05\u04B6\u025C\x02\u0BCA\u0BCB\x07\u01B8\x02\x02\u0BCB\u0BCC" +
		"\x05\xC8e\x02\u0BCC\u0BD6\x07&\x02\x02\u0BCD\u0BCF\x07\xDD\x02\x02\u0BCE" +
		"\u0BD0\x05\u0120\x91\x02\u0BCF\u0BCE\x03\x02\x02\x02\u0BCF\u0BD0\x03\x02" +
		"\x02\x02\u0BD0\u0BD7\x03\x02\x02\x02\u0BD1\u0BD2\x07\x04\x02\x02\u0BD2" +
		"\u0BD3\x05\u048E\u0248\x02\u0BD3\u0BD4\x07\x05\x02\x02\u0BD4\u0BD5\x07" +
		"\u01BA\x02\x02\u0BD5\u0BD7\x03\x02\x02\x02\u0BD6\u0BCD\x03\x02\x02\x02" +
		"\u0BD6\u0BD1\x03\x02\x02\x02\u0BD7\u0BE4\x03\x02\x02\x02\u0BD8\u0BD9\x07" +
		"X\x02\x02\u0BD9\u0BDB\x05\u053C\u029F\x02\u0BDA\u0BDC\x05\xDAn\x02\u0BDB" +
		"\u0BDA\x03\x02\x02\x02\u0BDB\u0BDC\x03\x02\x02\x02\u0BDC\u0BDE\x03\x02" +
		"\x02\x02\u0BDD\u0BDF\x05\xE2r\x02\u0BDE\u0BDD\x03\x02\x02\x02\u0BDE\u0BDF" +
		"\x03\x02\x02\x02\u0BDF\u0BE1\x03\x02\x02\x02\u0BE0\u0BE2\x05\xEAv\x02" +
		"\u0BE1\u0BE0\x03\x02\x02\x02\u0BE1\u0BE2\x03\x02\x02\x02\u0BE2\u0BE4\x03" +
		"\x02\x02\x02\u0BE3\u0BAF\x03\x02\x02\x02\u0BE3\u0BB1\x03\x02\x02\x02\u0BE3" +
		"\u0BB2\x03\x02\x02\x02\u0BE3\u0BB9\x03\x02\x02\x02\u0BE3\u0BC1\x03\x02" +
		"\x02\x02\u0BE3\u0BC8\x03\x02\x02\x02\u0BE3\u0BCA\x03\x02\x02\x02\u0BE3" +
		"\u0BD8\x03\x02\x02\x02\u0BE4\xC7\x03\x02\x02\x02\u0BE5\u0BE9\x07\x8D\x02" +
		"\x02\u0BE6\u0BE7\x07\x95\x02\x02\u0BE7\u0BE9\x077\x02\x02\u0BE8\u0BE5" +
		"\x03\x02\x02\x02\u0BE8\u0BE6\x03\x02\x02\x02\u0BE9\xC9\x03\x02\x02\x02" +
		"\u0BEA\u0BEE\x078\x02\x02\u0BEB\u0BEC\x07O\x02\x02\u0BEC\u0BEE\x078\x02" +
		"\x02\u0BED\u0BEA\x03\x02\x02\x02\u0BED\u0BEB\x03\x02\x02\x02\u0BEE\xCB" +
		"\x03\x02\x02\x02\u0BEF\u0BF0\x07G\x02\x02\u0BF0\u0BF1\t\x0F\x02\x02\u0BF1" +
		"\xCD\x03\x02\x02\x02\u0BF2\u0BF3\x07z\x02\x02\u0BF3\u0BF4\x05\u053C\u029F" +
		"\x02\u0BF4\u0BF5\x05\xD0i\x02\u0BF5\xCF\x03\x02\x02\x02\u0BF6\u0BF7\t" +
		"\x14\x02\x02\u0BF7\u0BF9\x05\xD2j\x02\u0BF8\u0BF6\x03\x02\x02\x02\u0BF9" +
		"\u0BFC\x03\x02\x02\x02\u0BFA\u0BF8\x03\x02\x02\x02\u0BFA\u0BFB\x03\x02" +
		"\x02\x02\u0BFB\xD1\x03\x02\x02\x02\u0BFC\u0BFA\x03\x02\x02\x02\u0BFD\u0BFE" +
		"\t\x15\x02\x02\u0BFE\xD3\x03\x02\x02\x02\u0BFF\u0C00\x07/\x02\x02\u0C00" +
		"\u0C01\x05\u0540\u02A1\x02\u0C01\u0C02\x05\xD6l\x02\u0C02\u0C05\x03\x02" +
		"\x02\x02\u0C03\u0C05\x05\xD6l\x02\u0C04\u0BFF\x03\x02\x02\x02\u0C04\u0C03" +
		"\x03\x02\x02\x02\u0C05\xD5\x03\x02\x02\x02\u0C06\u0C07\x07,\x02\x02\u0C07" +
		"\u0C08\x07\x04\x02\x02\u0C08\u0C09\x05\u048E\u0248\x02\u0C09\u0C0A\x07" +
		"\x05\x02\x02\u0C0A\u0C0B\x05\u01C0\xE1\x02\u0C0B\u0C5D\x03\x02\x02\x02" +
		"\u0C0C\u0C1E\x07d\x02\x02\u0C0D\u0C0E\x07\x04\x02\x02\u0C0E\u0C0F\x05" +
		"\xDCo\x02\u0C0F\u0C11\x07\x05\x02\x02\u0C10\u0C12\x05\xE0q\x02\u0C11\u0C10" +
		"\x03\x02\x02\x02\u0C11\u0C12\x03\x02\x02\x02\u0C12\u0C14\x03\x02\x02\x02" +
		"\u0C13\u0C15\x05\u02A6\u0154\x02\u0C14\u0C13\x03\x02\x02\x02\u0C14\u0C15" +
		"\x03\x02\x02\x02\u0C15\u0C17\x03\x02\x02\x02\u0C16\u0C18\x05\u0104\x83" +
		"\x02\u0C17\u0C16\x03\x02\x02\x02\u0C17\u0C18\x03\x02\x02\x02\u0C18\u0C19" +
		"\x03\x02\x02\x02\u0C19\u0C1A\x05\u01C0\xE1\x02\u0C1A\u0C1F\x03\x02\x02" +
		"\x02\u0C1B\u0C1C\x05\u0106\x84\x02\u0C1C\u0C1D\x05\u01C0\xE1\x02\u0C1D" +
		"\u0C1F\x03\x02\x02\x02\u0C1E\u0C0D\x03\x02\x02\x02\u0C1E\u0C1B\x03\x02" +
		"\x02\x02\u0C1F\u0C5D\x03\x02\x02\x02\u0C20\u0C21\x07W\x02\x02\u0C21\u0C33" +
		"\x07\xF7\x02\x02\u0C22\u0C23\x07\x04\x02\x02\u0C23\u0C24\x05\xDCo\x02" +
		"\u0C24\u0C26\x07\x05\x02\x02\u0C25\u0C27\x05\xE0q\x02\u0C26\u0C25\x03" +
		"\x02\x02\x02\u0C26\u0C27\x03\x02\x02\x02\u0C27\u0C29\x03\x02\x02\x02\u0C28" +
		"\u0C2A\x05\u02A6\u0154\x02\u0C29\u0C28\x03\x02\x02\x02\u0C29\u0C2A\x03" +
		"\x02\x02\x02\u0C2A\u0C2C\x03\x02\x02\x02\u0C2B\u0C2D\x05\u0104\x83\x02" +
		"\u0C2C\u0C2B\x03\x02\x02\x02\u0C2C\u0C2D\x03\x02\x02\x02\u0C2D\u0C2E\x03" +
		"\x02\x02\x02\u0C2E\u0C2F\x05\u01C0\xE1\x02\u0C2F\u0C34\x03\x02\x02\x02" +
		"\u0C30\u0C31\x05\u0106\x84\x02\u0C31\u0C32\x05\u01C0\xE1\x02\u0C32\u0C34" +
		"\x03\x02\x02\x02\u0C33\u0C22\x03\x02\x02\x02\u0C33\u0C30\x03\x02\x02\x02" +
		"\u0C34\u0C5D\x03\x02\x02\x02\u0C35\u0C37\x07\xC9\x02\x02\u0C36\u0C38\x05" +
		"\u0260\u0131\x02\u0C37\u0C36\x03\x02\x02\x02\u0C37\u0C38\x03\x02\x02\x02" +
		"\u0C38\u0C39\x03\x02\x02\x02\u0C39\u0C3A\x07\x04\x02\x02\u0C3A\u0C3B\x05" +
		"\xE4s\x02\u0C3B\u0C3D\x07\x05\x02\x02\u0C3C\u0C3E\x05\xE0q\x02\u0C3D\u0C3C" +
		"\x03\x02\x02\x02\u0C3D\u0C3E\x03\x02\x02\x02\u0C3E\u0C40\x03\x02\x02\x02" +
		"\u0C3F\u0C41\x05\u02A6\u0154\x02\u0C40\u0C3F\x03\x02\x02\x02\u0C40\u0C41" +
		"\x03\x02\x02\x02\u0C41\u0C43\x03\x02\x02\x02\u0C42\u0C44\x05\u0104\x83" +
		"\x02\u0C43\u0C42\x03\x02\x02\x02\u0C43\u0C44\x03\x02\x02\x02\u0C44\u0C46" +
		"\x03\x02\x02\x02\u0C45\u0C47\x05\xE8u\x02\u0C46\u0C45\x03\x02\x02\x02" +
		"\u0C46\u0C47\x03\x02\x02\x02\u0C47\u0C48\x03\x02\x02\x02\u0C48\u0C49\x05" +
		"\u01C0\xE1\x02\u0C49\u0C5D\x03\x02\x02\x02\u0C4A\u0C4B\x07A\x02\x02\u0C4B" +
		"\u0C4C\x07\xF7\x02\x02\u0C4C\u0C4D\x07\x04\x02\x02\u0C4D\u0C4E\x05\xDC" +
		"o\x02\u0C4E\u0C4F\x07\x05\x02\x02\u0C4F\u0C50\x07X\x02\x02\u0C50\u0C52" +
		"\x05\u053C\u029F\x02\u0C51\u0C53\x05\xDAn\x02\u0C52\u0C51\x03\x02\x02" +
		"\x02\u0C52\u0C53\x03\x02\x02\x02\u0C53\u0C55\x03\x02\x02\x02\u0C54\u0C56" +
		"\x05\xE2r\x02\u0C55\u0C54\x03\x02\x02\x02\u0C55\u0C56\x03\x02\x02\x02" +
		"\u0C56\u0C58\x03\x02\x02\x02\u0C57\u0C59\x05\xEAv\x02\u0C58\u0C57\x03" +
		"\x02\x02\x02\u0C58\u0C59\x03\x02\x02\x02\u0C59\u0C5A\x03\x02\x02\x02\u0C5A" +
		"\u0C5B\x05\u01C0\xE1\x02\u0C5B\u0C5D\x03\x02\x02\x02\u0C5C\u0C06\x03\x02" +
		"\x02\x02\u0C5C\u0C0C\x03\x02\x02\x02\u0C5C\u0C20\x03\x02\x02\x02\u0C5C" +
		"\u0C35\x03\x02\x02\x02\u0C5C\u0C4A\x03\x02\x02\x02\u0C5D\xD7\x03\x02\x02" +
		"\x02\u0C5E\u0C5F\x07\u010F\x02\x02\u0C5F\u0C60\x07\xE6\x02\x02\u0C60\xD9" +
		"\x03\x02\x02\x02\u0C61\u0C62\x07\x04\x02\x02\u0C62\u0C63\x05\xDCo\x02" +
		"\u0C63\u0C64\x07\x05\x02\x02\u0C64\xDB\x03\x02\x02\x02\u0C65\u0C6A\x05" +
		"\xDEp\x02\u0C66\u0C67\x07\b\x02\x02\u0C67\u0C69\x05\xDEp\x02\u0C68\u0C66" +
		"\x03\x02\x02\x02\u0C69\u0C6C\x03\x02\x02\x02\u0C6A\u0C68\x03\x02\x02\x02" +
		"\u0C6A\u0C6B\x03\x02\x02\x02\u0C6B\xDD\x03\x02\x02\x02\u0C6C\u0C6A\x03" +
		"\x02\x02\x02\u0C6D\u0C6E\x05\u0562\u02B2\x02\u0C6E\xDF\x03\x02\x02\x02" +
		"\u0C6F\u0C70\x07\u01BB\x02\x02\u0C70\u0C71\x07\x04\x02\x02\u0C71\u0C72" +
		"\x05\xDCo\x02\u0C72\u0C73\x07\x05\x02\x02\u0C73\xE1\x03\x02\x02\x02\u0C74" +
		"\u0C75\x07\u0104\x02\x02\u0C75\u0C76\t\x16\x02\x02\u0C76\xE3\x03\x02\x02" +
		"\x02\u0C77\u0C7C\x05\xE6t\x02\u0C78\u0C79\x07\b\x02\x02\u0C79\u0C7B\x05" +
		"\xE6t\x02\u0C7A\u0C78\x03\x02\x02\x02\u0C7B\u0C7E\x03\x02\x02\x02\u0C7C" +
		"\u0C7A\x03\x02\x02\x02\u0C7C\u0C7D\x03\x02\x02\x02\u0C7D\xE5\x03\x02\x02" +
		"\x02\u0C7E\u0C7C\x03\x02\x02\x02\u0C7F\u0C80\x05\u0266\u0134\x02\u0C80" +
		"\u0C87\x07k\x02\x02\u0C81\u0C88\x05\u02BA\u015E\x02\u0C82\u0C83\x07\u0118" +
		"\x02\x02\u0C83\u0C84\x07\x04\x02\x02\u0C84\u0C85\x05\u02BA\u015E\x02\u0C85" +
		"\u0C86\x07\x05\x02\x02\u0C86\u0C88\x03\x02\x02\x02\u0C87\u0C81\x03\x02" +
		"\x02\x02\u0C87\u0C82\x03\x02\x02\x02\u0C88\xE7\x03\x02\x02\x02\u0C89\u0C8A" +
		"\x07i\x02\x02\u0C8A\u0C8B\x07\x04\x02\x02\u0C8B\u0C8C\x05\u048E\u0248" +
		"\x02\u0C8C\u0C8D\x07\x05\x02\x02\u0C8D\xE9\x03\x02\x02\x02\u0C8E\u0C97" +
		"\x05\xECw\x02\u0C8F\u0C97\x05\xEEx\x02\u0C90\u0C91\x05\xECw\x02\u0C91" +
		"\u0C92\x05\xEEx\x02\u0C92\u0C97\x03\x02\x02\x02\u0C93\u0C94\x05\xEEx\x02" +
		"\u0C94\u0C95\x05\xECw\x02\u0C95\u0C97\x03\x02\x02\x02\u0C96\u0C8E\x03" +
		"\x02\x02\x02\u0C96\u0C8F\x03\x02\x02\x02\u0C96\u0C90\x03\x02\x02\x02\u0C96" +
		"\u0C93\x03\x02\x02\x02\u0C97\xEB\x03\x02\x02\x02\u0C98\u0C99\x07R\x02" +
		"\x02\u0C99\u0C9A\x07\u0173\x02\x02\u0C9A\u0C9B\x05\xF0y\x02\u0C9B\xED" +
		"\x03\x02\x02\x02\u0C9C\u0C9D\x07R\x02\x02\u0C9D\u0C9E\x07\xB8\x02\x02" +
		"\u0C9E\u0C9F\x05\xF0y\x02\u0C9F\xEF\x03\x02\x02\x02\u0CA0\u0CA1\x07\u010F" +
		"\x02\x02\u0CA1\u0CA7\x07\x86\x02\x02\u0CA2\u0CA7\x07\u013D\x02\x02\u0CA3" +
		"\u0CA7\x07\x98\x02\x02\u0CA4\u0CA5\x07\u014F\x02\x02\u0CA5\u0CA7\t\x17" +
		"\x02\x02\u0CA6\u0CA0\x03\x02\x02\x02\u0CA6\u0CA2\x03\x02\x02\x02\u0CA6" +
		"\u0CA3\x03\x02\x02\x02\u0CA6\u0CA4\x03\x02\x02\x02\u0CA7\xF1\x03\x02\x02" +
		"\x02\u0CA8\u0CA9\x07\xF0\x02\x02\u0CA9\u0CAA\x07\x04\x02\x02\u0CAA\u0CAB" +
		"\x05\u0538\u029D\x02\u0CAB\u0CAC\x07\x05\x02\x02\u0CAC\xF3\x03\x02\x02" +
		"\x02\u0CAD\u0CAE\x05\xF6|\x02\u0CAE\xF5\x03\x02\x02\x02\u0CAF\u0CB0\x07" +
		"\u011F\x02\x02\u0CB0\u0CB1\x07\x95\x02\x02\u0CB1\u0CB2\x05\u0562\u02B2" +
		"\x02\u0CB2\u0CB3\x07\x04\x02\x02\u0CB3\u0CB4\x05\xF8}\x02\u0CB4\u0CB5" +
		"\x07\x05\x02\x02\u0CB5\xF7\x03\x02\x02\x02\u0CB6\u0CBB\x05\xFA~\x02\u0CB7" +
		"\u0CB8\x07\b\x02\x02\u0CB8\u0CBA\x05\xFA~\x02\u0CB9\u0CB7\x03\x02\x02" +
		"\x02\u0CBA\u0CBD\x03\x02\x02\x02\u0CBB\u0CB9\x03\x02\x02\x02\u0CBB\u0CBC" +
		"\x03\x02\x02\x02\u0CBC\xF9\x03\x02\x02\x02\u0CBD\u0CBB\x03\x02\x02\x02" +
		"\u0CBE\u0CC0\x05\u0562\u02B2\x02\u0CBF\u0CC1\x05\u026C\u0137\x02\u0CC0" +
		"\u0CBF\x03\x02\x02\x02\u0CC0\u0CC1\x03\x02\x02\x02\u0CC1\u0CC3\x03\x02" +
		"\x02\x02\u0CC2\u0CC4\x05\u026E\u0138\x02\u0CC3\u0CC2\x03\x02\x02\x02\u0CC3" +
		"\u0CC4\x03\x02\x02\x02\u0CC4\u0CD6\x03\x02\x02\x02\u0CC5\u0CC7\x05\u04C0" +
		"\u0261\x02\u0CC6\u0CC8\x05\u026C\u0137\x02\u0CC7\u0CC6\x03\x02\x02\x02" +
		"\u0CC7\u0CC8\x03\x02\x02\x02\u0CC8\u0CCA\x03\x02\x02\x02\u0CC9\u0CCB\x05" +
		"\u026E\u0138\x02\u0CCA\u0CC9\x03\x02\x02\x02\u0CCA\u0CCB\x03\x02\x02\x02" +
		"\u0CCB\u0CD6\x03\x02\x02\x02\u0CCC\u0CCD\x07\x04\x02\x02\u0CCD\u0CCE\x05" +
		"\u048E\u0248\x02\u0CCE\u0CD0\x07\x05\x02\x02\u0CCF\u0CD1\x05\u026C\u0137" +
		"\x02\u0CD0\u0CCF\x03\x02\x02\x02\u0CD0\u0CD1\x03\x02\x02\x02\u0CD1\u0CD3" +
		"\x03\x02\x02\x02\u0CD2\u0CD4\x05\u026E\u0138\x02\u0CD3\u0CD2\x03\x02\x02" +
		"\x02\u0CD3\u0CD4\x03\x02\x02\x02\u0CD4\u0CD6\x03\x02\x02\x02\u0CD5\u0CBE" +
		"\x03\x02\x02\x02\u0CD5\u0CC5\x03\x02\x02\x02\u0CD5\u0CCC\x03\x02\x02\x02" +
		"\u0CD6\xFB\x03\x02\x02\x02\u0CD7\u0CD8\x07f\x02\x02\u0CD8\u0CD9\x05\u0540" +
		"\u02A1\x02\u0CD9\xFD\x03\x02\x02\x02\u0CDA\u0CDB\x07k\x02\x02\u0CDB\u0CE1" +
		"\x05t;\x02\u0CDC\u0CDD\x07\u017D\x02\x02\u0CDD\u0CE1\x07\u0117\x02\x02" +
		"\u0CDE\u0CDF\x07k\x02\x02\u0CDF\u0CE1\x07\u0117\x02\x02\u0CE0\u0CDA\x03" +
		"\x02\x02\x02\u0CE0\u0CDC\x03\x02\x02\x02\u0CE0\u0CDE\x03\x02\x02\x02\u0CE1" +
		"\xFF\x03\x02\x02\x02\u0CE2\u0CE3\x07R\x02\x02\u0CE3\u0CE9\x07\xA3\x02" +
		"\x02\u0CE4\u0CEA\x07\xC1\x02\x02\u0CE5\u0CE6\x07\xB8\x02\x02\u0CE6\u0CEA" +
		"\x07\u0142\x02\x02\u0CE7\u0CE8\x07\u0126\x02\x02\u0CE8\u0CEA\x07\u0142" +
		"\x02\x02\u0CE9\u0CE4\x03\x02\x02\x02\u0CE9\u0CE5\x03\x02\x02\x02\u0CE9" +
		"\u0CE7\x03\x02\x02\x02\u0CEA\u0101\x03\x02\x02\x02\u0CEB\u0CEC\x07\u0161" +
		"\x02\x02\u0CEC\u0CED\x05\u0540\u02A1\x02\u0CED\u0103\x03\x02\x02\x02\u0CEE" +
		"\u0CEF\x07f\x02\x02\u0CEF\u0CF0\x07\xE4\x02\x02\u0CF0\u0CF1\x07\u0161" +
		"\x02\x02\u0CF1\u0CF2\x05\u0540\u02A1\x02\u0CF2\u0105\x03\x02\x02\x02\u0CF3" +
		"\u0CF4\x07f\x02\x02\u0CF4\u0CF5\x07\xE4\x02\x02\u0CF5\u0CF6\x05\u0540" +
		"\u02A1\x02\u0CF6\u0107\x03\x02\x02\x02\u0CF7\u0CF8\x070\x02\x02\u0CF8" +
		"\u0CFC\x07\u0158\x02\x02\u0CF9\u0CFA\x07\xDE\x02\x02\u0CFA\u0CFB\x07O" +
		"\x02\x02\u0CFB\u0CFD\x07\u018E\x02\x02\u0CFC\u0CF9\x03\x02\x02\x02\u0CFC" +
		"\u0CFD\x03\x02\x02\x02\u0CFD\u0CFE\x03\x02\x02\x02\u0CFE\u0D00\x05\u0214" +
		"\u010B\x02\u0CFF\u0D01\x05\u0374\u01BB\x02\u0D00\u0CFF\x03\x02\x02\x02" +
		"\u0D00\u0D01\x03\x02\x02\x02\u0D01\u0D02\x03\x02\x02\x02\u0D02\u0D03\x07" +
		"R\x02\x02\u0D03\u0D04\x05\u0502\u0282\x02\u0D04\u0D05\x07B\x02\x02\u0D05" +
		"\u0D06\x05\u0428\u0215\x02\u0D06\u0109\x03\x02\x02\x02\u0D07\u0D08\x07" +
		"\x8C\x02\x02\u0D08\u0D0B\x07\u0158\x02\x02\u0D09\u0D0A\x07\xDE\x02\x02" +
		"\u0D0A\u0D0C\x07\u018E\x02\x02\u0D0B\u0D09\x03\x02\x02\x02\u0D0B\u0D0C" +
		"\x03\x02\x02\x02\u0D0C\u0D0D\x03\x02\x02\x02\u0D0D\u0D0E\x05\u0214\u010B" +
		"\x02\u0D0E\u0D0F\x07\u014F\x02\x02\u0D0F\u0D10\x07\u0158\x02\x02\u0D10" +
		"\u0D11\x05\u0558\u02AD\x02\u0D11\u010B\x03\x02\x02\x02\u0D12\u0D14\x07" +
		"0\x02\x02\u0D13\u0D15\x05\xAEX\x02\u0D14\u0D13\x03\x02\x02\x02\u0D14\u0D15" +
		"\x03\x02\x02\x02\u0D15\u0D16\x03\x02\x02\x02\u0D16\u0D1A\x07^\x02\x02" +
		"\u0D17\u0D18\x07\xDE\x02\x02\u0D18\u0D19\x07O\x02\x02\u0D19\u0D1B\x07" +
		"\u018E\x02\x02\u0D1A\u0D17\x03\x02\x02\x02\u0D1A\u0D1B\x03\x02\x02\x02" +
		"\u0D1B\u0D1C\x03\x02\x02\x02\u0D1C\u0D1D\x05\u010E\x88\x02\u0D1D\u0D1E" +
		"\x07&\x02\x02\u0D1E\u0D20\x05\u03C6\u01E4\x02\u0D1F\u0D21\x05\u0110\x89" +
		"\x02\u0D20\u0D1F\x03\x02\x02\x02\u0D20\u0D21\x03\x02\x02\x02\u0D21\u010D" +
		"\x03\x02\x02\x02\u0D22\u0D24\x05\u053C\u029F\x02\u0D23\u0D25\x05\xDAn" +
		"\x02\u0D24\u0D23\x03\x02\x02\x02\u0D24\u0D25\x03\x02\x02\x02\u0D25\u0D27" +
		"\x03\x02\x02\x02\u0D26\u0D28\x05\xFC\x7F\x02\u0D27\u0D26\x03\x02\x02\x02" +
		"\u0D27\u0D28\x03\x02\x02\x02\u0D28\u0D2A\x03\x02\x02\x02\u0D29\u0D2B\x05" +
		"\xFE\x80\x02\u0D2A\u0D29\x03\x02\x02\x02\u0D2A\u0D2B\x03\x02\x02\x02\u0D2B" +
		"\u0D2D\x03\x02\x02\x02\u0D2C\u0D2E\x05\u0100\x81\x02\u0D2D\u0D2C\x03\x02" +
		"\x02\x02\u0D2D\u0D2E\x03\x02\x02\x02\u0D2E\u0D30\x03\x02\x02\x02\u0D2F" +
		"\u0D31\x05\u0102\x82\x02\u0D30\u0D2F\x03\x02\x02\x02\u0D30\u0D31\x03\x02" +
		"\x02\x02\u0D31\u010F\x03\x02\x02\x02\u0D32\u0D36\x07k\x02\x02\u0D33\u0D37" +
		"\x07\xB0\x02\x02\u0D34\u0D35\x07\u010F\x02\x02\u0D35\u0D37\x07\xB0\x02" +
		"\x02\u0D36\u0D33\x03\x02\x02\x02\u0D36\u0D34\x03\x02\x02\x02\u0D37\u0111" +
		"\x03\x02\x02\x02\u0D38\u0D3A\x070\x02\x02\u0D39\u0D3B\x05\u0116\x8C\x02" +
		"\u0D3A\u0D39\x03\x02\x02\x02\u0D3A\u0D3B\x03\x02\x02\x02\u0D3B\u0D3C\x03" +
		"\x02\x02\x02\u0D3C\u0D3D\x07\u0105\x02\x02\u0D3D\u0D41\x07\u017A\x02\x02" +
		"\u0D3E\u0D3F\x07\xDE\x02\x02\u0D3F\u0D40\x07O\x02\x02\u0D40\u0D42\x07" +
		"\u018E\x02\x02\u0D41\u0D3E\x03\x02\x02\x02\u0D41\u0D42\x03\x02\x02\x02" +
		"\u0D42\u0D43\x03\x02\x02\x02\u0D43\u0D44\x05\u0114\x8B\x02\u0D44\u0D45" +
		"\x07&\x02\x02\u0D45\u0D47\x05\u03C6\u01E4\x02\u0D46\u0D48\x05\u0110\x89" +
		"\x02\u0D47\u0D46\x03\x02\x02\x02\u0D47\u0D48\x03\x02\x02\x02\u0D48\u0113" +
		"\x03\x02\x02\x02\u0D49\u0D4B\x05\u053C\u029F\x02\u0D4A\u0D4C\x05\xDAn" +
		"\x02\u0D4B\u0D4A\x03\x02\x02\x02\u0D4B\u0D4C\x03\x02\x02\x02\u0D4C\u0D4E" +
		"\x03\x02\x02\x02\u0D4D\u0D4F\x05\xFC\x7F\x02\u0D4E\u0D4D\x03\x02\x02\x02" +
		"\u0D4E\u0D4F\x03\x02\x02\x02\u0D4F\u0D51\x03\x02\x02\x02\u0D50\u0D52\x05" +
		"v<\x02\u0D51\u0D50\x03\x02\x02\x02\u0D51\u0D52\x03\x02\x02\x02\u0D52\u0D54" +
		"\x03\x02\x02\x02\u0D53\u0D55\x05\u0102\x82\x02\u0D54\u0D53\x03\x02\x02" +
		"\x02\u0D54\u0D55\x03\x02\x02\x02\u0D55\u0115\x03\x02\x02\x02\u0D56\u0D57" +
		"\x07\u0171\x02\x02\u0D57\u0117\x03\x02\x02\x02\u0D58\u0D59\x07\u0133\x02" +
		"\x02\u0D59\u0D5A\x07\u0105\x02\x02\u0D5A\u0D5C\x07\u017A\x02\x02\u0D5B" +
		"\u0D5D\x05\u025C\u012F\x02\u0D5C\u0D5B\x03\x02\x02\x02\u0D5C\u0D5D\x03" +
		"\x02\x02\x02\u0D5D\u0D5E\x03\x02\x02\x02\u0D5E\u0D60\x05\u053C\u029F\x02" +
		"\u0D5F\u0D61\x05\u0110\x89\x02\u0D60\u0D5F\x03\x02\x02\x02\u0D60\u0D61" +
		"\x03\x02\x02\x02\u0D61\u0119\x03\x02\x02\x02\u0D62\u0D64\x070\x02\x02" +
		"\u0D63\u0D65\x05\xAEX\x02\u0D64\u0D63\x03\x02\x02\x02\u0D64\u0D65\x03" +
		"\x02\x02\x02\u0D65\u0D66\x03\x02\x02\x02\u0D66\u0D6A\x07\u014A\x02\x02" +
		"\u0D67\u0D68\x07\xDE\x02\x02\u0D68\u0D69\x07O\x02\x02\u0D69\u0D6B\x07" +
		"\u018E\x02\x02\u0D6A\u0D67\x03\x02\x02\x02\u0D6A\u0D6B\x03\x02\x02\x02" +
		"\u0D6B\u0D6C\x03\x02\x02\x02\u0D6C\u0D6E\x05\u053C\u029F\x02\u0D6D\u0D6F" +
		"\x05\u011E\x90\x02\u0D6E\u0D6D\x03\x02\x02\x02\u0D6E\u0D6F\x03\x02\x02" +
		"\x02\u0D6F\u011B\x03\x02\x02\x02\u0D70\u0D71\x07\x8C\x02\x02\u0D71\u0D74" +
		"\x07\u014A\x02\x02\u0D72\u0D73\x07\xDE\x02\x02\u0D73\u0D75\x07\u018E\x02" +
		"\x02\u0D74\u0D72\x03\x02\x02\x02\u0D74\u0D75\x03\x02\x02\x02\u0D75\u0D76" +
		"\x03\x02\x02\x02\u0D76\u0D77\x05\u053C\u029F\x02\u0D77\u0D78\x05\u0122" +
		"\x92\x02\u0D78\u011D\x03\x02\x02\x02\u0D79\u0D7A\x05\u0122\x92\x02\u0D7A" +
		"\u011F\x03\x02\x02\x02\u0D7B\u0D7C\x07\x04\x02\x02\u0D7C\u0D7D\x05\u0122" +
		"\x92\x02\u0D7D\u0D7E\x07\x05\x02\x02\u0D7E\u0121\x03\x02\x02\x02\u0D7F" +
		"\u0D81\x05\u0124\x93\x02\u0D80\u0D7F\x03\x02\x02\x02\u0D81\u0D82\x03\x02" +
		"\x02\x02\u0D82\u0D80\x03\x02\x02\x02\u0D82\u0D83\x03\x02\x02\x02\u0D83" +
		"\u0123\x03\x02\x02\x02\u0D84\u0D85\x07&\x02\x02\u0D85\u0DA7\x05\u0466" +
		"\u0234\x02\u0D86\u0D87\x07\x96\x02\x02\u0D87\u0DA7\x05\u0128\x95\x02\u0D88" +
		"\u0DA7\x07\xAF\x02\x02\u0D89\u0D8B\x07\xE3\x02\x02\u0D8A\u0D8C\x05\u0126" +
		"\x94\x02\u0D8B\u0D8A\x03\x02\x02\x02\u0D8B\u0D8C\x03\x02\x02\x02\u0D8C" +
		"\u0D8D\x03\x02\x02\x02\u0D8D\u0DA7\x05\u0128\x95\x02\u0D8E\u0D8F\x07\u0106" +
		"\x02\x02\u0D8F\u0DA7\x05\u0128\x95\x02\u0D90\u0D91\x07\u0108\x02\x02\u0D91" +
		"\u0DA7\x05\u0128\x95\x02\u0D92\u0D93\x07\u010F\x02\x02\u0D93\u0DA7\t\x18" +
		"\x02\x02\u0D94\u0D95\x07\u011B\x02\x02\u0D95\u0D96\x07\x95\x02\x02\u0D96" +
		"\u0DA7\x05\u0214\u010B\x02\u0D97\u0D98\x07\u014A\x02\x02\u0D98\u0D99\x07" +
		"\u010C\x02\x02\u0D99\u0DA7\x05\u0214\u010B\x02\u0D9A\u0D9C\x07\u0156\x02" +
		"\x02\u0D9B\u0D9D\x05\x10\t\x02\u0D9C\u0D9B\x03\x02\x02\x02\u0D9C\u0D9D" +
		"\x03\x02\x02\x02\u0D9D\u0D9E\x03\x02\x02\x02\u0D9E\u0DA7\x05\u0128\x95" +
		"\x02\u0D9F\u0DA1\x07\u013C\x02\x02\u0DA0\u0DA2\x05\x10\t\x02\u0DA1\u0DA0" +
		"\x03\x02\x02\x02\u0DA1\u0DA2\x03\x02\x02\x02\u0DA2\u0DA4\x03\x02\x02\x02" +
		"\u0DA3\u0DA5\x05\u0128\x95\x02\u0DA4\u0DA3\x03\x02\x02\x02\u0DA4\u0DA5" +
		"\x03\x02\x02\x02\u0DA5\u0DA7\x03\x02\x02\x02\u0DA6\u0D84\x03\x02\x02\x02" +
		"\u0DA6\u0D86\x03\x02\x02\x02\u0DA6\u0D88\x03\x02\x02\x02\u0DA6\u0D89\x03" +
		"\x02\x02\x02\u0DA6\u0D8E\x03\x02\x02\x02\u0DA6\u0D90\x03\x02\x02\x02\u0DA6" +
		"\u0D92\x03\x02\x02\x02\u0DA6\u0D94\x03\x02\x02\x02\u0DA6\u0D97\x03\x02" +
		"\x02\x02\u0DA6\u0D9A\x03\x02\x02\x02\u0DA6\u0D9F\x03\x02\x02\x02\u0DA7" +
		"\u0125\x03\x02\x02\x02\u0DA8\u0DA9\x07\x95\x02\x02\u0DA9\u0127\x03\x02" +
		"\x02\x02\u0DAA\u0DB1\x05\u054E\u02A8\x02\u0DAB\u0DAC\x07\x0E\x02\x02\u0DAC" +
		"\u0DB1\x05\u054E\u02A8\x02\u0DAD\u0DAE\x07\x0F\x02\x02\u0DAE\u0DB1\x05" +
		"\u054E\u02A8\x02\u0DAF\u0DB1\x05\u0558\u02AD\x02\u0DB0\u0DAA\x03\x02\x02" +
		"\x02\u0DB0\u0DAB\x03\x02\x02\x02\u0DB0\u0DAD\x03\x02\x02\x02\u0DB0\u0DAF" +
		"\x03\x02\x02\x02\u0DB1\u0129\x03\x02\x02\x02\u0DB2\u0DB7\x05\u0128\x95" +
		"\x02\u0DB3\u0DB4\x07\b\x02\x02\u0DB4\u0DB6\x05\u0128\x95\x02\u0DB5\u0DB3" +
		"\x03\x02\x02\x02\u0DB6\u0DB9\x03\x02\x02\x02\u0DB7\u0DB5\x03\x02\x02\x02" +
		"\u0DB7\u0DB8\x03\x02\x02\x02\u0DB8\u012B\x03\x02\x02\x02\u0DB9\u0DB7\x03" +
		"\x02\x02\x02\u0DBA\u0DBC\x070\x02\x02\u0DBB\u0DBD\x05\u0278\u013D\x02" +
		"\u0DBC\u0DBB\x03\x02\x02\x02\u0DBC\u0DBD\x03\x02\x02\x02\u0DBD\u0DBF\x03" +
		"\x02\x02\x02\u0DBE\u0DC0\x05\u012E\x98\x02\u0DBF";
	private static readonly _serializedATNSegment9: string =
		"\u0DBE\x03\x02\x02\x02\u0DBF\u0DC0\x03\x02\x02\x02\u0DC0\u0DC2\x03\x02" +
		"\x02\x02\u0DC1\u0DC3\x05\u0138\x9D\x02\u0DC2\u0DC1\x03\x02\x02\x02\u0DC2" +
		"\u0DC3\x03\x02\x02\x02\u0DC3\u0DC4\x03\x02\x02\x02\u0DC4\u0DC5\x07\xF9" +
		"\x02\x02\u0DC5\u0DCE\x05\u0540\u02A1\x02\u0DC6\u0DC7\x07\xD9\x02\x02\u0DC7" +
		"\u0DC9\x05\u0130\x99\x02\u0DC8\u0DCA\x05\u0132\x9A\x02\u0DC9\u0DC8\x03" +
		"\x02\x02\x02\u0DC9\u0DCA\x03\x02\x02\x02\u0DCA\u0DCC\x03\x02\x02\x02\u0DCB" +
		"\u0DCD\x05\u0136\x9C\x02\u0DCC\u0DCB\x03\x02\x02\x02\u0DCC\u0DCD\x03\x02" +
		"\x02\x02\u0DCD\u0DCF\x03\x02\x02\x02\u0DCE\u0DC6\x03\x02\x02\x02\u0DCE" +
		"\u0DCF\x03\x02\x02\x02\u0DCF\u012D\x03\x02\x02\x02\u0DD0\u0DD1\x07\u0169" +
		"\x02\x02\u0DD1\u012F\x03\x02\x02\x02\u0DD2\u0DD4\x05\u0540\u02A1\x02\u0DD3" +
		"\u0DD5\x05\u0216\u010C\x02\u0DD4\u0DD3\x03\x02\x02\x02\u0DD4\u0DD5\x03" +
		"\x02\x02\x02\u0DD5\u0131\x03\x02\x02\x02\u0DD6\u0DD7\x07\xF1\x02\x02\u0DD7" +
		"\u0DD8\x05\u0130\x99\x02\u0DD8\u0133\x03\x02\x02\x02\u0DD9\u0DDA\x07\u0177" +
		"\x02\x02\u0DDA\u0DDE\x05\u0130\x99\x02\u0DDB\u0DDC\x07\u010F\x02\x02\u0DDC" +
		"\u0DDE\x07\u0177\x02\x02\u0DDD\u0DD9\x03\x02\x02\x02\u0DDD\u0DDB\x03\x02" +
		"\x02\x02\u0DDE\u0135\x03\x02\x02\x02\u0DDF\u0DE0\x05\u0134\x9B\x02\u0DE0" +
		"\u0137\x03\x02\x02\x02\u0DE1\u0DE2\x07\u0129\x02\x02\u0DE2\u0139\x03\x02" +
		"\x02\x02\u0DE3\u0DE4\x070\x02\x02\u0DE4\u0DE5\x07\u0161\x02\x02\u0DE5" +
		"\u0DE7\x05\u0540\u02A1\x02\u0DE6\u0DE8\x05\u013C\x9F\x02\u0DE7\u0DE6\x03" +
		"\x02\x02\x02\u0DE7\u0DE8\x03\x02\x02\x02\u0DE8\u0DE9\x03\x02\x02\x02\u0DE9" +
		"\u0DEA\x07\u0101\x02\x02\u0DEA\u0DEC\x05\u0552\u02AA\x02\u0DEB\u0DED\x05" +
		"v<\x02\u0DEC\u0DEB\x03\x02\x02\x02\u0DEC\u0DED\x03\x02\x02\x02\u0DED\u013B" +
		"\x03\x02\x02\x02\u0DEE\u0DEF\x07\u011C\x02\x02\u0DEF\u0DF0\x05\u055E\u02B0" +
		"\x02\u0DF0\u013D\x03\x02\x02\x02\u0DF1\u0DF2\x07\xC1\x02\x02\u0DF2\u0DF5" +
		"\x07\u0161\x02\x02\u0DF3\u0DF4\x07\xDE\x02\x02\u0DF4\u0DF6\x07\u018E\x02" +
		"\x02\u0DF5\u0DF3\x03\x02\x02\x02\u0DF5\u0DF6\x03\x02\x02\x02\u0DF6\u0DF7" +
		"\x03\x02\x02\x02\u0DF7\u0DF8\x05\u0540\u02A1\x02\u0DF8\u013F\x03\x02\x02" +
		"\x02\u0DF9\u0DFA\x070\x02\x02\u0DFA\u0DFE\x07\xCE\x02\x02\u0DFB\u0DFC" +
		"\x07\xDE\x02\x02\u0DFC\u0DFD\x07O\x02\x02\u0DFD\u0DFF\x07\u018E\x02\x02" +
		"\u0DFE\u0DFB\x03\x02\x02\x02\u0DFE\u0DFF\x03\x02\x02\x02\u0DFF\u0E00\x03" +
		"\x02\x02\x02\u0E00\u0E02\x05\u0540\u02A1\x02\u0E01\u0E03\x05\x10\t\x02" +
		"\u0E02\u0E01\x03\x02\x02\x02\u0E02\u0E03\x03\x02\x02\x02\u0E03\u0E04\x03" +
		"\x02\x02\x02\u0E04\u0E05\x05\u0142\xA2\x02\u0E05\u0141\x03\x02\x02\x02" +
		"\u0E06\u0E08\x05\u0144\xA3\x02\u0E07\u0E06\x03\x02\x02\x02\u0E08\u0E0B" +
		"\x03\x02\x02\x02\u0E09\u0E07\x03\x02\x02\x02\u0E09\u0E0A\x03\x02\x02\x02" +
		"\u0E0A\u0143\x03\x02\x02\x02\u0E0B\u0E09\x03\x02\x02\x02\u0E0C\u0E0D\x07" +
		"\u0145\x02\x02\u0E0D\u0E14\x05\u0540\u02A1\x02\u0E0E\u0E0F\x07\u0179\x02" +
		"\x02\u0E0F\u0E14\x05H%\x02\u0E10\u0E11\x07B\x02\x02\u0E11\u0E14\x05H%" +
		"\x02\u0E12\u0E14\x07\x98\x02\x02\u0E13\u0E0C\x03\x02\x02\x02\u0E13\u0E0E" +
		"\x03\x02\x02\x02\u0E13\u0E10\x03\x02\x02\x02\u0E13\u0E12\x03\x02\x02\x02" +
		"\u0E14\u0145\x03\x02\x02\x02\u0E15\u0E16\x07\x8C\x02\x02\u0E16\u0E17\x07" +
		"\xCE\x02\x02\u0E17\u0E18\x05\u0540\u02A1\x02\u0E18\u0E19\x07\u0173\x02" +
		"\x02\u0E19\u0E1A\x05\u0148\xA5\x02\u0E1A\u0147\x03\x02\x02\x02\u0E1B\u0E1D" +
		"\x05\u014A\xA6\x02\u0E1C\u0E1B\x03\x02\x02\x02\u0E1D\u0E20\x03\x02\x02" +
		"\x02\u0E1E\u0E1C\x03\x02\x02\x02\u0E1E\u0E1F\x03\x02\x02\x02\u0E1F\u0149" +
		"\x03\x02\x02\x02\u0E20\u0E1E\x03\x02\x02\x02\u0E21\u0E22\x07`\x02\x02" +
		"\u0E22\u0E23\x05H%\x02\u0E23\u014B\x03\x02\x02\x02\u0E24\u0E25\x07\x8C" +
		"\x02\x02\u0E25\u0E26\x07\xCE\x02\x02\u0E26\u0E27\x05\u0540\u02A1\x02\u0E27" +
		"\u0E28\x05(\x15\x02\u0E28\u0E29\x05\u020C\u0107\x02\u0E29\u0E2A\x05\u0540" +
		"\u02A1\x02\u0E2A\u0E8D\x03\x02\x02\x02\u0E2B\u0E2C\x07\x8C\x02\x02\u0E2C" +
		"\u0E2D\x07\xCE\x02\x02\u0E2D\u0E2E\x05\u0540\u02A1\x02\u0E2E\u0E2F\x05" +
		"(\x15\x02\u0E2F\u0E30\x05\u020A\u0106\x02\u0E30\u0E31\x05\u0214\u010B" +
		"\x02\u0E31\u0E8D\x03\x02\x02\x02\u0E32\u0E33\x07\x8C\x02\x02\u0E33\u0E34" +
		"\x07\xCE\x02\x02\u0E34\u0E35\x05\u0540\u02A1\x02\u0E35\u0E36\x05(\x15" +
		"\x02\u0E36\u0E37\x07\x8A\x02\x02\u0E37\u0E38\x05\u0298\u014D\x02\u0E38" +
		"\u0E8D\x03\x02\x02\x02\u0E39\u0E3A\x07\x8C\x02\x02\u0E3A\u0E3B\x07\xCE" +
		"\x02\x02\u0E3B\u0E3C\x05\u0540\u02A1\x02\u0E3C\u0E3D\x05(\x15\x02\u0E3D" +
		"\u0E3E\x07+\x02\x02\u0E3E\u0E3F\x07\x04\x02\x02\u0E3F\u0E40\x05\u0462" +
		"\u0232\x02\u0E40\u0E41\x07&\x02\x02\u0E41\u0E42\x05\u0462\u0232\x02\u0E42" +
		"\u0E43\x07\x05\x02\x02\u0E43\u0E8D\x03\x02\x02\x02\u0E44\u0E45\x07\x8C" +
		"\x02\x02\u0E45\u0E46\x07\xCE\x02\x02\u0E46\u0E47\x05\u0540\u02A1\x02\u0E47" +
		"\u0E48\x05(\x15\x02\u0E48\u0E49\x07\xBF\x02\x02\u0E49\u0E4A\x05\u0462" +
		"\u0232\x02\u0E4A\u0E8D\x03\x02\x02\x02\u0E4B\u0E4C\x07\x8C\x02\x02\u0E4C" +
		"\u0E4D\x07\xCE\x02\x02\u0E4D\u0E4E\x05\u0540\u02A1\x02\u0E4E\u0E4F\x05" +
		"(\x15\x02\u0E4F\u0E50\x07\xD5\x02\x02\u0E50\u0E51\x05\u0280\u0141\x02" +
		"\u0E51\u0E8D\x03\x02\x02\x02\u0E52\u0E53\x07\x8C\x02\x02\u0E53\u0E54\x07" +
		"\xCE\x02\x02\u0E54\u0E55\x05\u0540\u02A1\x02\u0E55\u0E56\x05(\x15\x02" +
		"\u0E56\u0E57\x07\u0118\x02\x02\u0E57\u0E58\x05\u02BE\u0160\x02\u0E58\u0E8D" +
		"\x03\x02\x02\x02\u0E59\u0E5A\x07\x8C\x02\x02\u0E5A\u0E5B\x07\xCE\x02\x02" +
		"\u0E5B\u0E5C\x05\u0540\u02A1\x02\u0E5C\u0E5D\x05(\x15\x02\u0E5D\u0E5E" +
		"\x07\u0118\x02\x02\u0E5E\u0E5F\x07\x9E\x02\x02\u0E5F\u0E60\x05\u0214\u010B" +
		"\x02\u0E60\u0E61\x07f\x02\x02\u0E61\u0E62\x05\u0540\u02A1\x02\u0E62\u0E8D" +
		"\x03\x02\x02\x02\u0E63\u0E64\x07\x8C\x02\x02\u0E64\u0E65\x07\xCE\x02\x02" +
		"\u0E65\u0E66\x05\u0540\u02A1\x02\u0E66\u0E67\x05(\x15\x02\u0E67\u0E68" +
		"\x07\u0118\x02\x02\u0E68\u0E69\x07\xD0\x02\x02\u0E69\u0E6A\x05\u0214\u010B" +
		"\x02\u0E6A\u0E6B\x07f\x02\x02\u0E6B\u0E6C\x05\u0540\u02A1\x02\u0E6C\u0E8D" +
		"\x03\x02\x02\x02\u0E6D\u0E6E\x07\x8C\x02\x02\u0E6E\u0E6F\x07\xCE\x02\x02" +
		"\u0E6F\u0E70\x05\u0540\u02A1\x02\u0E70\u0E71\x05(\x15\x02\u0E71\u0E72" +
		"\x07\u012A\x02\x02\u0E72\u0E73\x05\u0280\u0141\x02\u0E73\u0E8D\x03\x02" +
		"\x02\x02\u0E74\u0E75\x07\x8C\x02\x02\u0E75\u0E76\x07\xCE\x02\x02\u0E76" +
		"\u0E77\x05\u0540\u02A1\x02\u0E77\u0E78\x05(\x15\x02\u0E78\u0E79\x07\u01BC" +
		"\x02\x02\u0E79\u0E7A\x05\u0280\u0141\x02\u0E7A\u0E8D\x03\x02\x02\x02\u0E7B" +
		"\u0E7C\x07\x8C\x02\x02\u0E7C\u0E7D\x07\xCE\x02\x02\u0E7D\u0E7E\x05\u0540" +
		"\u02A1\x02\u0E7E\u0E7F\x05(\x15\x02\u0E7F\u0E80\x07\u01BD\x02\x02\u0E80" +
		"\u0E81\x07@\x02\x02\u0E81\u0E82\x05\u0462\u0232\x02\u0E82\u0E83\x07\xF9" +
		"\x02\x02\u0E83\u0E84\x05\u0540\u02A1\x02\u0E84\u0E8D\x03\x02\x02\x02\u0E85" +
		"\u0E86\x07\x8C\x02\x02\u0E86\u0E87\x07\xCE\x02\x02\u0E87\u0E88\x05\u0540" +
		"\u02A1\x02\u0E88\u0E89\x05(\x15\x02\u0E89\u0E8A\x07\u016A\x02\x02\u0E8A" +
		"\u0E8B\x05\u0462\u0232\x02\u0E8B\u0E8D\x03\x02\x02\x02\u0E8C\u0E24\x03" +
		"\x02\x02\x02\u0E8C\u0E2B\x03\x02\x02\x02\u0E8C\u0E32\x03\x02\x02\x02\u0E8C" +
		"\u0E39\x03\x02\x02\x02\u0E8C\u0E44\x03\x02\x02\x02\u0E8C\u0E4B\x03\x02" +
		"\x02\x02\u0E8C\u0E52\x03\x02\x02\x02\u0E8C\u0E59\x03\x02\x02\x02\u0E8C" +
		"\u0E63\x03\x02\x02\x02\u0E8C\u0E6D\x03\x02\x02\x02\u0E8C\u0E74\x03\x02" +
		"\x02\x02\u0E8C\u0E7B\x03\x02\x02\x02\u0E8C\u0E85\x03\x02\x02\x02\u0E8D" +
		"\u014D\x03\x02\x02\x02\u0E8E\u0E8F\x070\x02\x02\u0E8F\u0E90\x07A\x02\x02" +
		"\u0E90\u0E91\x07\xB0\x02\x02\u0E91\u0E92\x07\u017F\x02\x02\u0E92\u0E94" +
		"\x05\u0540\u02A1\x02\u0E93\u0E95\x05\u0154\xAB\x02\u0E94\u0E93\x03\x02" +
		"\x02\x02\u0E94\u0E95\x03\x02\x02\x02\u0E95\u0E97\x03\x02\x02\x02\u0E96" +
		"\u0E98\x05\u0158\xAD\x02\u0E97\u0E96\x03\x02\x02\x02\u0E97\u0E98\x03\x02" +
		"\x02\x02\u0E98\u014F\x03\x02\x02\x02\u0E99\u0E9A\x07\xD9\x02\x02\u0E9A" +
		"\u0EA2\x05\u0130\x99\x02\u0E9B\u0E9C\x07\u010F\x02\x02\u0E9C\u0EA2\x07" +
		"\xD9\x02\x02\u0E9D\u0E9E\x07\u0177\x02\x02\u0E9E\u0EA2\x05\u0130\x99\x02" +
		"\u0E9F\u0EA0\x07\u010F\x02\x02\u0EA0\u0EA2\x07\u0177\x02\x02\u0EA1\u0E99" +
		"\x03\x02\x02\x02\u0EA1\u0E9B\x03\x02\x02\x02\u0EA1\u0E9D\x03\x02\x02\x02" +
		"\u0EA1\u0E9F\x03\x02\x02\x02\u0EA2\u0151\x03\x02\x02\x02\u0EA3\u0EA5\x05" +
		"\u0150\xA9\x02\u0EA4\u0EA3\x03\x02\x02\x02\u0EA5\u0EA6\x03\x02\x02\x02" +
		"\u0EA6\u0EA4\x03\x02\x02\x02\u0EA6\u0EA7\x03\x02\x02\x02\u0EA7\u0153\x03" +
		"\x02\x02\x02\u0EA8\u0EA9\x05\u0152\xAA\x02\u0EA9\u0155\x03\x02\x02\x02" +
		"\u0EAA\u0EAB\x07\x8C\x02\x02\u0EAB\u0EAC\x07A\x02\x02\u0EAC\u0EAD\x07" +
		"\xB0\x02\x02\u0EAD\u0EAE\x07\u017F\x02\x02\u0EAE\u0EB0\x05\u0540\u02A1" +
		"\x02\u0EAF\u0EB1\x05\u0154\xAB\x02\u0EB0\u0EAF\x03\x02\x02\x02\u0EB0\u0EB1" +
		"\x03\x02\x02\x02\u0EB1\u0EB2\x03\x02\x02\x02\u0EB2\u0EB3\x05\u015C\xAF" +
		"\x02\u0EB3\u0EBC\x03\x02\x02\x02\u0EB4\u0EB5\x07\x8C\x02\x02\u0EB5\u0EB6" +
		"\x07A\x02\x02\u0EB6\u0EB7\x07\xB0\x02\x02\u0EB7\u0EB8\x07\u017F\x02\x02" +
		"\u0EB8\u0EB9\x05\u0540\u02A1\x02\u0EB9\u0EBA\x05\u0152\xAA\x02\u0EBA\u0EBC" +
		"\x03\x02\x02\x02\u0EBB\u0EAA\x03\x02\x02\x02\u0EBB\u0EB4\x03\x02\x02\x02" +
		"\u0EBC\u0157\x03\x02\x02\x02\u0EBD\u0EBE\x07\u011A\x02\x02\u0EBE\u0EBF" +
		"\x07\x04\x02\x02\u0EBF\u0EC0\x05\u015A\xAE\x02\u0EC0\u0EC1\x07\x05\x02" +
		"\x02\u0EC1\u0159\x03\x02\x02\x02\u0EC2\u0EC7\x05\u0162\xB2\x02\u0EC3\u0EC4" +
		"\x07\b\x02\x02\u0EC4\u0EC6\x05\u0162\xB2\x02\u0EC5\u0EC3\x03\x02\x02\x02" +
		"\u0EC6\u0EC9\x03\x02\x02\x02\u0EC7\u0EC5\x03\x02\x02\x02\u0EC7\u0EC8\x03" +
		"\x02\x02\x02\u0EC8\u015B\x03\x02\x02\x02\u0EC9\u0EC7\x03\x02\x02\x02\u0ECA" +
		"\u0ECB\x07\u011A\x02\x02\u0ECB\u0ECC\x07\x04\x02\x02\u0ECC\u0ECD\x05\u015E" +
		"\xB0\x02\u0ECD\u0ECE\x07\x05\x02\x02\u0ECE\u015D\x03\x02\x02\x02\u0ECF" +
		"\u0ED4\x05\u0160\xB1\x02\u0ED0\u0ED1\x07\b\x02\x02\u0ED1\u0ED3\x05\u0160" +
		"\xB1\x02\u0ED2\u0ED0\x03\x02\x02\x02\u0ED3\u0ED6\x03\x02\x02\x02\u0ED4" +
		"\u0ED2\x03\x02\x02\x02\u0ED4\u0ED5\x03\x02\x02\x02\u0ED5\u015F\x03\x02" +
		"\x02\x02\u0ED6\u0ED4\x03\x02\x02\x02\u0ED7\u0EDF\x05\u0162\xB2\x02\u0ED8" +
		"\u0ED9\x07\u014F\x02\x02\u0ED9\u0EDF\x05\u0162\xB2\x02\u0EDA\u0EDB\x07" +
		"\x87\x02\x02\u0EDB\u0EDF\x05\u0162\xB2\x02\u0EDC\u0EDD\x07\xC1\x02\x02" +
		"\u0EDD\u0EDF\x05\u0162\xB2\x02\u0EDE\u0ED7\x03\x02\x02\x02\u0EDE\u0ED8" +
		"\x03\x02\x02\x02\u0EDE\u0EDA\x03\x02\x02\x02\u0EDE\u0EDC\x03\x02\x02\x02" +
		"\u0EDF\u0161\x03\x02\x02\x02\u0EE0\u0EE1\x05\u0164\xB3\x02\u0EE1\u0EE2" +
		"\x05\u0166\xB4\x02\u0EE2\u0163\x03\x02\x02\x02\u0EE3\u0EE4\x05\u0570\u02B9" +
		"\x02\u0EE4\u0165\x03\x02\x02\x02\u0EE5\u0EE6\x05\u0552\u02AA\x02\u0EE6" +
		"\u0167\x03\x02\x02\x02\u0EE7\u0EE8\x070\x02\x02\u0EE8\u0EE9\x07\u014D" +
		"\x02\x02\u0EE9\u0EEB\x05\u0540\u02A1\x02\u0EEA\u0EEC\x05\u016A\xB6\x02" +
		"\u0EEB\u0EEA\x03\x02\x02\x02\u0EEB\u0EEC\x03\x02\x02\x02\u0EEC\u0EEE\x03" +
		"\x02\x02\x02\u0EED\u0EEF\x05\u016E\xB8\x02\u0EEE\u0EED\x03\x02\x02\x02" +
		"\u0EEE\u0EEF\x03\x02\x02\x02\u0EEF\u0EF0\x03\x02\x02\x02\u0EF0\u0EF1\x07" +
		"A\x02\x02\u0EF1\u0EF2\x07\xB0\x02\x02\u0EF2\u0EF3\x07\u017F\x02\x02\u0EF3" +
		"\u0EF5\x05\u0540\u02A1\x02\u0EF4\u0EF6\x05\u0158\xAD\x02\u0EF5\u0EF4\x03" +
		"\x02\x02\x02\u0EF5\u0EF6\x03\x02\x02\x02\u0EF6\u0F0B\x03\x02\x02\x02\u0EF7" +
		"\u0EF8\x070\x02\x02\u0EF8\u0EF9\x07\u014D\x02\x02\u0EF9\u0EFA\x07\xDE" +
		"\x02\x02\u0EFA\u0EFB\x07O\x02\x02\u0EFB\u0EFC\x07\u018E\x02\x02\u0EFC" +
		"\u0EFE\x05\u0540\u02A1\x02\u0EFD\u0EFF\x05\u016A\xB6\x02\u0EFE\u0EFD\x03" +
		"\x02\x02\x02\u0EFE\u0EFF\x03\x02\x02\x02\u0EFF\u0F01\x03\x02\x02\x02\u0F00" +
		"\u0F02\x05\u016E\xB8\x02\u0F01\u0F00\x03\x02\x02\x02\u0F01\u0F02\x03\x02" +
		"\x02\x02\u0F02\u0F03\x03\x02\x02\x02\u0F03\u0F04\x07A\x02\x02\u0F04\u0F05" +
		"\x07\xB0\x02\x02\u0F05\u0F06\x07\u017F\x02\x02\u0F06\u0F08\x05\u0540\u02A1" +
		"\x02\u0F07\u0F09\x05\u0158\xAD\x02\u0F08\u0F07\x03\x02\x02\x02\u0F08\u0F09" +
		"\x03\x02\x02\x02\u0F09\u0F0B\x03\x02\x02\x02\u0F0A\u0EE7\x03\x02\x02\x02" +
		"\u0F0A\u0EF7\x03\x02\x02\x02\u0F0B\u0169\x03\x02\x02\x02\u0F0C\u0F0D\x07" +
		"\u016A\x02\x02\u0F0D\u0F0E\x05\u0552\u02AA\x02\u0F0E\u016B\x03\x02\x02" +
		"\x02\u0F0F\u0F12\x07\u0179\x02\x02\u0F10\u0F13\x05\u0552\u02AA\x02\u0F11" +
		"\u0F13\x07P\x02\x02\u0F12\u0F10\x03\x02\x02\x02\u0F12\u0F11\x03\x02\x02" +
		"\x02\u0F13\u016D\x03\x02\x02\x02\u0F14\u0F15\x05\u016C\xB7\x02\u0F15\u016F" +
		"\x03\x02\x02\x02\u0F16\u0F17\x07\x8C\x02\x02\u0F17\u0F18\x07\u014D\x02" +
		"\x02\u0F18\u0F1E\x05\u0540\u02A1\x02\u0F19\u0F1F\x05\u015C\xAF\x02\u0F1A" +
		"\u0F1C\x05\u016C\xB7\x02\u0F1B\u0F1D\x05\u015C\xAF\x02\u0F1C\u0F1B\x03" +
		"\x02\x02\x02\u0F1C\u0F1D\x03\x02\x02\x02\u0F1D\u0F1F\x03\x02\x02\x02\u0F1E" +
		"\u0F19\x03\x02\x02\x02\u0F1E\u0F1A\x03\x02\x02\x02\u0F1F\u0171\x03\x02" +
		"\x02\x02\u0F20\u0F21\x070\x02\x02\u0F21\u0F22\x07A\x02\x02\u0F22\u0F23" +
		"\x07^\x02\x02\u0F23\u0F24\x05\u053C\u029F\x02\u0F24\u0F26\x07\x04\x02" +
		"\x02\u0F25\u0F27\x05\xB2Z\x02\u0F26\u0F25\x03\x02\x02\x02\u0F26\u0F27" +
		"\x03\x02\x02\x02\u0F27\u0F28\x03\x02\x02\x02\u0F28\u0F2A\x07\x05\x02\x02" +
		"\u0F29\u0F2B\x05\xF2z\x02\u0F2A\u0F29\x03\x02\x02\x02\u0F2A\u0F2B\x03" +
		"\x02\x02\x02\u0F2B\u0F2C\x03\x02\x02\x02\u0F2C\u0F2D\x07\u014D\x02\x02" +
		"\u0F2D\u0F2F\x05\u0540\u02A1\x02\u0F2E\u0F30\x05\u0158\xAD\x02\u0F2F\u0F2E" +
		"\x03\x02\x02\x02\u0F2F\u0F30\x03\x02\x02\x02\u0F30\u0F69\x03\x02\x02\x02" +
		"\u0F31\u0F32\x070\x02\x02\u0F32\u0F33\x07A\x02\x02\u0F33\u0F34\x07^\x02" +
		"\x02\u0F34\u0F35\x07\xDE\x02\x02\u0F35\u0F36\x07O\x02\x02\u0F36\u0F37" +
		"\x07\u018E\x02\x02\u0F37\u0F38\x05\u053C\u029F\x02\u0F38\u0F3A\x07\x04" +
		"\x02\x02\u0F39\u0F3B\x05\xB2Z\x02\u0F3A\u0F39\x03\x02\x02\x02\u0F3A\u0F3B" +
		"\x03\x02\x02\x02\u0F3B\u0F3C\x03\x02\x02\x02\u0F3C\u0F3E\x07\x05\x02\x02" +
		"\u0F3D\u0F3F\x05\xF2z\x02\u0F3E\u0F3D\x03\x02\x02\x02\u0F3E\u0F3F\x03" +
		"\x02\x02\x02\u0F3F\u0F40\x03\x02\x02\x02\u0F40\u0F41\x07\u014D\x02\x02" +
		"\u0F41\u0F43\x05\u0540\u02A1\x02\u0F42\u0F44\x05\u0158\xAD\x02\u0F43\u0F42" +
		"\x03\x02\x02\x02\u0F43\u0F44\x03\x02\x02\x02\u0F44\u0F69\x03\x02\x02\x02" +
		"\u0F45\u0F46\x070\x02\x02\u0F46\u0F47\x07A\x02\x02\u0F47\u0F48\x07^\x02" +
		"\x02\u0F48\u0F49\x05\u053C\u029F\x02\u0F49\u0F4A\x07\u011F\x02\x02\u0F4A" +
		"\u0F4B\x07\u0115\x02\x02\u0F4B\u0F4D\x05\u053C\u029F\x02\u0F4C\u0F4E\x05" +
		"\xB4[\x02\u0F4D\u0F4C\x03\x02\x02\x02\u0F4D\u0F4E\x03\x02\x02\x02\u0F4E" +
		"\u0F4F\x03\x02\x02\x02\u0F4F\u0F50\x05\x80A\x02\u0F50\u0F51\x07\u014D" +
		"\x02\x02\u0F51\u0F53\x05\u0540\u02A1\x02\u0F52\u0F54\x05\u0158\xAD\x02" +
		"\u0F53\u0F52\x03\x02\x02\x02\u0F53\u0F54\x03\x02\x02\x02\u0F54\u0F69\x03" +
		"\x02\x02\x02\u0F55\u0F56\x070\x02\x02\u0F56\u0F57\x07A\x02\x02\u0F57\u0F58" +
		"\x07^\x02\x02\u0F58\u0F59\x07\xDE\x02\x02\u0F59\u0F5A\x07O\x02\x02\u0F5A" +
		"\u0F5B\x07\u018E\x02\x02\u0F5B\u0F5C\x05\u053C\u029F\x02\u0F5C\u0F5D\x07" +
		"\u011F\x02\x02\u0F5D\u0F5E\x07\u0115\x02\x02\u0F5E\u0F60\x05\u053C\u029F" +
		"\x02\u0F5F\u0F61\x05\xB4[\x02\u0F60\u0F5F\x03\x02\x02\x02\u0F60\u0F61" +
		"\x03\x02\x02\x02\u0F61\u0F62\x03\x02\x02\x02\u0F62\u0F63\x05\x80A\x02" +
		"\u0F63\u0F64\x07\u014D\x02\x02\u0F64\u0F66\x05\u0540\u02A1\x02\u0F65\u0F67" +
		"\x05\u0158\xAD\x02\u0F66\u0F65\x03\x02\x02\x02\u0F66\u0F67\x03\x02\x02" +
		"\x02\u0F67\u0F69\x03\x02\x02\x02\u0F68\u0F20\x03\x02\x02\x02\u0F68\u0F31" +
		"\x03\x02\x02\x02\u0F68\u0F45\x03\x02\x02\x02\u0F68\u0F55\x03\x02\x02\x02" +
		"\u0F69\u0173\x03\x02\x02\x02\u0F6A\u0F6B\x07\u01BE\x02\x02\u0F6B\u0F6C" +
		"\x07A\x02\x02\u0F6C\u0F6D\x07\u0145\x02\x02\u0F6D\u0F6F\x05\u0540\u02A1" +
		"\x02\u0F6E\u0F70\x05\u0178\xBD\x02\u0F6F\u0F6E\x03\x02\x02\x02\u0F6F\u0F70" +
		"\x03\x02\x02\x02\u0F70\u0F71\x03\x02\x02\x02\u0F71\u0F72\x07B\x02\x02" +
		"\u0F72\u0F73\x07\u014D\x02\x02\u0F73\u0F74\x05\u0540\u02A1\x02\u0F74\u0F75" +
		"\x07I\x02\x02\u0F75\u0F77\x05\u0540\u02A1\x02\u0F76\u0F78\x05\u0158\xAD" +
		"\x02\u0F77\u0F76\x03\x02\x02\x02\u0F77\u0F78\x03\x02\x02\x02\u0F78\u0175" +
		"\x03\x02\x02\x02\u0F79\u0F7A\x07L\x02\x02\u0F7A\u0F7D\x07`\x02\x02\u0F7B" +
		"\u0F7D\x07=\x02\x02\u0F7C\u0F79\x03\x02\x02\x02\u0F7C\u0F7B\x03\x02\x02" +
		"\x02\u0F7D\u0177\x03\x02\x02\x02\u0F7E\u0F7F\x05\u0176\xBC\x02\u0F7F\u0F80" +
		"\x07\x04\x02\x02\u0F80\u0F81\x05\u0438\u021D\x02\u0F81\u0F82\x07\x05\x02" +
		"\x02\u0F82\u0179\x03\x02\x02\x02\u0F83\u0F84\x070\x02\x02\u0F84\u0F85" +
		"\x07e\x02\x02\u0F85\u0F86\x07\u0103\x02\x02\u0F86\u0F87\x07@\x02\x02\u0F87" +
		"\u0F88\x05\u017C\xBF\x02\u0F88\u0F89\x07\u014D\x02\x02\u0F89\u0F8B\x05" +
		"\u0540\u02A1\x02\u0F8A\u0F8C\x05\u0158\xAD\x02\u0F8B\u0F8A\x03\x02\x02" +
		"\x02\u0F8B\u0F8C\x03\x02\x02\x02\u0F8C\u0F9B\x03\x02\x02\x02\u0F8D\u0F8E" +
		"\x070\x02\x02\u0F8E\u0F8F\x07e\x02\x02\u0F8F\u0F90\x07\u0103\x02\x02\u0F90" +
		"\u0F91\x07\xDE\x02\x02\u0F91\u0F92\x07O\x02\x02\u0F92\u0F93\x07\u018E" +
		"\x02\x02\u0F93\u0F94\x07@\x02\x02\u0F94\u0F95\x05\u017C\xBF\x02\u0F95" +
		"\u0F96\x07\u014D\x02\x02\u0F96\u0F98\x05\u0540\u02A1\x02\u0F97\u0F99\x05" +
		"\u0158\xAD\x02\u0F98\u0F97\x03\x02\x02\x02\u0F98\u0F99\x03\x02\x02\x02" +
		"\u0F99\u0F9B\x03\x02\x02\x02\u0F9A\u0F83\x03\x02\x02\x02\u0F9A\u0F8D\x03" +
		"\x02\x02\x02\u0F9B\u017B\x03\x02\x02\x02\u0F9C\u0F9F\x05\u055E\u02B0\x02" +
		"\u0F9D\u0F9F\x07e\x02\x02\u0F9E\u0F9C\x03\x02\x02\x02\u0F9E\u0F9D\x03" +
		"\x02\x02\x02\u0F9F\u017D\x03\x02\x02\x02\u0FA0\u0FA1\x07\xC1\x02\x02\u0FA1" +
		"\u0FA2\x07e\x02\x02\u0FA2\u0FA3\x07\u0103\x02\x02\u0FA3\u0FA4\x07@\x02" +
		"\x02\u0FA4\u0FA5\x05\u017C\xBF\x02\u0FA5\u0FA6\x07\u014D\x02\x02\u0FA6" +
		"\u0FA7\x05\u0540\u02A1\x02\u0FA7\u0FB3\x03\x02\x02\x02\u0FA8\u0FA9\x07" +
		"\xC1\x02\x02\u0FA9\u0FAA\x07e\x02\x02\u0FAA\u0FAB\x07\u0103\x02\x02\u0FAB" +
		"\u0FAC\x07\xDE\x02\x02\u0FAC\u0FAD\x07\u018E\x02\x02\u0FAD\u0FAE\x07@" +
		"\x02\x02\u0FAE\u0FAF\x05\u017C\xBF\x02\u0FAF\u0FB0\x07\u014D\x02\x02\u0FB0" +
		"\u0FB1\x05\u0540\u02A1\x02\u0FB1\u0FB3\x03\x02\x02\x02\u0FB2\u0FA0\x03" +
		"\x02\x02\x02\u0FB2\u0FA8\x03\x02\x02\x02\u0FB3\u017F\x03\x02\x02\x02\u0FB4" +
		"\u0FB5\x07\x8C\x02\x02\u0FB5\u0FB6\x07e\x02\x02\u0FB6\u0FB7\x07\u0103" +
		"\x02\x02\u0FB7\u0FB8\x07@\x02\x02\u0FB8\u0FB9\x05\u017C\xBF\x02\u0FB9" +
		"\u0FBA\x07\u014D\x02\x02\u0FBA\u0FBB\x05\u0540\u02A1\x02\u0FBB\u0FBC\x05" +
		"\u015C\xAF\x02\u0FBC\u0181\x03\x02\x02\x02\u0FBD\u0FBE\x070\x02\x02\u0FBE" +
		"\u0FBF\x07\u01BF\x02\x02\u0FBF\u0FC0\x05\u0540\u02A1\x02\u0FC0\u0FC1\x07" +
		"R\x02\x02\u0FC1\u0FC3\x05\u053C\u029F\x02\u0FC2\u0FC4\x05\u018E\xC8\x02" +
		"\u0FC3\u0FC2\x03\x02\x02\x02\u0FC3\u0FC4\x03\x02\x02\x02\u0FC4\u0FC6\x03" +
		"\x02\x02\x02\u0FC5\u0FC7\x05\u0190\xC9\x02\u0FC6\u0FC5\x03\x02\x02\x02" +
		"\u0FC6\u0FC7\x03\x02\x02\x02\u0FC7\u0FC9\x03\x02\x02\x02\u0FC8\u0FCA\x05" +
		"\u018A\xC6\x02\u0FC9\u0FC8\x03\x02\x02\x02\u0FC9\u0FCA\x03\x02\x02\x02" +
		"\u0FCA\u0FCC\x03\x02\x02\x02\u0FCB\u0FCD\x05\u0186\xC4\x02\u0FCC\u0FCB" +
		"\x03\x02\x02\x02\u0FCC\u0FCD\x03\x02\x02\x02\u0FCD\u0FCF\x03\x02\x02\x02" +
		"\u0FCE\u0FD0\x05\u0188\xC5\x02\u0FCF\u0FCE\x03\x02\x02\x02\u0FCF\u0FD0" +
		"\x03\x02\x02\x02\u0FD0\u0183\x03\x02\x02\x02\u0FD1\u0FD2\x07\x8C\x02\x02" +
		"\u0FD2\u0FD3\x07\u01BF\x02\x02\u0FD3\u0FD4\x05\u0540\u02A1\x02\u0FD4\u0FD5" +
		"\x07R\x02\x02\u0FD5\u0FD7\x05\u053C\u029F\x02\u0FD6\u0FD8\x05\u018C\xC7" +
		"\x02\u0FD7\u0FD6\x03\x02\x02\x02\u0FD7\u0FD8\x03\x02\x02\x02\u0FD8\u0FDA" +
		"\x03\x02\x02\x02\u0FD9\u0FDB\x05\u0186\xC4\x02\u0FDA\u0FD9\x03\x02\x02" +
		"\x02\u0FDA\u0FDB\x03\x02\x02\x02\u0FDB\u0FDD\x03\x02\x02\x02\u0FDC\u0FDE" +
		"\x05\u0188\xC5\x02\u0FDD\u0FDC\x03\x02\x02\x02\u0FDD\u0FDE\x03\x02\x02" +
		"\x02\u0FDE\u0185\x03\x02\x02\x02\u0FDF\u0FE0\x07f\x02\x02\u0FE0\u0FE1" +
		"\x07\x04\x02\x02\u0FE1\u0FE2\x05\u048E\u0248\x02\u0FE2\u0FE3\x07\x05\x02" +
		"\x02\u0FE3\u0187\x03\x02\x02\x02\u0FE4\u0FE5\x07k\x02\x02\u0FE5\u0FE6" +
		"\x07,\x02\x02\u0FE6\u0FE7\x07\x04\x02\x02\u0FE7\u0FE8\x05\u048E\u0248" +
		"\x02\u0FE8\u0FE9\x07\x05\x02\x02\u0FE9\u0189\x03\x02\x02\x02\u0FEA\u0FEB" +
		"\x07`\x02\x02\u0FEB\u0FEC\x05\u0560\u02B1\x02\u0FEC\u018B\x03\x02\x02" +
		"\x02\u0FED\u0FEE\x07`\x02\x02\u0FEE\u0FEF\x05\u0560\u02B1\x02\u0FEF\u018D" +
		"\x03\x02\x02\x02\u0FF0\u0FF1\x07&\x02\x02\u0FF1\u0FF2\x05\u0572\u02BA" +
		"\x02\u0FF2\u018F\x03\x02\x02\x02\u0FF3\u0FF4\x07@\x02\x02\u0FF4\u0FF5" +
		"\x05\u0192\xCA\x02\u0FF5\u0191\x03\x02\x02\x02\u0FF6\u0FF7\t\x19\x02\x02" +
		"\u0FF7\u0193\x03\x02\x02\x02\u0FF8\u0FF9\x070\x02\x02\u0FF9\u0FFA\x07" +
		"\x85\x02\x02\u0FFA\u0FFB\x07\u01C0\x02\x02\u0FFB\u0FFC\x05\u0540\u02A1" +
		"\x02\u0FFC\u0FFD\x07\u016A\x02\x02\u0FFD\u0FFE\x05\u0196\xCC\x02\u0FFE" +
		"\u0FFF\x07\xD9\x02\x02\u0FFF\u1000\x05\u0130\x99\x02\u1000\u0195\x03\x02" +
		"\x02\x02\u1001\u1002\t\x1A\x02\x02\u1002\u0197\x03\x02\x02\x02\u1003\u1004" +
		"\x070\x02\x02\u1004\u1005\x07\u0167\x02\x02\u1005\u1006\x05\u0540\u02A1" +
		"\x02\u1006\u1007\x05\u019A\xCE\x02\u1007\u1008\x05\u01A0\xD1\x02\u1008" +
		"\u1009\x07R\x02\x02\u1009\u100B\x05\u053C\u029F\x02\u100A\u100C\x05\u01A4" +
		"\xD3\x02\u100B\u100A\x03\x02\x02\x02\u100B\u100C\x03\x02\x02\x02\u100C" +
		"\u100E\x03\x02\x02\x02\u100D\u100F\x05\u01B0\xD9\x02\u100E\u100D\x03\x02" +
		"\x02\x02\u100E\u100F\x03\x02\x02\x02\u100F\u1011\x03\x02\x02\x02\u1010" +
		"\u1012\x05\u01B6\xDC\x02\u1011\u1010\x03\x02\x02\x02\u1011\u1012\x03\x02" +
		"\x02\x02\u1012\u1013\x03\x02\x02\x02\u1013\u1014\x07\xCC\x02\x02\u1014" +
		"\u1015\x05\u01B8\xDD\x02\u1015\u1016\x05\u0546\u02A4\x02\u1016\u1017\x07" +
		"\x04\x02\x02\u1017\u1018\x05\u01BA\xDE\x02\u1018\u1019\x07\x05\x02\x02" +
		"\u1019\u1036\x03\x02\x02\x02\u101A\u101C\x070\x02\x02\u101B\u101D\x07" +
		"/\x02\x02\u101C\u101B\x03\x02\x02\x02\u101C\u101D\x03\x02\x02\x02\u101D" +
		"\u101E\x03\x02\x02\x02\u101E\u101F\x07\u0167\x02\x02\u101F\u1020\x05\u0540" +
		"\u02A1\x02\u1020\u1021\x05\u019A\xCE\x02\u1021\u1022\x05\u01A0\xD1\x02" +
		"\u1022\u1023\x07R\x02\x02\u1023\u1025\x05\u053C\u029F\x02\u1024\u1026" +
		"\x05\u01BE\xE0\x02\u1025\u1024\x03\x02\x02\x02\u1025\u1026\x03\x02\x02" +
		"\x02\u1026\u1027\x03\x02\x02\x02\u1027\u1029\x05\u01C0\xE1\x02\u1028\u102A" +
		"\x05\u019C\xCF\x02\u1029\u1028\x03\x02\x02\x02\u1029\u102A\x03\x02\x02" +
		"\x02\u102A\u102C\x03\x02\x02\x02\u102B\u102D\x05\u01B6\xDC\x02\u102C\u102B" +
		"\x03\x02\x02\x02\u102C\u102D\x03\x02\x02\x02\u102D\u102E\x03\x02\x02\x02" +
		"\u102E\u102F\x07\xCC\x02\x02\u102F\u1030\x05\u01B8\xDD\x02\u1030\u1031" +
		"\x05\u0546\u02A4\x02\u1031\u1032\x07\x04\x02\x02\u1032\u1033\x05\u01BA" +
		"\xDE\x02\u1033\u1034\x07\x05\x02\x02\u1034\u1036\x03\x02\x02\x02\u1035" +
		"\u1003\x03\x02\x02\x02\u1035\u101A\x03\x02\x02\x02\u1036\u0199\x03\x02" +
		"\x02\x02\u1037\u103C\x07\x93\x02\x02\u1038\u103C\x07\x89\x02\x02\u1039" +
		"\u103A\x07\xF4\x02\x02\u103A\u103C\x07\u0115\x02\x02\u103B\u1037\x03\x02" +
		"\x02\x02\u103B\u1038\x03\x02\x02\x02\u103B\u1039\x03\x02\x02\x02\u103C" +
		"\u019B\x03\x02\x02\x02\u103D\u103F\x07@\x02\x02\u103E\u1040\x07\xC2\x02" +
		"\x02\u103F\u103E\x03\x02\x02\x02\u103F\u1040\x03\x02\x02\x02\u1040\u1041" +
		"\x03\x02\x02\x02\u1041\u1042\x05\u019E\xD0\x02\u1042\u019D\x03\x02\x02" +
		"\x02\u1043\u1044\t\x1B\x02\x02\u1044\u019F\x03\x02\x02\x02\u1045\u104A" +
		"\x05\u01A2\xD2\x02\u1046\u1047\x07T\x02\x02\u1047\u1049\x05\u01A2\xD2" +
		"\x02\u1048\u1046\x03\x02\x02\x02\u1049\u104C\x03\x02\x02\x02\u104A\u1048" +
		"\x03\x02\x02\x02\u104A\u104B\x03\x02\x02\x02\u104B\u01A1\x03\x02\x02\x02" +
		"\u104C\u104A\x03\x02\x02\x02\u104D\u1055\x07\xF3\x02\x02\u104E\u1055\x07" +
		"\xB8\x02\x02\u104F\u1055\x07\u0173\x02\x02\u1050\u1051\x07\u0173\x02\x02" +
		"\u1051\u1052\x07\u0115\x02\x02\u1052\u1055\x05\xDCo\x02\u1053\u1055\x07" +
		"\u0168\x02\x02\u1054\u104D\x03\x02\x02\x02\u1054\u104E\x03\x02\x02\x02" +
		"\u1054\u104F\x03\x02\x02\x02\u1054\u1050\x03\x02\x02\x02\u1054\u1053\x03" +
		"\x02\x02\x02\u1055\u01A3\x03\x02\x02\x02\u1056\u1057\x07\u01C1\x02\x02" +
		"\u1057\u1058\x05\u01A6\xD4\x02\u1058\u01A5\x03\x02\x02\x02\u1059\u105B" +
		"\x05\u01A8\xD5\x02\u105A\u1059\x03\x02\x02\x02\u105B\u105C\x03\x02\x02" +
		"\x02\u105C\u105A\x03\x02\x02\x02\u105C\u105D\x03\x02\x02\x02\u105D\u01A7" +
		"\x03\x02\x02\x02\u105E\u105F\x05\u01AA\xD6\x02\u105F\u1061\x05\u01AC\xD7" +
		"\x02\u1060\u1062\x05\u0350\u01A9\x02\u1061\u1060\x03\x02\x02\x02\u1061" +
		"\u1062\x03\x02\x02\x02\u1062\u1063\x03\x02\x02\x02\u1063\u1064\x05\u01AE" +
		"\xD8\x02\u1064\u01A9\x03\x02\x02\x02\u1065\u1066\t\x1C\x02\x02\u1066\u01AB" +
		"\x03\x02\x02\x02\u1067\u1068\t\x1D\x02\x02\u1068\u01AD\x03\x02\x02\x02" +
		"\u1069\u106A\x05\u0562\u02B2\x02\u106A\u01AF\x03\x02\x02\x02\u106B\u106D" +
		"\x07@\x02\x02\u106C\u106E\x05\u01B2\xDA\x02\u106D\u106C\x03\x02\x02\x02" +
		"\u106D\u106E\x03\x02\x02\x02\u106E\u106F\x03\x02\x02\x02\u106F\u1070\x05" +
		"\u01B4\xDB\x02\u1070\u01B1\x03\x02\x02\x02\u1071\u1072\x07\xC2\x02\x02" +
		"\u1072\u01B3\x03\x02\x02\x02\u1073\u1074\t\x1B\x02\x02\u1074\u01B5\x03" +
		"\x02\x02\x02\u1075\u1076\x07h\x02\x02\u1076\u1077\x07\x04\x02\x02\u1077" +
		"\u1078\x05\u048E\u0248\x02\u1078\u1079\x07\x05\x02\x02\u1079\u01B7\x03" +
		"\x02\x02\x02\u107A\u107B\t\x1E\x02\x02\u107B\u01B9\x03\x02\x02\x02\u107C" +
		"\u107F\x05\u01BC\xDF\x02\u107D\u107F\x03\x02\x02\x02\u107E\u107C\x03\x02" +
		"\x02\x02\u107E\u107D\x03\x02\x02\x02\u107F\u1084\x03\x02\x02\x02\u1080" +
		"\u1081\x07\b\x02\x02\u1081\u1083\x05\u01BC\xDF\x02\u1082\u1080\x03\x02" +
		"\x02\x02\u1083\u1086\x03\x02\x02\x02\u1084\u1082\x03\x02\x02\x02\u1084" +
		"\u1085\x03\x02\x02\x02\u1085\u01BB\x03\x02\x02\x02\u1086\u1084\x03\x02" +
		"\x02\x02\u1087\u108C\x05\u0550\u02A9\x02\u1088\u108C\x05\u054E\u02A8\x02" +
		"\u1089\u108C\x05\u0552\u02AA\x02\u108A\u108C\x05\u0570\u02B9\x02\u108B" +
		"\u1087\x03\x02\x02\x02\u108B\u1088\x03\x02\x02\x02\u108B\u1089\x03\x02" +
		"\x02\x02\u108B\u108A\x03\x02\x02\x02\u108C\u01BD\x03\x02\x02\x02\u108D" +
		"\u108E\x07B\x02\x02\u108E\u108F\x05\u053C\u029F\x02\u108F\u01BF\x03\x02" +
		"\x02\x02\u1090\u1092\x05\u01C2\xE2\x02\u1091\u1090\x03\x02\x02\x02\u1092" +
		"\u1095\x03\x02\x02\x02\u1093\u1091\x03\x02\x02\x02\u1093\u1094\x03\x02" +
		"\x02\x02\u1094\u01C1\x03\x02\x02\x02\u1095\u1093\x03\x02\x02\x02\u1096" +
		"\u1097\x07";
	private static readonly _serializedATNSegment10: string =
		"O\x02\x02\u1097\u10A2\x078\x02\x02\u1098\u10A2\x078\x02\x02\u1099\u109A" +
		"\x07G\x02\x02\u109A\u10A2\x07\xDF\x02\x02\u109B\u109C\x07G\x02\x02\u109C" +
		"\u10A2\x07\xB6\x02\x02\u109D\u109E\x07O\x02\x02\u109E\u10A2\x07\u0175" +
		"\x02\x02\u109F\u10A0\x07\u010F\x02\x02\u10A0\u10A2\x07\xE6\x02\x02\u10A1" +
		"\u1096\x03\x02\x02\x02\u10A1\u1098\x03\x02\x02\x02\u10A1\u1099\x03\x02" +
		"\x02\x02\u10A1\u109B\x03\x02\x02\x02\u10A1\u109D\x03\x02\x02\x02\u10A1" +
		"\u109F\x03\x02\x02\x02\u10A2\u01C3\x03\x02\x02\x02\u10A3\u10A4\x070\x02" +
		"\x02\u10A4\u10A5\x07\xC8\x02\x02\u10A5\u10A6\x07\u0167\x02\x02\u10A6\u10A7" +
		"\x05\u0540\u02A1\x02\u10A7\u10A8\x07R\x02\x02\u10A8\u10A9\x05\u0570\u02B9" +
		"\x02\u10A9\u10AA\x07\xCC\x02\x02\u10AA\u10AB\x05\u01B8\xDD\x02\u10AB\u10AC" +
		"\x05\u0546\u02A4\x02\u10AC\u10AD\x07\x04\x02\x02\u10AD\u10AE\x07\x05\x02" +
		"\x02\u10AE\u10BE\x03\x02\x02\x02\u10AF\u10B0\x070\x02\x02\u10B0\u10B1" +
		"\x07\xC8\x02\x02\u10B1\u10B2\x07\u0167\x02\x02\u10B2\u10B3\x05\u0540\u02A1" +
		"\x02\u10B3\u10B4\x07R\x02\x02\u10B4\u10B5\x05\u0570\u02B9\x02\u10B5\u10B6" +
		"\x07h\x02\x02\u10B6\u10B7\x05\u01C6\xE4\x02\u10B7\u10B8\x07\xCC\x02\x02" +
		"\u10B8\u10B9\x05\u01B8\xDD\x02\u10B9\u10BA\x05\u0546\u02A4\x02\u10BA\u10BB" +
		"\x07\x04\x02\x02\u10BB\u10BC\x07\x05\x02\x02\u10BC\u10BE\x03\x02\x02\x02" +
		"\u10BD\u10A3\x03\x02\x02\x02\u10BD\u10AF\x03\x02\x02\x02\u10BE\u01C5\x03" +
		"\x02\x02\x02\u10BF\u10C4\x05\u01C8\xE5\x02\u10C0\u10C1\x07#\x02\x02\u10C1" +
		"\u10C3\x05\u01C8\xE5\x02\u10C2\u10C0\x03\x02\x02\x02\u10C3\u10C6\x03\x02" +
		"\x02\x02\u10C4\u10C2\x03\x02\x02\x02\u10C4\u10C5\x03\x02\x02\x02\u10C5" +
		"\u01C7\x03\x02\x02\x02\u10C6\u10C4\x03\x02\x02\x02\u10C7\u10C8\x05\u0562" +
		"\u02B2\x02\u10C8\u10C9\x07F\x02\x02\u10C9\u10CA\x07\x04\x02\x02\u10CA" +
		"\u10CB\x05\u01CA\xE6\x02\u10CB\u10CC\x07\x05\x02\x02\u10CC\u01C9\x03\x02" +
		"\x02\x02\u10CD\u10D2\x05\u0552\u02AA\x02\u10CE\u10CF\x07\b\x02\x02\u10CF" +
		"\u10D1\x05\u0552\u02AA\x02\u10D0\u10CE\x03\x02\x02\x02\u10D1\u10D4\x03" +
		"\x02\x02\x02\u10D2\u10D0\x03\x02\x02\x02\u10D2\u10D3\x03\x02\x02\x02\u10D3" +
		"\u01CB\x03\x02\x02\x02\u10D4\u10D2\x03\x02\x02\x02\u10D5\u10D6\x07\x8C" +
		"\x02\x02\u10D6\u10D7\x07\xC8\x02\x02\u10D7\u10D8\x07\u0167\x02\x02\u10D8" +
		"\u10D9\x05\u0540\u02A1\x02\u10D9\u10DA\x05\u01CE\xE8\x02\u10DA\u01CD\x03" +
		"\x02\x02\x02\u10DB\u10E2\x07\xC3\x02\x02\u10DC\u10DD\x07\xC3\x02\x02\u10DD" +
		"\u10E2\x07\u013A\x02\x02\u10DE\u10DF\x07\xC3\x02\x02\u10DF\u10E2\x07\x8D" +
		"\x02\x02\u10E0\u10E2\x07\xBC\x02\x02\u10E1\u10DB\x03\x02\x02\x02\u10E1" +
		"\u10DC\x03\x02\x02\x02\u10E1\u10DE\x03\x02\x02\x02\u10E1\u10E0\x03\x02" +
		"\x02\x02\u10E2\u01CF\x03\x02\x02\x02\u10E3\u10E4\x070\x02\x02\u10E4\u10E5" +
		"\x07\x8E\x02\x02\u10E5\u10E6\x05\u0214\u010B\x02\u10E6\u10E7\x07,\x02" +
		"\x02\u10E7\u10E8\x07\x04\x02\x02\u10E8\u10E9\x05\u048E\u0248\x02\u10E9" +
		"\u10EA\x07\x05\x02\x02\u10EA\u10EB\x05\u01C0\xE1\x02\u10EB\u01D1\x03\x02" +
		"\x02\x02\u10EC\u10EE\x070\x02\x02\u10ED\u10EF\x05\u0278\u013D\x02\u10EE" +
		"\u10ED\x03\x02\x02\x02\u10EE\u10EF\x03\x02\x02\x02\u10EF\u10F0\x03\x02" +
		"\x02\x02\u10F0\u10F1\x07\x8A\x02\x02\u10F1\u10F2\x05\u0546\u02A4\x02\u10F2" +
		"\u10F3\x05\u0294\u014B\x02\u10F3\u10F4\x05\u01D4\xEB\x02\u10F4\u115F\x03" +
		"\x02\x02\x02\u10F5\u10F7\x070\x02\x02\u10F6\u10F8\x05\u0278\u013D\x02" +
		"\u10F7\u10F6\x03\x02\x02\x02\u10F7\u10F8\x03\x02\x02\x02\u10F8\u10F9\x03" +
		"\x02\x02\x02\u10F9\u10FA\x07\x8A\x02\x02\u10FA\u10FB\x05\u0546\u02A4\x02" +
		"\u10FB\u10FC\x05\u01DC\xEF\x02\u10FC\u115F\x03\x02\x02\x02\u10FD\u10FE" +
		"\x070\x02\x02\u10FE\u10FF\x07\u0118\x02\x02\u10FF\u1100\x05\u02BA\u015E" +
		"\x02\u1100\u1101\x05\u01D4\xEB\x02\u1101\u115F\x03\x02\x02\x02\u1102\u1103" +
		"\x070\x02\x02\u1103\u1104\x07\u016A\x02\x02\u1104\u1105\x05\u0214\u010B" +
		"\x02\u1105\u1106\x05\u01D4\xEB\x02\u1106\u115F\x03\x02\x02\x02\u1107\u1108" +
		"\x070\x02\x02\u1108\u1109\x07\u016A\x02\x02\u1109\u115F\x05\u0214\u010B" +
		"\x02\u110A\u110B\x070\x02\x02\u110B\u110C\x07\u016A\x02\x02\u110C\u110D" +
		"\x05\u0214\u010B\x02\u110D\u110E\x07&\x02\x02\u110E\u1110\x07\x04\x02" +
		"\x02\u110F\u1111\x05\u044E\u0228\x02\u1110\u110F\x03\x02\x02\x02\u1110" +
		"\u1111\x03\x02\x02\x02\u1111\u1112\x03\x02\x02\x02\u1112\u1113\x07\x05" +
		"\x02\x02\u1113\u115F\x03\x02\x02\x02\u1114\u1115\x070\x02\x02\u1115\u1116" +
		"\x07\u016A\x02\x02\u1116\u1117\x05\u0214\u010B\x02\u1117\u1118\x07&\x02" +
		"\x02\u1118\u1119\x07\xC6\x02\x02\u1119\u111B\x07\x04\x02\x02\u111A\u111C" +
		"\x05\u01E2\xF2\x02\u111B\u111A\x03\x02\x02\x02\u111B\u111C\x03\x02\x02" +
		"\x02\u111C\u111D\x03\x02\x02\x02\u111D\u111E\x07\x05\x02\x02\u111E\u115F" +
		"\x03\x02\x02\x02\u111F\u1120\x070\x02\x02\u1120\u1121\x07\u016A\x02\x02" +
		"\u1121\u1122\x05\u0214\u010B\x02\u1122\u1123\x07&\x02\x02\u1123\u1124" +
		"\x07\u012D\x02\x02\u1124\u1125\x05\u01D4\xEB\x02\u1125\u115F\x03\x02\x02" +
		"\x02\u1126\u1127\x070\x02\x02\u1127\u1128\x07\u0165\x02\x02\u1128\u1129" +
		"\x07\u0147\x02\x02\u1129\u112A\x07\u011D\x02\x02\u112A\u112B\x05\u0214" +
		"\u010B\x02\u112B\u112C\x05\u01D4\xEB\x02\u112C\u115F\x03\x02\x02\x02\u112D" +
		"\u112E\x070\x02\x02\u112E\u112F\x07\u0165\x02\x02\u112F\u1130\x07\u0147" +
		"\x02\x02\u1130\u1131\x07\xBB\x02\x02\u1131\u1132\x05\u0214\u010B\x02\u1132" +
		"\u1133\x05\u01D4\xEB\x02\u1133\u115F\x03\x02\x02\x02\u1134\u1135\x070" +
		"\x02\x02\u1135\u1136\x07\u0165\x02\x02\u1136\u1137\x07\u0147\x02\x02\u1137" +
		"\u1138\x07\u0163\x02\x02\u1138\u1139\x05\u0214\u010B\x02\u1139\u113A\x05" +
		"\u01D4\xEB\x02\u113A\u115F\x03\x02\x02\x02\u113B\u113C\x070\x02\x02\u113C" +
		"\u113D\x07\u0165\x02\x02\u113D\u113E\x07\u0147\x02\x02\u113E\u113F\x07" +
		"\xA5\x02\x02\u113F\u1140\x05\u0214\u010B\x02\u1140\u1141\x05\u01D4\xEB" +
		"\x02\u1141\u115F\x03\x02\x02\x02\u1142\u1143\x070\x02\x02\u1143\u1144" +
		"\x07n\x02\x02\u1144\u1145\x05\u0214\u010B\x02\u1145\u1146\x05\u01D4\xEB" +
		"\x02\u1146\u115F\x03\x02\x02\x02\u1147\u1148\x070\x02\x02\u1148\u1149" +
		"\x07n\x02\x02\u1149\u114A\x07\xDE\x02\x02\u114A\u114B\x07O\x02\x02\u114B" +
		"\u114C\x07\u018E\x02\x02\u114C\u114D\x05\u0214\u010B\x02\u114D\u114E\x05" +
		"\u01D4\xEB\x02\u114E\u115F\x03\x02\x02\x02\u114F\u1150\x070\x02\x02\u1150" +
		"\u1151\x07n\x02\x02\u1151\u1152\x05\u0214\u010B\x02\u1152\u1153\x07B\x02" +
		"\x02\u1153\u1154\x05\u0214\u010B\x02\u1154\u115F\x03\x02\x02\x02\u1155" +
		"\u1156\x070\x02\x02\u1156\u1157\x07n\x02\x02\u1157\u1158\x07\xDE\x02\x02" +
		"\u1158\u1159\x07O\x02\x02\u1159\u115A\x07\u018E\x02\x02\u115A\u115B\x05" +
		"\u0214\u010B\x02\u115B\u115C\x07B\x02\x02\u115C\u115D\x05\u0214\u010B" +
		"\x02\u115D\u115F\x03\x02\x02\x02\u115E\u10EC\x03\x02\x02\x02\u115E\u10F5" +
		"\x03\x02\x02\x02\u115E\u10FD\x03\x02\x02\x02\u115E\u1102\x03\x02\x02\x02" +
		"\u115E\u1107\x03\x02\x02\x02\u115E\u110A\x03\x02\x02\x02\u115E\u1114\x03" +
		"\x02\x02\x02\u115E\u111F\x03\x02\x02\x02\u115E\u1126\x03\x02\x02\x02\u115E" +
		"\u112D\x03\x02\x02\x02\u115E\u1134\x03\x02\x02\x02\u115E\u113B\x03\x02" +
		"\x02\x02\u115E\u1142\x03\x02\x02\x02\u115E\u1147\x03\x02\x02\x02\u115E" +
		"\u114F\x03\x02\x02\x02\u115E\u1155\x03\x02\x02\x02\u115F\u01D3\x03\x02" +
		"\x02\x02\u1160\u1161\x07\x04\x02\x02\u1161\u1162\x05\u01D6\xEC\x02\u1162" +
		"\u1163\x07\x05\x02\x02\u1163\u01D5\x03\x02\x02\x02\u1164\u1169\x05\u01D8" +
		"\xED\x02\u1165\u1166\x07\b\x02\x02\u1166\u1168\x05\u01D8\xED\x02\u1167" +
		"\u1165\x03\x02\x02\x02\u1168\u116B\x03\x02\x02\x02\u1169\u1167\x03\x02" +
		"\x02\x02\u1169\u116A\x03\x02\x02\x02\u116A\u01D7\x03\x02\x02\x02\u116B" +
		"\u1169\x03\x02\x02\x02\u116C\u116F\x05\u0570\u02B9\x02\u116D\u116E\x07" +
		"\f\x02\x02\u116E\u1170\x05\u01DA\xEE\x02\u116F\u116D\x03\x02\x02\x02\u116F" +
		"\u1170\x03\x02\x02\x02\u1170\u01D9\x03\x02\x02\x02\u1171\u1178\x05\u028E" +
		"\u0148\x02\u1172\u1178\x05\u057C\u02BF\x02\u1173\u1178\x05\u04FE\u0280" +
		"\x02\u1174\u1178\x05\u0128\x95\x02\u1175\u1178\x05\u0552\u02AA\x02\u1176" +
		"\u1178\x07\u0199\x02\x02\u1177\u1171\x03\x02\x02\x02\u1177\u1172\x03\x02" +
		"\x02\x02\u1177\u1173\x03\x02\x02\x02\u1177\u1174\x03\x02\x02\x02\u1177" +
		"\u1175\x03\x02\x02\x02\u1177\u1176\x03\x02\x02\x02\u1178\u01DB\x03\x02" +
		"\x02\x02\u1179\u117A\x07\x04\x02\x02\u117A\u117B\x05\u01DE\xF0\x02\u117B" +
		"\u117C\x07\x05\x02\x02\u117C\u01DD\x03\x02\x02\x02\u117D\u1182\x05\u01E0" +
		"\xF1\x02\u117E\u117F\x07\b\x02\x02\u117F\u1181\x05\u01E0\xF1\x02\u1180" +
		"\u117E\x03\x02\x02\x02\u1181\u1184\x03\x02\x02\x02\u1182\u1180\x03\x02" +
		"\x02\x02\u1182\u1183\x03\x02\x02\x02\u1183\u01DF\x03\x02\x02\x02\u1184" +
		"\u1182\x03\x02\x02\x02\u1185\u1186\x05\u0572\u02BA\x02\u1186\u1187\x07" +
		"\f\x02\x02\u1187\u1188\x05\u01DA\xEE\x02\u1188\u01E1\x03\x02\x02\x02\u1189" +
		"\u118A\x05\u01E4\xF3\x02\u118A\u01E3\x03\x02\x02\x02\u118B\u1190\x05\u0552" +
		"\u02AA\x02\u118C\u118D\x07\b\x02\x02\u118D\u118F\x05\u0552\u02AA\x02\u118E" +
		"\u118C\x03\x02\x02\x02\u118F\u1192\x03\x02\x02\x02\u1190\u118E\x03\x02" +
		"\x02\x02\u1190\u1191\x03\x02\x02\x02\u1191\u01E5\x03\x02\x02\x02\u1192" +
		"\u1190\x03\x02\x02\x02\u1193\u1194\x07\x8C\x02\x02\u1194\u1195\x07\u016A" +
		"\x02\x02\u1195\u1196\x05\u0214\u010B\x02\u1196\u1197\x07\x87\x02\x02\u1197" +
		"\u1199\x07\u01C4\x02\x02\u1198\u119A\x05\u01E8\xF5\x02\u1199\u1198\x03" +
		"\x02\x02\x02\u1199\u119A\x03\x02\x02\x02\u119A\u119B\x03\x02\x02\x02\u119B" +
		"\u119C\x05\u0552\u02AA\x02\u119C\u11BF\x03\x02\x02\x02\u119D\u119E\x07" +
		"\x8C\x02\x02\u119E\u119F\x07\u016A\x02\x02\u119F\u11A0\x05\u0214\u010B" +
		"\x02\u11A0\u11A1\x07\x87\x02\x02\u11A1\u11A3\x07\u01C4\x02\x02\u11A2\u11A4" +
		"\x05\u01E8\xF5\x02\u11A3\u11A2\x03\x02\x02\x02\u11A3\u11A4\x03\x02\x02" +
		"\x02\u11A4\u11A5\x03\x02\x02\x02\u11A5\u11A6\x05\u0552\u02AA\x02\u11A6" +
		"\u11A7\x07\x93\x02\x02\u11A7\u11A8\x05\u0552\u02AA\x02\u11A8\u11BF\x03" +
		"\x02\x02\x02\u11A9\u11AA\x07\x8C\x02\x02\u11AA\u11AB\x07\u016A\x02\x02" +
		"\u11AB\u11AC\x05\u0214\u010B\x02\u11AC\u11AD\x07\x87\x02\x02\u11AD\u11AF" +
		"\x07\u01C4\x02\x02\u11AE\u11B0\x05\u01E8\xF5\x02\u11AF\u11AE\x03\x02\x02" +
		"\x02\u11AF\u11B0\x03\x02\x02\x02\u11B0\u11B1\x03\x02\x02\x02\u11B1\u11B2" +
		"\x05\u0552\u02AA\x02\u11B2\u11B3\x07\x89\x02\x02\u11B3\u11B4\x05\u0552" +
		"\u02AA\x02\u11B4\u11BF\x03\x02\x02\x02\u11B5\u11B6\x07\x8C\x02\x02\u11B6" +
		"\u11B7\x07\u016A\x02\x02\u11B7\u11B8\x05\u0214\u010B\x02\u11B8\u11B9\x07" +
		"\u0137\x02\x02\u11B9\u11BA\x07\u01C4\x02\x02\u11BA\u11BB\x05\u0552\u02AA" +
		"\x02\u11BB\u11BC\x07`\x02\x02\u11BC\u11BD\x05\u0552\u02AA\x02\u11BD\u11BF" +
		"\x03\x02\x02\x02\u11BE\u1193\x03\x02\x02\x02\u11BE\u119D\x03\x02\x02\x02" +
		"\u11BE\u11A9\x03\x02\x02\x02\u11BE\u11B5\x03\x02\x02\x02\u11BF\u01E7\x03" +
		"\x02\x02\x02\u11C0\u11C1\x07\xDE\x02\x02\u11C1\u11C2\x07O\x02\x02\u11C2" +
		"\u11C3\x07\u018E\x02\x02\u11C3\u01E9\x03\x02\x02\x02\u11C4\u11C5\x070" +
		"\x02\x02\u11C5\u11C6\x07\u0118\x02\x02\u11C6\u11C7\x07\x9E\x02\x02\u11C7" +
		"\u11C9\x05\u0214\u010B\x02\u11C8\u11CA\x05\u01F0\xF9\x02\u11C9\u11C8\x03" +
		"\x02\x02\x02\u11C9\u11CA\x03\x02\x02\x02\u11CA\u11CB\x03\x02\x02\x02\u11CB" +
		"\u11CC\x07@\x02\x02\u11CC\u11CD\x07\u016A\x02\x02\u11CD\u11CE\x05\u0462" +
		"\u0232\x02\u11CE\u11CF\x07f\x02\x02\u11CF\u11D1\x05\u0540\u02A1\x02\u11D0" +
		"\u11D2\x05\u01F2\xFA\x02\u11D1\u11D0\x03\x02\x02\x02\u11D1\u11D2\x03\x02" +
		"\x02\x02\u11D2\u11D3\x03\x02\x02\x02\u11D3\u11D4\x07&\x02\x02\u11D4\u11D5" +
		"\x05\u01EC\xF7\x02\u11D5\u01EB\x03\x02\x02\x02\u11D6\u11DB\x05\u01EE\xF8" +
		"\x02\u11D7\u11D8\x07\b\x02\x02\u11D8\u11DA\x05\u01EE\xF8\x02\u11D9\u11D7" +
		"\x03\x02\x02\x02\u11DA\u11DD\x03\x02\x02\x02\u11DB\u11D9\x03\x02\x02\x02" +
		"\u11DB\u11DC\x03\x02\x02\x02\u11DC\u01ED\x03\x02\x02\x02\u11DD\u11DB\x03" +
		"\x02\x02\x02\u11DE\u11DF\x07\u0118\x02\x02\u11DF\u11E0\x05\u0550\u02A9" +
		"\x02\u11E0\u11E2\x05\u02BA\u015E\x02\u11E1\u11E3\x05\u01F4\xFB\x02\u11E2" +
		"\u11E1\x03\x02\x02\x02\u11E2\u11E3\x03\x02\x02\x02\u11E3\u11E5\x03\x02" +
		"\x02\x02\u11E4\u11E6\x05\u01F6\xFC\x02\u11E5\u11E4\x03\x02\x02\x02\u11E5" +
		"\u11E6\x03\x02\x02\x02\u11E6\u11FE\x03\x02\x02\x02\u11E7\u11E8\x07\u0118" +
		"\x02\x02\u11E8\u11E9\x05\u0550\u02A9\x02\u11E9\u11EB\x05\u02BE\u0160\x02" +
		"\u11EA\u11EC\x05\u01F4\xFB\x02\u11EB\u11EA\x03\x02\x02\x02\u11EB\u11EC" +
		"\x03\x02\x02\x02\u11EC\u11EE\x03\x02\x02\x02\u11ED\u11EF\x05\u01F6\xFC" +
		"\x02\u11EE\u11ED\x03\x02\x02\x02\u11EE\u11EF\x03\x02\x02\x02\u11EF\u11FE" +
		"\x03\x02\x02\x02\u11F0\u11F1\x07\xD5\x02\x02\u11F1\u11F2\x05\u0550\u02A9" +
		"\x02\u11F2\u11F3\x05\u0280\u0141\x02\u11F3\u11FE\x03\x02\x02\x02\u11F4" +
		"\u11F5\x07\xD5\x02\x02\u11F5\u11F6\x05\u0550\u02A9\x02\u11F6\u11F7\x07" +
		"\x04\x02\x02\u11F7\u11F8\x05\u0508\u0285\x02\u11F8\u11F9\x07\x05\x02\x02" +
		"\u11F9\u11FA\x05\u0280\u0141\x02\u11FA\u11FE\x03\x02\x02\x02\u11FB\u11FC" +
		"\x07\u015B\x02\x02\u11FC\u11FE\x05\u0462\u0232\x02\u11FD\u11DE\x03\x02" +
		"\x02\x02\u11FD\u11E7\x03\x02\x02\x02\u11FD\u11F0\x03\x02\x02\x02\u11FD" +
		"\u11F4\x03\x02\x02\x02\u11FD\u11FB\x03\x02\x02\x02\u11FE\u01EF\x03\x02" +
		"\x02\x02\u11FF\u1200\x077\x02\x02\u1200\u01F1\x03\x02\x02\x02\u1201\u1202" +
		"\x07\xD0\x02\x02\u1202\u1203\x05\u0214\u010B\x02\u1203\u01F3\x03\x02\x02" +
		"\x02\u1204\u1205\x07@\x02\x02\u1205\u120B\x07\u0147\x02\x02\u1206\u1207" +
		"\x07@\x02\x02\u1207\u1208\x07U\x02\x02\u1208\u1209\x07\x95\x02\x02\u1209" +
		"\u120B\x05\u0214\u010B\x02\u120A\u1204\x03\x02\x02\x02\u120A\u1206\x03" +
		"\x02\x02\x02\u120B\u01F5\x03\x02\x02\x02\u120C\u120D\x07\u0130\x02\x02" +
		"\u120D\u01F7\x03\x02\x02\x02\u120E\u120F\x070\x02\x02\u120F\u1210\x07" +
		"\u0118\x02\x02\u1210\u1211\x07\xD0\x02\x02\u1211\u1212\x05\u0214\u010B" +
		"\x02\u1212\u1213\x07f\x02\x02\u1213\u1214\x05\u0540\u02A1\x02\u1214\u01F9" +
		"\x03\x02\x02\x02\u1215\u1216\x07\x8C\x02\x02\u1216\u1217\x07\u0118\x02" +
		"\x02\u1217\u1218\x07\xD0\x02\x02\u1218\u1219\x05\u0214\u010B\x02\u1219" +
		"\u121A\x07f\x02\x02\u121A\u121B\x05\u0540\u02A1\x02\u121B\u121C\x07\x87" +
		"\x02\x02\u121C\u121D\x05\u01EC\xF7\x02\u121D\u1228\x03\x02\x02\x02\u121E" +
		"\u121F\x07\x8C\x02\x02\u121F\u1220\x07\u0118\x02\x02\u1220\u1221\x07\xD0" +
		"\x02\x02\u1221\u1222\x05\u0214\u010B\x02\u1222\u1223\x07f\x02\x02\u1223" +
		"\u1224\x05\u0540\u02A1\x02\u1224\u1225\x07\xC1\x02\x02\u1225\u1226\x05" +
		"\u01FC\xFF\x02\u1226\u1228\x03\x02\x02\x02\u1227\u1215\x03\x02\x02\x02" +
		"\u1227\u121E\x03\x02\x02\x02\u1228\u01FB\x03\x02\x02\x02\u1229\u122E\x05" +
		"\u01FE\u0100\x02\u122A\u122B\x07\b\x02\x02\u122B\u122D\x05\u01FE\u0100" +
		"\x02\u122C\u122A\x03\x02\x02\x02\u122D\u1230\x03\x02\x02\x02\u122E\u122C" +
		"\x03\x02\x02\x02\u122E\u122F\x03\x02\x02\x02\u122F\u01FD\x03\x02\x02\x02" +
		"\u1230\u122E\x03\x02\x02\x02\u1231\u1232\x07\u0118\x02\x02\u1232\u1233" +
		"\x05\u0550\u02A9\x02\u1233\u1234\x07\x04\x02\x02\u1234\u1235\x05\u0508" +
		"\u0285\x02\u1235\u1236\x07\x05\x02\x02\u1236\u123E\x03\x02\x02\x02\u1237" +
		"\u1238\x07\xD5\x02\x02\u1238\u1239\x05\u0550\u02A9\x02\u1239\u123A\x07" +
		"\x04\x02\x02\u123A\u123B\x05\u0508\u0285\x02\u123B\u123C\x07\x05\x02\x02" +
		"\u123C\u123E\x03\x02\x02\x02\u123D\u1231\x03\x02\x02\x02\u123D\u1237\x03" +
		"\x02\x02\x02\u123E\u01FF\x03\x02\x02\x02\u123F\u1240\x07\xC1\x02\x02\u1240" +
		"\u1241\x07\u0118\x02\x02\u1241\u1242\x07\x9E\x02\x02\u1242\u1243\x05\u0214" +
		"\u010B\x02\u1243\u1244\x07f\x02\x02\u1244\u1246\x05\u0540\u02A1\x02\u1245" +
		"\u1247\x05l7\x02\u1246\u1245\x03\x02\x02\x02\u1246\u1247\x03\x02\x02\x02" +
		"\u1247\u1254\x03\x02\x02\x02\u1248\u1249\x07\xC1\x02\x02\u1249\u124A\x07" +
		"\u0118\x02\x02\u124A\u124B\x07\x9E\x02\x02\u124B\u124C\x07\xDE\x02\x02" +
		"\u124C\u124D\x07\u018E\x02\x02\u124D\u124E\x05\u0214\u010B\x02\u124E\u124F" +
		"\x07f\x02\x02\u124F\u1251\x05\u0540\u02A1\x02\u1250\u1252\x05l7\x02\u1251" +
		"\u1250\x03\x02\x02\x02\u1251\u1252\x03\x02\x02\x02\u1252\u1254\x03\x02" +
		"\x02\x02\u1253\u123F\x03\x02\x02\x02\u1253\u1248\x03\x02\x02\x02\u1254" +
		"\u0201\x03\x02\x02\x02\u1255\u1256\x07\xC1\x02\x02\u1256\u1257\x07\u0118" +
		"\x02\x02\u1257\u1258\x07\xD0\x02\x02\u1258\u1259\x05\u0214\u010B\x02\u1259" +
		"\u125A\x07f\x02\x02\u125A\u125C\x05\u0540\u02A1\x02\u125B\u125D\x05l7" +
		"\x02\u125C\u125B\x03\x02\x02\x02\u125C\u125D\x03\x02\x02\x02\u125D\u126A" +
		"\x03\x02\x02\x02\u125E\u125F\x07\xC1\x02\x02\u125F\u1260\x07\u0118\x02" +
		"\x02\u1260\u1261\x07\xD0\x02\x02\u1261\u1262\x07\xDE\x02\x02\u1262\u1263" +
		"\x07\u018E\x02\x02\u1263\u1264\x05\u0214\u010B\x02\u1264\u1265\x07f\x02" +
		"\x02\u1265\u1267\x05\u0540\u02A1\x02\u1266\u1268\x05l7\x02\u1267\u1266" +
		"\x03\x02\x02\x02\u1267\u1268\x03\x02\x02\x02\u1268\u126A\x03\x02\x02\x02" +
		"\u1269\u1255\x03\x02\x02\x02\u1269\u125E\x03\x02\x02\x02\u126A\u0203\x03" +
		"\x02\x02\x02\u126B\u126C\x07\xC1\x02\x02\u126C\u126D\x07\u011B\x02\x02" +
		"\u126D\u126E\x07\x95\x02\x02\u126E\u1270\x05\u0560\u02B1\x02\u126F\u1271" +
		"\x05l7\x02\u1270\u126F\x03\x02\x02\x02\u1270\u1271\x03\x02\x02\x02\u1271" +
		"\u0205\x03\x02\x02\x02\u1272\u1273\x07\u012F\x02\x02\u1273\u1274\x07\u011B" +
		"\x02\x02\u1274\u1275\x07\x95\x02\x02\u1275\u1276\x05\u0560\u02B1\x02\u1276" +
		"\u1277\x07`\x02\x02\u1277\u1278\x05\u055E\u02B0\x02\u1278\u0207\x03\x02" +
		"\x02\x02\u1279\u127A\x07\xC1\x02\x02\u127A\u127B\x05\u020A\u0106\x02\u127B" +
		"\u127C\x07\xDE\x02\x02\u127C\u127D\x07\u018E\x02\x02\u127D\u127F\x05\u0212" +
		"\u010A\x02\u127E\u1280\x05l7\x02\u127F\u127E\x03\x02\x02\x02\u127F\u1280" +
		"\x03\x02\x02\x02\u1280\u12D4\x03\x02\x02\x02\u1281\u1282\x07\xC1\x02\x02" +
		"\u1282\u1283\x05\u020A\u0106\x02\u1283\u1285\x05\u0212\u010A\x02\u1284" +
		"\u1286\x05l7\x02\u1285\u1284\x03\x02\x02\x02\u1285\u1286\x03\x02\x02\x02" +
		"\u1286\u12D4\x03\x02\x02\x02\u1287\u1288\x07\xC1\x02\x02\u1288\u1289\x05" +
		"\u020E\u0108\x02\u1289\u128A\x07\xDE\x02\x02\u128A\u128B\x07\u018E\x02" +
		"\x02\u128B\u128D\x05\u053E\u02A0\x02\u128C\u128E\x05l7\x02\u128D\u128C" +
		"\x03\x02\x02\x02\u128D\u128E\x03\x02\x02\x02\u128E\u12D4\x03\x02\x02\x02" +
		"\u128F\u1290\x07\xC1\x02\x02\u1290\u1291\x05\u020E\u0108\x02\u1291\u1293" +
		"\x05\u053E\u02A0\x02\u1292\u1294\x05l7\x02\u1293\u1292\x03\x02\x02\x02" +
		"\u1293\u1294\x03\x02\x02\x02\u1294\u12D4\x03\x02\x02\x02\u1295\u1296\x07" +
		"\xC1\x02\x02\u1296\u1297\x05\u0210\u0109\x02\u1297\u1298\x05\u0540\u02A1" +
		"\x02\u1298\u1299\x07R\x02\x02\u1299\u129B\x05\u0214\u010B\x02\u129A\u129C" +
		"\x05l7\x02\u129B\u129A\x03\x02\x02\x02\u129B\u129C\x03\x02\x02\x02\u129C" +
		"\u12D4\x03\x02\x02\x02\u129D\u129E\x07\xC1\x02\x02\u129E\u129F\x05\u0210" +
		"\u0109\x02\u129F\u12A0\x07\xDE\x02\x02\u12A0\u12A1\x07\u018E\x02\x02\u12A1" +
		"\u12A2\x05\u0540\u02A1\x02\u12A2\u12A3\x07R\x02\x02\u12A3\u12A5\x05\u0214" +
		"\u010B\x02\u12A4\u12A6\x05l7\x02\u12A5\u12A4\x03\x02\x02\x02\u12A5\u12A6" +
		"\x03\x02\x02\x02\u12A6\u12D4\x03\x02\x02\x02\u12A7\u12A8\x07\xC1\x02\x02" +
		"\u12A8\u12A9\x07\u016A\x02\x02\u12A9\u12AB\x05\u0218\u010D\x02\u12AA\u12AC" +
		"\x05l7\x02\u12AB\u12AA\x03\x02\x02\x02\u12AB\u12AC\x03\x02\x02\x02\u12AC" +
		"\u12D4\x03\x02\x02\x02\u12AD\u12AE\x07\xC1\x02\x02\u12AE\u12AF\x07\u016A" +
		"\x02\x02\u12AF\u12B0\x07\xDE\x02\x02\u12B0\u12B1\x07\u018E\x02\x02\u12B1" +
		"\u12B3\x05\u0218\u010D\x02\u12B2\u12B4\x05l7\x02\u12B3\u12B2\x03\x02\x02" +
		"\x02\u12B3\u12B4\x03\x02\x02\x02\u12B4\u12D4\x03\x02\x02\x02\u12B5\u12B6" +
		"\x07\xC1\x02\x02\u12B6\u12B7\x07\xBF\x02\x02\u12B7\u12B9\x05\u0218\u010D" +
		"\x02\u12B8\u12BA\x05l7\x02\u12B9\u12B8\x03\x02\x02\x02\u12B9\u12BA\x03" +
		"\x02\x02\x02\u12BA\u12D4\x03\x02\x02\x02\u12BB\u12BC\x07\xC1\x02\x02\u12BC" +
		"\u12BD\x07\xBF\x02\x02\u12BD\u12BE\x07\xDE\x02\x02\u12BE\u12BF\x07\u018E" +
		"\x02\x02\u12BF\u12C1\x05\u0218\u010D\x02\u12C0\u12C2\x05l7\x02\u12C1\u12C0" +
		"\x03\x02\x02\x02\u12C1\u12C2\x03\x02\x02\x02\u12C2\u12D4\x03\x02\x02\x02" +
		"\u12C3\u12C4\x07\xC1\x02\x02\u12C4\u12C5\x07\xE4\x02\x02\u12C5\u12C6\x07" +
		"o\x02\x02\u12C6\u12C8\x05\u0212\u010A\x02\u12C7\u12C9\x05l7\x02\u12C8" +
		"\u12C7\x03\x02\x02\x02\u12C8\u12C9\x03\x02\x02\x02\u12C9\u12D4\x03\x02" +
		"\x02\x02\u12CA\u12CB\x07\xC1\x02\x02\u12CB\u12CC\x07\xE4\x02\x02\u12CC" +
		"\u12CD\x07o\x02\x02\u12CD\u12CE\x07\xDE\x02\x02\u12CE\u12CF\x07\u018E" +
		"\x02\x02\u12CF\u12D1\x05\u0212\u010A\x02\u12D0\u12D2\x05l7\x02\u12D1\u12D0" +
		"\x03\x02\x02\x02\u12D1\u12D2\x03\x02\x02\x02\u12D2\u12D4\x03\x02\x02\x02" +
		"\u12D3\u1279\x03\x02\x02\x02\u12D3\u1281\x03\x02\x02\x02\u12D3\u1287\x03" +
		"\x02\x02\x02\u12D3\u128F\x03\x02\x02\x02\u12D3\u1295\x03\x02\x02\x02\u12D3" +
		"\u129D\x03\x02\x02\x02\u12D3\u12A7\x03\x02\x02\x02\u12D3\u12AD\x03\x02" +
		"\x02\x02\u12D3\u12B5\x03\x02\x02\x02\u12D3\u12BB\x03\x02\x02\x02\u12D3" +
		"\u12C3\x03\x02\x02\x02\u12D3\u12CA\x03\x02\x02\x02\u12D4\u0209\x03\x02" +
		"\x02\x02\u12D5\u12ED\x07^\x02\x02\u12D6\u12ED\x07\u014A\x02\x02\u12D7" +
		"\u12ED\x07\u017A\x02\x02\u12D8\u12D9\x07\u0105\x02\x02\u12D9\u12ED\x07" +
		"\u017A\x02\x02\u12DA\u12ED\x07\xE4\x02\x02\u12DB\u12DC\x07A\x02\x02\u12DC" +
		"\u12ED\x07^\x02\x02\u12DD\u12ED\x07n\x02\x02\u12DE\u12ED\x07\xAA\x02\x02" +
		"\u12DF\u12ED\x07\u0158\x02\x02\u12E0\u12E1\x07\u0165\x02\x02\u12E1\u12E2" +
		"\x07\u0147\x02\x02\u12E2\u12ED\x07\u011D\x02\x02\u12E3\u12E4\x07\u0165" +
		"\x02\x02\u12E4\u12E5\x07\u0147\x02\x02\u12E5\u12ED\x07\xBB\x02\x02\u12E6" +
		"\u12E7\x07\u0165\x02\x02\u12E7\u12E8\x07\u0147\x02\x02\u12E8\u12ED\x07" +
		"\u0163\x02\x02\u12E9\u12EA\x07\u0165\x02\x02\u12EA\u12EB\x07\u0147\x02" +
		"\x02\u12EB\u12ED\x07\xA5\x02\x02\u12EC\u12D5\x03\x02\x02\x02\u12EC\u12D6" +
		"\x03\x02\x02\x02\u12EC\u12D7\x03\x02\x02\x02\u12EC\u12D8\x03\x02\x02\x02" +
		"\u12EC\u12DA\x03\x02\x02\x02\u12EC\u12DB\x03\x02\x02\x02\u12EC\u12DD\x03" +
		"\x02\x02\x02\u12EC\u12DE\x03\x02\x02\x02\u12EC\u12DF\x03\x02\x02\x02\u12EC" +
		"\u12E0\x03\x02\x02\x02\u12EC\u12E3\x03\x02\x02\x02\u12EC\u12E6\x03\x02" +
		"\x02\x02\u12EC\u12E9\x03\x02\x02\x02\u12ED\u020B\x03\x02\x02\x02\u12EE" +
		"\u12F4\x05\u020E\u0108\x02\u12EF\u12F4\x07\xB1\x02\x02\u12F0\u12F4\x07" +
		"\u0140\x02\x02\u12F1\u12F4\x07\u01C5\x02\x02\u12F2\u12F4\x07\u0161\x02" +
		"\x02\u12F3\u12EE\x03\x02\x02\x02\u12F3\u12EF\x03\x02\x02\x02\u12F3\u12F0" +
		"\x03\x02\x02\x02\u12F3\u12F1\x03\x02\x02\x02\u12F3\u12F2\x03\x02\x02\x02" +
		"\u12F4\u020D\x03\x02\x02\x02\u12F5\u12F6\x07\x85\x02\x02\u12F6\u1305\x07" +
		"\u01C0\x02\x02\u12F7\u12F8\x07\xC8\x02\x02\u12F8\u1305\x07\u0167\x02\x02" +
		"\u12F9\u1305\x07\xCE\x02\x02\u12FA\u12FB\x07A\x02\x02\u12FB\u12FC\x07" +
		"\xB0\x02\x02\u12FC\u1305\x07\u017F\x02\x02\u12FD\u12FF\x05\u0138\x9D\x02" +
		"\u12FE\u12FD\x03\x02\x02\x02\u12FE\u12FF\x03\x02\x02\x02\u12FF\u1300\x03" +
		"\x02\x02\x02\u1300\u1305\x07\xF9\x02\x02\u1301\u1305\x07\u01C6\x02\x02" +
		"\u1302\u1305\x07\u0145\x02\x02\u1303\u1305\x07\u014D\x02\x02\u1304\u12F5" +
		"\x03\x02\x02\x02\u1304\u12F7\x03\x02\x02\x02\u1304\u12F9\x03\x02\x02\x02" +
		"\u1304\u12FA\x03\x02\x02\x02\u1304\u12FE\x03\x02\x02\x02\u1304\u1301\x03" +
		"\x02\x02\x02\u1304\u1302\x03\x02\x02\x02\u1304\u1303\x03\x02\x02\x02\u1305" +
		"\u020F\x03\x02\x02\x02\u1306\u1307\t\x1F\x02\x02\u1307\u0211\x03\x02\x02" +
		"\x02\u1308\u130D\x05\u0214\u010B\x02\u1309\u130A\x07\b\x02\x02\u130A\u130C" +
		"\x05\u0214\u010B\x02\u130B\u1309\x03\x02\x02\x02\u130C\u130F\x03\x02\x02" +
		"\x02\u130D\u130B\x03\x02\x02\x02\u130D\u130E\x03\x02\x02\x02\u130E\u0213" +
		"\x03\x02\x02\x02\u130F\u130D\x03\x02\x02\x02\u1310\u1312\x05\u0562\u02B2" +
		"\x02\u1311\u1313\x05\u0216\u010C\x02\u1312\u1311\x03\x02\x02\x02\u1312" +
		"\u1313\x03\x02\x02\x02\u1313\u0215\x03\x02\x02\x02\u1314\u1315\x07\r\x02" +
		"\x02\u1315\u1317\x05\u0542\u02A2\x02\u1316\u1314\x03\x02\x02\x02\u1317" +
		"\u1318\x03\x02\x02\x02\u1318\u1316\x03\x02\x02\x02\u1318\u1319\x03\x02" +
		"\x02\x02\u1319\u0217\x03\x02\x02\x02\u131A\u131F\x05\u0462\u0232\x02\u131B" +
		"\u131C\x07\b\x02\x02\u131C\u131E\x05\u0462\u0232\x02\u131D\u131B\x03\x02" +
		"\x02\x02\u131E\u1321\x03\x02\x02\x02\u131F\u131D\x03\x02\x02\x02\u131F" +
		"\u1320\x03\x02\x02\x02\u1320\u0219\x03\x02\x02\x02\u1321\u131F\x03\x02" +
		"\x02\x02\u1322\u1324\x07\u0168\x02\x02\u1323\u1325\x05\u03E4\u01F3\x02" +
		"\u1324\u1323\x03\x02\x02\x02\u1324\u1325\x03\x02\x02\x02\u1325\u1326\x03" +
		"\x02\x02\x02\u1326\u1328\x05\u0438\u021D\x02\u1327\u1329\x05\u021C\u010F" +
		"\x02\u1328\u1327\x03\x02\x02\x02\u1328\u1329\x03\x02\x02\x02\u1329\u132B" +
		"\x03\x02\x02\x02\u132A\u132C\x05l7\x02\u132B\u132A\x03\x02\x02\x02\u132B" +
		"\u132C\x03\x02\x02\x02\u132C\u021B\x03\x02\x02\x02\u132D\u132E\x07\xA9" +
		"\x02\x02\u132E\u1332\x07\xDD\x02\x02\u132F\u1330\x07\u013C\x02\x02\u1330" +
		"\u1332\x07\xDD\x02\x02\u1331\u132D\x03\x02\x02\x02\u1331\u132F\x03\x02" +
		"\x02\x02\u1332\u021D\x03\x02\x02\x02\u1333\u1334\x07\xA1\x02\x02\u1334" +
		"\u1335\x07R\x02\x02\u1335\u1336\x05\u020A\u0106\x02\u1336\u1337\x05\u0214" +
		"\u010B\x02\u1337\u1338\x07v\x02\x02\u1338\u1339\x05\u0220\u0111\x02\u1339" +
		"\u13C7\x03\x02\x02\x02\u133A\u133B\x07\xA1\x02\x02\u133B\u133C\x07R\x02" +
		"\x02\u133C\u133D\x07.\x02\x02\u133D\u133E\x05\u0214\u010B\x02\u133E\u133F" +
		"\x07v\x02\x02\u133F\u1340\x05\u0220\u0111\x02\u1340\u13C7\x03\x02\x02" +
		"\x02\u1341\u1342\x07\xA1\x02\x02\u1342\u1343\x07R\x02\x02\u1343\u1344" +
		"\x05\u020C\u0107\x02\u1344\u1345\x05\u0540\u02A1\x02\u1345\u1346\x07v" +
		"\x02\x02\u1346\u1347\x05\u0220\u0111\x02\u1347\u13C7\x03\x02\x02\x02\u1348" +
		"\u1349\x07\xA1\x02\x02\u1349\u134A\x07R\x02\x02\u134A\u134B\x07\u016A" +
		"\x02\x02\u134B\u134C\x05\u0462\u0232\x02\u134C\u134D\x07v\x02\x02\u134D" +
		"\u134E\x05\u0220\u0111\x02\u134E\u13C7\x03\x02\x02\x02\u134F\u1350\x07" +
		"\xA1\x02\x02\u1350\u1351\x07R\x02\x02\u1351\u1352\x07\xBF\x02\x02\u1352" +
		"\u1353\x05\u0462\u0232\x02\u1353\u1354\x07v\x02\x02\u1354\u1355\x05\u0220" +
		"\u0111\x02\u1355\u13C7\x03\x02\x02\x02\u1356\u1357\x07\xA1\x02\x02\u1357" +
		"\u1358\x07R\x02\x02\u1358\u1359\x07\x8A\x02\x02\u1359\u135A\x05\u0298" +
		"\u014D\x02\u135A\u135B\x07v\x02\x02\u135B\u135C\x05\u0220\u0111\x02\u135C" +
		"\u13C7\x03\x02\x02\x02\u135D\u135E\x07\xA1\x02";
	private static readonly _serializedATNSegment11: string =
		"\x02\u135E\u135F\x07R\x02\x02\u135F\u1360\x07\xD5\x02\x02\u1360\u1361" +
		"\x05\u0280\u0141\x02\u1361\u1362\x07v\x02\x02\u1362\u1363\x05\u0220\u0111" +
		"\x02\u1363\u13C7\x03\x02\x02\x02\u1364\u1365\x07\xA1\x02\x02\u1365\u1366" +
		"\x07R\x02\x02\u1366\u1367\x07\u0118\x02\x02\u1367\u1368\x05\u02BE\u0160" +
		"\x02\u1368\u1369\x07v\x02\x02\u1369\u136A\x05\u0220\u0111\x02\u136A\u13C7" +
		"\x03\x02\x02\x02\u136B\u136C\x07\xA1\x02\x02\u136C\u136D\x07R\x02\x02" +
		"\u136D\u136E\x07/\x02\x02\u136E\u136F\x05\u0540\u02A1\x02\u136F\u1370" +
		"\x07R\x02\x02\u1370\u1371\x05\u0214\u010B\x02\u1371\u1372\x07v\x02\x02" +
		"\u1372\u1373\x05\u0220\u0111\x02\u1373\u13C7\x03\x02\x02\x02\u1374\u1375" +
		"\x07\xA1\x02\x02\u1375\u1376\x07R\x02\x02\u1376\u1377\x07/\x02\x02\u1377" +
		"\u1378\x05\u0540\u02A1\x02\u1378\u1379\x07R\x02\x02\u1379\u137A\x07\xBF" +
		"\x02\x02\u137A\u137B\x05\u0214\u010B\x02\u137B\u137C\x07v\x02\x02\u137C" +
		"\u137D\x05\u0220\u0111\x02\u137D\u13C7\x03\x02\x02\x02\u137E\u137F\x07" +
		"\xA1\x02\x02\u137F\u1380\x07R\x02\x02\u1380\u1381\x05\u0210\u0109\x02" +
		"\u1381\u1382\x05\u0540\u02A1\x02\u1382\u1383\x07R\x02\x02\u1383\u1384" +
		"\x05\u0214\u010B\x02\u1384\u1385\x07v\x02\x02\u1385\u1386\x05\u0220\u0111" +
		"\x02\u1386\u13C7\x03\x02\x02\x02\u1387\u1388\x07\xA1\x02\x02\u1388\u1389" +
		"\x07R\x02\x02\u1389\u138A\x07\u012A\x02\x02\u138A\u138B\x05\u0280\u0141" +
		"\x02\u138B\u138C\x07v\x02\x02\u138C\u138D\x05\u0220\u0111\x02\u138D\u13C7" +
		"\x03\x02\x02\x02\u138E\u138F\x07\xA1\x02\x02\u138F\u1390\x07R\x02\x02" +
		"\u1390\u1391\x07\u01BC\x02\x02\u1391\u1392\x05\u0280\u0141\x02\u1392\u1393" +
		"\x07v\x02\x02\u1393\u1394\x05\u0220\u0111\x02\u1394\u13C7\x03\x02\x02" +
		"\x02\u1395\u1396\x07\xA1\x02\x02\u1396\u1397\x07R\x02\x02\u1397\u1398" +
		"\x07\u01BD\x02\x02\u1398\u1399\x07@\x02\x02\u1399\u139A\x05\u0462\u0232" +
		"\x02\u139A\u139B\x07\xF9\x02\x02\u139B\u139C\x05\u0540\u02A1\x02\u139C" +
		"\u139D\x07v\x02\x02\u139D\u139E\x05\u0220\u0111\x02\u139E\u13C7\x03\x02" +
		"\x02\x02\u139F\u13A0\x07\xA1\x02\x02\u13A0\u13A1\x07R\x02\x02\u13A1\u13A2" +
		"\x07\u0118\x02\x02\u13A2\u13A3\x07\x9E\x02\x02\u13A3\u13A4\x05\u0214\u010B" +
		"\x02\u13A4\u13A5\x07f\x02\x02\u13A5\u13A6\x05\u0540\u02A1\x02\u13A6\u13A7" +
		"\x07v\x02\x02\u13A7\u13A8\x05\u0220\u0111\x02\u13A8\u13C7\x03\x02\x02" +
		"\x02\u13A9\u13AA\x07\xA1\x02\x02\u13AA\u13AB\x07R\x02\x02\u13AB\u13AC" +
		"\x07\u0118\x02\x02\u13AC\u13AD\x07\xD0\x02\x02\u13AD\u13AE\x05\u0214\u010B" +
		"\x02\u13AE\u13AF\x07f\x02\x02\u13AF\u13B0\x05\u0540\u02A1\x02\u13B0\u13B1" +
		"\x07v\x02\x02\u13B1\u13B2\x05\u0220\u0111\x02\u13B2\u13C7\x03\x02\x02" +
		"\x02\u13B3\u13B4\x07\xA1\x02\x02\u13B4\u13B5\x07R\x02\x02\u13B5\u13B6" +
		"\x07\xFA\x02\x02\u13B6\u13B7\x07\u0114\x02\x02\u13B7\u13B8\x05\u0128\x95" +
		"\x02\u13B8\u13B9\x07v\x02\x02\u13B9\u13BA\x05\u0220\u0111\x02\u13BA\u13C7" +
		"\x03\x02\x02\x02\u13BB\u13BC\x07\xA1\x02\x02\u13BC\u13BD\x07R\x02\x02" +
		"\u13BD\u13BE\x07+\x02\x02\u13BE\u13BF\x07\x04\x02\x02\u13BF\u13C0\x05" +
		"\u0462\u0232\x02\u13C0\u13C1\x07&\x02\x02\u13C1\u13C2\x05\u0462\u0232" +
		"\x02\u13C2\u13C3\x07\x05\x02\x02\u13C3\u13C4\x07v\x02\x02\u13C4\u13C5" +
		"\x05\u0220\u0111\x02\u13C5\u13C7\x03\x02\x02\x02\u13C6\u1333\x03\x02\x02" +
		"\x02\u13C6\u133A\x03\x02\x02\x02\u13C6\u1341\x03\x02\x02\x02\u13C6\u1348" +
		"\x03\x02\x02\x02\u13C6\u134F\x03\x02\x02\x02\u13C6\u1356\x03\x02\x02\x02" +
		"\u13C6\u135D\x03\x02\x02\x02\u13C6\u1364\x03\x02\x02\x02\u13C6\u136B\x03" +
		"\x02\x02\x02\u13C6\u1374\x03\x02\x02\x02\u13C6\u137E\x03\x02\x02\x02\u13C6" +
		"\u1387\x03\x02\x02\x02\u13C6\u138E\x03\x02\x02\x02\u13C6\u1395\x03\x02" +
		"\x02\x02\u13C6\u139F\x03\x02\x02\x02\u13C6\u13A9\x03\x02\x02\x02\u13C6" +
		"\u13B3\x03\x02\x02\x02\u13C6\u13BB\x03\x02\x02\x02\u13C7\u021F\x03\x02" +
		"\x02\x02\u13C8\u13CB\x05\u0552\u02AA\x02\u13C9\u13CB\x07P\x02\x02\u13CA" +
		"\u13C8\x03\x02\x02\x02\u13CA\u13C9\x03\x02\x02\x02\u13CB\u0221\x03\x02" +
		"\x02\x02\u13CC\u13CD\x07\u0149\x02\x02\u13CD\u13CF\x07\xF8\x02\x02\u13CE" +
		"\u13D0\x05\u0224\u0113\x02\u13CF\u13CE\x03\x02\x02\x02\u13CF\u13D0\x03" +
		"\x02\x02\x02\u13D0\u13D1\x03\x02\x02\x02\u13D1\u13D2\x07R\x02\x02\u13D2" +
		"\u13D3\x05\u020A\u0106\x02\u13D3\u13D4\x05\u0214\u010B\x02\u13D4\u13D5" +
		"\x07v\x02\x02\u13D5\u13D6\x05\u0226\u0114\x02\u13D6\u143C\x03\x02\x02" +
		"\x02\u13D7\u13D8\x07\u0149\x02\x02\u13D8\u13DA\x07\xF8\x02\x02\u13D9\u13DB" +
		"\x05\u0224\u0113\x02\u13DA\u13D9\x03\x02\x02\x02\u13DA\u13DB\x03\x02\x02" +
		"\x02\u13DB\u13DC\x03\x02\x02\x02\u13DC\u13DD\x07R\x02\x02\u13DD\u13DE" +
		"\x07.\x02\x02\u13DE\u13DF\x05\u0214\u010B\x02\u13DF\u13E0\x07v\x02\x02" +
		"\u13E0\u13E1\x05\u0226\u0114\x02\u13E1\u143C\x03\x02\x02\x02\u13E2\u13E3" +
		"\x07\u0149\x02\x02\u13E3\u13E5\x07\xF8\x02\x02\u13E4\u13E6\x05\u0224\u0113" +
		"\x02\u13E5\u13E4\x03\x02\x02\x02\u13E5\u13E6\x03\x02\x02\x02\u13E6\u13E7" +
		"\x03\x02\x02\x02\u13E7\u13E8\x07R\x02\x02\u13E8\u13E9\x05\u020C\u0107" +
		"\x02\u13E9\u13EA\x05\u0540\u02A1\x02\u13EA\u13EB\x07v\x02\x02\u13EB\u13EC" +
		"\x05\u0226\u0114\x02\u13EC\u143C\x03\x02\x02\x02\u13ED\u13EE\x07\u0149" +
		"\x02\x02\u13EE\u13F0\x07\xF8\x02\x02\u13EF\u13F1\x05\u0224\u0113\x02\u13F0" +
		"\u13EF\x03\x02\x02\x02\u13F0\u13F1\x03\x02\x02\x02\u13F1\u13F2\x03\x02" +
		"\x02\x02\u13F2\u13F3\x07R\x02\x02\u13F3\u13F4\x07\u016A\x02\x02\u13F4" +
		"\u13F5\x05\u0462\u0232\x02\u13F5\u13F6\x07v\x02\x02\u13F6\u13F7\x05\u0226" +
		"\u0114\x02\u13F7\u143C\x03\x02\x02\x02\u13F8\u13F9\x07\u0149\x02\x02\u13F9" +
		"\u13FB\x07\xF8\x02\x02\u13FA\u13FC\x05\u0224\u0113\x02\u13FB\u13FA\x03" +
		"\x02\x02\x02\u13FB\u13FC\x03\x02\x02\x02\u13FC\u13FD\x03\x02\x02\x02\u13FD" +
		"\u13FE\x07R\x02\x02\u13FE\u13FF\x07\xBF\x02\x02\u13FF\u1400\x05\u0462" +
		"\u0232\x02\u1400\u1401\x07v\x02\x02\u1401\u1402\x05\u0226\u0114\x02\u1402" +
		"\u143C\x03\x02\x02\x02\u1403\u1404\x07\u0149\x02\x02\u1404\u1406\x07\xF8" +
		"\x02\x02\u1405\u1407\x05\u0224\u0113\x02\u1406\u1405\x03\x02\x02\x02\u1406" +
		"\u1407\x03\x02\x02\x02\u1407\u1408\x03\x02\x02\x02\u1408\u1409\x07R\x02" +
		"\x02\u1409\u140A\x07\x8A\x02\x02\u140A\u140B\x05\u0298\u014D\x02\u140B" +
		"\u140C\x07v\x02\x02\u140C\u140D\x05\u0226\u0114\x02\u140D\u143C\x03\x02" +
		"\x02\x02\u140E\u140F\x07\u0149\x02\x02\u140F\u1411\x07\xF8\x02\x02\u1410" +
		"\u1412\x05\u0224\u0113\x02\u1411\u1410\x03\x02\x02\x02\u1411\u1412\x03" +
		"\x02\x02\x02\u1412\u1413\x03\x02\x02\x02\u1413\u1414\x07R\x02\x02\u1414" +
		"\u1415\x07\xD5\x02\x02\u1415\u1416\x05\u0280\u0141\x02\u1416\u1417\x07" +
		"v\x02\x02\u1417\u1418\x05\u0226\u0114\x02\u1418\u143C\x03\x02\x02\x02" +
		"\u1419\u141A\x07\u0149\x02\x02\u141A\u141C\x07\xF8\x02\x02\u141B\u141D" +
		"\x05\u0224\u0113\x02\u141C\u141B\x03\x02\x02\x02\u141C\u141D\x03\x02\x02" +
		"\x02\u141D\u141E\x03\x02\x02\x02\u141E\u141F\x07R\x02\x02\u141F\u1420" +
		"\x07\xFA\x02\x02\u1420\u1421\x07\u0114\x02\x02\u1421\u1422\x05\u0128\x95" +
		"\x02\u1422\u1423\x07v\x02\x02\u1423\u1424\x05\u0226\u0114\x02\u1424\u143C" +
		"\x03\x02\x02\x02\u1425\u1426\x07\u0149\x02\x02\u1426\u1428\x07\xF8\x02" +
		"\x02\u1427\u1429\x05\u0224\u0113\x02\u1428\u1427\x03\x02\x02\x02\u1428" +
		"\u1429\x03\x02\x02\x02\u1429\u142A\x03\x02\x02\x02\u142A\u142B\x07R\x02" +
		"\x02\u142B\u142C\x07\u012A\x02\x02\u142C\u142D\x05\u0280\u0141\x02\u142D" +
		"\u142E\x07v\x02\x02\u142E\u142F\x05\u0226\u0114\x02\u142F\u143C\x03\x02" +
		"\x02\x02\u1430\u1431\x07\u0149\x02\x02\u1431\u1433\x07\xF8\x02\x02\u1432" +
		"\u1434\x05\u0224\u0113\x02\u1433\u1432\x03\x02\x02\x02\u1433\u1434\x03" +
		"\x02\x02\x02\u1434\u1435\x03\x02\x02\x02\u1435\u1436\x07R\x02\x02\u1436" +
		"\u1437\x07\u01BC\x02\x02\u1437\u1438\x05\u0280\u0141\x02\u1438\u1439\x07" +
		"v\x02\x02\u1439\u143A\x05\u0226\u0114\x02\u143A\u143C\x03\x02\x02\x02" +
		"\u143B\u13CC\x03\x02\x02\x02\u143B\u13D7\x03\x02\x02\x02\u143B\u13E2\x03" +
		"\x02\x02\x02\u143B\u13ED\x03\x02\x02\x02\u143B\u13F8\x03\x02\x02\x02\u143B" +
		"\u1403\x03\x02\x02\x02\u143B\u140E\x03\x02\x02\x02\u143B\u1419\x03\x02" +
		"\x02\x02\u143B\u1425\x03\x02\x02\x02\u143B\u1430\x03\x02\x02\x02\u143C" +
		"\u0223\x03\x02\x02\x02\u143D\u143E\x07@\x02\x02\u143E\u143F\x05H%\x02" +
		"\u143F\u0225\x03\x02\x02\x02\u1440\u1443\x05\u0552\u02AA\x02\u1441\u1443" +
		"\x07P\x02\x02\u1442\u1440\x03\x02\x02\x02\u1442\u1441\x03\x02\x02\x02" +
		"\u1443\u0227\x03\x02\x02\x02\u1444\u1445\x07?\x02\x02\u1445\u1449\x05" +
		"\u022A\u0116\x02\u1446\u1447\x07\u010B\x02\x02\u1447\u1449\x05\u022A\u0116" +
		"\x02\u1448\u1444\x03\x02\x02\x02\u1448\u1446\x03\x02\x02\x02\u1449\u0229" +
		"\x03\x02\x02\x02\u144A\u14A0\x05\u03C0\u01E1\x02\u144B\u144C\x05\u022C" +
		"\u0117\x02\u144C\u144D\x05\u03C0\u01E1\x02\u144D\u14A0\x03\x02\x02\x02" +
		"\u144E\u1450\x07\u010E\x02\x02\u144F\u1451\x05\u022E\u0118\x02\u1450\u144F" +
		"\x03\x02\x02\x02\u1450\u1451\x03\x02\x02\x02\u1451\u1452\x03\x02\x02\x02" +
		"\u1452\u14A0\x05\u03C0\u01E1\x02\u1453\u1455\x07\u0127\x02\x02\u1454\u1456" +
		"\x05\u022E\u0118\x02\u1455\u1454\x03\x02\x02\x02\u1455\u1456\x03\x02\x02" +
		"\x02\u1456\u1457\x03\x02\x02\x02\u1457\u14A0\x05\u03C0\u01E1\x02\u1458" +
		"\u145A\x07\xD1\x02\x02\u1459\u145B\x05\u022E\u0118\x02\u145A\u1459\x03" +
		"\x02\x02\x02\u145A\u145B\x03\x02\x02\x02\u145B\u145C\x03\x02\x02\x02\u145C" +
		"\u14A0\x05\u03C0\u01E1\x02\u145D\u145F\x07\xFB\x02\x02\u145E\u1460\x05" +
		"\u022E\u0118\x02\u145F\u145E\x03\x02\x02\x02\u145F\u1460\x03\x02\x02\x02" +
		"\u1460\u1461\x03\x02\x02\x02\u1461\u14A0\x05\u03C0\u01E1\x02\u1462\u1463" +
		"\x07\x84\x02\x02\u1463\u1465\x05\u0558\u02AD\x02\u1464\u1466\x05\u022E" +
		"\u0118\x02\u1465\u1464\x03\x02\x02\x02\u1465\u1466\x03\x02\x02\x02\u1466" +
		"\u1467\x03\x02\x02\x02\u1467\u1468\x05\u03C0\u01E1\x02\u1468\u14A0\x03" +
		"\x02\x02\x02\u1469\u146A\x07\u0135\x02\x02\u146A\u146C\x05\u0558\u02AD" +
		"\x02\u146B\u146D\x05\u022E\u0118\x02\u146C\u146B\x03\x02\x02\x02\u146C" +
		"\u146D\x03\x02\x02\x02\u146D\u146E\x03\x02\x02\x02\u146E\u146F\x05\u03C0" +
		"\u01E1\x02\u146F\u14A0\x03\x02\x02\x02\u1470\u1472\x05\u0558\u02AD\x02" +
		"\u1471\u1473\x05\u022E\u0118\x02\u1472\u1471\x03\x02\x02\x02\u1472\u1473" +
		"\x03\x02\x02\x02\u1473\u1474\x03\x02\x02\x02\u1474\u1475\x05\u03C0\u01E1" +
		"\x02\u1475\u14A0\x03\x02\x02\x02\u1476\u1478\x07 \x02\x02\u1477\u1479" +
		"\x05\u022E\u0118\x02\u1478\u1477\x03\x02\x02\x02\u1478\u1479\x03\x02\x02" +
		"\x02\u1479\u147A\x03\x02\x02\x02\u147A\u14A0\x05\u03C0\u01E1\x02\u147B" +
		"\u147D\x07\xD4\x02\x02\u147C\u147E\x05\u022E\u0118\x02\u147D\u147C\x03" +
		"\x02\x02\x02\u147D\u147E\x03\x02\x02\x02\u147E\u147F\x03\x02\x02\x02\u147F" +
		"\u14A0\x05\u03C0\u01E1\x02\u1480\u1481\x07\xD4\x02\x02\u1481\u1483\x05" +
		"\u0558\u02AD\x02\u1482\u1484\x05\u022E\u0118\x02\u1483\u1482\x03\x02\x02" +
		"\x02\u1483\u1484\x03\x02\x02\x02\u1484\u1485\x03\x02\x02\x02\u1485\u1486" +
		"\x05\u03C0\u01E1\x02\u1486\u14A0\x03\x02\x02\x02\u1487\u1488\x07\xD4\x02" +
		"\x02\u1488\u148A\x07 \x02\x02\u1489\u148B\x05\u022E\u0118\x02\u148A\u1489" +
		"\x03\x02\x02\x02\u148A\u148B\x03\x02\x02\x02\u148B\u148C\x03\x02\x02\x02" +
		"\u148C\u14A0\x05\u03C0\u01E1\x02\u148D\u148F\x07\x92\x02\x02\u148E\u1490" +
		"\x05\u022E\u0118\x02\u148F\u148E\x03\x02\x02\x02\u148F\u1490\x03\x02\x02" +
		"\x02\u1490\u1491\x03\x02\x02\x02\u1491\u14A0\x05\u03C0\u01E1\x02\u1492" +
		"\u1493\x07\x92\x02\x02\u1493\u1495\x05\u0558\u02AD\x02\u1494\u1496\x05" +
		"\u022E\u0118\x02\u1495\u1494\x03\x02\x02\x02\u1495\u1496\x03\x02\x02\x02" +
		"\u1496\u1497\x03\x02\x02\x02\u1497\u1498\x05\u03C0\u01E1\x02\u1498\u14A0" +
		"\x03\x02\x02\x02\u1499\u149A\x07\x92\x02\x02\u149A\u149C\x07 \x02\x02" +
		"\u149B\u149D\x05\u022E\u0118\x02\u149C\u149B\x03\x02\x02\x02\u149C\u149D" +
		"\x03\x02\x02\x02\u149D\u149E\x03\x02\x02\x02\u149E\u14A0\x05\u03C0\u01E1" +
		"\x02\u149F\u144A\x03\x02\x02\x02\u149F\u144B\x03\x02\x02\x02\u149F\u144E" +
		"\x03\x02\x02\x02\u149F\u1453\x03\x02\x02\x02\u149F\u1458\x03\x02\x02\x02" +
		"\u149F\u145D\x03\x02\x02\x02\u149F\u1462\x03\x02\x02\x02\u149F\u1469\x03" +
		"\x02\x02\x02\u149F\u1470\x03\x02\x02\x02\u149F\u1476\x03\x02\x02\x02\u149F" +
		"\u147B\x03\x02\x02\x02\u149F\u1480\x03\x02\x02\x02\u149F\u1487\x03\x02" +
		"\x02\x02\u149F\u148D\x03\x02\x02\x02\u149F\u1492\x03\x02\x02\x02\u149F" +
		"\u1499\x03\x02\x02\x02\u14A0\u022B\x03\x02\x02\x02\u14A1\u14A2\t \x02" +
		"\x02\u14A2\u022D\x03\x02\x02\x02\u14A3\u14A4\x05\u022C\u0117\x02\u14A4" +
		"\u022F\x03\x02\x02\x02\u14A5\u14A6\x07C\x02\x02\u14A6\u14A7\x05\u0234" +
		"\u011B\x02\u14A7\u14A8\x07R\x02\x02\u14A8\u14A9\x05\u023E\u0120\x02\u14A9" +
		"\u14AA\x07`\x02\x02\u14AA\u14AC\x05\u0240\u0121\x02\u14AB\u14AD\x05\u0244" +
		"\u0123\x02\u14AC\u14AB\x03\x02\x02\x02\u14AC\u14AD\x03\x02\x02\x02\u14AD" +
		"\u0231\x03\x02\x02\x02\u14AE\u14AF\x07\u013F\x02\x02\u14AF\u14B0\x05\u0234" +
		"\u011B\x02\u14B0\u14B1\x07R\x02\x02\u14B1\u14B2\x05\u023E\u0120\x02\u14B2" +
		"\u14B3\x07B\x02\x02\u14B3\u14B5\x05\u0240\u0121\x02\u14B4\u14B6\x05l7" +
		"\x02\u14B5\u14B4\x03\x02\x02\x02\u14B5\u14B6\x03\x02\x02\x02\u14B6\u14C4" +
		"\x03\x02\x02\x02\u14B7\u14B8\x07\u013F\x02\x02\u14B8\u14B9\x07C\x02\x02" +
		"\u14B9\u14BA\x07\u0119\x02\x02\u14BA\u14BB\x07@\x02\x02\u14BB\u14BC\x05" +
		"\u0234\u011B\x02\u14BC\u14BD\x07R\x02\x02\u14BD\u14BE\x05\u023E\u0120" +
		"\x02\u14BE\u14BF\x07B\x02\x02\u14BF\u14C1\x05\u0240\u0121\x02\u14C0\u14C2" +
		"\x05l7\x02\u14C1\u14C0\x03\x02\x02\x02\u14C1\u14C2\x03\x02\x02\x02\u14C2" +
		"\u14C4\x03\x02\x02\x02\u14C3\u14AE\x03\x02\x02\x02\u14C3\u14B7\x03\x02" +
		"\x02\x02\u14C4\u0233\x03\x02\x02\x02\u14C5\u14D6\x05\u023A\u011E\x02\u14C6" +
		"\u14D6\x07 \x02\x02\u14C7\u14C8\x07 \x02\x02\u14C8\u14D6\x07\u0128\x02" +
		"\x02\u14C9\u14CA\x07 \x02\x02\u14CA\u14CB\x07\x04\x02\x02\u14CB\u14CC" +
		"\x05\xDCo\x02\u14CC\u14CD\x07\x05\x02\x02\u14CD\u14D6\x03\x02\x02\x02" +
		"\u14CE\u14CF\x07 \x02\x02\u14CF\u14D0\x07\u0128\x02\x02\u14D0\u14D1\x07" +
		"\x04\x02\x02\u14D1\u14D2\x05\xDCo\x02\u14D2\u14D3\x07\x05\x02\x02\u14D3" +
		"\u14D6\x03\x02\x02\x02\u14D4\u14D6\x05\u0236\u011C\x02\u14D5\u14C5\x03" +
		"\x02\x02\x02\u14D5\u14C6\x03\x02\x02\x02\u14D5\u14C7\x03\x02\x02\x02\u14D5" +
		"\u14C9\x03\x02\x02\x02\u14D5\u14CE\x03\x02\x02\x02\u14D5\u14D4\x03\x02" +
		"\x02\x02\u14D6\u0235\x03\x02\x02\x02\u14D7\u14DC\x05\u0238\u011D\x02\u14D8" +
		"\u14D9\x07\b\x02\x02\u14D9\u14DB\x05\u0238\u011D\x02\u14DA\u14D8\x03\x02" +
		"\x02\x02\u14DB\u14DE\x03\x02\x02\x02\u14DC\u14DA\x03\x02\x02\x02\u14DC" +
		"\u14DD\x03\x02\x02\x02\u14DD\u0237\x03\x02\x02\x02\u14DE\u14DC\x03\x02" +
		"\x02\x02\u14DF\u14E0\t!\x02\x02\u14E0\u0239\x03\x02\x02\x02\u14E1\u14E6" +
		"\x05\u023C\u011F\x02\u14E2\u14E3\x07\b\x02\x02\u14E3\u14E5\x05\u023C\u011F" +
		"\x02\u14E4\u14E2\x03\x02\x02\x02\u14E5\u14E8\x03\x02\x02\x02\u14E6\u14E4" +
		"\x03\x02\x02\x02\u14E6\u14E7\x03\x02\x02\x02\u14E7\u023B\x03\x02\x02\x02" +
		"\u14E8\u14E6\x03\x02\x02\x02\u14E9\u14EB\x07Z\x02\x02\u14EA\u14EC\x05" +
		"\xDAn\x02\u14EB\u14EA\x03\x02\x02\x02\u14EB\u14EC\x03\x02\x02\x02\u14EC" +
		"\u14FA\x03\x02\x02\x02\u14ED\u14EF\x07X\x02\x02\u14EE\u14F0\x05\xDAn\x02" +
		"\u14EF\u14EE\x03\x02\x02\x02\u14EF\u14F0\x03\x02\x02\x02\u14F0\u14FA\x03" +
		"\x02\x02\x02\u14F1\u14F3\x070\x02\x02\u14F2\u14F4\x05\xDAn\x02\u14F3\u14F2" +
		"\x03\x02\x02\x02\u14F3\u14F4\x03\x02\x02\x02\u14F4\u14FA\x03\x02\x02\x02" +
		"\u14F5\u14F7\x05\u0562\u02B2\x02\u14F6\u14F8\x05\xDAn\x02\u14F7\u14F6" +
		"\x03\x02\x02\x02\u14F7\u14F8\x03\x02\x02\x02\u14F8\u14FA\x03\x02\x02\x02" +
		"\u14F9\u14E9\x03\x02\x02\x02\u14F9\u14ED\x03\x02\x02\x02\u14F9\u14F1\x03" +
		"\x02\x02\x02\u14F9\u14F5\x03\x02\x02\x02\u14FA\u023D\x03\x02\x02\x02\u14FB" +
		"\u1536\x05\u0538\u029D\x02\u14FC\u14FD\x07^\x02\x02\u14FD\u1536\x05\u0538" +
		"\u029D\x02\u14FE\u14FF\x07\u014A\x02\x02\u14FF\u1536\x05\u0538\u029D\x02" +
		"\u1500\u1501\x07A\x02\x02\u1501\u1502\x07\xB0\x02\x02\u1502\u1503\x07" +
		"\u017F\x02\x02\u1503\u1536\x05\u053E\u02A0\x02\u1504\u1505\x07A\x02\x02" +
		"\u1505\u1506\x07\u014D\x02\x02\u1506\u1536\x05\u053E\u02A0\x02\u1507\u1508" +
		"\x07\xD5\x02\x02\u1508\u1536\x05\u027E\u0140\x02\u1509\u150A\x07\u012A" +
		"\x02\x02\u150A\u1536\x05\u027E\u0140\x02\u150B\u150C\x07\u01BC\x02\x02" +
		"\u150C\u1536\x05\u027E\u0140\x02\u150D\u150E\x07\xB1\x02\x02\u150E\u1536" +
		"\x05\u053E\u02A0\x02\u150F\u1510\x07\xBF\x02\x02\u1510\u1536\x05\u0212" +
		"\u010A\x02\u1511\u1512\x07\xF9\x02\x02\u1512\u1536\x05\u053E\u02A0\x02" +
		"\u1513\u1514\x07\xFA\x02\x02\u1514\u1515\x07\u0114\x02\x02\u1515\u1536" +
		"\x05\u012A\x96\x02\u1516\u1517\x07\u0145\x02\x02\u1517\u1536\x05\u053E" +
		"\u02A0\x02\u1518\u1519\x07\u0161\x02\x02\u1519\u1536\x05\u053E\u02A0\x02" +
		"\u151A\u151B\x07\u016A\x02\x02\u151B\u1536\x05\u0212\u010A\x02\u151C\u151D" +
		"\x07 \x02\x02\u151D\u151E\x07\u0160\x02\x02\u151E\u151F\x07F\x02\x02\u151F" +
		"\u1520\x07\u0145\x02\x02\u1520\u1536\x05\u053E\u02A0\x02\u1521\u1522\x07" +
		" \x02\x02\u1522\u1523\x07\u014B\x02\x02\u1523\u1524\x07F\x02\x02\u1524" +
		"\u1525\x07\u0145\x02\x02\u1525\u1536\x05\u053E\u02A0\x02\u1526\u1527\x07" +
		" \x02\x02\u1527\u1528\x07\xD6\x02\x02\u1528\u1529\x07F\x02\x02\u1529\u152A" +
		"\x07\u0145\x02\x02\u152A\u1536\x05\u053E\u02A0\x02\u152B\u152C\x07 \x02" +
		"\x02\u152C\u152D\x07\u01CB\x02\x02\u152D\u152E\x07F\x02\x02\u152E\u152F" +
		"\x07\u0145\x02\x02\u152F\u1536\x05\u053E\u02A0\x02\u1530\u1531\x07 \x02" +
		"\x02\u1531\u1532\x07\u01C9\x02\x02\u1532\u1533\x07F\x02\x02\u1533\u1534" +
		"\x07\u0145\x02\x02\u1534\u1536\x05\u053E\u02A0\x02\u1535\u14FB\x03\x02" +
		"\x02\x02\u1535\u14FC\x03\x02\x02\x02\u1535\u14FE\x03\x02\x02\x02\u1535" +
		"\u1500\x03\x02\x02\x02\u1535\u1504\x03\x02\x02\x02\u1535\u1507\x03\x02" +
		"\x02\x02\u1535\u1509\x03\x02\x02\x02\u1535\u150B\x03\x02\x02\x02\u1535" +
		"\u150D\x03\x02\x02\x02\u1535\u150F\x03\x02\x02\x02\u1535\u1511\x03\x02" +
		"\x02\x02\u1535\u1513\x03\x02\x02\x02\u1535\u1516\x03\x02\x02\x02\u1535" +
		"\u1518\x03\x02\x02\x02\u1535\u151A\x03\x02\x02\x02\u1535\u151C\x03\x02" +
		"\x02\x02\u1535\u1521\x03\x02\x02\x02\u1535\u1526\x03\x02\x02\x02\u1535" +
		"\u152B\x03\x02\x02\x02\u1535\u1530\x03\x02\x02\x02\u1536\u023F\x03\x02" +
		"\x02\x02\u1537\u153C\x05\u0242\u0122\x02\u1538\u1539\x07\b\x02\x02\u1539" +
		"\u153B\x05\u0242\u0122\x02\u153A\u1538\x03\x02\x02\x02\u153B\u153E\x03" +
		"\x02\x02\x02\u153C\u153A\x03\x02\x02\x02\u153C\u153D\x03\x02\x02\x02\u153D" +
		"\u0241\x03\x02\x02\x02\u153E\u153C\x03\x02\x02\x02\u153F\u1543\x05\u055E" +
		"\u02B0\x02\u1540\u1541\x07D\x02\x02\u1541\u1543\x05\u055E\u02B0\x02\u1542" +
		"\u153F\x03\x02\x02\x02\u1542\u1540\x03\x02\x02\x02\u1543\u0243\x03\x02" +
		"\x02\x02\u1544\u1545\x07k\x02\x02\u1545\u1546\x07C\x02\x02\u1546\u1547" +
		"\x07\u0119\x02\x02\u1547\u0245\x03\x02\x02\x02\u1548\u1549\x07C\x02\x02" +
		"\u1549\u154A\x05\u023A\u011E\x02\u154A\u154B\x07`\x02\x02\u154B\u154D" +
		"\x05\u0560\u02B1\x02\u154C\u154E\x05\u024A\u0126\x02\u154D\u154C\x03\x02" +
		"\x02\x02\u154D\u154E\x03\x02\x02\x02\u154E\u1550\x03\x02\x02\x02\u154F" +
		"\u1551\x05\u024C\u0127\x02\u1550\u154F\x03\x02\x02\x02\u1550\u1551\x03" +
		"\x02\x02\x02\u1551\u0247\x03\x02\x02\x02\u1552\u1553\x07\u013F\x02\x02" +
		"\u1553\u1554\x05\u023A\u011E\x02\u1554\u1555\x07B\x02\x02\u1555\u1557" +
		"\x05\u0560\u02B1\x02\u1556\u1558\x05\u024C\u0127\x02\u1557\u1556\x03\x02" +
		"\x02\x02\u1557\u1558\x03\x02\x02\x02\u1558\u155A\x03\x02\x02\x02\u1559" +
		"\u155B\x05l7\x02\u155A\u1559\x03\x02\x02\x02\u155A\u155B\x03\x02\x02\x02" +
		"\u155B\u156A\x03\x02\x02\x02\u155C\u155D\x07\u013F\x02\x02\u155D\u155E" +
		"\x07\x88\x02\x02\u155E\u155F\x07\u0119\x02\x02\u155F\u1560\x07@\x02\x02" +
		"\u1560\u1561\x05\u023A\u011E\x02\u1561\u1562\x07B\x02\x02\u1562\u1564" +
		"\x05\u0560\u02B1\x02\u1563\u1565\x05\u024C\u0127\x02\u1564\u1563\x03\x02" +
		"\x02\x02\u1564\u1565\x03\x02\x02\x02\u1565\u1567\x03\x02\x02\x02\u1566" +
		"\u1568\x05l7\x02\u1567\u1566\x03\x02\x02\x02\u1567\u1568\x03\x02\x02\x02" +
		"\u1568\u156A\x03\x02\x02\x02\u1569\u1552\x03\x02\x02\x02\u1569\u155C\x03" +
		"\x02\x02\x02\u156A\u0249\x03\x02\x02\x02\u156B\u156C\x07k\x02\x02\u156C" +
		"\u156D\x07\x88\x02\x02\u156D\u156E\x07\u0119\x02\x02\u156E\u024B\x03\x02" +
		"\x02\x02\u156F\u1570\x07\xD8\x02\x02\u1570\u1571\x07\x95\x02\x02\u1571" +
		"\u1572\x05\u055E\u02B0\x02\u1572\u024D\x03\x02\x02\x02\u1573\u1574\x07" +
		"\x8C\x02\x02\u1574\u1575\x077\x02\x02\u1575\u1576\x07\u0128\x02\x02\u1576" +
		"\u1577\x05\u0250\u0129\x02\u1577\u1578\x05\u0254\u012B\x02\u1578\u024F" +
		"\x03\x02\x02\x02\u1579\u157B\x05\u0252\u012A\x02\u157A\u1579\x03\x02\x02" +
		"\x02\u157B\u157E\x03\x02\x02\x02\u157C\u157A\x03\x02\x02\x02\u157C\u157D" +
		"\x03\x02\x02\x02\u157D\u0251\x03\x02\x02\x02\u157E\u157C\x03\x02\x02\x02" +
		"\u157F\u1580\x07F\x02\x02\u1580\u1581\x07\u0145\x02\x02\u1581\u1589\x05" +
		"\u053E\u02A0\x02\u1582\u1583\x07@\x02\x02\u1583\u1584\x07\u0140\x02\x02" +
		"\u1584\u1589\x05\u0560\u02B1\x02\u1585\u1586\x07@\x02\x02\u1586\u1587" +
		"\x07e\x02\x02\u1587\u1589\x05\u0560\u02B1\x02\u1588\u157F\x03\x02\x02" +
		"\x02\u1588\u1582\x03\x02\x02\x02\u1588\u1585\x03\x02\x02\x02\u1589\u0253" +
		"\x03\x02\x02\x02\u158A\u158B\x07C\x02\x02\u158B\u158C\x05\u0234\u011B" +
		"\x02\u158C\u158D\x07R\x02\x02\u158D\u158E\x05\u0256\u012C\x02\u158E\u158F" +
		"\x07`\x02\x02\u158F\u1591\x05\u0240\u0121\x02\u1590\u1592\x05\u0244\u0123" +
		"\x02\u1591\u1590\x03\x02\x02\x02\u1591\u1592\x03\x02\x02\x02\u1592\u15A9" +
		"\x03\x02\x02\x02\u1593\u1594\x07\u013F\x02\x02\u1594\u1595\x05\u0234\u011B" +
		"\x02\u1595\u1596\x07R\x02\x02\u1596\u1597\x05\u0256\u012C\x02\u1597\u1598" +
		"\x07B\x02\x02\u1598\u159A\x05\u0240\u0121\x02\u1599\u159B\x05l7\x02\u159A" +
		"\u1599\x03\x02\x02\x02\u159A\u159B\x03\x02\x02\x02\u159B\u15A9\x03\x02" +
		"\x02\x02\u159C\u159D\x07\u013F\x02\x02\u159D\u159E\x07C\x02\x02\u159E" +
		"\u159F\x07\u0119\x02\x02\u159F\u15A0\x07@\x02\x02\u15A0\u15A1\x05\u0234" +
		"\u011B\x02\u15A1\u15A2\x07R\x02\x02\u15A2\u15A3\x05\u0256\u012C\x02\u15A3" +
		"\u15A4\x07B\x02\x02\u15A4\u15A6\x05\u0240\u0121\x02\u15A5\u15A7\x05l7" +
		"\x02\u15A6\u15A5\x03\x02\x02\x02\u15A6\u15A7\x03\x02\x02\x02\u15A7\u15A9" +
		"\x03\x02\x02\x02\u15A8\u158A\x03\x02\x02\x02\u15A8\u1593\x03\x02\x02\x02" +
		"\u15A8\u159C\x03\x02\x02\x02\u15A9\u0255\x03\x02\x02\x02\u15AA\u15AB\t" +
		"\"\x02\x02\u15AB\u0257\x03\x02\x02\x02\u15AC\u15AE\x070\x02\x02\u15AD" +
		"\u15AF\x05\u025A\u012E\x02\u15AE\u15AD\x03\x02\x02\x02\u15AE\u15AF\x03" +
		"\x02\x02\x02\u15AF\u15B0\x03\x02\x02\x02\u15B0\u15B2\x07\xE4\x02\x02\u15B1" +
		"\u15B3\x05\u025C\u012F\x02\u15B2\u15B1\x03\x02\x02\x02\u15B2\u15B3\x03" +
		"\x02\x02\x02\u15B3\u15B5\x03\x02\x02\x02\u15B4\u15B6\x05\u025E\u0130\x02" +
		"\u15B5\u15B4\x03\x02\x02\x02\u15B5\u15B6\x03\x02\x02\x02\u15B6\u15B7\x03" +
		"\x02\x02\x02\u15B7\u15B8\x07R\x02\x02\u15B8\u15BA\x05\u0436\u021C\x02" +
		"\u15B9\u15BB\x05\u0260\u0131\x02\u15BA\u15B9\x03\x02\x02\x02\u15BA\u15BB" +
		"\x03\x02\x02\x02\u15BB\u15BC\x03\x02\x02\x02\u15BC\u15BD\x07\x04\x02\x02" +
		"\u15BD\u15BE\x05\u0262\u0132\x02\u15BE\u15C0\x07\x05\x02\x02\u15BF\u15C1" +
		"\x05\u0268\u0135\x02\u15C0\u15BF\x03\x02\x02\x02\u15C0\u15C1\x03\x02\x02" +
		"\x02\u15C1\u15C3\x03\x02\x02\x02\u15C2\u15C4\x05v<\x02\u15C3\u15C2\x03" +
		"\x02\x02\x02\u15C3\u15C4\x03\x02\x02\x02\u15C4\u15C6\x03\x02\x02\x02\u15C5" +
		"\u15C7\x05\u0102\x82\x02\u15C6\u15C5\x03\x02\x02\x02\u15C6\u15C7\x03\x02" +
		"\x02\x02\u15C7\u15C9\x03\x02\x02\x02\u15C8\u15CA\x05\u044A\u0226\x02\u15C9" +
		"\u15C8\x03\x02\x02\x02\u15C9\u15CA\x03\x02\x02\x02\u15CA\u15EC\x03\x02" +
		"\x02\x02\u15CB\u15CD\x070\x02\x02\u15CC\u15CE\x05\u025A\u012E\x02\u15CD" +
		"\u15CC\x03\x02\x02\x02\u15CD\u15CE\x03\x02\x02\x02\u15CE\u15CF\x03\x02" +
		"\x02\x02\u15CF\u15D1\x07\xE4\x02\x02\u15D0\u15D2\x05\u025C\u012F\x02\u15D1" +
		"\u15D0\x03\x02\x02\x02\u15D1\u15D2\x03\x02\x02\x02\u15D2\u15D3\x03\x02" +
		"\x02\x02\u15D3\u15D4\x07\xDE\x02\x02\u15D4\u15D5\x07O\x02\x02\u15D5\u15D6" +
		"\x07\u018E\x02\x02\u15D6\u15D7\x05\u0540\u02A1\x02\u15D7\u15D8\x07R\x02" +
		"\x02\u15D8\u15DA\x05\u0436\u021C\x02\u15D9\u15DB\x05\u0260\u0131\x02\u15DA" +
		"\u15D9\x03\x02\x02\x02\u15DA\u15DB\x03\x02\x02\x02\u15DB\u15DC\x03\x02" +
		"\x02\x02\u15DC\u15DD\x07\x04\x02\x02\u15DD\u15DE\x05\u0262\u0132\x02\u15DE" +
		"\u15E0\x07\x05\x02\x02\u15DF\u15E1\x05\u0268\u0135\x02\u15E0\u15DF\x03" +
		"\x02\x02\x02\u15E0\u15E1\x03\x02\x02\x02\u15E1\u15E3\x03\x02\x02\x02\u15E2" +
		"\u15E4\x05v<\x02\u15E3\u15E2\x03\x02\x02\x02\u15E3\u15E4\x03\x02\x02\x02" +
		"\u15E4\u15E6\x03\x02\x02\x02\u15E5\u15E7\x05\u0102\x82\x02\u15E6\u15E5" +
		"\x03\x02\x02\x02\u15E6\u15E7\x03\x02\x02\x02\u15E7\u15E9\x03\x02\x02\x02" +
		"\u15E8\u15EA\x05\u044A\u0226\x02\u15E9\u15E8\x03\x02\x02\x02\u15E9\u15EA" +
		"\x03\x02\x02\x02\u15EA\u15EC\x03\x02\x02\x02\u15EB\u15AC\x03\x02\x02\x02" +
		"\u15EB\u15CB\x03\x02\x02\x02\u15EC\u0259\x03\x02\x02\x02\u15ED\u15EE\x07" +
		"d\x02\x02\u15EE\u025B\x03\x02\x02\x02\u15EF\u15F0\x07o\x02\x02\u15F0\u025D" +
		"\x03\x02\x02\x02\u15F1\u15F2\x05\u0540\u02A1\x02\u15F2\u025F\x03\x02\x02" +
		"\x02\u15F3\u15F4\x07f\x02\x02\u15F4\u15F5\x05\u0540\u02A1\x02\u15F5\u0261" +
		"\x03\x02\x02\x02\u15F6\u15FB\x05\u0266\u0134\x02\u15F7\u15F8\x07\b\x02" +
		"\x02\u15F8\u15FA\x05\u0266\u0134\x02\u15F9\u15F7\x03\x02\x02\x02\u15FA" +
		"\u15FD\x03\x02\x02\x02\u15FB\u15F9\x03\x02\x02\x02\u15FB\u15FC\x03\x02" +
		"\x02\x02\u15FC\u0263\x03\x02\x02\x02\u15FD\u15FB\x03\x02\x02\x02\u15FE" +
		"\u1600\x05\u026C\u0137\x02\u15FF\u15FE\x03\x02\x02\x02\u15FF\u1600\x03" +
		"\x02\x02\x02\u1600\u1602\x03\x02\x02\x02\u1601\u1603\x05\u026E\u0138\x02" +
		"\u1602\u1601\x03\x02\x02\x02\u1602\u1603\x03\x02\x02\x02\u1603\u1605\x03" +
		"\x02\x02\x02\u1604\u1606\x05\u0270\u0139\x02\u1605\u1604\x03\x02\x02\x02" +
		"\u1605\u1606\x03\x02\x02\x02\u1606\u1608\x03\x02\x02\x02\u1607\u1609\x05" +
		"\u0272\u013A\x02\u1608\u1607\x03\x02\x02\x02\u1608\u1609\x03\x02\x02\x02" +
		"\u1609\u1616\x03\x02\x02\x02\u160A\u160C\x05\u026C\u0137\x02\u160B\u160A" +
		"\x03\x02\x02\x02\u160B\u160C\x03\x02\x02\x02\u160C\u160D\x03\x02\x02\x02" +
		"\u160D\u160E\x05\u0214\u010B\x02\u160E\u1610\x05t;\x02\u160F";
	private static readonly _serializedATNSegment12: string =
		"\u1611\x05\u0270\u0139\x02\u1610\u160F\x03\x02\x02\x02\u1610\u1611\x03" +
		"\x02\x02\x02\u1611\u1613\x03\x02\x02\x02\u1612\u1614\x05\u0272\u013A\x02" +
		"\u1613\u1612\x03\x02\x02\x02\u1613\u1614\x03\x02\x02\x02\u1614\u1616\x03" +
		"\x02\x02\x02\u1615\u15FF\x03\x02\x02\x02\u1615\u160B\x03\x02\x02\x02\u1616" +
		"\u0265\x03\x02\x02\x02\u1617\u1618\x05\u0562\u02B2\x02\u1618\u1619\x05" +
		"\u0264\u0133\x02\u1619\u1623\x03\x02\x02\x02\u161A\u161B\x05\u04C0\u0261" +
		"\x02\u161B\u161C\x05\u0264\u0133\x02\u161C\u1623\x03\x02\x02\x02\u161D" +
		"\u161E\x07\x04\x02\x02\u161E\u161F\x05\u048E\u0248\x02\u161F\u1620\x07" +
		"\x05\x02\x02\u1620\u1621\x05\u0264\u0133\x02\u1621\u1623\x03\x02\x02\x02" +
		"\u1622\u1617\x03\x02\x02\x02\u1622\u161A\x03\x02\x02\x02\u1622\u161D\x03" +
		"\x02\x02\x02\u1623\u0267\x03\x02\x02\x02\u1624\u1625\x07\u01BB\x02\x02" +
		"\u1625\u1626\x07\x04\x02\x02\u1626\u1627\x05\u026A\u0136\x02\u1627\u1628" +
		"\x07\x05\x02\x02\u1628\u0269\x03\x02\x02\x02\u1629\u162E\x05\u0266\u0134" +
		"\x02\u162A\u162B\x07\b\x02\x02\u162B\u162D\x05\u0266\u0134\x02\u162C\u162A" +
		"\x03\x02\x02\x02\u162D\u1630\x03\x02\x02\x02\u162E\u162C\x03\x02\x02\x02" +
		"\u162E\u162F\x03\x02\x02\x02\u162F\u026B\x03\x02\x02\x02\u1630\u162E\x03" +
		"\x02\x02\x02\u1631\u1632\x07-\x02\x02\u1632\u1633\x05\u0214\u010B\x02" +
		"\u1633\u026D\x03\x02\x02\x02\u1634\u1635\x05\u0214\u010B\x02\u1635\u026F" +
		"\x03\x02\x02\x02\u1636\u1637\t#\x02\x02\u1637\u0271\x03\x02\x02\x02\u1638" +
		"\u1639\x07\u0113\x02\x02\u1639\u163D\x07\xD1\x02\x02\u163A\u163B\x07\u0113" +
		"\x02\x02\u163B\u163D\x07\xFB\x02\x02\u163C\u1638\x03\x02\x02\x02\u163C" +
		"\u163A\x03\x02\x02\x02\u163D\u0273\x03\x02\x02\x02\u163E\u1640\x070\x02" +
		"\x02\u163F\u1641\x05\u0278\u013D\x02\u1640\u163F\x03\x02\x02\x02\u1640" +
		"\u1641\x03\x02\x02\x02\u1641\u1642\x03\x02\x02\x02\u1642\u1643\t\x1E\x02" +
		"\x02\u1643\u1644\x05\u0546\u02A4\x02\u1644\u164E\x05\u0282\u0142\x02\u1645" +
		"\u164C\x07\u013E\x02\x02\u1646\u164D\x05\u028C\u0147\x02\u1647\u1648\x07" +
		"^\x02\x02\u1648\u1649\x07\x04\x02\x02\u1649\u164A\x05\u02AA\u0156\x02" +
		"\u164A\u164B\x07\x05\x02\x02\u164B\u164D\x03\x02\x02\x02\u164C\u1646\x03" +
		"\x02\x02\x02\u164C\u1647\x03\x02\x02\x02\u164D\u164F\x03\x02\x02\x02\u164E" +
		"\u1645\x03\x02\x02\x02\u164E\u164F\x03\x02\x02\x02\u164F\u1650\x03\x02" +
		"\x02\x02\u1650\u1653\x05\u029C\u014F\x02\u1651\u1652\x07k\x02\x02\u1652" +
		"\u1654\x05\u0276\u013C\x02\u1653\u1651\x03\x02\x02\x02\u1653\u1654\x03" +
		"\x02\x02\x02\u1654\u0275\x03\x02\x02\x02\u1655\u1656\x07\x04\x02\x02\u1656" +
		"\u165B\x05\u0562\u02B2\x02\u1657\u1658\x07\b\x02\x02\u1658\u165A\x05\u0562" +
		"\u02B2\x02\u1659\u1657\x03\x02\x02\x02\u165A\u165D\x03\x02\x02\x02\u165B" +
		"\u1659\x03\x02\x02\x02\u165B\u165C\x03\x02\x02\x02\u165C\u165E\x03\x02" +
		"\x02\x02\u165D\u165B\x03\x02\x02\x02\u165E\u165F\x07\x05\x02\x02\u165F" +
		"\u0277\x03\x02\x02\x02\u1660\u1661\x07T\x02\x02\u1661\u1662\x07\u0139" +
		"\x02\x02\u1662\u0279\x03\x02\x02\x02\u1663\u1665\x07\x04\x02\x02\u1664" +
		"\u1666\x05\u027C\u013F\x02\u1665\u1664\x03\x02\x02\x02\u1665\u1666\x03" +
		"\x02\x02\x02\u1666\u1667\x03\x02\x02\x02\u1667\u1668\x07\x05\x02\x02\u1668" +
		"\u027B\x03\x02\x02\x02\u1669\u166E\x05\u0286\u0144\x02\u166A\u166B\x07" +
		"\b\x02\x02\u166B\u166D\x05\u0286\u0144\x02\u166C\u166A\x03\x02\x02\x02" +
		"\u166D\u1670\x03\x02\x02\x02\u166E\u166C\x03\x02\x02\x02\u166E\u166F\x03" +
		"\x02\x02\x02\u166F\u027D\x03\x02\x02\x02\u1670\u166E\x03\x02\x02\x02\u1671" +
		"\u1676\x05\u0280\u0141\x02\u1672\u1673\x07\b\x02\x02\u1673\u1675\x05\u0280" +
		"\u0141\x02\u1674\u1672\x03\x02\x02\x02\u1675\u1678\x03\x02\x02\x02\u1676" +
		"\u1674\x03\x02\x02\x02\u1676\u1677\x03\x02\x02\x02\u1677\u027F\x03\x02" +
		"\x02\x02\u1678\u1676\x03\x02\x02\x02\u1679\u167A\x05\u0546\u02A4\x02\u167A" +
		"\u167B\x05\u027A\u013E\x02\u167B\u1682\x03\x02\x02\x02\u167C\u1682\x05" +
		"\u057A\u02BE\x02\u167D\u167F\x05\u0562\u02B2\x02\u167E\u1680\x05\u052E" +
		"\u0298\x02\u167F\u167E\x03\x02\x02\x02\u167F\u1680\x03\x02\x02\x02\u1680" +
		"\u1682\x03\x02\x02\x02\u1681\u1679\x03\x02\x02\x02\u1681\u167C\x03\x02" +
		"\x02\x02\u1681\u167D\x03\x02\x02\x02\u1682\u0281\x03\x02\x02\x02\u1683" +
		"\u1685\x07\x04\x02\x02\u1684\u1686\x05\u0284\u0143\x02\u1685\u1684\x03" +
		"\x02\x02\x02\u1685\u1686\x03\x02\x02\x02\u1686\u1687\x03\x02\x02\x02\u1687" +
		"\u1688\x07\x05\x02\x02\u1688\u0283\x03\x02\x02\x02\u1689\u168E\x05\u0290" +
		"\u0149\x02\u168A\u168B\x07\b\x02\x02\u168B\u168D\x05\u0290\u0149\x02\u168C" +
		"\u168A\x03\x02\x02\x02\u168D\u1690\x03\x02\x02\x02\u168E\u168C\x03\x02" +
		"\x02\x02\u168E\u168F\x03\x02\x02\x02\u168F\u0285\x03\x02\x02\x02\u1690" +
		"\u168E\x03\x02\x02\x02\u1691\u1693\x05\u0288\u0145\x02\u1692\u1694\x05" +
		"\u028A\u0146\x02\u1693\u1692\x03\x02\x02\x02\u1693\u1694\x03\x02\x02\x02" +
		"\u1694\u1695\x03\x02\x02\x02\u1695\u1696\x05\u028E\u0148\x02\u1696\u169F" +
		"\x03\x02\x02\x02\u1697\u1699\x05\u028A\u0146\x02\u1698\u169A\x05\u0288" +
		"\u0145\x02\u1699\u1698\x03\x02\x02\x02\u1699\u169A\x03\x02\x02\x02\u169A" +
		"\u169B\x03\x02\x02\x02\u169B\u169C\x05\u028E\u0148\x02\u169C\u169F\x03" +
		"\x02\x02\x02\u169D\u169F\x05\u028E\u0148\x02\u169E\u1691\x03\x02\x02\x02" +
		"\u169E\u1697\x03\x02\x02\x02\u169E\u169D\x03\x02\x02\x02\u169F\u0287\x03" +
		"\x02\x02\x02\u16A0\u16A2\x07F\x02\x02\u16A1\u16A3\x07\u01C7\x02\x02\u16A2" +
		"\u16A1\x03\x02\x02\x02\u16A2\u16A3\x03\x02\x02\x02\u16A3\u16A8\x03\x02" +
		"\x02\x02\u16A4\u16A8\x07\u01C7\x02\x02\u16A5\u16A8\x07\u0192\x02\x02\u16A6" +
		"\u16A8\x07g\x02\x02\u16A7\u16A0\x03\x02\x02\x02\u16A7\u16A4\x03\x02\x02" +
		"\x02\u16A7\u16A5\x03\x02\x02\x02\u16A7\u16A6\x03\x02\x02\x02\u16A8\u0289" +
		"\x03\x02\x02\x02\u16A9\u16AA\x05\u056C\u02B7\x02\u16AA\u028B\x03\x02\x02" +
		"\x02\u16AB\u16AC\x05\u028E\u0148\x02\u16AC\u028D\x03\x02\x02\x02\u16AD" +
		"\u16BA\x05\u0462\u0232\x02\u16AE\u16AF\x05\u056C\u02B7\x02\u16AF\u16B0" +
		"\x05\u0216\u010C\x02\u16B0\u16B1\x07\x1D\x02\x02\u16B1\u16B2\x07\u016A" +
		"\x02\x02\u16B2\u16BA\x03\x02\x02\x02\u16B3\u16B4\x07\u01A1\x02\x02\u16B4" +
		"\u16B5\x05\u056C\u02B7\x02\u16B5\u16B6\x05\u0216\u010C\x02\u16B6\u16B7" +
		"\x07\x1D\x02\x02\u16B7\u16B8\x07\u016A\x02\x02\u16B8\u16BA\x03\x02\x02" +
		"\x02\u16B9\u16AD\x03\x02\x02\x02\u16B9\u16AE\x03\x02\x02\x02\u16B9\u16B3" +
		"\x03\x02\x02\x02\u16BA\u028F\x03\x02\x02\x02\u16BB\u16BE\x05\u0286\u0144" +
		"\x02\u16BC\u16BD\t$\x02\x02\u16BD\u16BF\x05\u048E\u0248\x02\u16BE\u16BC" +
		"\x03\x02\x02\x02\u16BE\u16BF\x03\x02\x02\x02\u16BF\u0291\x03\x02\x02\x02" +
		"\u16C0\u16C1\x05\u0286\u0144\x02\u16C1\u0293\x03\x02\x02\x02\u16C2\u16CD" +
		"\x07\x04\x02\x02\u16C3\u16CE\x07\v\x02\x02\u16C4\u16CE\x05\u0296\u014C" +
		"\x02\u16C5\u16C6\x07U\x02\x02\u16C6\u16C7\x07\x95\x02\x02\u16C7\u16CE" +
		"\x05\u0296\u014C\x02\u16C8\u16C9\x05\u0296\u014C\x02\u16C9\u16CA\x07U" +
		"\x02\x02\u16CA\u16CB\x07\x95\x02\x02\u16CB\u16CC\x05\u0296\u014C\x02\u16CC" +
		"\u16CE\x03\x02\x02\x02\u16CD\u16C3\x03\x02\x02\x02\u16CD\u16C4\x03\x02" +
		"\x02\x02\u16CD\u16C5\x03\x02\x02\x02\u16CD\u16C8\x03\x02\x02\x02\u16CE" +
		"\u16CF\x03\x02\x02\x02\u16CF\u16D0\x07\x05\x02\x02\u16D0\u0295\x03\x02" +
		"\x02\x02\u16D1\u16D6\x05\u0292\u014A\x02\u16D2\u16D3\x07\b\x02\x02\u16D3" +
		"\u16D5\x05\u0292\u014A\x02\u16D4\u16D2\x03\x02\x02\x02\u16D5\u16D8\x03" +
		"\x02\x02\x02\u16D6\u16D4\x03\x02\x02\x02\u16D6\u16D7\x03\x02\x02\x02\u16D7" +
		"\u0297\x03\x02\x02\x02\u16D8\u16D6\x03\x02\x02\x02\u16D9\u16DA\x05\u0546" +
		"\u02A4\x02\u16DA\u16DB\x05\u0294\u014B\x02\u16DB\u0299\x03\x02\x02\x02" +
		"\u16DC\u16E1\x05\u0298\u014D\x02\u16DD\u16DE\x07\b\x02\x02\u16DE\u16E0" +
		"\x05\u0298\u014D\x02\u16DF\u16DD\x03\x02\x02\x02\u16E0\u16E3\x03\x02\x02" +
		"\x02\u16E1\u16DF\x03\x02\x02\x02\u16E1\u16E2\x03\x02\x02\x02\u16E2\u029B" +
		"\x03\x02\x02\x02\u16E3\u16E1\x03\x02\x02\x02\u16E4\u16E6\x05\u02A0\u0151" +
		"\x02\u16E5\u16E4\x03\x02\x02\x02\u16E6\u16E7\x03\x02\x02\x02\u16E7\u16E5" +
		"\x03\x02\x02\x02\u16E7\u16E8\x03\x02\x02\x02\u16E8\u029D\x03\x02\x02\x02" +
		"\u16E9\u16EA\x07\x97\x02\x02\u16EA\u16EB\x07R\x02\x02\u16EB\u16EC\x07" +
		"P\x02\x02\u16EC\u170D\x07\u01CC\x02\x02\u16ED\u16EE\x07\u013E\x02\x02" +
		"\u16EE\u16EF\x07P\x02\x02\u16EF\u16F0\x07R\x02\x02\u16F0\u16F1\x07P\x02" +
		"\x02\u16F1\u170D\x07\u01CC\x02\x02\u16F2\u170D\x07\u015C\x02\x02\u16F3" +
		"\u170D\x07\xE0\x02\x02\u16F4\u170D\x07\u0154\x02\x02\u16F5\u170D\x07\u017B" +
		"\x02\x02\u16F6\u16F7\x07\xCF\x02\x02\u16F7\u16F8\x07\u0149\x02\x02\u16F8" +
		"\u170D\x07\xB7\x02\x02\u16F9\u16FA\x07\xCF\x02\x02\u16FA\u16FB\x07\u0149" +
		"\x02\x02\u16FB\u170D\x07\xF5\x02\x02\u16FC\u16FD\x07\u0149\x02\x02\u16FD" +
		"\u170D\x07\xB7\x02\x02\u16FE\u16FF\x07\u0149\x02\x02\u16FF\u170D\x07\xF5" +
		"\x02\x02\u1700\u170D\x07\xFC\x02\x02\u1701\u1702\x07O\x02\x02\u1702\u170D" +
		"\x07\xFC\x02\x02\u1703\u1704\x07\xAC\x02\x02\u1704\u170D\x05\u0128\x95" +
		"\x02\u1705\u1706\x07\u0142\x02\x02\u1706\u170D\x05\u0128\x95\x02\u1707" +
		"\u1708\x07\u01CD\x02\x02\u1708\u170D\x05\u0214\u010B\x02\u1709\u170D\x05" +
		"R*\x02\u170A\u170B\x07\u01CE\x02\x02\u170B\u170D\x05\u0562\u02B2\x02\u170C" +
		"\u16E9\x03\x02\x02\x02\u170C\u16ED\x03\x02\x02\x02\u170C\u16F2\x03\x02" +
		"\x02\x02\u170C\u16F3\x03\x02\x02\x02\u170C\u16F4\x03\x02\x02\x02\u170C" +
		"\u16F5\x03\x02\x02\x02\u170C\u16F6\x03\x02\x02\x02\u170C\u16F9\x03\x02" +
		"\x02\x02\u170C\u16FC\x03\x02\x02\x02\u170C\u16FE\x03\x02\x02\x02\u170C" +
		"\u1700\x03\x02\x02\x02\u170C\u1701\x03\x02\x02\x02\u170C\u1703\x03\x02" +
		"\x02\x02\u170C\u1705\x03\x02\x02\x02\u170C\u1707\x03\x02\x02\x02\u170C" +
		"\u1709\x03\x02\x02\x02\u170C\u170A\x03\x02\x02\x02\u170D\u029F\x03\x02" +
		"\x02\x02\u170E\u170F\x07&\x02\x02\u170F\u1717\x05\u02A2\u0152\x02\u1710" +
		"\u1711\x07\xF9\x02\x02\u1711\u1717\x05H%\x02\u1712\u1713\x07\u01BD\x02" +
		"\x02\u1713\u1717\x05\u02A4\u0153\x02\u1714\u1717\x07j\x02\x02\u1715\u1717" +
		"\x05\u029E\u0150\x02\u1716\u170E\x03\x02\x02\x02\u1716\u1710\x03\x02\x02" +
		"\x02\u1716\u1712\x03\x02\x02\x02\u1716\u1714\x03\x02\x02\x02\u1716\u1715" +
		"\x03\x02\x02\x02\u1717\u02A1\x03\x02\x02\x02\u1718\u171E\x05\u0552\u02AA" +
		"\x02\u1719\u171A\x05\u0552\u02AA\x02\u171A\u171B\x07\b\x02\x02\u171B\u171C" +
		"\x05\u0552\u02AA\x02\u171C\u171E\x03\x02\x02\x02\u171D\u1718\x03\x02\x02" +
		"\x02\u171D\u1719\x03\x02\x02\x02\u171E\u02A3\x03\x02\x02\x02\u171F\u1720" +
		"\x07@\x02\x02\u1720\u1721\x07\u016A\x02\x02\u1721\u1728\x05\u0462\u0232" +
		"\x02\u1722\u1723\x07\b\x02\x02\u1723\u1724\x07@\x02\x02\u1724\u1725\x07" +
		"\u016A\x02\x02\u1725\u1727\x05\u0462\u0232\x02\u1726\u1722\x03\x02\x02" +
		"\x02\u1727\u172A\x03\x02\x02\x02\u1728\u1726\x03\x02\x02\x02\u1728\u1729" +
		"\x03\x02\x02\x02\u1729\u02A5\x03\x02\x02\x02\u172A\u1728\x03\x02\x02\x02" +
		"\u172B\u172C\x07k\x02\x02\u172C\u172D\x05\u01D4\xEB\x02\u172D\u02A7\x03" +
		"\x02\x02\x02\u172E\u172F\x05\u028A\u0146\x02\u172F\u1730\x05\u028E\u0148" +
		"\x02\u1730\u02A9\x03\x02\x02\x02\u1731\u1736\x05\u02A8\u0155\x02\u1732" +
		"\u1733\x07\b\x02\x02\u1733\u1735\x05\u02A8\u0155\x02\u1734\u1732\x03\x02" +
		"\x02\x02\u1735\u1738\x03\x02\x02\x02\u1736\u1734\x03\x02\x02\x02\u1736" +
		"\u1737\x03\x02\x02\x02\u1737\u02AB\x03\x02\x02\x02\u1738\u1736\x03\x02" +
		"\x02\x02\u1739\u173A\x07\x8C\x02\x02\u173A\u173B\t%\x02\x02\u173B\u173C" +
		"\x05\u0280\u0141\x02\u173C\u173E\x05\u02AE\u0158\x02\u173D\u173F\x05\u02B0" +
		"\u0159\x02\u173E\u173D\x03\x02\x02\x02\u173E\u173F\x03\x02\x02\x02\u173F" +
		"\u02AD\x03\x02\x02\x02\u1740\u1742\x05\u029E\u0150\x02\u1741\u1740\x03" +
		"\x02\x02\x02\u1742\u1743\x03\x02\x02\x02\u1743\u1741\x03\x02\x02\x02\u1743" +
		"\u1744\x03\x02\x02\x02\u1744\u02AF\x03\x02\x02\x02\u1745\u1746\x07\u013D" +
		"\x02\x02\u1746\u02B1\x03\x02\x02\x02\u1747\u1748\x07\xC1\x02\x02\u1748" +
		"\u1749\x07\xD5\x02\x02\u1749\u174B\x05\u027E\u0140\x02\u174A\u174C\x05" +
		"l7\x02\u174B\u174A\x03\x02\x02\x02\u174B\u174C\x03\x02\x02\x02\u174C\u1772" +
		"\x03\x02\x02\x02\u174D\u174E\x07\xC1\x02\x02\u174E\u174F\x07\xD5\x02\x02" +
		"\u174F\u1750\x07\xDE\x02\x02\u1750\u1751\x07\u018E\x02\x02\u1751\u1753" +
		"\x05\u027E\u0140\x02\u1752\u1754\x05l7\x02\u1753\u1752\x03\x02\x02\x02" +
		"\u1753\u1754\x03\x02\x02\x02\u1754\u1772\x03\x02\x02\x02\u1755\u1756\x07" +
		"\xC1\x02\x02\u1756\u1757\x07\u012A\x02\x02\u1757\u1759\x05\u027E\u0140" +
		"\x02\u1758\u175A\x05l7\x02\u1759\u1758\x03\x02\x02\x02\u1759\u175A\x03" +
		"\x02\x02\x02\u175A\u1772\x03\x02\x02\x02\u175B\u175C\x07\xC1\x02\x02\u175C" +
		"\u175D\x07\u012A\x02\x02\u175D\u175E\x07\xDE\x02\x02\u175E\u175F\x07\u018E" +
		"\x02\x02\u175F\u1761\x05\u027E\u0140\x02\u1760\u1762\x05l7\x02\u1761\u1760" +
		"\x03\x02\x02\x02\u1761\u1762\x03\x02\x02\x02\u1762\u1772\x03\x02\x02\x02" +
		"\u1763\u1764\x07\xC1\x02\x02\u1764\u1765\x07\u01BC\x02\x02\u1765\u1767" +
		"\x05\u027E\u0140\x02\u1766\u1768\x05l7\x02\u1767\u1766\x03\x02\x02\x02" +
		"\u1767\u1768\x03\x02\x02\x02\u1768\u1772\x03\x02\x02\x02\u1769\u176A\x07" +
		"\xC1\x02\x02\u176A\u176B\x07\u01BC\x02\x02\u176B\u176C\x07\xDE\x02\x02" +
		"\u176C\u176D\x07\u018E\x02\x02\u176D\u176F\x05\u027E\u0140\x02\u176E\u1770" +
		"\x05l7\x02\u176F\u176E\x03\x02\x02\x02\u176F\u1770\x03\x02\x02\x02\u1770" +
		"\u1772\x03\x02\x02\x02\u1771\u1747\x03\x02\x02\x02\u1771\u174D\x03\x02" +
		"\x02\x02\u1771\u1755\x03\x02\x02\x02\u1771\u175B\x03\x02\x02\x02\u1771" +
		"\u1763\x03\x02\x02\x02\u1771\u1769\x03\x02\x02\x02\u1772\u02B3\x03\x02" +
		"\x02\x02\u1773\u1774\x07\xC1\x02\x02\u1774\u1775\x07\x8A\x02\x02\u1775" +
		"\u1777\x05\u029A\u014E\x02\u1776\u1778\x05l7\x02\u1777\u1776\x03\x02\x02" +
		"\x02\u1777\u1778\x03\x02\x02\x02\u1778\u1782\x03\x02\x02\x02\u1779\u177A" +
		"\x07\xC1\x02\x02\u177A\u177B\x07\x8A\x02\x02\u177B\u177C\x07\xDE\x02\x02" +
		"\u177C\u177D\x07\u018E\x02\x02\u177D\u177F\x05\u029A\u014E\x02\u177E\u1780" +
		"\x05l7\x02\u177F\u177E\x03\x02\x02\x02\u177F\u1780\x03\x02\x02\x02\u1780" +
		"\u1782\x03\x02\x02\x02\u1781\u1773\x03\x02\x02\x02\u1781\u1779\x03\x02" +
		"\x02\x02\u1782\u02B5\x03\x02\x02\x02\u1783\u1784\x07\xC1\x02\x02\u1784" +
		"\u1785\x07\u0118\x02\x02\u1785\u1787\x05\u02BC\u015F\x02\u1786\u1788\x05" +
		"l7\x02\u1787\u1786\x03\x02\x02\x02\u1787\u1788\x03\x02\x02\x02\u1788\u1792" +
		"\x03\x02\x02\x02\u1789\u178A\x07\xC1\x02\x02\u178A\u178B\x07\u0118\x02" +
		"\x02\u178B\u178C\x07\xDE\x02\x02\u178C\u178D\x07\u018E\x02\x02\u178D\u178F" +
		"\x05\u02BC\u015F\x02\u178E\u1790\x05l7\x02\u178F\u178E\x03\x02\x02\x02" +
		"\u178F\u1790\x03\x02\x02\x02\u1790\u1792\x03\x02\x02\x02\u1791\u1783\x03" +
		"\x02\x02\x02\u1791\u1789\x03\x02\x02\x02\u1792\u02B7\x03\x02\x02\x02\u1793" +
		"\u1794\x07\x04\x02\x02\u1794\u1795\x05\u0462\u0232\x02\u1795\u1796\x07" +
		"\x05\x02\x02\u1796\u17AA\x03\x02\x02\x02\u1797\u1798\x07\x04\x02\x02\u1798" +
		"\u1799\x05\u0462\u0232\x02\u1799\u179A\x07\b\x02\x02\u179A\u179B\x05\u0462" +
		"\u0232\x02\u179B\u179C\x07\x05\x02\x02\u179C\u17AA\x03\x02\x02\x02\u179D" +
		"\u179E\x07\x04\x02\x02\u179E\u179F\x07\u0199\x02\x02\u179F\u17A0\x07\b" +
		"\x02\x02\u17A0\u17A1\x05\u0462\u0232\x02\u17A1\u17A2\x07\x05\x02\x02\u17A2" +
		"\u17AA\x03\x02\x02\x02\u17A3\u17A4\x07\x04\x02\x02\u17A4\u17A5\x05\u0462" +
		"\u0232\x02\u17A5\u17A6\x07\b\x02\x02\u17A6\u17A7\x07\u0199\x02\x02\u17A7" +
		"\u17A8\x07\x05\x02\x02\u17A8\u17AA\x03\x02\x02\x02\u17A9\u1793\x03\x02" +
		"\x02\x02\u17A9\u1797\x03\x02\x02\x02\u17A9\u179D\x03\x02\x02\x02\u17A9" +
		"\u17A3\x03\x02\x02\x02\u17AA\u02B9\x03\x02\x02\x02\u17AB\u17AC\x05\u0562" +
		"\u02B2\x02\u17AC\u17AD\x07\r\x02\x02\u17AD\u17AF\x03\x02\x02\x02\u17AE" +
		"\u17AB\x03\x02\x02\x02\u17AF\u17B2\x03\x02\x02\x02\u17B0\u17AE\x03\x02" +
		"\x02\x02\u17B0\u17B1\x03\x02\x02\x02\u17B1\u17B3\x03\x02\x02\x02\u17B2" +
		"\u17B0\x03\x02\x02\x02\u17B3\u17B4\x05\u04F8\u027D\x02\u17B4\u02BB\x03" +
		"\x02\x02\x02\u17B5\u17BA\x05\u02BE\u0160\x02\u17B6\u17B7\x07\b\x02\x02" +
		"\u17B7\u17B9\x05\u02BE\u0160\x02\u17B8\u17B6\x03\x02\x02\x02\u17B9\u17BC" +
		"\x03\x02\x02\x02\u17BA\u17B8\x03\x02\x02\x02\u17BA\u17BB\x03\x02\x02\x02" +
		"\u17BB\u02BD\x03\x02\x02\x02\u17BC\u17BA\x03\x02\x02\x02\u17BD\u17BE\x05" +
		"\u02BA\u015E\x02\u17BE\u17BF\x05\u02B8\u015D\x02\u17BF\u02BF\x03\x02\x02" +
		"\x02\u17C0\u17C1\x07;\x02\x02\u17C1\u17C2\x05\u02C2\u0162\x02\u17C2\u02C1" +
		"\x03\x02\x02\x02\u17C3\u17C5\x05\u02C4\u0163\x02\u17C4\u17C3\x03\x02\x02" +
		"\x02\u17C5\u17C6\x03\x02\x02\x02\u17C6\u17C4\x03\x02\x02\x02\u17C6\u17C7" +
		"\x03\x02\x02\x02\u17C7\u02C3\x03\x02\x02\x02\u17C8\u17CC\x05\u0552\u02AA" +
		"\x02\u17C9\u17CA\x07\xF9\x02\x02\u17CA\u17CC\x05H%\x02\u17CB\u17C8\x03" +
		"\x02\x02\x02\u17CB\u17C9\x03\x02\x02\x02\u17CC\u02C5\x03\x02\x02\x02\u17CD" +
		"\u17CE\x070\x02\x02\u17CE\u17CF\x07+\x02\x02\u17CF\u17D0\x07\x04\x02\x02" +
		"\u17D0\u17D1\x05\u0462\u0232\x02\u17D1\u17D2\x07&\x02\x02\u17D2\u17D3" +
		"\x05\u0462\u0232\x02\u17D3\u17D4\x07\x05\x02\x02\u17D4\u17D5\x07k\x02" +
		"\x02\u17D5\u17D6\x07\xD5\x02\x02\u17D6\u17D8\x05\u0280\u0141\x02\u17D7" +
		"\u17D9\x05\u02C8\u0165\x02\u17D8\u17D7\x03\x02\x02\x02\u17D8\u17D9\x03" +
		"\x02\x02\x02\u17D9\u17F3\x03\x02\x02\x02\u17DA\u17DB\x070\x02\x02\u17DB" +
		"\u17DC\x07+\x02\x02\u17DC\u17DD\x07\x04\x02\x02\u17DD\u17DE\x05\u0462" +
		"\u0232\x02\u17DE\u17DF\x07&\x02\x02\u17DF\u17E0\x05\u0462\u0232\x02\u17E0" +
		"\u17E1\x07\x05\x02\x02\u17E1\u17E2\x07\u017D\x02\x02\u17E2\u17E4\x07\xD5" +
		"\x02\x02\u17E3\u17E5\x05\u02C8\u0165\x02\u17E4\u17E3\x03\x02\x02\x02\u17E4" +
		"\u17E5\x03\x02\x02\x02\u17E5\u17F3\x03\x02\x02\x02\u17E6\u17E7\x070\x02" +
		"\x02\u17E7\u17E8\x07+\x02\x02\u17E8\u17E9\x07\x04\x02\x02\u17E9\u17EA" +
		"\x05\u0462\u0232\x02\u17EA\u17EB\x07&\x02\x02\u17EB\u17EC\x05\u0462\u0232" +
		"\x02\u17EC\u17ED\x07\x05\x02\x02\u17ED\u17EE\x07k\x02\x02\u17EE\u17F0" +
		"\x07\u0192\x02\x02\u17EF\u17F1\x05\u02C8\u0165\x02\u17F0\u17EF\x03\x02" +
		"\x02\x02\u17F0\u17F1\x03\x02\x02\x02\u17F1\u17F3\x03\x02\x02\x02\u17F2" +
		"\u17CD\x03\x02\x02\x02\u17F2\u17DA\x03\x02\x02\x02\u17F2\u17E6\x03\x02" +
		"\x02\x02\u17F3\u02C7\x03\x02\x02\x02\u17F4\u17F5\x07&\x02\x02\u17F5\u17F9" +
		"\x07\xE1\x02\x02\u17F6\u17F7\x07&\x02\x02\u17F7\u17F9\x07\x8F\x02\x02" +
		"\u17F8\u17F4\x03\x02\x02\x02\u17F8\u17F6\x03\x02\x02\x02\u17F9\u02C9\x03" +
		"\x02\x02\x02\u17FA\u17FB\x07\xC1\x02\x02\u17FB\u17FD\x07+\x02\x02\u17FC" +
		"\u17FE\x05\u02CC\u0167\x02\u17FD\u17FC\x03\x02\x02\x02\u17FD\u17FE\x03" +
		"\x02\x02\x02\u17FE\u17FF\x03\x02\x02\x02\u17FF\u1800\x07\x04\x02\x02\u1800" +
		"\u1801\x05\u0462\u0232\x02\u1801\u1802\x07&\x02\x02\u1802\u1803\x05\u0462" +
		"\u0232\x02\u1803\u1805\x07\x05\x02\x02\u1804\u1806\x05l7\x02\u1805\u1804" +
		"\x03\x02\x02\x02\u1805\u1806\x03\x02\x02\x02\u1806\u02CB\x03\x02\x02\x02" +
		"\u1807\u1808\x07\xDE\x02\x02\u1808\u1809\x07\u018E\x02\x02\u1809\u02CD" +
		"\x03\x02\x02\x02\u180A\u180C\x070\x02\x02\u180B\u180D\x05\u0278\u013D" +
		"\x02\u180C\u180B\x03\x02\x02\x02\u180C\u180D\x03\x02\x02\x02\u180D\u180E" +
		"\x03\x02\x02\x02\u180E\u180F\x07\u01BD\x02\x02\u180F\u1810\x07@\x02\x02" +
		"\u1810\u1811\x05\u0462\u0232\x02\u1811\u1812\x07\xF9\x02\x02\u1812\u1813" +
		"\x05\u0540\u02A1\x02\u1813\u1814\x07\x04\x02\x02\u1814\u1815\x05\u02D0" +
		"\u0169\x02\u1815\u1816\x07\x05\x02\x02\u1816\u02CF\x03\x02\x02\x02\u1817" +
		"\u1818\x07B\x02\x02\u1818\u1819\x07\u01CF\x02\x02\u1819\u181A\x07k\x02" +
		"\x02\u181A\u181B\x07\xD5\x02\x02\u181B\u181C\x05\u0280\u0141\x02\u181C" +
		"\u181D\x07\b\x02\x02\u181D\u181E\x07`\x02\x02\u181E\u181F\x07\u01CF\x02" +
		"\x02\u181F\u1820\x07k\x02\x02\u1820\u1821\x07\xD5\x02\x02\u1821\u1822" +
		"\x05\u0280\u0141\x02\u1822\u183A\x03\x02\x02\x02\u1823\u1824\x07`\x02" +
		"\x02\u1824\u1825\x07\u01CF\x02\x02\u1825\u1826\x07k\x02\x02\u1826\u1827" +
		"\x07\xD5\x02\x02\u1827\u1828\x05\u0280\u0141\x02\u1828\u1829\x07\b\x02" +
		"\x02\u1829\u182A\x07B\x02\x02\u182A\u182B\x07\u01CF\x02\x02\u182B\u182C" +
		"\x07k\x02\x02\u182C\u182D\x07\xD5\x02\x02\u182D\u182E\x05\u0280\u0141" +
		"\x02\u182E\u183A\x03\x02\x02\x02\u182F\u1830\x07B\x02\x02\u1830\u1831" +
		"\x07\u01CF\x02\x02\u1831\u1832\x07k\x02\x02\u1832\u1833\x07\xD5\x02\x02" +
		"\u1833\u183A\x05\u0280\u0141\x02\u1834\u1835\x07`\x02\x02\u1835\u1836" +
		"\x07\u01CF\x02\x02\u1836\u1837\x07k\x02\x02\u1837\u1838\x07\xD5\x02\x02" +
		"\u1838\u183A\x05\u0280\u0141\x02\u1839\u1817\x03\x02\x02\x02\u1839\u1823" +
		"\x03\x02\x02\x02\u1839\u182F\x03\x02\x02\x02\u1839\u1834\x03\x02\x02\x02" +
		"\u183A\u02D1\x03\x02\x02\x02\u183B\u183C\x07\xC1\x02\x02\u183C\u183E\x07" +
		"\u01BD\x02\x02\u183D\u183F\x05\u02CC\u0167\x02\u183E\u183D\x03\x02\x02" +
		"\x02\u183E\u183F\x03\x02\x02\x02\u183F\u1840\x03\x02\x02\x02\u1840\u1841" +
		"\x07@\x02\x02\u1841\u1842\x05\u0462\u0232\x02\u1842\u1843\x07\xF9\x02" +
		"\x02\u1843\u1845\x05\u0540\u02A1\x02\u1844\u1846\x05l7\x02\u1845\u1844" +
		"\x03\x02\x02\x02\u1845\u1846\x03\x02\x02\x02\u1846\u02D3\x03\x02\x02\x02" +
		"\u1847\u1848\x07\u0134\x02\x02\u1848\u184A\x05\u02D6\u016C\x02\u1849\u184B" +
		"\x05\u025C\u012F\x02\u184A\u1849\x03\x02\x02\x02\u184A\u184B\x03\x02\x02" +
		"\x02\u184B\u184C\x03\x02\x02\x02\u184C\u184D\x05\u053C\u029F\x02\u184D" +
		"\u186A\x03\x02\x02\x02\u184E\u184F\x07\u0134\x02\x02\u184F\u1851\x05\u02D8" +
		"\u016D\x02\u1850\u1852\x05\u025C\u012F\x02\u1851\u1850\x03\x02\x02\x02" +
		"\u1851\u1852\x03\x02\x02\x02\u1852\u1853\x03\x02\x02\x02\u1853\u1854\x05" +
		"\u0540\u02A1\x02\u1854\u186A\x03\x02\x02\x02\u1855\u1856\x07\u0134\x02" +
		"\x02\u1856\u1857\x07\x04\x02\x02\u1857\u1858\x05\u02DA\u016E\x02\u1858" +
		"\u1859\x07\x05\x02\x02\u1859\u185B\x05\u02D6\u016C\x02\u185A\u185C\x05" +
		"\u025C\u012F\x02\u185B\u185A\x03\x02\x02\x02\u185B\u185C\x03\x02\x02\x02" +
		"\u185C\u185D\x03\x02\x02\x02\u185D\u185E\x05\u053C\u029F\x02\u185E\u186A" +
		"\x03\x02\x02\x02\u185F\u1860\x07\u0134\x02\x02\u1860\u1861\x07\x04\x02" +
		"\x02\u1861\u1862\x05\u02DA\u016E\x02\u1862\u1863\x07\x05\x02\x02\u1863" +
		"\u1865\x05\u02D8\u016D\x02\u1864\u1866\x05\u025C\u012F\x02\u1865\u1864" +
		"\x03\x02\x02\x02\u1865\u1866\x03\x02\x02\x02\u1866\u1867\x03\x02\x02\x02" +
		"\u1867\u1868\x05\u0540\u02A1\x02\u1868\u186A\x03\x02\x02\x02\u1869\u1847" +
		"\x03\x02\x02\x02\u1869\u184E\x03\x02\x02\x02\u1869\u1855\x03\x02\x02\x02" +
		"\u1869\u185F\x03\x02\x02\x02\u186A\u02D5\x03\x02\x02\x02\u186B\u186C\t" +
		"\x1A\x02\x02\u186C\u02D7\x03\x02\x02\x02\u186D\u186E\t&\x02\x02\u186E" +
		"\u02D9\x03\x02\x02\x02\u186F\u1874\x05\u02DC\u016F\x02\u1870\u1871\x07" +
		"\b\x02\x02\u1871\u1873\x05\u02DC\u016F\x02\u1872\u1870\x03\x02\x02\x02" +
		"\u1873\u1876\x03\x02\x02\x02\u1874\u1872\x03\x02\x02\x02\u1874\u1875\x03" +
		"\x02\x02\x02\u1875\u02DB\x03\x02\x02\x02\u1876\u1874\x03\x02\x02\x02\u1877" +
		"\u1878\x07\x82\x02\x02\u1878\u02DD\x03\x02\x02\x02\u1879\u187A\x07\x8C" +
		"\x02\x02\u187A\u187B\x07\u0161\x02\x02\u187B\u187C\x05\u0540\u02A1\x02" +
		"\u187C\u187D\x07\u014F\x02\x02\u187D\u187E\x05t;\x02\u187E\u1886\x03\x02" +
		"\x02\x02\u187F\u1880\x07\x8C\x02\x02\u1880\u1881\x07\u0161\x02\x02\u1881" +
		"\u1882\x05\u0540\u02A1\x02\u1882\u1883\x07\u013B\x02\x02\u1883\u1884\x05" +
		"t;\x02\u1884\u1886\x03\x02\x02\x02\u1885\u1879\x03\x02\x02\x02\u1885\u187F" +
		"\x03\x02\x02\x02\u1886\u02DF\x03\x02\x02\x02\u1887\u1888\x07\x8C\x02\x02" +
		"\u1888\u1889\x07\x8A\x02\x02\u1889\u188A\x05\u0298\u014D\x02\u188A\u188B" +
		"\x07\u0137\x02\x02\u188B\u188C\x07`\x02\x02\u188C\u188D\x05\u0540\u02A1" +
		"\x02\u188D\u1A6F\x03\x02\x02\x02\u188E\u188F\x07\x8C\x02\x02\u188F\u1890" +
		"\x07n\x02\x02\u1890\u1891\x05\u0214\u010B\x02\u1891\u1892\x07\u0137\x02" +
		"\x02\u1892\u1893\x07`\x02\x02\u1893\u1894\x05\u0540\u02A1\x02\u1894\u1A6F" +
		"\x03\x02\x02\x02\u1895\u1896\x07\x8C\x02\x02\u1896\u1897\x07\xAA\x02\x02" +
		"\u1897\u1898\x05\u0214\u010B\x02\u1898\u1899\x07\u0137\x02\x02\u1899\u189A" +
		"\x07`\x02\x02\u189A\u189B\x05\u0540\u02A1\x02\u189B\u1A6F\x03\x02\x02" +
		"\x02\u189C\u189D\x07\x8C\x02\x02\u189D\u189E\x07\xB1\x02\x02\u189E\u189F" +
		"\x05\u0540\u02A1\x02\u189F\u18A0\x07\u0137\x02\x02\u18A0\u18A1\x07`\x02" +
		"\x02\u18A1\u18A2\x05\u0540\u02A1\x02\u18A2\u1A6F\x03\x02\x02\x02\u18A3" +
		"\u18A4\x07\x8C\x02\x02\u18A4\u18A5\x07\xBF\x02\x02\u18A5\u18A6\x05\u0214" +
		"\u010B\x02\u18A6\u18A7\x07\u0137\x02\x02\u18A7\u18A8\x07`\x02\x02\u18A8" +
		"\u18A9\x05\u0540\u02A1\x02\u18A9\u1A6F\x03\x02\x02\x02\u18AA\u18AB\x07" +
		"\x8C\x02\x02\u18AB\u18AC\x07\xBF\x02\x02\u18AC\u18AD\x05\u0214\u010B\x02" +
		"\u18AD\u18AE\x07\u0137\x02\x02\u18AE\u18AF\x07/\x02\x02\u18AF\u18B0\x05" +
		"\u0540\u02A1\x02\u18B0\u18B1\x07`\x02\x02\u18B1\u18B2\x05\u0540\u02A1" +
		"\x02\u18B2\u1A6F\x03\x02\x02\x02\u18B3\u18B4\x07\x8C\x02\x02\u18B4\u18B5" +
		"\x07A\x02\x02\u18B5\u18B6\x07\xB0\x02\x02\u18B6\u18B7\x07\u017F\x02\x02" +
		"\u18B7\u18B8\x05\u0540\u02A1\x02\u18B8\u18B9\x07\u0137\x02\x02\u18B9\u18BA" +
		"\x07`\x02\x02\u18BA\u18BB\x05\u0540\u02A1\x02\u18BB\u1A6F\x03\x02\x02" +
		"\x02\u18BC\u18BD\x07\x8C\x02\x02\u18BD\u18BE\x07\xD5\x02\x02\u18BE\u18BF" +
		"\x05\u0280\u0141\x02\u18BF\u18C0\x07\u0137\x02\x02\u18C0\u18C1\x07`\x02" +
		"\x02\u18C1\u18C2\x05\u0540\u02A1\x02\u18C2\u1A6F\x03\x02\x02\x02\u18C3" +
		"\u18C4\x07\x8C\x02\x02\u18C4\u18C5\x07D\x02\x02\u18C5\u18C6\x05\u055C" +
		"\u02AF\x02\u18C6\u18C7\x07\u0137\x02\x02\u18C7\u18C8\x07`\x02\x02\u18C8" +
		"\u18C9\x05\u055C\u02AF\x02\u18C9\u1A6F\x03\x02\x02\x02\u18CA\u18CC\x07" +
		"\x8C\x02\x02\u18CB\u18CD\x05\u0138\x9D\x02\u18CC\u18CB\x03\x02\x02\x02" +
		"\u18CC\u18CD\x03\x02\x02\x02\u18CD\u18CE\x03\x02\x02\x02\u18CE\u18CF\x07" +
		"\xF9\x02\x02\u18CF\u18D0\x05\u0540\u02A1\x02\u18D0\u18D1\x07\u0137\x02" +
		"\x02\u18D1\u18D2\x07`\x02\x02\u18D2\u18D3\x05\u0540\u02A1\x02\u18D3\u1A6F" +
		"\x03\x02\x02\x02\u18D4\u18D5\x07\x8C\x02\x02\u18D5\u18D6\x07\u0118\x02" +
		"\x02\u18D6\u18D7\x07\x9E\x02\x02\u18D7\u18D8\x05\u0214\u010B\x02\u18D8" +
		"\u18D9\x07f\x02\x02\u18D9\u18DA\x05\u0540\u02A1\x02\u18DA\u18DB\x07\u0137" +
		"\x02\x02\u18DB\u18DC\x07`\x02\x02\u18DC\u18DD\x05\u0540\u02A1\x02\u18DD" +
		"\u1A6F\x03\x02\x02\x02\u18DE\u18DF\x07\x8C\x02\x02\u18DF\u18E0\x07\u0118" +
		"\x02\x02\u18E0\u18E1\x07\xD0\x02\x02\u18E1\u18E2\x05\u0214\u010B\x02\u18E2" +
		"\u18E3\x07";
	private static readonly _serializedATNSegment13: string =
		"f\x02\x02\u18E3\u18E4\x05\u0540\u02A1\x02\u18E4\u18E5\x07\u0137\x02\x02" +
		"\u18E5\u18E6\x07`\x02\x02\u18E6\u18E7\x05\u0540\u02A1\x02\u18E7\u1A6F" +
		"\x03\x02\x02\x02\u18E8\u18E9\x07\x8C\x02\x02\u18E9\u18EA\x07\u01BF\x02" +
		"\x02\u18EA\u18EB\x05\u0540\u02A1\x02\u18EB\u18EC\x07R\x02\x02\u18EC\u18ED" +
		"\x05\u053C\u029F\x02\u18ED\u18EE\x07\u0137\x02\x02\u18EE\u18EF\x07`\x02" +
		"\x02\u18EF\u18F0\x05\u0540\u02A1\x02\u18F0\u1A6F\x03\x02\x02\x02\u18F1" +
		"\u18F2\x07\x8C\x02\x02\u18F2\u18F3\x07\u01BF\x02\x02\u18F3\u18F4\x07\xDE" +
		"\x02\x02\u18F4\u18F5\x07\u018E\x02\x02\u18F5\u18F6\x05\u0540\u02A1\x02" +
		"\u18F6\u18F7\x07R\x02\x02\u18F7\u18F8\x05\u053C\u029F\x02\u18F8\u18F9" +
		"\x07\u0137\x02\x02\u18F9\u18FA\x07`\x02\x02\u18FA\u18FB\x05\u0540\u02A1" +
		"\x02\u18FB\u1A6F\x03\x02\x02\x02\u18FC\u18FD\x07\x8C\x02\x02\u18FD\u18FE" +
		"\x07\u012A\x02\x02\u18FE\u18FF\x05\u0280\u0141\x02\u18FF\u1900\x07\u0137" +
		"\x02\x02\u1900\u1901\x07`\x02\x02\u1901\u1902\x05\u0540\u02A1\x02\u1902" +
		"\u1A6F\x03\x02\x02\x02\u1903\u1904\x07\x8C\x02\x02\u1904\u1905\x07\u01C6" +
		"\x02\x02\u1905\u1906\x05\u0540\u02A1\x02\u1906\u1907\x07\u0137\x02\x02" +
		"\u1907\u1908\x07`\x02\x02\u1908\u1909\x05\u0540\u02A1\x02\u1909\u1A6F" +
		"\x03\x02\x02\x02\u190A\u190B\x07\x8C\x02\x02\u190B\u190C\x07\u01BC\x02" +
		"\x02\u190C\u190D\x05\u0280\u0141\x02\u190D\u190E\x07\u0137\x02\x02\u190E" +
		"\u190F\x07`\x02\x02\u190F\u1910\x05\u0540\u02A1\x02\u1910\u1A6F\x03\x02" +
		"\x02\x02\u1911\u1912\x07\x8C\x02\x02\u1912\u1913\x07\u0145\x02\x02\u1913" +
		"\u1914\x05\u0540\u02A1\x02\u1914\u1915\x07\u0137\x02\x02\u1915\u1916\x07" +
		"`\x02\x02\u1916\u1917\x05\u0540\u02A1\x02\u1917\u1A6F\x03\x02\x02\x02" +
		"\u1918\u1919\x07\x8C\x02\x02\u1919\u191A\x07\u014D\x02\x02\u191A\u191B" +
		"\x05\u0540\u02A1\x02\u191B\u191C\x07\u0137\x02\x02\u191C\u191D\x07`\x02" +
		"\x02\u191D\u191E\x05\u0540\u02A1\x02\u191E\u1A6F\x03\x02\x02\x02\u191F" +
		"\u1920\x07\x8C\x02\x02\u1920\u1921\x07\u01C5\x02\x02\u1921\u1922\x05\u0540" +
		"\u02A1\x02\u1922\u1923\x07\u0137\x02\x02\u1923\u1924\x07`\x02\x02\u1924" +
		"\u1925\x05\u0540\u02A1\x02\u1925\u1A6F\x03\x02\x02\x02\u1926\u1927\x07" +
		"\x8C\x02\x02\u1927\u1928\x07^\x02\x02\u1928\u1929\x05\u0436\u021C\x02" +
		"\u1929\u192A\x07\u0137\x02\x02\u192A\u192B\x07`\x02\x02\u192B\u192C\x05" +
		"\u0540\u02A1\x02\u192C\u1A6F\x03\x02\x02\x02\u192D\u192E\x07\x8C\x02\x02" +
		"\u192E\u192F\x07^\x02\x02\u192F\u1930\x07\xDE\x02\x02\u1930\u1931\x07" +
		"\u018E\x02\x02\u1931\u1932\x05\u0436\u021C\x02\u1932\u1933\x07\u0137\x02" +
		"\x02\u1933\u1934\x07`\x02\x02\u1934\u1935\x05\u0540\u02A1\x02\u1935\u1A6F" +
		"\x03\x02\x02\x02\u1936\u1937\x07\x8C\x02\x02\u1937\u1938\x07\u014A\x02" +
		"\x02\u1938\u1939\x05\u053C\u029F\x02\u1939\u193A\x07\u0137\x02\x02\u193A" +
		"\u193B\x07`\x02\x02\u193B\u193C\x05\u0540\u02A1\x02\u193C\u1A6F\x03\x02" +
		"\x02\x02\u193D\u193E\x07\x8C\x02\x02\u193E\u193F\x07\u014A\x02\x02\u193F" +
		"\u1940\x07\xDE\x02\x02\u1940\u1941\x07\u018E\x02\x02\u1941\u1942\x05\u053C" +
		"\u029F\x02\u1942\u1943\x07\u0137\x02\x02\u1943\u1944\x07`\x02\x02\u1944" +
		"\u1945\x05\u0540\u02A1\x02\u1945\u1A6F\x03\x02\x02\x02\u1946\u1947\x07" +
		"\x8C\x02\x02\u1947\u1948\x07\u017A\x02\x02\u1948\u1949\x05\u053C\u029F" +
		"\x02\u1949\u194A\x07\u0137\x02\x02\u194A\u194B\x07`\x02\x02\u194B\u194C" +
		"\x05\u0540\u02A1\x02\u194C\u1A6F\x03\x02\x02\x02\u194D\u194E\x07\x8C\x02" +
		"\x02\u194E\u194F\x07\u017A\x02\x02\u194F\u1950\x07\xDE\x02\x02\u1950\u1951" +
		"\x07\u018E\x02\x02\u1951\u1952\x05\u053C\u029F\x02\u1952\u1953\x07\u0137" +
		"\x02\x02\u1953\u1954\x07`\x02\x02\u1954\u1955\x05\u0540\u02A1\x02\u1955" +
		"\u1A6F\x03\x02\x02\x02\u1956\u1957\x07\x8C\x02\x02\u1957\u1958\x07\u0105" +
		"\x02\x02\u1958\u1959\x07\u017A\x02\x02\u1959\u195A\x05\u053C\u029F\x02" +
		"\u195A\u195B\x07\u0137\x02\x02\u195B\u195C\x07`\x02\x02\u195C\u195D\x05" +
		"\u0540\u02A1\x02\u195D\u1A6F\x03\x02\x02\x02\u195E\u195F\x07\x8C\x02\x02" +
		"\u195F\u1960\x07\u0105\x02\x02\u1960\u1961\x07\u017A\x02\x02\u1961\u1962" +
		"\x07\xDE\x02\x02\u1962\u1963\x07\u018E\x02\x02\u1963\u1964\x05\u053C\u029F" +
		"\x02\u1964\u1965\x07\u0137\x02\x02\u1965\u1966\x07`\x02\x02\u1966\u1967" +
		"\x05\u0540\u02A1\x02\u1967\u1A6F\x03\x02\x02\x02\u1968\u1969\x07\x8C\x02" +
		"\x02\u1969\u196A\x07\xE4\x02\x02\u196A\u196B\x05\u053C\u029F\x02\u196B" +
		"\u196C\x07\u0137\x02\x02\u196C\u196D\x07`\x02\x02\u196D\u196E\x05\u0540" +
		"\u02A1\x02\u196E\u1A6F\x03\x02\x02\x02\u196F\u1970\x07\x8C\x02\x02\u1970" +
		"\u1971\x07\xE4\x02\x02\u1971\u1972\x07\xDE\x02\x02\u1972\u1973\x07\u018E" +
		"\x02\x02\u1973\u1974\x05\u053C\u029F\x02\u1974\u1975\x07\u0137\x02\x02" +
		"\u1975\u1976\x07`\x02\x02\u1976\u1977\x05\u0540\u02A1\x02\u1977\u1A6F" +
		"\x03\x02\x02\x02\u1978\u1979\x07\x8C\x02\x02\u1979\u197A\x07A\x02\x02" +
		"\u197A\u197B\x07^\x02\x02\u197B\u197C\x05\u0436\u021C\x02\u197C\u197D" +
		"\x07\u0137\x02\x02\u197D\u197E\x07`\x02\x02\u197E\u197F\x05\u0540\u02A1" +
		"\x02\u197F\u1A6F\x03\x02\x02\x02\u1980\u1981\x07\x8C\x02\x02\u1981\u1982" +
		"\x07A\x02\x02\u1982\u1983\x07^\x02\x02\u1983\u1984\x07\xDE\x02\x02\u1984" +
		"\u1985\x07\u018E\x02\x02\u1985\u1986\x05\u0436\u021C\x02\u1986\u1987\x07" +
		"\u0137\x02\x02\u1987\u1988\x07`\x02\x02\u1988\u1989\x05\u0540\u02A1\x02" +
		"\u1989\u1A6F\x03\x02\x02\x02\u198A\u198B\x07\x8C\x02\x02\u198B\u198C\x07" +
		"^\x02\x02\u198C\u198D\x05\u0436\u021C\x02\u198D\u198F\x07\u0137\x02\x02" +
		"\u198E\u1990\x05\u02E2\u0172\x02\u198F\u198E\x03\x02\x02\x02\u198F\u1990" +
		"\x03\x02\x02\x02\u1990\u1991\x03\x02\x02\x02\u1991\u1992\x05\u0540\u02A1" +
		"\x02\u1992\u1993\x07`\x02\x02\u1993\u1994\x05\u0540\u02A1\x02\u1994\u1A6F" +
		"\x03\x02\x02\x02\u1995\u1996\x07\x8C\x02\x02\u1996\u1997\x07^\x02\x02" +
		"\u1997\u1998\x07\xDE\x02\x02\u1998\u1999\x07\u018E\x02\x02\u1999\u199A" +
		"\x05\u0436\u021C\x02\u199A\u199C\x07\u0137\x02\x02\u199B\u199D\x05\u02E2" +
		"\u0172\x02\u199C\u199B\x03\x02\x02\x02\u199C\u199D\x03\x02\x02\x02\u199D" +
		"\u199E\x03\x02\x02\x02\u199E\u199F\x05\u0540\u02A1\x02\u199F\u19A0\x07" +
		"`\x02\x02\u19A0\u19A1\x05\u0540\u02A1\x02\u19A1\u1A6F\x03\x02\x02\x02" +
		"\u19A2\u19A3\x07\x8C\x02\x02\u19A3\u19A4\x07\u017A\x02\x02\u19A4\u19A5" +
		"\x05\u053C\u029F\x02\u19A5\u19A7\x07\u0137\x02\x02\u19A6\u19A8\x05\u02E2" +
		"\u0172\x02\u19A7\u19A6\x03\x02\x02\x02\u19A7\u19A8\x03\x02\x02\x02\u19A8" +
		"\u19A9\x03\x02\x02\x02\u19A9\u19AA\x05\u0540\u02A1\x02\u19AA\u19AB\x07" +
		"`\x02\x02\u19AB\u19AC\x05\u0540\u02A1\x02\u19AC\u1A6F\x03\x02\x02\x02" +
		"\u19AD\u19AE\x07\x8C\x02\x02\u19AE\u19AF\x07\u017A\x02\x02\u19AF\u19B0" +
		"\x07\xDE\x02\x02\u19B0\u19B1\x07\u018E\x02\x02\u19B1\u19B2\x05\u053C\u029F" +
		"\x02\u19B2\u19B4\x07\u0137\x02\x02\u19B3\u19B5\x05\u02E2\u0172\x02\u19B4" +
		"\u19B3\x03\x02\x02\x02\u19B4\u19B5\x03\x02\x02\x02\u19B5\u19B6\x03\x02" +
		"\x02\x02\u19B6\u19B7\x05\u0540\u02A1\x02\u19B7\u19B8\x07`\x02\x02\u19B8" +
		"\u19B9\x05\u0540\u02A1\x02\u19B9\u1A6F\x03\x02\x02\x02\u19BA\u19BB\x07" +
		"\x8C\x02\x02\u19BB\u19BC\x07\u0105\x02\x02\u19BC\u19BD\x07\u017A\x02\x02" +
		"\u19BD\u19BE\x05\u053C\u029F\x02\u19BE\u19C0\x07\u0137\x02\x02\u19BF\u19C1" +
		"\x05\u02E2\u0172\x02\u19C0\u19BF\x03\x02\x02\x02\u19C0\u19C1\x03\x02\x02" +
		"\x02\u19C1\u19C2\x03\x02\x02\x02\u19C2\u19C3\x05\u0540\u02A1\x02\u19C3" +
		"\u19C4\x07`\x02\x02\u19C4\u19C5\x05\u0540\u02A1\x02\u19C5\u1A6F\x03\x02" +
		"\x02\x02\u19C6\u19C7\x07\x8C\x02\x02\u19C7\u19C8\x07\u0105\x02\x02\u19C8" +
		"\u19C9\x07\u017A\x02\x02\u19C9\u19CA\x07\xDE\x02\x02\u19CA\u19CB\x07\u018E" +
		"\x02\x02\u19CB\u19CC\x05\u053C\u029F\x02\u19CC\u19CE\x07\u0137\x02\x02" +
		"\u19CD\u19CF\x05\u02E2\u0172\x02\u19CE\u19CD\x03\x02\x02\x02\u19CE\u19CF" +
		"\x03\x02\x02\x02\u19CF\u19D0\x03\x02\x02\x02\u19D0\u19D1\x05\u0540\u02A1" +
		"\x02\u19D1\u19D2\x07`\x02\x02\u19D2\u19D3\x05\u0540\u02A1\x02\u19D3\u1A6F" +
		"\x03\x02\x02\x02\u19D4\u19D5\x07\x8C\x02\x02\u19D5\u19D6\x07^\x02\x02" +
		"\u19D6\u19D7\x05\u0436\u021C\x02\u19D7\u19D8\x07\u0137\x02\x02\u19D8\u19D9" +
		"\x07/\x02\x02\u19D9\u19DA\x05\u0540\u02A1\x02\u19DA\u19DB\x07`\x02\x02" +
		"\u19DB\u19DC\x05\u0540\u02A1\x02\u19DC\u1A6F\x03\x02\x02\x02\u19DD\u19DE" +
		"\x07\x8C\x02\x02\u19DE\u19DF\x07^\x02\x02\u19DF\u19E0\x07\xDE\x02\x02" +
		"\u19E0\u19E1\x07\u018E\x02\x02\u19E1\u19E2\x05\u0436\u021C\x02\u19E2\u19E3" +
		"\x07\u0137\x02\x02\u19E3\u19E4\x07/\x02\x02\u19E4\u19E5\x05\u0540\u02A1" +
		"\x02\u19E5\u19E6\x07`\x02\x02\u19E6\u19E7\x05\u0540\u02A1\x02\u19E7\u1A6F" +
		"\x03\x02\x02\x02\u19E8\u19E9\x07\x8C\x02\x02\u19E9\u19EA\x07A\x02\x02" +
		"\u19EA\u19EB\x07^\x02\x02\u19EB\u19EC\x05\u0436\u021C\x02\u19EC\u19EE" +
		"\x07\u0137\x02\x02\u19ED\u19EF\x05\u02E2\u0172\x02\u19EE\u19ED\x03\x02" +
		"\x02\x02\u19EE\u19EF\x03\x02\x02\x02\u19EF\u19F0\x03\x02\x02\x02\u19F0" +
		"\u19F1\x05\u0540\u02A1\x02\u19F1\u19F2\x07`\x02\x02\u19F2\u19F3\x05\u0540" +
		"\u02A1\x02\u19F3\u1A6F\x03\x02\x02\x02\u19F4\u19F5\x07\x8C\x02\x02\u19F5" +
		"\u19F6\x07A\x02\x02\u19F6\u19F7\x07^\x02\x02\u19F7\u19F8\x07\xDE\x02\x02" +
		"\u19F8\u19F9\x07\u018E\x02\x02\u19F9\u19FA\x05\u0436\u021C\x02\u19FA\u19FC" +
		"\x07\u0137\x02\x02\u19FB\u19FD\x05\u02E2\u0172\x02\u19FC\u19FB\x03\x02" +
		"\x02\x02\u19FC\u19FD\x03\x02\x02\x02\u19FD\u19FE\x03\x02\x02\x02\u19FE" +
		"\u19FF\x05\u0540\u02A1\x02\u19FF\u1A00\x07`\x02\x02\u1A00\u1A01\x05\u0540" +
		"\u02A1\x02\u1A01\u1A6F\x03\x02\x02\x02\u1A02\u1A03\x07\x8C\x02\x02\u1A03" +
		"\u1A04\x07\u0143\x02\x02\u1A04\u1A05\x05\u0540\u02A1\x02\u1A05\u1A06\x07" +
		"R\x02\x02\u1A06\u1A07\x05\u053C\u029F\x02\u1A07\u1A08\x07\u0137\x02\x02" +
		"\u1A08\u1A09\x07`\x02\x02\u1A09\u1A0A\x05\u0540\u02A1\x02\u1A0A\u1A6F" +
		"\x03\x02\x02\x02\u1A0B\u1A0C\x07\x8C\x02\x02\u1A0C\u1A0D\x07\u0167\x02" +
		"\x02\u1A0D\u1A0E\x05\u0540\u02A1\x02\u1A0E\u1A0F\x07R\x02\x02\u1A0F\u1A10" +
		"\x05\u053C\u029F\x02\u1A10\u1A11\x07\u0137\x02\x02\u1A11\u1A12\x07`\x02" +
		"\x02\u1A12\u1A13\x05\u0540\u02A1\x02\u1A13\u1A6F\x03\x02\x02\x02\u1A14" +
		"\u1A15\x07\x8C\x02\x02\u1A15\u1A16\x07\xC8\x02\x02\u1A16\u1A17\x07\u0167" +
		"\x02\x02\u1A17\u1A18\x05\u0540\u02A1\x02\u1A18\u1A19\x07\u0137\x02\x02" +
		"\u1A19\u1A1A\x07`\x02\x02\u1A1A\u1A1B\x05\u0540\u02A1\x02\u1A1B\u1A6F" +
		"\x03\x02\x02\x02\u1A1C\u1A1D\x07\x8C\x02\x02\u1A1D\u1A1E\x07\u0140\x02" +
		"\x02\u1A1E\u1A1F\x05\u055C\u02AF\x02\u1A1F\u1A20\x07\u0137\x02\x02\u1A20" +
		"\u1A21\x07`\x02\x02\u1A21\u1A22\x05\u055C\u02AF\x02\u1A22\u1A6F\x03\x02" +
		"\x02\x02\u1A23\u1A24\x07\x8C\x02\x02\u1A24\u1A25\x07e\x02\x02\u1A25\u1A26" +
		"\x05\u055C\u02AF\x02\u1A26\u1A27\x07\u0137\x02\x02\u1A27\u1A28\x07`\x02" +
		"\x02\u1A28\u1A29\x05\u055C\u02AF\x02\u1A29\u1A6F\x03\x02\x02\x02\u1A2A" +
		"\u1A2B\x07\x8C\x02\x02\u1A2B\u1A2C\x07\u0161\x02\x02\u1A2C\u1A2D\x05\u0540" +
		"\u02A1\x02\u1A2D\u1A2E\x07\u0137\x02\x02\u1A2E\u1A2F\x07`\x02\x02\u1A2F" +
		"\u1A30\x05\u0540\u02A1\x02\u1A30\u1A6F\x03\x02\x02\x02\u1A31\u1A32\x07" +
		"\x8C\x02\x02\u1A32\u1A33\x07\u0158\x02\x02\u1A33\u1A34\x05\u0214\u010B" +
		"\x02\u1A34\u1A35\x07\u0137\x02\x02\u1A35\u1A36\x07`\x02\x02\u1A36\u1A37" +
		"\x05\u0540\u02A1\x02\u1A37\u1A6F\x03\x02\x02\x02\u1A38\u1A39\x07\x8C\x02" +
		"\x02\u1A39\u1A3A\x07\u0165\x02\x02\u1A3A\u1A3B\x07\u0147\x02\x02\u1A3B" +
		"\u1A3C\x07\u011D\x02\x02\u1A3C\u1A3D\x05\u0214\u010B\x02\u1A3D\u1A3E\x07" +
		"\u0137\x02\x02\u1A3E\u1A3F\x07`\x02\x02\u1A3F\u1A40\x05\u0540\u02A1\x02" +
		"\u1A40\u1A6F\x03\x02\x02\x02\u1A41\u1A42\x07\x8C\x02\x02\u1A42\u1A43\x07" +
		"\u0165\x02\x02\u1A43\u1A44\x07\u0147\x02\x02\u1A44\u1A45\x07\xBB\x02\x02" +
		"\u1A45\u1A46\x05\u0214\u010B\x02\u1A46\u1A47\x07\u0137\x02\x02\u1A47\u1A48" +
		"\x07`\x02\x02\u1A48\u1A49\x05\u0540\u02A1\x02\u1A49\u1A6F\x03\x02\x02" +
		"\x02\u1A4A\u1A4B\x07\x8C\x02\x02\u1A4B\u1A4C\x07\u0165\x02\x02\u1A4C\u1A4D" +
		"\x07\u0147\x02\x02\u1A4D\u1A4E\x07\u0163\x02\x02\u1A4E\u1A4F\x05\u0214" +
		"\u010B\x02\u1A4F\u1A50\x07\u0137\x02\x02\u1A50\u1A51\x07`\x02\x02\u1A51" +
		"\u1A52\x05\u0540\u02A1\x02\u1A52\u1A6F\x03\x02\x02\x02\u1A53\u1A54\x07" +
		"\x8C\x02\x02\u1A54\u1A55\x07\u0165\x02\x02\u1A55\u1A56\x07\u0147\x02\x02" +
		"\u1A56\u1A57\x07\xA5\x02\x02\u1A57\u1A58\x05\u0214\u010B\x02\u1A58\u1A59" +
		"\x07\u0137\x02\x02\u1A59\u1A5A\x07`\x02\x02\u1A5A\u1A5B\x05\u0540\u02A1" +
		"\x02\u1A5B\u1A6F\x03\x02\x02\x02\u1A5C\u1A5D\x07\x8C\x02\x02\u1A5D\u1A5E" +
		"\x07\u016A\x02\x02\u1A5E\u1A5F\x05\u0214\u010B\x02\u1A5F\u1A60\x07\u0137" +
		"\x02\x02\u1A60\u1A61\x07`\x02\x02\u1A61\u1A62\x05\u0540\u02A1\x02\u1A62" +
		"\u1A6F\x03\x02\x02\x02\u1A63\u1A64\x07\x8C\x02\x02\u1A64\u1A65\x07\u016A" +
		"\x02\x02\u1A65\u1A66\x05\u0214\u010B\x02\u1A66\u1A67\x07\u0137\x02\x02" +
		"\u1A67\u1A68\x07\x91\x02\x02\u1A68\u1A69\x05\u0540\u02A1\x02\u1A69\u1A6A" +
		"\x07`\x02\x02\u1A6A\u1A6C\x05\u0540\u02A1\x02\u1A6B\u1A6D\x05l7\x02\u1A6C" +
		"\u1A6B\x03\x02\x02\x02\u1A6C\u1A6D\x03\x02\x02\x02\u1A6D\u1A6F\x03\x02" +
		"\x02\x02\u1A6E\u1887\x03\x02\x02\x02\u1A6E\u188E\x03\x02\x02\x02\u1A6E" +
		"\u1895\x03\x02\x02\x02\u1A6E\u189C\x03\x02\x02\x02\u1A6E\u18A3\x03\x02" +
		"\x02\x02\u1A6E\u18AA\x03\x02\x02\x02\u1A6E\u18B3\x03\x02\x02\x02\u1A6E" +
		"\u18BC\x03\x02\x02\x02\u1A6E\u18C3\x03\x02\x02\x02\u1A6E\u18CA\x03\x02" +
		"\x02\x02\u1A6E\u18D4\x03\x02\x02\x02\u1A6E\u18DE\x03\x02\x02\x02\u1A6E" +
		"\u18E8\x03\x02\x02\x02\u1A6E\u18F1\x03\x02\x02\x02\u1A6E\u18FC\x03\x02" +
		"\x02\x02\u1A6E\u1903\x03\x02\x02\x02\u1A6E\u190A\x03\x02\x02\x02\u1A6E" +
		"\u1911\x03\x02\x02\x02\u1A6E\u1918\x03\x02\x02\x02\u1A6E\u191F\x03\x02" +
		"\x02\x02\u1A6E\u1926\x03\x02\x02\x02\u1A6E\u192D\x03\x02\x02\x02\u1A6E" +
		"\u1936\x03\x02\x02\x02\u1A6E\u193D\x03\x02\x02\x02\u1A6E\u1946\x03\x02" +
		"\x02\x02\u1A6E\u194D\x03\x02\x02\x02\u1A6E\u1956\x03\x02\x02\x02\u1A6E" +
		"\u195E\x03\x02\x02\x02\u1A6E\u1968\x03\x02\x02\x02\u1A6E\u196F\x03\x02" +
		"\x02\x02\u1A6E\u1978\x03\x02\x02\x02\u1A6E\u1980\x03\x02\x02\x02\u1A6E" +
		"\u198A\x03\x02\x02\x02\u1A6E\u1995\x03\x02\x02\x02\u1A6E\u19A2\x03\x02" +
		"\x02\x02\u1A6E\u19AD\x03\x02\x02\x02\u1A6E\u19BA\x03\x02\x02\x02\u1A6E" +
		"\u19C6\x03\x02\x02\x02\u1A6E\u19D4\x03\x02\x02\x02\u1A6E\u19DD\x03\x02" +
		"\x02\x02\u1A6E\u19E8\x03\x02\x02\x02\u1A6E\u19F4\x03\x02\x02\x02\u1A6E" +
		"\u1A02\x03\x02\x02\x02\u1A6E\u1A0B\x03\x02\x02\x02\u1A6E\u1A14\x03\x02" +
		"\x02\x02\u1A6E\u1A1C\x03\x02\x02\x02\u1A6E\u1A23\x03\x02\x02\x02\u1A6E" +
		"\u1A2A\x03\x02\x02\x02\u1A6E\u1A31\x03\x02\x02\x02\u1A6E\u1A38\x03\x02" +
		"\x02\x02\u1A6E\u1A41\x03\x02\x02\x02\u1A6E\u1A4A\x03\x02\x02\x02\u1A6E" +
		"\u1A53\x03\x02\x02\x02\u1A6E\u1A5C\x03\x02\x02\x02\u1A6E\u1A63\x03\x02" +
		"\x02\x02\u1A6F\u02E1\x03\x02\x02\x02\u1A70\u1A71\x07.\x02\x02\u1A71\u02E3" +
		"\x03\x02\x02\x02\u1A72\u1A73\x07\u014F\x02\x02\u1A73\u1A74\x07\xB0\x02" +
		"\x02\u1A74\u02E5\x03\x02\x02\x02\u1A75\u1A76\x07\x8C\x02\x02\u1A76\u1A77" +
		"\x07\xD5\x02\x02\u1A77\u1A79\x05\u0280\u0141\x02\u1A78\u1A7A\x05\u02E8" +
		"\u0175\x02\u1A79\u1A78\x03\x02\x02\x02\u1A79\u1A7A\x03\x02\x02\x02\u1A7A" +
		"\u1A7B\x03\x02\x02\x02\u1A7B\u1A7C\x07\u01D0\x02\x02\u1A7C\u1A7D\x07R" +
		"\x02\x02\u1A7D\u1A7E\x07\xCE\x02\x02\u1A7E\u1A7F\x05\u0540\u02A1\x02\u1A7F" +
		"\u1ABB\x03\x02\x02\x02\u1A80\u1A81\x07\x8C\x02\x02\u1A81\u1A82\x07\u012A" +
		"\x02\x02\u1A82\u1A84\x05\u0280\u0141\x02\u1A83\u1A85\x05\u02E8\u0175\x02" +
		"\u1A84\u1A83\x03\x02\x02\x02\u1A84\u1A85\x03\x02\x02\x02\u1A85\u1A86\x03" +
		"\x02\x02\x02\u1A86\u1A87\x07\u01D0\x02\x02\u1A87\u1A88\x07R\x02\x02\u1A88" +
		"\u1A89\x07\xCE\x02\x02\u1A89\u1A8A\x05\u0540\u02A1\x02\u1A8A\u1ABB\x03" +
		"\x02\x02\x02\u1A8B\u1A8C\x07\x8C\x02\x02\u1A8C\u1A8D\x07\u01BC\x02\x02" +
		"\u1A8D\u1A8F\x05\u0280\u0141\x02\u1A8E\u1A90\x05\u02E8\u0175\x02\u1A8F" +
		"\u1A8E\x03\x02\x02\x02\u1A8F\u1A90\x03\x02\x02\x02\u1A90\u1A91\x03\x02" +
		"\x02\x02\u1A91\u1A92\x07\u01D0\x02\x02\u1A92\u1A93\x07R\x02\x02\u1A93" +
		"\u1A94\x07\xCE\x02\x02\u1A94\u1A95\x05\u0540\u02A1\x02\u1A95\u1ABB\x03" +
		"\x02\x02\x02\u1A96\u1A97\x07\x8C\x02\x02\u1A97\u1A98\x07\u0167\x02\x02" +
		"\u1A98\u1A99\x05\u0540\u02A1\x02\u1A99\u1A9A\x07R\x02\x02\u1A9A\u1A9C" +
		"\x05\u053C\u029F\x02\u1A9B\u1A9D\x05\u02E8\u0175\x02\u1A9C\u1A9B\x03\x02" +
		"\x02\x02\u1A9C\u1A9D\x03\x02\x02\x02\u1A9D\u1A9E\x03\x02\x02\x02\u1A9E" +
		"\u1A9F\x07\u01D0\x02\x02\u1A9F\u1AA0\x07R\x02\x02\u1AA0\u1AA1\x07\xCE" +
		"\x02\x02\u1AA1\u1AA2\x05\u0540\u02A1\x02\u1AA2\u1ABB\x03\x02\x02\x02\u1AA3" +
		"\u1AA4\x07\x8C\x02\x02\u1AA4\u1AA5\x07\u0105\x02\x02\u1AA5\u1AA6\x07\u017A" +
		"\x02\x02\u1AA6\u1AA8\x05\u053C\u029F\x02\u1AA7\u1AA9\x05\u02E8\u0175\x02" +
		"\u1AA8\u1AA7\x03\x02\x02\x02\u1AA8\u1AA9\x03\x02\x02\x02\u1AA9\u1AAA\x03" +
		"\x02\x02\x02\u1AAA\u1AAB\x07\u01D0\x02\x02\u1AAB\u1AAC\x07R\x02\x02\u1AAC" +
		"\u1AAD\x07\xCE\x02\x02\u1AAD\u1AAE\x05\u0540\u02A1\x02\u1AAE\u1ABB\x03" +
		"\x02\x02\x02\u1AAF\u1AB0\x07\x8C\x02\x02\u1AB0\u1AB1\x07\xE4\x02\x02\u1AB1" +
		"\u1AB3\x05\u053C\u029F\x02\u1AB2\u1AB4\x05\u02E8\u0175\x02\u1AB3\u1AB2" +
		"\x03\x02\x02\x02\u1AB3\u1AB4\x03\x02\x02\x02\u1AB4\u1AB5\x03\x02\x02\x02" +
		"\u1AB5\u1AB6\x07\u01D0\x02\x02\u1AB6\u1AB7\x07R\x02\x02\u1AB7\u1AB8\x07" +
		"\xCE\x02\x02\u1AB8\u1AB9\x05\u0540\u02A1\x02\u1AB9\u1ABB\x03\x02\x02\x02" +
		"\u1ABA\u1A75\x03\x02\x02\x02\u1ABA\u1A80\x03\x02\x02\x02\u1ABA\u1A8B\x03" +
		"\x02\x02\x02\u1ABA\u1A96\x03\x02\x02\x02\u1ABA\u1AA3\x03\x02\x02\x02\u1ABA" +
		"\u1AAF\x03\x02\x02\x02\u1ABB\u02E7\x03\x02\x02\x02\u1ABC\u1ABD\x07\u010F" +
		"\x02\x02\u1ABD\u02E9\x03\x02\x02\x02\u1ABE\u1ABF\x07\x8C\x02\x02\u1ABF" +
		"\u1AC0\x07\x8A\x02\x02\u1AC0\u1AC1\x05\u0298\u014D\x02\u1AC1\u1AC2\x07" +
		"\u014F\x02\x02\u1AC2\u1AC3\x07\u0145\x02\x02\u1AC3\u1AC4\x05\u0540\u02A1" +
		"\x02\u1AC4\u1B98\x03\x02\x02\x02\u1AC5\u1AC6\x07\x8C\x02\x02\u1AC6\u1AC7" +
		"\x07n\x02\x02\u1AC7\u1AC8\x05\u0214\u010B\x02\u1AC8\u1AC9\x07\u014F\x02" +
		"\x02\u1AC9\u1ACA\x07\u0145\x02\x02\u1ACA\u1ACB\x05\u0540\u02A1\x02\u1ACB" +
		"\u1B98\x03\x02\x02\x02\u1ACC\u1ACD\x07\x8C\x02\x02\u1ACD\u1ACE\x07\xAA" +
		"\x02\x02\u1ACE\u1ACF\x05\u0214\u010B\x02\u1ACF\u1AD0\x07\u014F\x02\x02" +
		"\u1AD0\u1AD1\x07\u0145\x02\x02\u1AD1\u1AD2\x05\u0540\u02A1\x02\u1AD2\u1B98" +
		"\x03\x02\x02\x02\u1AD3\u1AD4\x07\x8C\x02\x02\u1AD4\u1AD5\x07\xBF\x02\x02" +
		"\u1AD5\u1AD6\x05\u0214\u010B\x02\u1AD6\u1AD7\x07\u014F\x02\x02\u1AD7\u1AD8" +
		"\x07\u0145\x02\x02\u1AD8\u1AD9\x05\u0540\u02A1\x02\u1AD9\u1B98\x03\x02" +
		"\x02\x02\u1ADA\u1ADB\x07\x8C\x02\x02\u1ADB\u1ADC\x07\xCE\x02\x02\u1ADC" +
		"\u1ADD\x05\u0540\u02A1\x02\u1ADD\u1ADE\x07\u014F\x02\x02\u1ADE\u1ADF\x07" +
		"\u0145\x02\x02\u1ADF\u1AE0\x05\u0540\u02A1\x02\u1AE0\u1B98\x03\x02\x02" +
		"\x02\u1AE1\u1AE2\x07\x8C\x02\x02\u1AE2\u1AE3\x07\xD5\x02\x02\u1AE3\u1AE4" +
		"\x05\u0280\u0141\x02\u1AE4\u1AE5\x07\u014F\x02\x02\u1AE5\u1AE6\x07\u0145" +
		"\x02\x02\u1AE6\u1AE7\x05\u0540\u02A1\x02\u1AE7\u1B98\x03\x02\x02\x02\u1AE8" +
		"\u1AE9\x07\x8C\x02\x02\u1AE9\u1AEA\x07\u0118\x02\x02\u1AEA\u1AEB\x05\u02BE" +
		"\u0160\x02\u1AEB\u1AEC\x07\u014F\x02\x02\u1AEC\u1AED\x07\u0145\x02\x02" +
		"\u1AED\u1AEE\x05\u0540\u02A1\x02\u1AEE\u1B98\x03\x02\x02\x02\u1AEF\u1AF0" +
		"\x07\x8C\x02\x02\u1AF0\u1AF1\x07\u0118\x02\x02\u1AF1\u1AF2\x07\x9E\x02" +
		"\x02\u1AF2\u1AF3\x05\u0214\u010B\x02\u1AF3\u1AF4\x07f\x02\x02\u1AF4\u1AF5" +
		"\x05\u0540\u02A1\x02\u1AF5\u1AF6\x07\u014F\x02\x02\u1AF6\u1AF7\x07\u0145" +
		"\x02\x02\u1AF7\u1AF8\x05\u0540\u02A1\x02\u1AF8\u1B98\x03\x02\x02\x02\u1AF9" +
		"\u1AFA\x07\x8C\x02\x02\u1AFA\u1AFB\x07\u0118\x02\x02\u1AFB\u1AFC\x07\xD0" +
		"\x02\x02\u1AFC\u1AFD\x05\u0214\u010B\x02\u1AFD\u1AFE\x07f\x02\x02\u1AFE" +
		"\u1AFF\x05\u0540\u02A1\x02\u1AFF\u1B00\x07\u014F\x02\x02\u1B00\u1B01\x07" +
		"\u0145\x02\x02\u1B01\u1B02\x05\u0540\u02A1\x02\u1B02\u1B98\x03\x02\x02" +
		"\x02\u1B03\u1B04\x07\x8C\x02\x02\u1B04\u1B05\x07\u012A\x02\x02\u1B05\u1B06" +
		"\x05\u0280\u0141\x02\u1B06\u1B07\x07\u014F\x02\x02\u1B07\u1B08\x07\u0145" +
		"\x02\x02\u1B08\u1B09\x05\u0540\u02A1\x02\u1B09\u1B98\x03\x02\x02\x02\u1B0A" +
		"\u1B0B\x07\x8C\x02\x02\u1B0B\u1B0C\x07\u01BC\x02\x02\u1B0C\u1B0D\x05\u0280" +
		"\u0141\x02\u1B0D\u1B0E\x07\u014F\x02\x02\u1B0E\u1B0F\x07\u0145\x02\x02" +
		"\u1B0F\u1B10\x05\u0540\u02A1\x02\u1B10\u1B98\x03\x02\x02\x02\u1B11\u1B12" +
		"\x07\x8C\x02\x02\u1B12\u1B13\x07^\x02\x02\u1B13\u1B14\x05\u0436\u021C" +
		"\x02\u1B14\u1B15\x07\u014F\x02\x02\u1B15\u1B16\x07\u0145\x02\x02\u1B16" +
		"\u1B17\x05\u0540\u02A1\x02\u1B17\u1B98\x03\x02\x02\x02\u1B18\u1B19\x07" +
		"\x8C\x02\x02\u1B19\u1B1A\x07^\x02\x02\u1B1A\u1B1B\x07\xDE\x02\x02\u1B1B" +
		"\u1B1C\x07\u018E\x02\x02\u1B1C\u1B1D\x05\u0436\u021C\x02\u1B1D\u1B1E\x07" +
		"\u014F\x02\x02\u1B1E\u1B1F\x07\u0145\x02\x02\u1B1F\u1B20\x05\u0540\u02A1" +
		"\x02\u1B20\u1B98\x03\x02\x02\x02\u1B21\u1B22\x07\x8C\x02\x02\u1B22\u1B23" +
		"\x07\u0158\x02\x02\u1B23\u1B24\x05\u0214\u010B\x02\u1B24\u1B25\x07\u014F" +
		"\x02\x02\u1B25\u1B26\x07\u0145\x02\x02\u1B26\u1B27\x05\u0540\u02A1\x02" +
		"\u1B27\u1B98\x03\x02\x02\x02\u1B28\u1B29\x07\x8C\x02\x02\u1B29\u1B2A\x07" +
		"\u0165\x02\x02\u1B2A\u1B2B\x07\u0147\x02\x02\u1B2B\u1B2C\x07\u011D\x02" +
		"\x02\u1B2C\u1B2D\x05\u0214\u010B\x02\u1B2D\u1B2E\x07\u014F\x02\x02\u1B2E" +
		"\u1B2F\x07\u0145\x02\x02\u1B2F\u1B30\x05\u0540\u02A1\x02\u1B30\u1B98\x03" +
		"\x02\x02\x02\u1B31\u1B32\x07\x8C\x02\x02\u1B32\u1B33\x07\u0165\x02\x02" +
		"\u1B33\u1B34\x07\u0147\x02\x02\u1B34\u1B35\x07\xBB\x02\x02\u1B35\u1B36" +
		"\x05\u0214\u010B\x02\u1B36\u1B37\x07\u014F\x02\x02\u1B37\u1B38\x07\u0145" +
		"\x02\x02\u1B38\u1B39\x05\u0540\u02A1\x02\u1B39\u1B98\x03\x02\x02\x02\u1B3A" +
		"\u1B3B\x07\x8C\x02\x02\u1B3B\u1B3C\x07\u0165\x02\x02\u1B3C\u1B3D\x07\u0147" +
		"\x02\x02\u1B3D\u1B3E\x07\u0163\x02\x02\u1B3E\u1B3F\x05\u0214\u010B\x02" +
		"\u1B3F\u1B40\x07\u014F\x02\x02\u1B40\u1B41\x07\u0145\x02\x02\u1B41\u1B42" +
		"\x05\u0540\u02A1\x02\u1B42\u1B98\x03\x02\x02\x02\u1B43\u1B44\x07\x8C\x02" +
		"\x02\u1B44\u1B45\x07\u0165\x02\x02\u1B45\u1B46\x07\u0147\x02\x02\u1B46" +
		"\u1B47\x07\xA5\x02\x02\u1B47\u1B48\x05\u0214\u010B\x02\u1B48\u1B49\x07" +
		"\u014F\x02\x02\u1B49\u1B4A\x07\u0145\x02\x02\u1B4A\u1B4B\x05\u0540\u02A1" +
		"\x02\u1B4B\u1B98\x03\x02\x02\x02\u1B4C\u1B4D\x07\x8C\x02\x02\u1B4D\u1B4E" +
		"\x07\u014A\x02\x02\u1B4E\u1B4F\x05\u053C\u029F\x02\u1B4F\u1B50\x07\u014F" +
		"\x02\x02\u1B50\u1B51\x07\u0145\x02\x02\u1B51\u1B52\x05\u0540\u02A1\x02" +
		"\u1B52\u1B98\x03\x02\x02\x02\u1B53\u1B54\x07\x8C\x02\x02\u1B54\u1B55\x07" +
		"\u014A\x02\x02\u1B55\u1B56\x07\xDE\x02\x02\u1B56\u1B57\x07\u018E\x02\x02" +
		"\u1B57\u1B58\x05\u053C\u029F\x02\u1B58\u1B59\x07\u014F\x02\x02\u1B59\u1B5A" +
		"\x07\u0145\x02\x02\u1B5A\u1B5B\x05\u0540\u02A1\x02\u1B5B\u1B98\x03\x02" +
		"\x02\x02\u1B5C\u1B5D\x07\x8C\x02\x02\u1B5D\u1B5E\x07\u017A\x02\x02\u1B5E" +
		"\u1B5F\x05\u053C\u029F\x02\u1B5F\u1B60\x07\u014F\x02\x02\u1B60\u1B61\x07" +
		"\u0145\x02\x02\u1B61\u1B62\x05\u0540\u02A1\x02\u1B62\u1B98\x03\x02\x02" +
		"\x02\u1B63\u1B64\x07\x8C\x02\x02\u1B64\u1B65\x07\u017A\x02\x02\u1B65\u1B66" +
		"\x07\xDE\x02\x02\u1B66\u1B67\x07\u018E\x02\x02\u1B67\u1B68\x05\u053C\u029F" +
		"\x02\u1B68\u1B69\x07\u014F\x02\x02\u1B69\u1B6A\x07\u0145\x02\x02\u1B6A" +
		"\u1B6B\x05\u0540\u02A1\x02\u1B6B\u1B98\x03\x02\x02\x02\u1B6C\u1B6D\x07" +
		"\x8C\x02\x02\u1B6D\u1B6E\x07\u0105\x02\x02\u1B6E\u1B6F\x07\u017A\x02\x02" +
		"\u1B6F\u1B70\x05\u053C\u029F\x02\u1B70\u1B71\x07\u014F\x02\x02\u1B71\u1B72" +
		"\x07\u0145\x02\x02\u1B72\u1B73\x05\u0540\u02A1\x02\u1B73\u1B98\x03\x02" +
		"\x02\x02\u1B74\u1B75\x07\x8C\x02\x02\u1B75\u1B76\x07\u0105\x02\x02\u1B76" +
		"\u1B77\x07\u017A\x02\x02\u1B77\u1B78\x07\xDE\x02\x02\u1B78\u1B79\x07\u018E" +
		"\x02\x02\u1B79\u1B7A\x05\u053C\u029F\x02\u1B7A\u1B7B\x07\u014F\x02\x02" +
		"\u1B7B\u1B7C\x07\u0145\x02\x02\u1B7C\u1B7D\x05\u0540\u02A1\x02\u1B7D\u1B98" +
		"\x03\x02\x02\x02\u1B7E\u1B7F\x07\x8C\x02\x02\u1B7F\u1B80\x07A\x02\x02" +
		"\u1B80\u1B81\x07^\x02\x02\u1B81\u1B82\x05\u0436\u021C\x02\u1B82\u1B83" +
		"\x07\u014F\x02\x02\u1B83\u1B84\x07\u0145\x02\x02\u1B84\u1B85\x05\u0540" +
		"\u02A1\x02\u1B85\u1B98\x03\x02\x02\x02\u1B86\u1B87\x07\x8C\x02\x02\u1B87" +
		"\u1B88\x07A\x02\x02\u1B88\u1B89\x07^\x02\x02\u1B89\u1B8A\x07\xDE\x02\x02" +
		"\u1B8A\u1B8B\x07\u018E\x02\x02\u1B8B\u1B8C\x05\u0436\u021C\x02\u1B8C\u1B8D" +
		"\x07\u014F\x02\x02\u1B8D\u1B8E\x07\u0145\x02\x02\u1B8E\u1B8F\x05\u0540" +
		"\u02A1\x02\u1B8F\u1B98\x03\x02\x02\x02\u1B90\u1B91\x07\x8C\x02\x02\u1B91" +
		"\u1B92\x07\u016A\x02\x02\u1B92\u1B93\x05\u0214\u010B\x02\u1B93\u1B94\x07" +
		"\u014F\x02\x02\u1B94\u1B95\x07\u0145\x02\x02\u1B95\u1B96\x05\u0540\u02A1" +
		"\x02\u1B96\u1B98\x03\x02\x02\x02\u1B97\u1ABE\x03\x02\x02\x02\u1B97\u1AC5" +
		"\x03\x02\x02\x02\u1B97\u1ACC\x03\x02\x02\x02\u1B97\u1AD3\x03\x02\x02\x02" +
		"\u1B97\u1ADA\x03\x02\x02\x02\u1B97\u1AE1\x03\x02\x02\x02\u1B97\u1AE8\x03" +
		"\x02\x02\x02\u1B97\u1AEF\x03\x02\x02\x02\u1B97\u1AF9\x03\x02\x02\x02\u1B97" +
		"\u1B03\x03\x02\x02\x02\u1B97\u1B0A\x03\x02\x02\x02\u1B97\u1B11\x03\x02" +
		"\x02\x02\u1B97\u1B18\x03\x02\x02\x02\u1B97\u1B21\x03\x02\x02\x02\u1B97" +
		"\u1B28\x03\x02\x02\x02\u1B97\u1B31\x03\x02\x02\x02\u1B97\u1B3A\x03\x02" +
		"\x02\x02\u1B97\u1B43\x03\x02\x02\x02\u1B97\u1B4C\x03\x02\x02\x02\u1B97" +
		"\u1B53\x03\x02\x02\x02\u1B97\u1B5C\x03\x02\x02\x02\u1B97\u1B63\x03\x02" +
		"\x02\x02\u1B97\u1B6C\x03\x02\x02\x02\u1B97\u1B74\x03\x02\x02\x02\u1B97" +
		"\u1B7E\x03\x02\x02\x02\u1B97\u1B86\x03\x02\x02\x02\u1B97\u1B90\x03\x02" +
		"\x02\x02\u1B98\u02EB\x03\x02\x02\x02\u1B99\u1B9A\x07\x8C\x02\x02\u1B9A" +
		"\u1B9B\x07\u0118\x02\x02\u1B9B\u1B9C\x05\u02BE\u0160\x02\u1B9C\u1B9D\x07" +
		"\u014F\x02\x02\u1B9D\u1B9E\x07\x04\x02\x02\u1B9E\u1B9F\x05\u02EE\u0178" +
		"\x02\u1B9F\u1BA0\x07\x05\x02\x02\u1BA0\u02ED\x03\x02\x02\x02\u1BA1\u1BA6" +
		"\x05\u02F0\u0179\x02\u1BA2\u1BA3\x07\b\x02\x02\u1BA3\u1BA5\x05\u02F0\u0179" +
		"\x02\u1BA4\u1BA2\x03\x02\x02\x02\u1BA5\u1BA8\x03\x02\x02\x02\u1BA6\u1BA4" +
		"\x03\x02\x02\x02\u1BA6\u1BA7\x03\x02\x02\x02\u1BA7\u02EF\x03\x02\x02\x02" +
		"\u1BA8\u1BA6\x03\x02\x02\x02\u1BA9\u1BAA\x05\u0570\u02B9\x02\u1BAA\u1BAB" +
		"\x07\f\x02\x02\u1BAB\u1BAC\x07\u0199\x02\x02\u1BAC\u1BB2\x03\x02\x02\x02" +
		"\u1BAD\u1BAE\x05\u0570\u02B9\x02\u1BAE\u1BAF\x07\f\x02\x02\u1BAF\u1BB0" +
		"\x05\u02F2\u017A\x02\u1BB0\u1BB2\x03\x02\x02\x02\u1BB1\u1BA9\x03\x02\x02" +
		"\x02\u1BB1\u1BAD\x03\x02\x02\x02\u1BB2\u02F1\x03\x02\x02\x02\u1BB3\u1BB9" +
		"\x05\u028E\u0148\x02\u1BB4\u1BB9\x05\u057C\u02BF\x02\u1BB5\u1BB9\x05\u04FE" +
		"\u0280\x02\u1BB6\u1BB9\x05\u0128\x95\x02\u1BB7\u1BB9\x05\u0552\u02AA\x02" +
		"\u1BB8\u1BB3\x03\x02\x02\x02\u1BB8\u1BB4\x03\x02\x02\x02\u1BB8\u1BB5\x03" +
		"\x02\x02\x02\u1BB8\u1BB6\x03\x02\x02\x02\u1BB8\u1BB7\x03\x02\x02\x02\u1BB9" +
		"\u02F3\x03\x02\x02";
	private static readonly _serializedATNSegment14: string =
		"\x02\u1BBA\u1BBB\x07\x8C\x02\x02\u1BBB\u1BBC\x07\u016A\x02\x02\u1BBC\u1BBD" +
		"\x05\u0214\u010B\x02\u1BBD\u1BBE\x07\u014F\x02\x02\u1BBE\u1BBF\x07\x04" +
		"\x02\x02\u1BBF\u1BC0\x05\u02EE\u0178\x02\u1BC0\u1BC1\x07\x05\x02\x02\u1BC1" +
		"\u02F5\x03\x02\x02\x02\u1BC2\u1BC3\x07\x8C\x02\x02\u1BC3\u1BC4\x07\x8A" +
		"\x02\x02\u1BC4\u1BC5\x05\u0298\u014D\x02\u1BC5\u1BC6\x07\u011C\x02\x02" +
		"\u1BC6\u1BC7\x07`\x02\x02\u1BC7\u1BC8\x05\u055E\u02B0\x02\u1BC8\u1C7C" +
		"\x03\x02\x02\x02\u1BC9\u1BCA\x07\x8C\x02\x02\u1BCA\u1BCB\x07n\x02\x02" +
		"\u1BCB\u1BCC\x05\u0214\u010B\x02\u1BCC\u1BCD\x07\u011C\x02\x02\u1BCD\u1BCE" +
		"\x07`\x02\x02\u1BCE\u1BCF\x05\u055E\u02B0\x02\u1BCF\u1C7C\x03\x02\x02" +
		"\x02\u1BD0\u1BD1\x07\x8C\x02\x02\u1BD1\u1BD2\x07\xAA\x02\x02\u1BD2\u1BD3" +
		"\x05\u0214\u010B\x02\u1BD3\u1BD4\x07\u011C\x02\x02\u1BD4\u1BD5\x07`\x02" +
		"\x02\u1BD5\u1BD6\x05\u055E\u02B0\x02\u1BD6\u1C7C\x03\x02\x02\x02\u1BD7" +
		"\u1BD8\x07\x8C\x02\x02\u1BD8\u1BD9\x07\xB1\x02\x02\u1BD9\u1BDA\x05\u0540" +
		"\u02A1\x02\u1BDA\u1BDB\x07\u011C\x02\x02\u1BDB\u1BDC\x07`\x02\x02\u1BDC" +
		"\u1BDD\x05\u055E\u02B0\x02\u1BDD\u1C7C\x03\x02\x02\x02\u1BDE\u1BDF\x07" +
		"\x8C\x02\x02\u1BDF\u1BE0\x07\xBF\x02\x02\u1BE0\u1BE1\x05\u0214\u010B\x02" +
		"\u1BE1\u1BE2\x07\u011C\x02\x02\u1BE2\u1BE3\x07`\x02\x02\u1BE3\u1BE4\x05" +
		"\u055E\u02B0\x02\u1BE4\u1C7C\x03\x02\x02\x02\u1BE5\u1BE6\x07\x8C\x02\x02" +
		"\u1BE6\u1BE7\x07\xD5\x02\x02\u1BE7\u1BE8\x05\u0280\u0141\x02\u1BE8\u1BE9" +
		"\x07\u011C\x02\x02\u1BE9\u1BEA\x07`\x02\x02\u1BEA\u1BEB\x05\u055E\u02B0" +
		"\x02\u1BEB\u1C7C\x03\x02\x02\x02\u1BEC\u1BEE\x07\x8C\x02\x02\u1BED\u1BEF" +
		"\x05\u0138\x9D\x02\u1BEE\u1BED\x03\x02\x02\x02\u1BEE\u1BEF\x03\x02\x02" +
		"\x02\u1BEF\u1BF0\x03\x02\x02\x02\u1BF0\u1BF1\x07\xF9\x02\x02\u1BF1\u1BF2" +
		"\x05\u0540\u02A1\x02\u1BF2\u1BF3\x07\u011C\x02\x02\u1BF3\u1BF4\x07`\x02" +
		"\x02\u1BF4\u1BF5\x05\u055E\u02B0\x02\u1BF5\u1C7C\x03\x02\x02\x02\u1BF6" +
		"\u1BF7\x07\x8C\x02\x02\u1BF7\u1BF8\x07\xFA\x02\x02\u1BF8\u1BF9\x07\u0114" +
		"\x02\x02\u1BF9\u1BFA\x05\u0128\x95\x02\u1BFA\u1BFB\x07\u011C\x02\x02\u1BFB" +
		"\u1BFC\x07`\x02\x02\u1BFC\u1BFD\x05\u055E\u02B0\x02\u1BFD\u1C7C\x03\x02" +
		"\x02\x02\u1BFE\u1BFF\x07\x8C\x02\x02\u1BFF\u1C00\x07\u0118\x02\x02\u1C00" +
		"\u1C01\x05\u02BE\u0160\x02\u1C01\u1C02\x07\u011C\x02\x02\u1C02\u1C03\x07" +
		"`\x02\x02\u1C03\u1C04\x05\u055E\u02B0\x02\u1C04\u1C7C\x03\x02\x02\x02" +
		"\u1C05\u1C06\x07\x8C\x02\x02\u1C06\u1C07\x07\u0118\x02\x02\u1C07\u1C08" +
		"\x07\x9E\x02\x02\u1C08\u1C09\x05\u0214\u010B\x02\u1C09\u1C0A\x07f\x02" +
		"\x02\u1C0A\u1C0B\x05\u0540\u02A1\x02\u1C0B\u1C0C\x07\u011C\x02\x02\u1C0C" +
		"\u1C0D\x07`\x02\x02\u1C0D\u1C0E\x05\u055E\u02B0\x02\u1C0E\u1C7C\x03\x02" +
		"\x02\x02\u1C0F\u1C10\x07\x8C\x02\x02\u1C10\u1C11\x07\u0118\x02\x02\u1C11" +
		"\u1C12\x07\xD0\x02\x02\u1C12\u1C13\x05\u0214\u010B\x02\u1C13\u1C14\x07" +
		"f\x02\x02\u1C14\u1C15\x05\u0540\u02A1\x02\u1C15\u1C16\x07\u011C\x02\x02" +
		"\u1C16\u1C17\x07`\x02\x02\u1C17\u1C18\x05\u055E\u02B0\x02\u1C18\u1C7C" +
		"\x03\x02\x02\x02\u1C19\u1C1A\x07\x8C\x02\x02\u1C1A\u1C1B\x07\u012A\x02" +
		"\x02\u1C1B\u1C1C\x05\u0280\u0141\x02\u1C1C\u1C1D\x07\u011C\x02\x02\u1C1D" +
		"\u1C1E\x07`\x02\x02\u1C1E\u1C1F\x05\u055E\u02B0\x02\u1C1F\u1C7C\x03\x02" +
		"\x02\x02\u1C20\u1C21\x07\x8C\x02\x02\u1C21\u1C22\x07\u01BC\x02\x02\u1C22" +
		"\u1C23\x05\u0280\u0141\x02\u1C23\u1C24\x07\u011C\x02\x02\u1C24\u1C25\x07" +
		"`\x02\x02\u1C25\u1C26\x05\u055E\u02B0\x02\u1C26\u1C7C\x03\x02\x02\x02" +
		"\u1C27\u1C28\x07\x8C\x02\x02\u1C28\u1C29\x07\u0145\x02\x02\u1C29\u1C2A" +
		"\x05\u0540\u02A1\x02\u1C2A\u1C2B\x07\u011C\x02\x02\u1C2B\u1C2C\x07`\x02" +
		"\x02\u1C2C\u1C2D\x05\u055E\u02B0\x02\u1C2D\u1C7C\x03\x02\x02\x02\u1C2E" +
		"\u1C2F\x07\x8C\x02\x02\u1C2F\u1C30\x07\u016A\x02\x02\u1C30\u1C31\x05\u0214" +
		"\u010B\x02\u1C31\u1C32\x07\u011C\x02\x02\u1C32\u1C33\x07`\x02\x02\u1C33" +
		"\u1C34\x05\u055E\u02B0\x02\u1C34\u1C7C\x03\x02\x02\x02\u1C35\u1C36\x07" +
		"\x8C\x02\x02\u1C36\u1C37\x07\u0161\x02\x02\u1C37\u1C38\x05\u0540\u02A1" +
		"\x02\u1C38\u1C39\x07\u011C\x02\x02\u1C39\u1C3A\x07`\x02\x02\u1C3A\u1C3B" +
		"\x05\u055E\u02B0\x02\u1C3B\u1C7C\x03\x02\x02\x02\u1C3C\u1C3D\x07\x8C\x02" +
		"\x02\u1C3D\u1C3E\x07\u0158\x02\x02\u1C3E\u1C3F\x05\u0214\u010B\x02\u1C3F" +
		"\u1C40\x07\u011C\x02\x02\u1C40\u1C41\x07`\x02\x02\u1C41\u1C42\x05\u055E" +
		"\u02B0\x02\u1C42\u1C7C\x03\x02\x02\x02\u1C43\u1C44\x07\x8C\x02\x02\u1C44" +
		"\u1C45\x07\u0165\x02\x02\u1C45\u1C46\x07\u0147\x02\x02\u1C46\u1C47\x07" +
		"\xBB\x02\x02\u1C47\u1C48\x05\u0214\u010B\x02\u1C48\u1C49\x07\u011C\x02" +
		"\x02\u1C49\u1C4A\x07`\x02\x02\u1C4A\u1C4B\x05\u055E\u02B0\x02\u1C4B\u1C7C" +
		"\x03\x02\x02\x02\u1C4C\u1C4D\x07\x8C\x02\x02\u1C4D\u1C4E\x07\u0165\x02" +
		"\x02\u1C4E\u1C4F\x07\u0147\x02\x02\u1C4F\u1C50\x07\xA5\x02\x02\u1C50\u1C51" +
		"\x05\u0214\u010B\x02\u1C51\u1C52\x07\u011C\x02\x02\u1C52\u1C53\x07`\x02" +
		"\x02\u1C53\u1C54\x05\u055E\u02B0\x02\u1C54\u1C7C\x03\x02\x02\x02\u1C55" +
		"\u1C56\x07\x8C\x02\x02\u1C56\u1C57\x07A\x02\x02\u1C57\u1C58\x07\xB0\x02" +
		"\x02\u1C58\u1C59\x07\u017F\x02\x02\u1C59\u1C5A\x05\u0540\u02A1\x02\u1C5A" +
		"\u1C5B\x07\u011C\x02\x02\u1C5B\u1C5C\x07`\x02\x02\u1C5C\u1C5D\x05\u055E" +
		"\u02B0\x02\u1C5D\u1C7C\x03\x02\x02\x02\u1C5E\u1C5F\x07\x8C\x02\x02\u1C5F" +
		"\u1C60\x07\u014D\x02\x02\u1C60\u1C61\x05\u0540\u02A1\x02\u1C61\u1C62\x07" +
		"\u011C\x02\x02\u1C62\u1C63\x07`\x02\x02\u1C63\u1C64\x05\u055E\u02B0\x02" +
		"\u1C64\u1C7C\x03\x02\x02\x02\u1C65\u1C66\x07\x8C\x02\x02\u1C66\u1C67\x07" +
		"\xC8\x02\x02\u1C67\u1C68\x07\u0167\x02\x02\u1C68\u1C69\x05\u0540\u02A1" +
		"\x02\u1C69\u1C6A\x07\u011C\x02\x02\u1C6A\u1C6B\x07`\x02\x02\u1C6B\u1C6C" +
		"\x05\u055E\u02B0\x02\u1C6C\u1C7C\x03\x02\x02\x02\u1C6D\u1C6E\x07\x8C\x02" +
		"\x02\u1C6E\u1C6F\x07\u01C6\x02\x02\u1C6F\u1C70\x05\u0540\u02A1\x02\u1C70" +
		"\u1C71\x07\u011C\x02\x02\u1C71\u1C72\x07`\x02\x02\u1C72\u1C73\x05\u055E" +
		"\u02B0\x02\u1C73\u1C7C\x03\x02\x02\x02\u1C74\u1C75\x07\x8C\x02\x02\u1C75" +
		"\u1C76\x07\u01C5\x02\x02\u1C76\u1C77\x05\u0540\u02A1\x02\u1C77\u1C78\x07" +
		"\u011C\x02\x02\u1C78\u1C79\x07`\x02\x02\u1C79\u1C7A\x05\u055E\u02B0\x02" +
		"\u1C7A\u1C7C\x03\x02\x02\x02\u1C7B\u1BC2\x03\x02\x02\x02\u1C7B\u1BC9\x03" +
		"\x02\x02\x02\u1C7B\u1BD0\x03\x02\x02\x02\u1C7B\u1BD7\x03\x02\x02\x02\u1C7B" +
		"\u1BDE\x03\x02\x02\x02\u1C7B\u1BE5\x03\x02\x02\x02\u1C7B\u1BEC\x03\x02" +
		"\x02\x02\u1C7B\u1BF6\x03\x02\x02\x02\u1C7B\u1BFE\x03\x02\x02\x02\u1C7B" +
		"\u1C05\x03\x02\x02\x02\u1C7B\u1C0F\x03\x02\x02\x02\u1C7B\u1C19\x03\x02" +
		"\x02\x02\u1C7B\u1C20\x03\x02\x02\x02\u1C7B\u1C27\x03\x02\x02\x02\u1C7B" +
		"\u1C2E\x03\x02\x02\x02\u1C7B\u1C35\x03\x02\x02\x02\u1C7B\u1C3C\x03\x02" +
		"\x02\x02\u1C7B\u1C43\x03\x02\x02\x02\u1C7B\u1C4C\x03\x02\x02\x02\u1C7B" +
		"\u1C55\x03\x02\x02\x02\u1C7B\u1C5E\x03\x02\x02\x02\u1C7B\u1C65\x03\x02" +
		"\x02\x02\u1C7B\u1C6D\x03\x02\x02\x02\u1C7B\u1C74\x03\x02\x02\x02\u1C7C" +
		"\u02F7\x03\x02\x02\x02\u1C7D\u1C7E\x070\x02\x02\u1C7E\u1C7F\x07\u01C6" +
		"\x02\x02\u1C7F\u1C81\x05\u0540\u02A1\x02\u1C80\u1C82\x05\u02FA\u017E\x02" +
		"\u1C81\u1C80\x03\x02\x02\x02\u1C81\u1C82\x03\x02\x02\x02\u1C82\u1C84\x03" +
		"\x02\x02\x02\u1C83\u1C85\x05\u02A6\u0154\x02\u1C84\u1C83\x03\x02\x02\x02" +
		"\u1C84\u1C85\x03\x02\x02\x02\u1C85\u02F9\x03\x02\x02\x02\u1C86\u1C87\x05" +
		"\u02FC\u017F\x02\u1C87\u02FB\x03\x02\x02\x02\u1C88\u1C89\x07@\x02\x02" +
		"\u1C89\u1C8A\x07^\x02\x02\u1C8A\u1C8F\x05\u0438\u021D\x02\u1C8B\u1C8C" +
		"\x07@\x02\x02\u1C8C\u1C8D\x07 \x02\x02\u1C8D\u1C8F\x07\u0160\x02\x02\u1C8E" +
		"\u1C88\x03\x02\x02\x02\u1C8E\u1C8B\x03\x02\x02\x02\u1C8F\u02FD\x03\x02" +
		"\x02\x02\u1C90\u1C91\x07\x8C\x02\x02\u1C91\u1C92\x07\u01C6\x02\x02\u1C92" +
		"\u1C93\x05\u0540\u02A1\x02\u1C93\u1C94\x07\u014F\x02\x02\u1C94\u1C95\x05" +
		"\u01D4\xEB\x02\u1C95\u1CAC\x03\x02\x02\x02\u1C96\u1C97\x07\x8C\x02\x02" +
		"\u1C97\u1C98\x07\u01C6\x02\x02\u1C98\u1C99\x05\u0540\u02A1\x02\u1C99\u1C9A" +
		"\x07\x87\x02\x02\u1C9A\u1C9B\x07^\x02\x02\u1C9B\u1C9C\x05\u0438\u021D" +
		"\x02\u1C9C\u1CAC\x03\x02\x02\x02\u1C9D\u1C9E\x07\x8C\x02\x02\u1C9E\u1C9F" +
		"\x07\u01C6\x02\x02\u1C9F\u1CA0\x05\u0540\u02A1\x02\u1CA0\u1CA1\x07\u014F" +
		"\x02\x02\u1CA1\u1CA2\x07^\x02\x02\u1CA2\u1CA3\x05\u0438\u021D\x02\u1CA3" +
		"\u1CAC\x03\x02\x02\x02\u1CA4\u1CA5\x07\x8C\x02\x02\u1CA5\u1CA6\x07\u01C6" +
		"\x02\x02\u1CA6\u1CA7\x05\u0540\u02A1\x02\u1CA7\u1CA8\x07\xC1\x02\x02\u1CA8" +
		"\u1CA9\x07^\x02\x02\u1CA9\u1CAA\x05\u0438\u021D\x02\u1CAA\u1CAC\x03\x02" +
		"\x02\x02\u1CAB\u1C90\x03\x02\x02\x02\u1CAB\u1C96\x03\x02\x02\x02\u1CAB" +
		"\u1C9D\x03\x02\x02\x02\u1CAB\u1CA4\x03\x02\x02\x02\u1CAC\u02FF\x03\x02" +
		"\x02\x02\u1CAD\u1CAE\x070\x02\x02\u1CAE\u1CAF\x07\u01C5\x02\x02\u1CAF" +
		"\u1CB0\x05\u0540\u02A1\x02\u1CB0\u1CB1\x07\xA6\x02\x02\u1CB1\u1CB2\x05" +
		"\u0552\u02AA\x02\u1CB2\u1CB3\x07\u01C6\x02\x02\u1CB3\u1CB5\x05\u0302\u0182" +
		"\x02\u1CB4\u1CB6\x05\u02A6\u0154\x02\u1CB5\u1CB4\x03\x02\x02\x02\u1CB5" +
		"\u1CB6\x03\x02\x02\x02\u1CB6\u0301\x03\x02\x02\x02\u1CB7\u1CBC\x05\u0304" +
		"\u0183\x02\u1CB8\u1CB9\x07\b\x02\x02\u1CB9\u1CBB\x05\u0304\u0183\x02\u1CBA" +
		"\u1CB8\x03\x02\x02\x02\u1CBB\u1CBE\x03\x02\x02\x02\u1CBC\u1CBA\x03\x02" +
		"\x02\x02\u1CBC\u1CBD\x03\x02\x02\x02\u1CBD\u0303\x03\x02\x02\x02\u1CBE" +
		"\u1CBC\x03\x02\x02\x02\u1CBF\u1CC0\x05\u0570\u02B9\x02\u1CC0\u0305\x03" +
		"\x02\x02\x02\u1CC1\u1CC2\x07\x8C\x02\x02\u1CC2\u1CC3\x07\u01C5\x02\x02" +
		"\u1CC3\u1CC4\x05\u0540\u02A1\x02\u1CC4\u1CC5\x07\u014F\x02\x02\u1CC5\u1CC6" +
		"\x05\u01D4\xEB\x02\u1CC6\u1CE9\x03\x02\x02\x02\u1CC7\u1CC8\x07\x8C\x02" +
		"\x02\u1CC8\u1CC9\x07\u01C5\x02\x02\u1CC9\u1CCA\x05\u0540\u02A1\x02\u1CCA" +
		"\u1CCB\x07\xA6\x02\x02\u1CCB\u1CCC\x05\u0552\u02AA\x02\u1CCC\u1CE9\x03" +
		"\x02\x02\x02\u1CCD\u1CCE\x07\x8C\x02\x02\u1CCE\u1CCF\x07\u01C5\x02\x02" +
		"\u1CCF\u1CD0\x05\u0540\u02A1\x02\u1CD0\u1CD1\x07\u0133\x02\x02\u1CD1\u1CD3" +
		"\x07\u01C6\x02\x02\u1CD2\u1CD4\x05\u02A6\u0154\x02\u1CD3\u1CD2\x03\x02" +
		"\x02\x02\u1CD3\u1CD4\x03\x02\x02\x02\u1CD4\u1CE9\x03\x02\x02\x02\u1CD5" +
		"\u1CD6\x07\x8C\x02\x02\u1CD6\u1CD7\x07\u01C5\x02\x02\u1CD7\u1CD8\x05\u0540" +
		"\u02A1\x02\u1CD8\u1CD9\x07\u014F\x02\x02\u1CD9\u1CDA\x07\u01C6\x02\x02" +
		"\u1CDA\u1CDC\x05\u0302\u0182\x02\u1CDB\u1CDD\x05\u02A6\u0154\x02\u1CDC" +
		"\u1CDB\x03\x02\x02\x02\u1CDC\u1CDD\x03\x02\x02\x02\u1CDD\u1CE9\x03\x02" +
		"\x02\x02\u1CDE\u1CDF\x07\x8C\x02\x02\u1CDF\u1CE0\x07\u01C5\x02\x02\u1CE0" +
		"\u1CE1\x05\u0540\u02A1\x02\u1CE1\u1CE2\x07\xC3\x02\x02\u1CE2\u1CE9\x03" +
		"\x02\x02\x02\u1CE3\u1CE4\x07\x8C\x02\x02\u1CE4\u1CE5\x07\u01C5\x02\x02" +
		"\u1CE5\u1CE6\x05\u0540\u02A1\x02\u1CE6\u1CE7\x07\xBC\x02\x02\u1CE7\u1CE9" +
		"\x03\x02\x02\x02\u1CE8\u1CC1\x03\x02\x02\x02\u1CE8\u1CC7\x03\x02\x02\x02" +
		"\u1CE8\u1CCD\x03\x02\x02\x02\u1CE8\u1CD5\x03\x02\x02\x02\u1CE8\u1CDE\x03" +
		"\x02\x02\x02\u1CE8\u1CE3\x03\x02\x02\x02\u1CE9\u0307\x03\x02\x02\x02\u1CEA" +
		"\u1CEB\x07\xC1\x02\x02\u1CEB\u1CEC\x07\u01C5\x02\x02\u1CEC\u1CEE\x05\u0540" +
		"\u02A1\x02\u1CED\u1CEF\x05l7\x02\u1CEE\u1CED\x03\x02\x02\x02\u1CEE\u1CEF" +
		"\x03\x02\x02\x02\u1CEF\u1CF9\x03\x02\x02\x02\u1CF0\u1CF1\x07\xC1\x02\x02" +
		"\u1CF1\u1CF2\x07\u01C5\x02\x02\u1CF2\u1CF3\x07\xDE\x02\x02\u1CF3\u1CF4" +
		"\x07\u018E\x02\x02\u1CF4\u1CF6\x05\u0540\u02A1\x02\u1CF5\u1CF7\x05l7\x02" +
		"\u1CF6\u1CF5\x03\x02\x02\x02\u1CF6\u1CF7\x03\x02\x02\x02\u1CF7\u1CF9\x03" +
		"\x02\x02\x02\u1CF8\u1CEA\x03\x02\x02\x02\u1CF8\u1CF0\x03\x02\x02\x02\u1CF9" +
		"\u0309\x03\x02\x02\x02\u1CFA\u1CFC\x070\x02\x02\u1CFB\u1CFD\x05\u0278" +
		"\u013D\x02\u1CFC\u1CFB\x03\x02\x02\x02\u1CFC\u1CFD\x03\x02\x02\x02\u1CFD" +
		"\u1CFE\x03\x02\x02\x02\u1CFE\u1CFF\x07\u0143\x02\x02\u1CFF\u1D00\x05\u0540" +
		"\u02A1\x02\u1D00\u1D01\x07&\x02\x02\u1D01\u1D02\x07R\x02\x02\u1D02\u1D03" +
		"\x05\u0314\u018B\x02\u1D03\u1D04\x07`\x02\x02\u1D04\u1D06\x05\u053C\u029F" +
		"\x02\u1D05\u1D07\x05\u044A\u0226\x02\u1D06\u1D05\x03\x02\x02\x02\u1D06" +
		"\u1D07\x03\x02\x02\x02\u1D07\u1D08\x03\x02\x02\x02\u1D08\u1D0A\x07;\x02" +
		"\x02\u1D09\u1D0B\x05\u0316\u018C\x02\u1D0A\u1D09\x03\x02\x02\x02\u1D0A" +
		"\u1D0B\x03\x02\x02\x02\u1D0B\u1D0C\x03\x02\x02\x02\u1D0C\u1D0D\x05\u030C" +
		"\u0187\x02\u1D0D\u030B\x03\x02\x02\x02\u1D0E\u1D15\x07\u0110\x02\x02\u1D0F" +
		"\u1D15\x05\u0310\u0189\x02\u1D10\u1D11\x07\x04\x02\x02\u1D11\u1D12\x05" +
		"\u030E\u0188\x02\u1D12\u1D13\x07\x05\x02\x02\u1D13\u1D15\x03\x02\x02\x02" +
		"\u1D14\u1D0E\x03\x02\x02\x02\u1D14\u1D0F\x03\x02\x02\x02\u1D14\u1D10\x03" +
		"\x02\x02\x02\u1D15\u030D\x03\x02\x02\x02\u1D16\u1D18\x05\u0312\u018A\x02" +
		"\u1D17\u1D16\x03\x02\x02\x02\u1D17\u1D18\x03\x02\x02\x02\u1D18\u1D1F\x03" +
		"\x02\x02\x02\u1D19\u1D1B\x07\t\x02\x02\u1D1A\u1D1C\x05\u0312\u018A\x02" +
		"\u1D1B\u1D1A\x03\x02\x02\x02\u1D1B\u1D1C\x03\x02\x02\x02\u1D1C\u1D1E\x03" +
		"\x02\x02\x02\u1D1D\u1D19\x03\x02\x02\x02\u1D1E\u1D21\x03\x02\x02\x02\u1D1F" +
		"\u1D1D\x03\x02\x02\x02\u1D1F\u1D20\x03\x02\x02\x02\u1D20\u030F\x03\x02" +
		"\x02\x02\u1D21\u1D1F\x03\x02\x02\x02\u1D22\u1D28\x05\u03C6\u01E4\x02\u1D23" +
		"\u1D28\x05\u0394\u01CB\x02\u1D24\u1D28\x05\u03B4\u01DB\x02\u1D25\u1D28" +
		"\x05\u03A6\u01D4\x02\u1D26\u1D28\x05\u0318\u018D\x02\u1D27\u1D22\x03\x02" +
		"\x02\x02\u1D27\u1D23\x03\x02\x02\x02\u1D27\u1D24\x03\x02\x02\x02\u1D27" +
		"\u1D25\x03\x02\x02\x02\u1D27\u1D26\x03\x02\x02\x02\u1D28\u0311\x03\x02" +
		"\x02\x02\u1D29\u1D2A\x05\u0310\u0189\x02\u1D2A\u0313\x03\x02\x02\x02\u1D2B" +
		"\u1D2C\t\'\x02\x02\u1D2C\u0315\x03\x02\x02\x02\u1D2D\u1D2E\t(\x02\x02" +
		"\u1D2E\u0317\x03\x02\x02\x02\u1D2F\u1D30\x07\u0111\x02\x02\u1D30\u1D32" +
		"\x05\u0562\u02B2\x02\u1D31\u1D33\x05\u031A\u018E\x02\u1D32\u1D31\x03\x02" +
		"\x02\x02\u1D32\u1D33\x03\x02\x02\x02\u1D33\u0319\x03\x02\x02\x02\u1D34" +
		"\u1D35\x07\b\x02\x02\u1D35\u1D36\x05\u0552\u02AA\x02\u1D36\u031B\x03\x02" +
		"\x02\x02\u1D37\u1D38\x07\xFE\x02\x02\u1D38\u1D39\x05\u0562\u02B2\x02\u1D39" +
		"\u031D\x03\x02\x02\x02\u1D3A\u1D3B\x07\u0170\x02\x02\u1D3B\u1D3F\x05\u0562" +
		"\u02B2\x02\u1D3C\u1D3D\x07\u0170\x02\x02\u1D3D\u1D3F\x07\v\x02\x02\u1D3E" +
		"\u1D3A\x03\x02\x02\x02\u1D3E\u1D3C\x03\x02\x02\x02\u1D3F\u031F\x03\x02" +
		"\x02\x02\u1D40\u1D42\x07\x83\x02\x02\u1D41\u1D43\x05\u0322\u0192\x02\u1D42" +
		"\u1D41\x03\x02\x02\x02\u1D42\u1D43\x03\x02\x02\x02\u1D43\u1D45\x03\x02" +
		"\x02\x02\u1D44\u1D46\x05\u032A\u0196\x02\u1D45\u1D44\x03\x02\x02\x02\u1D45" +
		"\u1D46\x03\x02\x02\x02\u1D46\u1D86\x03\x02\x02\x02\u1D47\u1D49\x07\x94" +
		"\x02\x02\u1D48\u1D4A\x05\u0322\u0192\x02\u1D49\u1D48\x03\x02\x02\x02\u1D49" +
		"\u1D4A\x03\x02\x02\x02\u1D4A\u1D4C\x03\x02\x02\x02\u1D4B\u1D4D\x05\u0328" +
		"\u0195\x02\u1D4C\u1D4B\x03\x02\x02\x02\u1D4C\u1D4D\x03\x02\x02\x02\u1D4D" +
		"\u1D86\x03\x02\x02\x02\u1D4E\u1D4F\x07\u0156\x02\x02\u1D4F\u1D51\x07\u0166" +
		"\x02\x02\u1D50\u1D52\x05\u0328\u0195\x02\u1D51\u1D50\x03\x02\x02\x02\u1D51" +
		"\u1D52\x03\x02\x02\x02\u1D52\u1D86\x03\x02\x02\x02\u1D53\u1D55\x07\xA3" +
		"\x02\x02\u1D54\u1D56\x05\u0322\u0192\x02\u1D55\u1D54\x03\x02\x02\x02\u1D55" +
		"\u1D56\x03\x02\x02\x02\u1D56\u1D58\x03\x02\x02\x02\u1D57\u1D59\x05\u032A" +
		"\u0196\x02\u1D58\u1D57\x03\x02\x02\x02\u1D58\u1D59\x03\x02\x02\x02\u1D59" +
		"\u1D86\x03\x02\x02\x02\u1D5A\u1D5C\x07\u01C8\x02\x02\u1D5B\u1D5D\x05\u0322" +
		"\u0192\x02\u1D5C\u1D5B\x03\x02\x02\x02\u1D5C\u1D5D\x03\x02\x02\x02\u1D5D" +
		"\u1D5F\x03\x02\x02\x02\u1D5E\u1D60\x05\u032A\u0196\x02\u1D5F\u1D5E\x03" +
		"\x02\x02\x02\u1D5F\u1D60\x03\x02\x02\x02\u1D60\u1D86\x03\x02\x02\x02\u1D61" +
		"\u1D63\x07\u0141\x02\x02\u1D62\u1D64\x05\u0322\u0192\x02\u1D63\u1D62\x03" +
		"\x02\x02\x02\u1D63\u1D64\x03\x02\x02\x02\u1D64\u1D66\x03\x02\x02\x02\u1D65" +
		"\u1D67\x05\u032A\u0196\x02\u1D66\u1D65\x03\x02\x02\x02\u1D66\u1D67\x03" +
		"\x02\x02\x02\u1D67\u1D86\x03\x02\x02\x02\u1D68\u1D69\x07\u0144\x02\x02" +
		"\u1D69\u1D86\x05\u0562\u02B2\x02\u1D6A\u1D6B\x07\u0136\x02\x02\u1D6B\u1D6C" +
		"\x07\u0144\x02\x02\u1D6C\u1D86\x05\u0562\u02B2\x02\u1D6D\u1D6E\x07\u0136" +
		"\x02\x02\u1D6E\u1D86\x05\u0562\u02B2\x02\u1D6F\u1D71\x07\u0141\x02\x02" +
		"\u1D70\u1D72\x05\u0322\u0192\x02\u1D71\u1D70\x03\x02\x02\x02\u1D71\u1D72" +
		"\x03\x02\x02\x02\u1D72\u1D73\x03\x02\x02\x02\u1D73\u1D74\x07`\x02\x02" +
		"\u1D74\u1D75\x07\u0144\x02\x02\u1D75\u1D86\x05\u0562\u02B2\x02\u1D76\u1D78" +
		"\x07\u0141\x02\x02\u1D77\u1D79\x05\u0322\u0192\x02\u1D78\u1D77\x03\x02" +
		"\x02\x02\u1D78\u1D79\x03\x02\x02\x02\u1D79\u1D7A\x03\x02\x02\x02\u1D7A" +
		"\u1D7B\x07`\x02\x02\u1D7B\u1D86\x05\u0562\u02B2\x02\u1D7C\u1D7D\x07\u0124" +
		"\x02\x02\u1D7D\u1D7E\x07\u0166\x02\x02\u1D7E\u1D86\x05\u0552\u02AA\x02" +
		"\u1D7F\u1D80\x07\xA3\x02\x02\u1D80\u1D81\x07\u0125\x02\x02\u1D81\u1D86" +
		"\x05\u0552\u02AA\x02\u1D82\u1D83\x07\u0141\x02\x02\u1D83\u1D84\x07\u0125" +
		"\x02\x02\u1D84\u1D86\x05\u0552\u02AA\x02\u1D85\u1D40\x03\x02\x02\x02\u1D85" +
		"\u1D47\x03\x02\x02\x02\u1D85\u1D4E\x03\x02\x02\x02\u1D85\u1D53\x03\x02" +
		"\x02\x02\u1D85\u1D5A\x03\x02\x02\x02\u1D85\u1D61\x03\x02\x02\x02\u1D85" +
		"\u1D68\x03\x02\x02\x02\u1D85\u1D6A\x03\x02\x02\x02\u1D85\u1D6D\x03\x02" +
		"\x02\x02\u1D85\u1D6F\x03\x02\x02\x02\u1D85\u1D76\x03\x02\x02\x02\u1D85" +
		"\u1D7C\x03\x02\x02\x02\u1D85\u1D7F\x03\x02\x02\x02\u1D85\u1D82\x03\x02" +
		"\x02\x02\u1D86\u0321\x03\x02\x02\x02\u1D87\u1D88\t)\x02\x02\u1D88\u0323" +
		"\x03\x02\x02\x02\u1D89\u1D8A\x07\xF6\x02\x02\u1D8A\u1D8B\x07\xFD\x02\x02" +
		"\u1D8B\u1D94\x05@!\x02\u1D8C\u1D8D\x07\u012E\x02\x02\u1D8D\u1D94\x07S" +
		"\x02\x02\u1D8E\u1D8F\x07\u012E\x02\x02\u1D8F\u1D94\x07\u0180\x02\x02\u1D90" +
		"\u1D94\x078\x02\x02\u1D91\u1D92\x07O\x02\x02\u1D92\u1D94\x078\x02\x02" +
		"\u1D93\u1D89\x03\x02\x02\x02\u1D93\u1D8C\x03\x02\x02\x02\u1D93\u1D8E\x03" +
		"\x02\x02\x02\u1D93\u1D90\x03\x02\x02\x02\u1D93\u1D91\x03\x02\x02\x02\u1D94" +
		"\u0325\x03\x02\x02\x02\u1D95\u1D9C\x05\u0324\u0193\x02\u1D96\u1D98\x07" +
		"\b\x02\x02\u1D97\u1D96\x03\x02\x02\x02\u1D97\u1D98\x03\x02\x02\x02\u1D98" +
		"\u1D99\x03\x02\x02\x02\u1D99\u1D9B\x05\u0324\u0193\x02\u1D9A\u1D97\x03" +
		"\x02\x02\x02\u1D9B\u1D9E\x03\x02\x02\x02\u1D9C\u1D9A\x03\x02\x02\x02\u1D9C" +
		"\u1D9D\x03\x02\x02\x02\u1D9D\u0327\x03\x02\x02\x02\u1D9E\u1D9C\x03\x02" +
		"\x02\x02\u1D9F\u1DA0\x05\u0326\u0194\x02\u1DA0\u0329\x03\x02\x02\x02\u1DA1" +
		"\u1DA3\x07#\x02\x02\u1DA2\u1DA4\x07\u010F\x02\x02\u1DA3\u1DA2\x03\x02" +
		"\x02\x02\u1DA3\u1DA4\x03\x02\x02\x02\u1DA4\u1DA5\x03\x02\x02\x02\u1DA5" +
		"\u1DA6\x07\x9B\x02\x02\u1DA6\u032B\x03\x02\x02\x02\u1DA7\u1DAA\x070\x02" +
		"\x02\u1DA8\u1DA9\x07T\x02\x02\u1DA9\u1DAB\x07\u0139\x02\x02\u1DAA\u1DA8" +
		"\x03\x02\x02\x02\u1DAA\u1DAB\x03\x02\x02\x02\u1DAB\u1DAD\x03\x02\x02\x02" +
		"\u1DAC\u1DAE\x05\xAEX\x02\u1DAD\u1DAC\x03\x02\x02\x02\u1DAD\u1DAE\x03" +
		"\x02\x02\x02\u1DAE\u1DC0\x03\x02\x02\x02\u1DAF\u1DB0\x07\u017A\x02\x02" +
		"\u1DB0\u1DB2\x05\u053C\u029F\x02\u1DB1\u1DB3\x05\xDAn\x02\u1DB2\u1DB1" +
		"\x03\x02\x02\x02\u1DB2\u1DB3\x03\x02\x02\x02\u1DB3\u1DB5\x03\x02\x02\x02" +
		"\u1DB4\u1DB6\x05v<\x02\u1DB5\u1DB4\x03\x02\x02\x02\u1DB5\u1DB6\x03\x02" +
		"\x02\x02\u1DB6\u1DC1\x03\x02\x02\x02\u1DB7\u1DB8\x07\u0131\x02\x02\u1DB8" +
		"\u1DB9\x07\u017A\x02\x02\u1DB9\u1DBA\x05\u053C\u029F\x02\u1DBA\u1DBB\x07" +
		"\x04\x02\x02\u1DBB\u1DBC\x05\xDCo\x02\u1DBC\u1DBE\x07\x05\x02\x02\u1DBD" +
		"\u1DBF\x05v<\x02\u1DBE\u1DBD\x03\x02\x02\x02\u1DBE\u1DBF\x03\x02\x02\x02" +
		"\u1DBF\u1DC1\x03\x02\x02\x02\u1DC0\u1DAF\x03\x02\x02\x02\u1DC0\u1DB7\x03" +
		"\x02\x02\x02\u1DC1\u1DC2\x03\x02\x02\x02\u1DC2\u1DC3\x07&\x02\x02\u1DC3" +
		"\u1DC5\x05\u03C6\u01E4\x02\u1DC4\u1DC6\x05\u032E\u0198\x02\u1DC5\u1DC4" +
		"\x03\x02\x02\x02\u1DC5\u1DC6\x03\x02\x02\x02\u1DC6\u032D\x03\x02\x02\x02" +
		"\u1DC7\u1DC9\x07k\x02\x02\u1DC8\u1DCA\t*\x02\x02\u1DC9\u1DC8\x03\x02\x02" +
		"\x02\u1DC9\u1DCA\x03\x02\x02\x02\u1DCA\u1DCB\x03\x02\x02\x02\u1DCB\u1DCC" +
		"\x07,\x02\x02\u1DCC\u1DCD\x07\u0119\x02\x02\u1DCD\u032F\x03\x02\x02\x02" +
		"\u1DCE\u1DCF\x07\xFF\x02\x02\u1DCF\u1DD0\x05\u0544\u02A3\x02\u1DD0\u0331" +
		"\x03\x02\x02\x02\u1DD1\u1DD2\x070\x02\x02\u1DD2\u1DD3\x07\xB1\x02\x02" +
		"\u1DD3\u1DD5\x05\u0540\u02A1\x02\u1DD4\u1DD6\x05\x10\t\x02\u1DD5\u1DD4" +
		"\x03\x02\x02\x02\u1DD5\u1DD6\x03\x02\x02\x02\u1DD6\u1DD8\x03\x02\x02\x02" +
		"\u1DD7\u1DD9\x05\u0334\u019B\x02\u1DD8\u1DD7\x03\x02\x02\x02\u1DD8\u1DD9" +
		"\x03\x02\x02\x02\u1DD9\u0333\x03\x02\x02\x02\u1DDA\u1DDB\x05\u0336\u019C" +
		"\x02\u1DDB\u0335\x03\x02\x02\x02\u1DDC\u1DDE\x05\u0338\u019D\x02\u1DDD" +
		"\u1DDC\x03\x02\x02\x02\u1DDE\u1DDF\x03\x02\x02\x02\u1DDF\u1DDD\x03\x02" +
		"\x02\x02\u1DDF\u1DE0\x03\x02\x02\x02\u1DE0\u0337\x03\x02\x02\x02\u1DE1" +
		"\u1DE3\x05\u033A\u019E\x02\u1DE2\u1DE4\x05\u033C\u019F\x02\u1DE3\u1DE2" +
		"\x03\x02\x02\x02\u1DE3\u1DE4\x03\x02\x02\x02\u1DE4\u1DE8\x03\x02\x02\x02" +
		"\u1DE5\u1DE9\x05\u0558\u02AD\x02\u1DE6\u1DE9\x05B\"\x02\u1DE7\u1DE9\x07" +
		"7\x02\x02\u1DE8\u1DE5\x03\x02\x02\x02\u1DE8\u1DE6\x03\x02\x02\x02\u1DE8" +
		"\u1DE7\x03\x02\x02\x02\u1DE9\u0339\x03\x02\x02\x02\u1DEA\u1DF3\x05\u0572" +
		"\u02BA\x02\u1DEB\u1DEC\x07\xA6\x02\x02\u1DEC\u1DF3\x07L\x02\x02\u1DED" +
		"\u1DF3\x07\xC4\x02\x02\u1DEE\u1DF3\x07\u0101\x02\x02\u1DEF\u1DF3\x07\u011C" +
		"\x02\x02\u1DF0\u1DF3\x07\u0161\x02\x02\u1DF1\u1DF3\x07\u0163\x02\x02\u1DF2" +
		"\u1DEA\x03\x02\x02\x02\u1DF2\u1DEB\x03\x02\x02\x02\u1DF2\u1DED\x03\x02" +
		"\x02\x02\u1DF2\u1DEE\x03\x02\x02\x02\u1DF2\u1DEF\x03\x02\x02\x02\u1DF2" +
		"\u1DF0\x03\x02\x02\x02\u1DF2\u1DF1\x03\x02\x02\x02\u1DF3\u033B\x03\x02" +
		"\x02\x02\u1DF4\u1DF5\x07\f\x02\x02\u1DF5\u033D\x03\x02\x02\x02\u1DF6\u1DF7" +
		"\x07\x8C\x02\x02\u1DF7\u1DF8\x07\xB1\x02\x02\u1DF8\u1E03\x05\u0540\u02A1" +
		"\x02\u1DF9\u1DFB\x07k\x02\x02\u1DFA\u1DFC\x05\u0334\u019B\x02\u1DFB\u1DFA" +
		"\x03\x02\x02\x02\u1DFB\u1DFC\x03\x02\x02\x02\u1DFC\u1E04\x03\x02\x02\x02" +
		"\u1DFD\u1DFF\x05\u0334\u019B\x02\u1DFE\u1DFD\x03\x02\x02\x02\u1DFE\u1DFF" +
		"\x03\x02\x02\x02\u1DFF\u1E04\x03\x02\x02\x02\u1E00\u1E01\x07\u014F\x02" +
		"\x02\u1E01\u1E02\x07\u0161\x02\x02\u1E02\u1E04\x05\u0540\u02A1\x02\u1E03" +
		"\u1DF9\x03\x02\x02\x02\u1E03\u1DFE\x03\x02\x02\x02\u1E03\u1E00\x03\x02" +
		"\x02\x02\u1E04\u033F\x03\x02\x02\x02\u1E05\u1E06\x07\x8C\x02\x02\u1E06" +
		"\u1E07\x07\xB1\x02\x02\u1E07\u1E08\x05\u0540\u02A1\x02\u1E08\u1E09\x05" +
		"P)\x02\u1E09\u0341\x03\x02\x02\x02\u1E0A\u1E0B\x07\xC1\x02\x02\u1E0B\u1E0E" +
		"\x07\xB1\x02\x02\u1E0C\u1E0D\x07\xDE\x02\x02\u1E0D\u1E0F\x07\u018E\x02" +
		"\x02\u1E0E\u1E0C\x03\x02\x02\x02\u1E0E\u1E0F\x03\x02\x02\x02\u1E0F\u1E10" +
		"\x03\x02\x02\x02\u1E10\u1E18\x05\u0540\u02A1\x02\u1E11\u1E13\x05\x10\t" +
		"\x02\u1E12\u1E11\x03\x02\x02\x02\u1E12\u1E13\x03\x02\x02\x02\u1E13\u1E14" +
		"\x03\x02\x02\x02\u1E14\u1E15\x07\x04\x02\x02\u1E15\u1E16\x05\u0344\u01A3" +
		"\x02\u1E16\u1E17\x07\x05\x02\x02\u1E17\u1E19\x03\x02\x02\x02\u1E18\u1E12" +
		"\x03\x02\x02\x02\u1E18\u1E19\x03\x02\x02\x02\u1E19\u0343\x03\x02\x02\x02" +
		"\u1E1A\u1E1F\x05\u0346\u01A4\x02\u1E1B\u1E1C\x07\b\x02\x02\u1E1C\u1E1E" +
		"\x05\u0346\u01A4\x02\u1E1D\u1E1B\x03\x02\x02\x02\u1E1E\u1E21\x03\x02\x02" +
		"\x02\u1E1F\u1E1D\x03\x02\x02\x02\u1E1F\u1E20\x03\x02\x02\x02\u1E20\u0345" +
		"\x03\x02\x02\x02\u1E21\u1E1F\x03\x02\x02\x02\u1E22\u1E23\x07\xD3\x02\x02" +
		"\u1E23\u0347\x03\x02\x02\x02\u1E24\u1E25\x07\x8C\x02\x02\u1E25\u1E26\x07" +
		"n\x02\x02\u1E26\u1E27\x05\u0214\u010B\x02\u1E27\u1E28\x07\u0133\x02\x02" +
		"\u1E28\u1E29\x07\u0179\x02\x02\u1E29\u0349\x03\x02\x02\x02\u1E2A\u1E2B" +
		"\x07\x8C\x02\x02\u1E2B\u1E2C\x07\u015F\x02\x02\u1E2C\u1E2D\t+\x02\x02" +
		"\u1E2D\u1E2E\x056\x1C\x02\u1E2E\u034B\x03\x02\x02\x02\u1E2F\u1E30\x07" +
		"0\x02\x02\u1E30\u1E31\x07\xBF\x02\x02\u1E31\u1E33\x05\u0214\u010B\x02" +
		"\u1E32\u1E34\x05\u0350\u01A9\x02\u1E33\u1E32\x03\x02\x02\x02\u1E33\u1E34" +
		"\x03\x02\x02\x02\u1E34\u1E35\x03\x02\x02\x02\u1E35\u1E36\x05\u0462\u0232" +
		"\x02\u1E36\u1E37\x05\xC2b\x02\u1E37\u034D\x03\x02\x02\x02\u1E38\u1E39" +
		"\x07\x8C\x02\x02\u1E39\u1E3A\x07\xBF\x02\x02\u1E3A\u1E51\x05\u0214\u010B" +
		"\x02\u1E3B\u1E52\x05j6\x02\u1E3C\u1E3D\x07\xC1\x02\x02\u1E3D\u1E3E\x07" +
		"O\x02\x02\u1E3E\u1E52\x07P\x02\x02\u1E3F\u1E40\x07\u014F\x02\x02\u1E40" +
		"\u1E41\x07O\x02\x02\u1E41\u1E52\x07P\x02\x02\u1E42\u1E43\x07\x87\x02\x02" +
		"\u1E43\u1E52\x05\xD4k\x02\u1E44\u1E45\x07\xC1\x02\x02\u1E45\u1E48\x07" +
		"/\x02\x02\u1E46\u1E47\x07\xDE\x02\x02\u1E47\u1E49\x07\u018E\x02\x02\u1E48" +
		"\u1E46\x03\x02\x02\x02\u1E48\u1E49\x03\x02\x02\x02\u1E49\u1E4A\x03\x02" +
		"\x02\x02\u1E4A\u1E4C\x05\u0540\u02A1\x02\u1E4B\u1E4D\x05l7\x02\u1E4C\u1E4B" +
		"\x03\x02\x02\x02\u1E4C\u1E4D\x03\x02\x02\x02\u1E4D\u1E52\x03\x02\x02\x02" +
		"\u1E4E\u1E4F\x07\u0176\x02\x02\u1E4F\u1E50\x07/\x02\x02\u1E50\u1E52\x05" +
		"\u0540\u02A1\x02\u1E51\u1E3B\x03\x02\x02\x02\u1E51\u1E3C\x03\x02\x02\x02" +
		"\u1E51\u1E3F\x03\x02\x02\x02\u1E51\u1E42\x03\x02\x02\x02\u1E51\u1E44\x03" +
		"\x02\x02\x02\u1E51\u1E4E\x03\x02\x02\x02\u1E52\u034F\x03\x02\x02\x02\u1E53" +
		"\u1E54\x07&\x02\x02\u1E54\u0351\x03\x02\x02\x02\u1E55\u1E56\x07\x8C\x02" +
		"\x02\u1E56\u1E57\x07\u0165\x02\x02\u1E57\u1E58\x07\u0147\x02\x02\u1E58" +
		"\u1E59\x07\xBB\x02\x02\u1E59\u1E5A\x05\u0214\u010B\x02\u1E5A\u1E5B\x05" +
		"\u01D4\xEB\x02\u1E5B\u0353\x03\x02\x02\x02\u1E5C\u1E5D\x07\x8C\x02\x02" +
		"\u1E5D\u1E5E\x07\u0165\x02\x02\u1E5E\u1E5F\x07\u0147\x02\x02\u1E5F\u1E60" +
		"\x07\xA5\x02\x02\u1E60\u1E61\x05\u0214\u010B\x02\u1E61\u1E62\x07\x87\x02" +
		"\x02\u1E62\u1E63\x07\u0103\x02\x02\u1E63\u1E64\x07@\x02\x02\u1E64\u1E65" +
		"\x05\u053E\u02A0\x02\u1E65\u1E66\x05\u0356\u01AC\x02\u1E66\u1E67\x05\u0212" +
		"\u010A\x02\u1E67\u1EA5\x03\x02\x02\x02\u1E68\u1E69\x07\x8C\x02\x02\u1E69" +
		"\u1E6A\x07\u0165\x02\x02\u1E6A\u1E6B\x07\u0147\x02\x02\u1E6B\u1E6C\x07" +
		"\xA5\x02\x02\u1E6C\u1E6D\x05\u0214\u010B\x02\u1E6D\u1E6E\x07\x8C\x02\x02" +
		"\u1E6E\u1E6F\x07\u0103\x02\x02\u1E6F\u1E70\x07@\x02\x02\u1E70\u1E71\x05" +
		"\u053E\u02A0\x02\u1E71\u1E72\x05\u0356\u01AC\x02\u1E72\u1E73\x05\u0212" +
		"\u010A\x02\u1E73\u1EA5\x03\x02\x02\x02\u1E74\u1E75\x07\x8C\x02\x02\u1E75" +
		"\u1E76\x07\u0165\x02\x02\u1E76\u1E77\x07\u0147\x02\x02\u1E77\u1E78\x07" +
		"\xA5\x02\x02\u1E78\u1E79\x05\u0214\u010B\x02\u1E79\u1E7A\x07\x8C\x02\x02" +
		"\u1E7A\u1E7B\x07\u0103\x02\x02\u1E7B\u1E7C\x07\u0139\x02\x02\u1E7C\u1E7D" +
		"\x05\u0214\u010B\x02\u1E7D\u1E7E\x05\u0356\u01AC\x02\u1E7E";
	private static readonly _serializedATNSegment15: string =
		"\u1E7F\x05\u0214\u010B\x02\u1E7F\u1EA5\x03\x02\x02\x02\u1E80\u1E81\x07" +
		"\x8C\x02\x02\u1E81\u1E82\x07\u0165\x02\x02\u1E82\u1E83\x07\u0147\x02\x02" +
		"\u1E83\u1E84\x07\xA5\x02\x02\u1E84\u1E85\x05\u0214\u010B\x02\u1E85\u1E86" +
		"\x07\x8C\x02\x02\u1E86\u1E87\x07\u0103\x02\x02\u1E87\u1E88\x07@\x02\x02" +
		"\u1E88\u1E89\x05\u053E\u02A0\x02\u1E89\u1E8A\x07\u0139\x02\x02\u1E8A\u1E8B" +
		"\x05\u0214\u010B\x02\u1E8B\u1E8C\x05\u0356\u01AC\x02\u1E8C\u1E8D\x05\u0214" +
		"\u010B\x02\u1E8D\u1EA5\x03\x02\x02\x02\u1E8E\u1E8F\x07\x8C\x02\x02\u1E8F" +
		"\u1E90\x07\u0165\x02\x02\u1E90\u1E91\x07\u0147\x02\x02\u1E91\u1E92\x07" +
		"\xA5\x02\x02\u1E92\u1E93\x05\u0214\u010B\x02\u1E93\u1E94\x07\xC1\x02\x02" +
		"\u1E94\u1E95\x07\u0103\x02\x02\u1E95\u1E96\x07@\x02\x02\u1E96\u1E97\x05" +
		"\u053E\u02A0\x02\u1E97\u1EA5\x03\x02\x02\x02\u1E98\u1E99\x07\x8C\x02\x02" +
		"\u1E99\u1E9A\x07\u0165\x02\x02\u1E9A\u1E9B\x07\u0147\x02\x02\u1E9B\u1E9C" +
		"\x07\xA5\x02\x02\u1E9C\u1E9D\x05\u0214\u010B\x02\u1E9D\u1E9E\x07\xC1\x02" +
		"\x02\u1E9E\u1E9F\x07\u0103\x02\x02\u1E9F\u1EA0\x07\xDE\x02\x02\u1EA0\u1EA1" +
		"\x07\u018E\x02\x02\u1EA1\u1EA2\x07@\x02\x02\u1EA2\u1EA3\x05\u053E\u02A0" +
		"\x02\u1EA3\u1EA5\x03\x02\x02\x02\u1EA4\u1E5C\x03\x02\x02\x02\u1EA4\u1E68" +
		"\x03\x02\x02\x02\u1EA4\u1E74\x03\x02\x02\x02\u1EA4\u1E80\x03\x02\x02\x02" +
		"\u1EA4\u1E8E\x03\x02\x02\x02\u1EA4\u1E98\x03\x02\x02\x02\u1EA5\u0355\x03" +
		"\x02\x02\x02\u1EA6\u1EA7\x07k\x02\x02\u1EA7\u0357\x03\x02\x02\x02\u1EA8" +
		"\u1EAA\x070\x02\x02\u1EA9\u1EAB\x05\u01F0\xF9\x02\u1EAA\u1EA9\x03\x02" +
		"\x02\x02\u1EAA\u1EAB\x03\x02\x02\x02\u1EAB\u1EAC\x03\x02\x02\x02\u1EAC" +
		"\u1EAD\x07\xAA\x02\x02\u1EAD\u1EAE\x05\u0214\u010B\x02\u1EAE\u1EAF\x07" +
		"@\x02\x02\u1EAF\u1EB0\x05\u0552\u02AA\x02\u1EB0\u1EB1\x07`\x02\x02\u1EB1" +
		"\u1EB2\x05\u0552\u02AA\x02\u1EB2\u1EB3\x07B\x02\x02\u1EB3\u1EB4\x05\u0214" +
		"\u010B\x02\u1EB4\u0359\x03\x02\x02\x02\u1EB5\u1EB7\x07\xA0\x02\x02\u1EB6" +
		"\u1EB8\x05\u036E\u01B8\x02\u1EB7\u1EB6\x03\x02\x02\x02\u1EB7\u1EB8\x03" +
		"\x02\x02\x02\u1EB8\u1EB9\x03\x02\x02\x02\u1EB9\u1EBB\x05\u053C\u029F\x02" +
		"\u1EBA\u1EBC\x05\u035C\u01AF\x02\u1EBB\u1EBA\x03\x02\x02\x02\u1EBB\u1EBC" +
		"\x03\x02\x02\x02\u1EBC\u1ECA\x03\x02\x02\x02\u1EBD\u1EBF\x07\xA0\x02\x02" +
		"\u1EBE\u1EC0\x05\u036E\u01B8\x02\u1EBF\u1EBE\x03\x02\x02\x02\u1EBF\u1EC0" +
		"\x03\x02\x02\x02\u1EC0\u1ECA\x03\x02\x02\x02\u1EC1\u1EC3\x07\xA0\x02\x02" +
		"\u1EC2\u1EC4\x05\u036E\u01B8\x02\u1EC3\u1EC2\x03\x02\x02\x02\u1EC3\u1EC4" +
		"\x03\x02\x02\x02\u1EC4\u1EC5\x03\x02\x02\x02\u1EC5\u1EC6\x05\u0540\u02A1" +
		"\x02\u1EC6\u1EC7\x07R\x02\x02\u1EC7\u1EC8\x05\u053C\u029F\x02\u1EC8\u1ECA" +
		"\x03\x02\x02\x02\u1EC9\u1EB5\x03\x02\x02\x02\u1EC9\u1EBD\x03\x02\x02\x02" +
		"\u1EC9\u1EC1\x03\x02\x02\x02\u1ECA\u035B\x03\x02\x02\x02\u1ECB\u1ECC\x07" +
		"f\x02\x02\u1ECC\u1ECD\x05\u0540\u02A1\x02\u1ECD\u035D\x03\x02\x02\x02" +
		"\u1ECE\u1ED0\x07\u0174\x02\x02\u1ECF\u1ED1\x05\u0370\u01B9\x02\u1ED0\u1ECF" +
		"\x03\x02\x02\x02\u1ED0\u1ED1\x03\x02\x02\x02\u1ED1\u1ED3\x03\x02\x02\x02" +
		"\u1ED2\u1ED4\x05\u0372\u01BA\x02\u1ED3\u1ED2\x03\x02\x02\x02\u1ED3\u1ED4" +
		"\x03\x02\x02\x02\u1ED4\u1ED6\x03\x02\x02\x02\u1ED5\u1ED7\x05\u036E\u01B8" +
		"\x02\u1ED6\u1ED5\x03\x02\x02\x02\u1ED6\u1ED7\x03\x02\x02\x02\u1ED7\u1ED9" +
		"\x03\x02\x02\x02\u1ED8\u1EDA\x05\u036C\u01B7\x02\u1ED9\u1ED8\x03\x02\x02" +
		"\x02\u1ED9\u1EDA\x03\x02\x02\x02\u1EDA\u1EDC\x03\x02\x02\x02\u1EDB\u1EDD" +
		"\x05\u037A\u01BE\x02\u1EDC\u1EDB\x03\x02\x02\x02\u1EDC\u1EDD\x03\x02\x02" +
		"\x02\u1EDD\u1EE6\x03\x02\x02\x02\u1EDE\u1EDF\x07\u0174\x02\x02\u1EDF\u1EE0" +
		"\x07\x04\x02\x02\u1EE0\u1EE1\x05\u0362\u01B2\x02\u1EE1\u1EE3\x07\x05\x02" +
		"\x02\u1EE2\u1EE4\x05\u037A\u01BE\x02\u1EE3\u1EE2\x03\x02\x02\x02\u1EE3" +
		"\u1EE4\x03\x02\x02\x02\u1EE4\u1EE6\x03\x02\x02\x02\u1EE5\u1ECE\x03\x02" +
		"\x02\x02\u1EE5\u1EDE\x03\x02\x02\x02\u1EE6\u035F\x03\x02\x02\x02\u1EE7" +
		"\u1EE9\x05\u0364\u01B3\x02\u1EE8\u1EEA\x05\u036E\u01B8\x02\u1EE9\u1EE8" +
		"\x03\x02\x02\x02\u1EE9\u1EEA\x03\x02\x02\x02\u1EEA\u1EEC\x03\x02\x02\x02" +
		"\u1EEB\u1EED\x05\u037A\u01BE\x02\u1EEC\u1EEB\x03\x02\x02\x02\u1EEC\u1EED" +
		"\x03\x02\x02\x02\u1EED\u1EF6\x03\x02\x02\x02\u1EEE\u1EEF\x05\u0364\u01B3" +
		"\x02\u1EEF\u1EF0\x07\x04\x02\x02\u1EF0\u1EF1\x05\u0362\u01B2\x02\u1EF1" +
		"\u1EF3\x07\x05\x02\x02\u1EF2\u1EF4\x05\u037A\u01BE\x02\u1EF3\u1EF2\x03" +
		"\x02\x02\x02\u1EF3\u1EF4\x03\x02\x02\x02\u1EF4\u1EF6\x03\x02\x02\x02\u1EF5" +
		"\u1EE7\x03\x02\x02\x02\u1EF5\u1EEE\x03\x02\x02\x02\u1EF6\u0361\x03\x02" +
		"\x02\x02\u1EF7\u1EFC\x05\u0366\u01B4\x02\u1EF8\u1EF9\x07\b\x02\x02\u1EF9" +
		"\u1EFB\x05\u0366\u01B4\x02\u1EFA\u1EF8\x03\x02\x02\x02\u1EFB\u1EFE\x03" +
		"\x02\x02\x02\u1EFC\u1EFA\x03\x02\x02\x02\u1EFC\u1EFD\x03\x02\x02\x02\u1EFD" +
		"\u0363\x03\x02\x02\x02\u1EFE\u1EFC\x03\x02\x02\x02\u1EFF\u1F00\t,\x02" +
		"\x02\u1F00\u0365\x03\x02\x02\x02\u1F01\u1F03\x05\u0368\u01B5\x02\u1F02" +
		"\u1F04\x05\u036A\u01B6\x02\u1F03\u1F02\x03\x02\x02\x02\u1F03\u1F04\x03" +
		"\x02\x02\x02\u1F04\u0367\x03\x02\x02\x02\u1F05\u1F08\x05\u056E\u02B8\x02" +
		"\u1F06\u1F08\x05\u0364\u01B3\x02\u1F07\u1F05\x03\x02\x02\x02\u1F07\u1F06" +
		"\x03\x02\x02\x02\u1F08\u0369\x03\x02\x02\x02\u1F09\u1F0C\x05B\"\x02\u1F0A" +
		"\u1F0C\x05\u0128\x95\x02\u1F0B\u1F09\x03\x02\x02\x02\u1F0B\u1F0A\x03\x02" +
		"\x02\x02\u1F0C\u036B\x03\x02\x02\x02\u1F0D\u1F0E\x05\u0364\u01B3\x02\u1F0E" +
		"\u036D\x03\x02\x02\x02\u1F0F\u1F10\x07\x82\x02\x02\u1F10\u036F\x03\x02" +
		"\x02\x02\u1F11\u1F12\x07s\x02\x02\u1F12\u0371\x03\x02\x02\x02\u1F13\u1F14" +
		"\x07r\x02\x02\u1F14\u0373\x03\x02\x02\x02\u1F15\u1F16\x07\x04\x02\x02" +
		"\u1F16\u1F17\x05\u053E\u02A0\x02\u1F17\u1F18\x07\x05\x02\x02\u1F18\u0375" +
		"\x03\x02\x02\x02\u1F19\u1F1B\x05\u053C\u029F\x02\u1F1A\u1F1C\x05\u0374" +
		"\u01BB\x02\u1F1B\u1F1A\x03\x02\x02\x02\u1F1B\u1F1C\x03\x02\x02\x02\u1F1C" +
		"\u0377\x03\x02\x02\x02\u1F1D\u1F22\x05\u0376\u01BC\x02\u1F1E\u1F1F\x07" +
		"\b\x02\x02\u1F1F\u1F21\x05\u0376\u01BC\x02\u1F20\u1F1E\x03\x02\x02\x02" +
		"\u1F21\u1F24\x03\x02\x02\x02\u1F22\u1F20\x03\x02\x02\x02\u1F22\u1F23\x03" +
		"\x02\x02\x02\u1F23\u0379\x03\x02\x02\x02\u1F24\u1F22\x03\x02\x02\x02\u1F25" +
		"\u1F26\x05\u0378\u01BD\x02\u1F26\u037B\x03\x02\x02\x02\u1F27\u1F28\x07" +
		"\xCD\x02\x02\u1F28\u1F3A\x05\u037E\u01C0\x02\u1F29\u1F2A\x07\xCD\x02\x02" +
		"\u1F2A\u1F2C\x05\u0364\u01B3\x02\u1F2B\u1F2D\x05\u036E\u01B8\x02\u1F2C" +
		"\u1F2B\x03\x02\x02\x02\u1F2C\u1F2D\x03\x02\x02\x02\u1F2D\u1F2E\x03\x02" +
		"\x02\x02\u1F2E\u1F2F\x05\u037E\u01C0\x02\u1F2F\u1F3A\x03\x02\x02\x02\u1F30" +
		"\u1F31\x07\xCD\x02\x02\u1F31\u1F32\x07\x82\x02\x02\u1F32\u1F3A\x05\u037E" +
		"\u01C0\x02\u1F33\u1F34\x07\xCD\x02\x02\u1F34\u1F35\x07\x04\x02\x02\u1F35" +
		"\u1F36\x05\u0380\u01C1\x02\u1F36\u1F37\x07\x05\x02\x02\u1F37\u1F38\x05" +
		"\u037E\u01C0\x02\u1F38\u1F3A\x03\x02\x02\x02\u1F39\u1F27\x03\x02\x02\x02" +
		"\u1F39\u1F29\x03\x02\x02\x02\u1F39\u1F30\x03\x02\x02\x02\u1F39\u1F33\x03" +
		"\x02\x02\x02\u1F3A\u037D\x03\x02\x02\x02\u1F3B\u1F45\x05\u03C6\u01E4\x02" +
		"\u1F3C\u1F45\x05\u0394\u01CB\x02\u1F3D\u1F45\x05\u03B4\u01DB\x02\u1F3E" +
		"\u1F45\x05\u03A6\u01D4\x02\u1F3F\u1F45\x05\u03BE\u01E0\x02\u1F40\u1F45" +
		"\x05\u010C\x87\x02\u1F41\u1F45\x05\u0112\x8A\x02\u1F42\u1F45\x05\u0118" +
		"\x8D\x02\u1F43\u1F45\x05\u038E\u01C8\x02\u1F44\u1F3B\x03\x02\x02\x02\u1F44" +
		"\u1F3C\x03\x02\x02\x02\u1F44\u1F3D\x03\x02\x02\x02\u1F44\u1F3E\x03\x02" +
		"\x02\x02\u1F44\u1F3F\x03\x02\x02\x02\u1F44\u1F40\x03\x02\x02\x02\u1F44" +
		"\u1F41\x03\x02\x02\x02\u1F44\u1F42\x03\x02\x02\x02\u1F44\u1F43\x03\x02" +
		"\x02\x02\u1F45\u037F\x03\x02\x02\x02\u1F46\u1F4B\x05\u0382\u01C2\x02\u1F47" +
		"\u1F48\x07\b\x02\x02\u1F48\u1F4A\x05\u0382\u01C2\x02\u1F49\u1F47\x03\x02" +
		"\x02\x02\u1F4A\u1F4D\x03\x02\x02\x02\u1F4B\u1F49\x03\x02\x02\x02\u1F4B" +
		"\u1F4C\x03\x02\x02\x02\u1F4C\u0381\x03\x02\x02\x02\u1F4D\u1F4B\x03\x02" +
		"\x02\x02\u1F4E\u1F50\x05\u0384\u01C3\x02\u1F4F\u1F51\x05\u0386\u01C4\x02" +
		"\u1F50\u1F4F\x03\x02\x02\x02\u1F50\u1F51\x03\x02\x02\x02\u1F51\u0383\x03" +
		"\x02\x02\x02\u1F52\u1F55\x05\u056E\u02B8\x02\u1F53\u1F55\x05\u0364\u01B3" +
		"\x02\u1F54\u1F52\x03\x02\x02\x02\u1F54\u1F53\x03\x02\x02\x02\u1F55\u0385" +
		"\x03\x02\x02\x02\u1F56\u1F59\x05B\"\x02\u1F57\u1F59\x05\u0128\x95\x02" +
		"\u1F58\u1F56\x03\x02\x02\x02\u1F58\u1F57\x03\x02\x02\x02\u1F59\u0387\x03" +
		"\x02\x02\x02\u1F5A\u1F5B\x07\u0124\x02\x02\u1F5B\u1F5D\x05\u0540\u02A1" +
		"\x02\u1F5C\u1F5E\x05\u038A\u01C6\x02\u1F5D\u1F5C\x03\x02\x02\x02\u1F5D" +
		"\u1F5E\x03\x02\x02\x02\u1F5E\u1F5F\x03\x02\x02\x02\u1F5F\u1F60\x07&\x02" +
		"\x02\u1F60\u1F61\x05\u038C\u01C7\x02\u1F61\u0389\x03\x02\x02\x02\u1F62" +
		"\u1F63\x07\x04\x02\x02\u1F63\u1F64\x05\u0508\u0285\x02\u1F64\u1F65\x07" +
		"\x05\x02\x02\u1F65\u038B\x03\x02\x02\x02\u1F66\u1F6B\x05\u03C6\u01E4\x02" +
		"\u1F67\u1F6B\x05\u0394\u01CB\x02\u1F68\u1F6B\x05\u03B4\u01DB\x02\u1F69" +
		"\u1F6B\x05\u03A6\u01D4\x02\u1F6A\u1F66\x03\x02\x02\x02\u1F6A\u1F67\x03" +
		"\x02\x02\x02\u1F6A\u1F68\x03\x02\x02\x02\u1F6A\u1F69\x03\x02\x02\x02\u1F6B" +
		"\u038D\x03\x02\x02\x02\u1F6C\u1F6D\x07\xCC\x02\x02\u1F6D\u1F6F\x05\u0540" +
		"\u02A1\x02\u1F6E\u1F70\x05\u0390\u01C9\x02\u1F6F\u1F6E\x03\x02\x02\x02" +
		"\u1F6F\u1F70\x03\x02\x02\x02\u1F70\u1F93\x03\x02\x02\x02\u1F71\u1F73\x07" +
		"0\x02\x02\u1F72\u1F74\x05\xAEX\x02\u1F73\u1F72\x03\x02\x02\x02\u1F73\u1F74" +
		"\x03\x02\x02\x02\u1F74\u1F75\x03\x02\x02\x02\u1F75\u1F76\x07^\x02\x02" +
		"\u1F76\u1F77\x05\u010E\x88\x02\u1F77\u1F78\x07&\x02\x02\u1F78\u1F79\x07" +
		"\xCC\x02\x02\u1F79\u1F7B\x05\u0540\u02A1\x02\u1F7A\u1F7C\x05\u0390\u01C9" +
		"\x02\u1F7B\u1F7A\x03\x02\x02\x02\u1F7B\u1F7C\x03\x02\x02\x02\u1F7C\u1F7E" +
		"\x03\x02\x02\x02\u1F7D\u1F7F\x05\u0110\x89\x02\u1F7E\u1F7D\x03\x02\x02" +
		"\x02\u1F7E\u1F7F\x03\x02\x02\x02\u1F7F\u1F93\x03\x02\x02\x02\u1F80\u1F82" +
		"\x070\x02\x02\u1F81\u1F83\x05\xAEX\x02\u1F82\u1F81\x03\x02\x02\x02\u1F82" +
		"\u1F83\x03\x02\x02\x02\u1F83\u1F84\x03\x02\x02\x02\u1F84\u1F85\x07^\x02" +
		"\x02\u1F85\u1F86\x07\xDE\x02\x02\u1F86\u1F87\x07O\x02\x02\u1F87\u1F88" +
		"\x07\u018E\x02\x02\u1F88\u1F89\x05\u010E\x88\x02\u1F89\u1F8A\x07&\x02" +
		"\x02\u1F8A\u1F8B\x07\xCC\x02\x02\u1F8B\u1F8D\x05\u0540\u02A1\x02\u1F8C" +
		"\u1F8E\x05\u0390\u01C9\x02\u1F8D\u1F8C\x03\x02\x02\x02\u1F8D\u1F8E\x03" +
		"\x02\x02\x02\u1F8E\u1F90\x03\x02\x02\x02\u1F8F\u1F91\x05\u0110\x89\x02" +
		"\u1F90\u1F8F\x03\x02\x02\x02\u1F90\u1F91\x03\x02\x02\x02\u1F91\u1F93\x03" +
		"\x02\x02\x02\u1F92\u1F6C\x03\x02\x02\x02\u1F92\u1F71\x03\x02\x02\x02\u1F92" +
		"\u1F80\x03\x02\x02\x02\u1F93\u038F\x03\x02\x02\x02\u1F94\u1F95\x07\x04" +
		"\x02\x02\u1F95\u1F96\x05\u0502\u0282\x02\u1F96\u1F97\x07\x05\x02\x02\u1F97" +
		"\u0391\x03\x02\x02\x02\u1F98\u1F99\x07\xB3\x02\x02\u1F99\u1FA3\x05\u0540" +
		"\u02A1\x02\u1F9A\u1F9B\x07\xB3\x02\x02\u1F9B\u1F9C\x07\u0124\x02\x02\u1F9C" +
		"\u1FA3\x05\u0540\u02A1\x02\u1F9D\u1F9E\x07\xB3\x02\x02\u1F9E\u1FA3\x07" +
		" \x02\x02\u1F9F\u1FA0\x07\xB3\x02\x02\u1FA0\u1FA1\x07\u0124\x02\x02\u1FA1" +
		"\u1FA3\x07 \x02\x02\u1FA2\u1F98\x03\x02\x02\x02\u1FA2\u1F9A\x03\x02\x02" +
		"\x02\u1FA2\u1F9D\x03\x02\x02\x02\u1FA2\u1F9F\x03\x02\x02\x02\u1FA3\u0393" +
		"\x03\x02\x02\x02\u1FA4\u1FA6\x05\u03DC\u01EF\x02\u1FA5\u1FA4\x03\x02\x02" +
		"\x02\u1FA5\u1FA6\x03\x02\x02\x02\u1FA6\u1FA7\x03\x02\x02\x02\u1FA7\u1FA8" +
		"\x07\xF3\x02\x02\u1FA8\u1FA9\x07I\x02\x02\u1FA9\u1FAA\x05\u0396\u01CC" +
		"\x02\u1FAA\u1FAC\x05\u0398\u01CD\x02\u1FAB\u1FAD\x05\u03A0\u01D1\x02\u1FAC" +
		"\u1FAB\x03\x02\x02\x02\u1FAC\u1FAD\x03\x02\x02\x02\u1FAD\u1FAF\x03\x02" +
		"\x02\x02\u1FAE\u1FB0\x05\u03A4\u01D3\x02\u1FAF\u1FAE\x03\x02\x02\x02\u1FAF" +
		"\u1FB0\x03\x02\x02\x02\u1FB0\u0395\x03\x02\x02\x02\u1FB1\u1FB4\x05\u053C" +
		"\u029F\x02\u1FB2\u1FB3\x07&\x02\x02\u1FB3\u1FB5\x05\u0562\u02B2\x02\u1FB4" +
		"\u1FB2\x03\x02\x02\x02\u1FB4\u1FB5\x03\x02\x02\x02\u1FB5\u0397\x03\x02" +
		"\x02\x02\u1FB6\u1FCA\x05\u03C6\u01E4\x02\u1FB7\u1FB8\x07\u01D1\x02\x02" +
		"\u1FB8\u1FB9\x05\u039A\u01CE\x02\u1FB9\u1FBA\x07\u01C4\x02\x02\u1FBA\u1FBB" +
		"\x05\u03C6\u01E4\x02\u1FBB\u1FCA\x03\x02\x02\x02\u1FBC\u1FBD\x07\x04\x02" +
		"\x02\u1FBD\u1FBE\x05\u039C\u01CF\x02\u1FBE\u1FC3\x07\x05\x02\x02\u1FBF" +
		"\u1FC0\x07\u01D1\x02\x02\u1FC0\u1FC1\x05\u039A\u01CE\x02\u1FC1\u1FC2\x07" +
		"\u01C4\x02\x02\u1FC2\u1FC4\x03\x02\x02\x02\u1FC3\u1FBF\x03\x02\x02\x02" +
		"\u1FC3\u1FC4\x03\x02\x02\x02\u1FC4\u1FC5\x03\x02\x02\x02\u1FC5\u1FC6\x05" +
		"\u03C6\u01E4\x02\u1FC6\u1FCA\x03\x02\x02\x02\u1FC7\u1FC8\x077\x02\x02" +
		"\u1FC8\u1FCA\x07\u01A8\x02\x02\u1FC9\u1FB6\x03\x02\x02\x02\u1FC9\u1FB7" +
		"\x03\x02\x02\x02\u1FC9\u1FBC\x03\x02\x02\x02\u1FC9\u1FC7\x03\x02\x02\x02" +
		"\u1FCA\u0399\x03\x02\x02\x02\u1FCB\u1FCC\t-\x02\x02\u1FCC\u039B\x03\x02" +
		"\x02\x02\u1FCD\u1FD2\x05\u039E\u01D0\x02\u1FCE\u1FCF\x07\b\x02\x02\u1FCF" +
		"\u1FD1\x05\u039E\u01D0\x02\u1FD0\u1FCE\x03\x02\x02\x02\u1FD1\u1FD4\x03" +
		"\x02\x02\x02\u1FD2\u1FD0\x03\x02\x02\x02\u1FD2\u1FD3\x03\x02\x02\x02\u1FD3" +
		"\u039D\x03\x02\x02\x02\u1FD4\u1FD2\x03\x02\x02\x02\u1FD5\u1FD6\x05\u0562" +
		"\u02B2\x02\u1FD6\u1FD7\x05\u0530\u0299\x02\u1FD7\u039F\x03\x02\x02\x02" +
		"\u1FD8\u1FD9\x07R\x02\x02\u1FD9\u1FDB\x07\u01D2\x02\x02\u1FDA\u1FDC\x05" +
		"\u03A2\u01D2\x02\u1FDB\u1FDA\x03\x02\x02\x02\u1FDB\u1FDC\x03\x02\x02\x02" +
		"\u1FDC\u1FDD\x03\x02\x02\x02\u1FDD\u1FE5\x07;\x02\x02\u1FDE\u1FDF\x07" +
		"\u0173\x02\x02\u1FDF\u1FE0\x07\u014F\x02\x02\u1FE0\u1FE2\x05\u03B6\u01DC" +
		"\x02\u1FE1\u1FE3\x05\u044A\u0226\x02\u1FE2\u1FE1\x03\x02\x02\x02\u1FE2" +
		"\u1FE3\x03\x02\x02\x02\u1FE3\u1FE6\x03\x02\x02\x02\u1FE4\u1FE6\x07\u0110" +
		"\x02\x02\u1FE5\u1FDE\x03\x02\x02\x02\u1FE5\u1FE4\x03\x02\x02\x02\u1FE6" +
		"\u03A1\x03\x02\x02\x02\u1FE7\u1FE8\x07\x04\x02\x02\u1FE8\u1FE9\x05\u0262" +
		"\u0132\x02\u1FE9\u1FEB\x07\x05\x02\x02\u1FEA\u1FEC\x05\u044A\u0226\x02" +
		"\u1FEB\u1FEA\x03\x02\x02\x02\u1FEB\u1FEC\x03\x02\x02\x02\u1FEC\u1FF1\x03" +
		"\x02\x02\x02\u1FED\u1FEE\x07R\x02\x02\u1FEE\u1FEF\x07/\x02\x02\u1FEF\u1FF1" +
		"\x05\u0540\u02A1\x02\u1FF0\u1FE7\x03\x02\x02\x02\u1FF0\u1FED\x03\x02\x02" +
		"\x02\u1FF1\u03A3\x03\x02\x02\x02\u1FF2\u1FF3\x07Y\x02\x02\u1FF3\u1FF4" +
		"\x05\u0534\u029B\x02\u1FF4\u03A5\x03\x02\x02\x02\u1FF5\u1FF7\x05\u03DC" +
		"\u01EF\x02\u1FF6\u1FF5\x03\x02\x02\x02\u1FF6\u1FF7\x03\x02\x02\x02\u1FF7" +
		"\u1FF8\x03\x02\x02\x02\u1FF8\u1FF9\x07\xB8\x02\x02\u1FF9\u1FFA\x07B\x02" +
		"\x02\u1FFA\u1FFC\x05\u043A\u021E\x02\u1FFB\u1FFD\x05\u03A8\u01D5\x02\u1FFC" +
		"\u1FFB\x03\x02\x02\x02\u1FFC\u1FFD\x03\x02\x02\x02\u1FFD\u1FFF\x03\x02" +
		"\x02\x02\u1FFE\u2000\x05\u044C\u0227\x02\u1FFF\u1FFE\x03\x02\x02\x02\u1FFF" +
		"\u2000\x03\x02\x02\x02\u2000\u2002\x03\x02\x02\x02\u2001\u2003\x05\u03A4" +
		"\u01D3\x02\u2002\u2001\x03\x02\x02\x02\u2002\u2003\x03\x02\x02\x02\u2003" +
		"\u03A7\x03\x02\x02\x02\u2004\u2005\x07f\x02\x02\u2005\u2006\x05\u0428" +
		"\u0215\x02\u2006\u03A9\x03\x02\x02\x02\u2007\u2009\x07\u0102\x02\x02\u2008" +
		"\u200A\x05\u03E4\u01F3\x02\u2009\u2008\x03\x02\x02\x02\u2009\u200A\x03" +
		"\x02\x02\x02\u200A\u200B\x03\x02\x02\x02\u200B\u200D\x05\u0438\u021D\x02" +
		"\u200C\u200E\x05\u03AC\u01D7\x02\u200D\u200C\x03\x02\x02\x02\u200D\u200E" +
		"\x03\x02\x02\x02\u200E\u2010\x03\x02\x02\x02\u200F\u2011\x05\u03B0\u01D9" +
		"\x02\u2010\u200F\x03\x02\x02\x02\u2010\u2011\x03\x02\x02\x02\u2011\u03AB" +
		"\x03\x02\x02\x02\u2012\u2013\x07F\x02\x02\u2013\u2014\x05\u03AE\u01D8" +
		"\x02\u2014\u2015\x07\u0109\x02\x02\u2015\u03AD\x03\x02\x02\x02\u2016\u2017" +
		"\x07\x85\x02\x02\u2017\u2023\t.\x02\x02\u2018\u2019\x07\u01A0\x02\x02" +
		"\u2019\u2023\t.\x02\x02\u201A\u201F\x07\u0150\x02\x02\u201B\u201C\x07" +
		"\u0173\x02\x02\u201C\u2020\x07\xCB\x02\x02\u201D\u201E\x07\u01A0\x02\x02" +
		"\u201E\u2020\x07\xCB\x02\x02\u201F\u201B\x03\x02\x02\x02\u201F\u201D\x03" +
		"\x02\x02\x02\u201F\u2020\x03\x02\x02\x02\u2020\u2023\x03\x02\x02\x02\u2021" +
		"\u2023\x07\xCB\x02\x02\u2022\u2016\x03\x02\x02\x02\u2022\u2018\x03\x02" +
		"\x02\x02\u2022\u201A\x03\x02\x02\x02\u2022\u2021\x03\x02\x02\x02\u2023" +
		"\u03AF\x03\x02\x02\x02\u2024\u2025\x07\u0112\x02\x02\u2025\u03B1\x03\x02" +
		"\x02\x02\u2026\u202A\x07\u0112\x02\x02\u2027\u2028\x07\u01D3\x02\x02\u2028" +
		"\u202A\x07\u01D4\x02\x02\u2029\u2026\x03\x02\x02\x02\u2029\u2027\x03\x02" +
		"\x02\x02\u202A\u03B3\x03\x02\x02\x02\u202B\u202D\x05\u03DC\u01EF\x02\u202C" +
		"\u202B\x03\x02\x02\x02\u202C\u202D\x03\x02\x02\x02\u202D\u202E\x03\x02" +
		"\x02\x02\u202E\u202F\x07\u0173\x02\x02\u202F\u2030\x05\u043A\u021E\x02" +
		"\u2030\u2031\x07\u014F\x02\x02\u2031\u2033\x05\u03B6\u01DC\x02\u2032\u2034" +
		"\x05\u0426\u0214\x02\u2033\u2032\x03\x02\x02\x02\u2033\u2034\x03\x02\x02" +
		"\x02\u2034\u2036\x03\x02\x02\x02\u2035\u2037\x05\u044C\u0227\x02\u2036" +
		"\u2035\x03\x02\x02\x02\u2036\u2037\x03\x02\x02\x02\u2037\u2039\x03\x02" +
		"\x02\x02\u2038\u203A\x05\u03A4\u01D3\x02\u2039\u2038\x03\x02\x02\x02\u2039" +
		"\u203A\x03\x02\x02\x02\u203A\u03B5\x03\x02\x02\x02\u203B\u2040\x05\u03B8" +
		"\u01DD\x02\u203C\u203D\x07\b\x02\x02\u203D\u203F\x05\u03B8\u01DD\x02\u203E" +
		"\u203C\x03\x02\x02\x02\u203F\u2042\x03\x02\x02\x02\u2040\u203E\x03\x02" +
		"\x02\x02\u2040\u2041\x03\x02\x02\x02\u2041\u03B7\x03\x02\x02\x02\u2042" +
		"\u2040\x03\x02\x02\x02\u2043\u2044\x05\u03BA\u01DE\x02\u2044\u2045\x07" +
		"\f\x02\x02\u2045\u2046\x05\u048E\u0248\x02\u2046\u204E\x03\x02\x02\x02" +
		"\u2047\u2048\x07\x04\x02\x02\u2048\u2049\x05\u03BC\u01DF\x02\u2049\u204A" +
		"\x07\x05\x02\x02\u204A\u204B\x07\f\x02\x02\u204B\u204C\x05\u048E\u0248" +
		"\x02\u204C\u204E\x03\x02\x02\x02\u204D\u2043\x03\x02\x02\x02\u204D\u2047" +
		"\x03\x02\x02\x02\u204E\u03B9\x03\x02\x02\x02\u204F\u2050\x05\u0562\u02B2" +
		"\x02\u2050\u2051\x05\u0530\u0299\x02\u2051\u03BB\x03\x02\x02\x02\u2052" +
		"\u2057\x05\u03BA\u01DE\x02\u2053\u2054\x07\b\x02\x02\u2054\u2056\x05\u03BA" +
		"\u01DE\x02\u2055\u2053\x03\x02\x02\x02\u2056\u2059\x03\x02\x02\x02\u2057" +
		"\u2055\x03\x02\x02\x02\u2057\u2058\x03\x02\x02\x02\u2058\u03BD\x03\x02" +
		"\x02\x02\u2059\u2057\x03\x02\x02\x02\u205A\u205B\x07\xB4\x02\x02\u205B" +
		"\u205C\x05\u03C0\u01E1\x02\u205C\u205D\x05\u03C2\u01E2\x02\u205D\u205E" +
		"\x07\xAE\x02\x02\u205E\u205F\x05\u03C4\u01E3\x02\u205F\u2060\x07@\x02" +
		"\x02\u2060\u2061\x05\u03C6\u01E4\x02\u2061\u03BF\x03\x02\x02\x02\u2062" +
		"\u2063\x05\u0540\u02A1\x02\u2063\u03C1\x03\x02\x02\x02\u2064\u2065\x07" +
		"\u010F\x02\x02\u2065\u206A\x07\u0146\x02\x02\u2066\u206A\x07\u0146\x02" +
		"\x02\u2067\u206A\x07m\x02\x02\u2068\u206A\x07\xF2\x02\x02\u2069\u2064" +
		"\x03\x02\x02\x02\u2069\u2066\x03\x02\x02\x02\u2069\u2067\x03\x02\x02\x02" +
		"\u2069\u2068\x03\x02\x02\x02\u206A\u206D\x03\x02\x02\x02\u206B\u2069\x03" +
		"\x02\x02\x02\u206B\u206C\x03\x02\x02\x02\u206C\u03C3\x03\x02\x02\x02\u206D" +
		"\u206B\x03\x02\x02\x02\u206E\u2074\x03\x02\x02\x02\u206F\u2070\x07k\x02" +
		"\x02\u2070\u2074\x07\xDB\x02\x02\u2071\u2072\x07\u017D\x02\x02\u2072\u2074" +
		"\x07\xDB\x02\x02\u2073\u206E\x03\x02\x02\x02\u2073\u206F\x03\x02\x02\x02" +
		"\u2073\u2071\x03\x02\x02\x02\u2074\u03C5\x03\x02\x02\x02\u2075\u2078\x05" +
		"\u03CA\u01E6\x02\u2076\u2078\x05\u03C8\u01E5\x02\u2077\u2075\x03\x02\x02" +
		"\x02\u2077\u2076\x03\x02\x02\x02\u2078\u03C7\x03\x02\x02\x02\u2079\u207A" +
		"\x07\x04\x02\x02\u207A\u207B\x05\u03CA\u01E6\x02\u207B\u207C\x07\x05\x02" +
		"\x02\u207C\u2082\x03\x02\x02\x02\u207D\u207E\x07\x04\x02\x02\u207E\u207F" +
		"\x05\u03C8\u01E5\x02\u207F\u2080\x07\x05\x02\x02\u2080\u2082\x03\x02\x02" +
		"\x02\u2081\u2079\x03\x02\x02\x02\u2081\u207D\x03\x02\x02\x02\u2082\u03C9" +
		"\x03\x02\x02\x02\u2083\u2085\x05\u03CC\u01E7\x02\u2084\u2086\x05\u03EC" +
		"\u01F7\x02\u2085\u2084\x03\x02\x02\x02\u2085\u2086\x03\x02\x02\x02\u2086" +
		"\u208F\x03\x02\x02\x02\u2087\u2089\x05\u0418\u020D\x02\u2088\u208A\x05" +
		"\u03F6\u01FC\x02\u2089\u2088\x03\x02\x02\x02\u2089\u208A\x03\x02\x02\x02" +
		"\u208A\u2090\x03\x02\x02\x02\u208B\u208D\x05\u03F4\u01FB\x02\u208C\u208E" +
		"\x05\u041A\u020E\x02\u208D\u208C\x03\x02\x02\x02\u208D\u208E\x03\x02\x02" +
		"\x02\u208E\u2090\x03\x02\x02\x02\u208F\u2087\x03\x02\x02\x02\u208F\u208B" +
		"\x03\x02\x02\x02\u208F\u2090\x03\x02\x02\x02\u2090\u20A1\x03\x02\x02\x02" +
		"\u2091\u2092\x05\u03D4\u01EB\x02\u2092\u2094\x05\u03CC\u01E7\x02\u2093" +
		"\u2095\x05\u03EC\u01F7\x02\u2094\u2093\x03\x02\x02\x02\u2094\u2095\x03" +
		"\x02\x02\x02\u2095\u209E\x03\x02\x02\x02\u2096\u2098\x05\u0418\u020D\x02" +
		"\u2097\u2099\x05\u03F6\u01FC\x02\u2098\u2097\x03\x02\x02\x02\u2098\u2099" +
		"\x03\x02\x02\x02\u2099\u209F\x03\x02\x02\x02\u209A\u209C\x05\u03F4\u01FB" +
		"\x02\u209B\u209D\x05\u041A\u020E\x02\u209C\u209B\x03\x02\x02\x02\u209C" +
		"\u209D\x03\x02\x02\x02\u209D\u209F\x03\x02\x02\x02\u209E\u2096\x03\x02" +
		"\x02\x02\u209E\u209A\x03\x02\x02\x02\u209E\u209F\x03\x02\x02\x02\u209F" +
		"\u20A1\x03\x02\x02\x02\u20A0\u2083\x03\x02\x02\x02\u20A0\u2091\x03\x02" +
		"\x02\x02\u20A1\u03CB\x03\x02\x02\x02\u20A2\u20A5\x05\u03CE\u01E8\x02\u20A3" +
		"\u20A5\x05\u03C8\u01E5\x02\u20A4\u20A2\x03\x02\x02\x02\u20A4\u20A3\x03" +
		"\x02\x02\x02\u20A5\u03CD\x03\x02\x02\x02\u20A6\u20B6\x07Z\x02\x02\u20A7" +
		"\u20A9\x05\u03EA\u01F6\x02\u20A8\u20A7\x03\x02\x02\x02\u20A8\u20A9\x03" +
		"\x02\x02\x02\u20A9\u20AB\x03\x02\x02\x02\u20AA\u20AC\x05\u03DE\u01F0\x02" +
		"\u20AB\u20AA\x03\x02\x02\x02\u20AB\u20AC\x03\x02\x02\x02\u20AC\u20AE\x03" +
		"\x02\x02\x02\u20AD\u20AF\x05\u0532\u029A\x02\u20AE\u20AD\x03\x02\x02\x02" +
		"\u20AE\u20AF\x03\x02\x02\x02\u20AF\u20B7\x03\x02\x02\x02\u20B0\u20B2\x05" +
		"\u03E8\u01F5\x02\u20B1\u20B0\x03\x02\x02\x02\u20B1\u20B2\x03\x02\x02\x02" +
		"\u20B2\u20B4\x03\x02\x02\x02\u20B3\u20B5\x05\u0534\u029B\x02\u20B4\u20B3" +
		"\x03\x02\x02\x02\u20B4\u20B5\x03\x02\x02\x02\u20B5\u20B7\x03\x02\x02\x02" +
		"\u20B6\u20A8\x03\x02\x02\x02\u20B6\u20B1\x03\x02\x02\x02\u20B7\u20B9\x03" +
		"\x02\x02\x02\u20B8\u20BA\x05\u03DE\u01F0\x02\u20B9\u20B8\x03\x02\x02\x02" +
		"\u20B9\u20BA\x03\x02\x02\x02\u20BA\u20BC\x03\x02\x02\x02\u20BB\u20BD\x05" +
		"\u0426\u0214\x02\u20BC\u20BB\x03\x02\x02\x02\u20BC\u20BD\x03\x02\x02\x02" +
		"\u20BD\u20BF\x03\x02\x02\x02\u20BE\u20C0\x05\u044A\u0226\x02\u20BF\u20BE" +
		"\x03\x02\x02\x02\u20BF\u20C0\x03\x02\x02\x02\u20C0\u20C2\x03\x02\x02\x02" +
		"\u20C1\u20C3\x05\u0408\u0205\x02\u20C2\u20C1\x03\x02\x02\x02\u20C2\u20C3" +
		"\x03\x02\x02\x02\u20C3\u20C5\x03\x02\x02\x02\u20C4\u20C6\x05\u0416\u020C" +
		"\x02\u20C5\u20C4\x03\x02\x02\x02\u20C5\u20C6\x03\x02\x02\x02\u20C6\u20C8" +
		"\x03\x02\x02\x02\u20C7\u20C9\x05\u04DA\u026E\x02\u20C8\u20C7\x03\x02\x02" +
		"\x02\u20C8\u20C9\x03\x02\x02\x02\u20C9\u20D4\x03\x02\x02\x02\u20CA\u20D4" +
		"\x05\u0424\u0213\x02\u20CB\u20CC\x07^\x02\x02\u20CC\u20D4\x05\u0436\u021C" +
		"\x02\u20CD\u20CE\x05\u03C8\u01E5\x02\u20CE\u20D1\x05\u03D2\u01EA\x02\u20CF" +
		"\u20D2\x05\u03CE\u01E8\x02\u20D0\u20D2\x05\u03C8\u01E5\x02\u20D1\u20CF" +
		"\x03\x02\x02\x02\u20D1\u20D0\x03\x02\x02\x02\u20D2\u20D4\x03\x02\x02\x02" +
		"\u20D3\u20A6\x03\x02\x02\x02\u20D3\u20CA\x03\x02\x02\x02\u20D3\u20CB\x03" +
		"\x02\x02\x02\u20D3\u20CD\x03\x02\x02\x02\u20D4\u20DC\x03\x02\x02\x02\u20D5" +
		"\u20D8\x05\u03D2\u01EA\x02\u20D6\u20D9\x05\u03CE\u01E8\x02\u20D7\u20D9" +
		"\x05\u03C8\u01E5\x02\u20D8\u20D6\x03\x02\x02\x02\u20D8\u20D7\x03\x02\x02" +
		"\x02\u20D9\u20DB\x03\x02\x02\x02\u20DA\u20D5\x03\x02\x02\x02\u20DB\u20DE" +
		"\x03\x02\x02\x02\u20DC\u20DA\x03\x02\x02\x02\u20DC\u20DD\x03\x02\x02\x02" +
		"\u20DD\u03CF\x03\x02\x02\x02\u20DE\u20DC\x03\x02\x02\x02\u20DF\u20E3\x07" +
		"c\x02\x02\u20E0\u20E3\x07H\x02\x02\u20E1\u20E3\x07=\x02\x02\u20E2\u20DF" +
		"\x03\x02\x02\x02\u20E2\u20E0\x03\x02\x02\x02\u20E2\u20E1\x03\x02\x02\x02" +
		"\u20E3\u03D1\x03\x02\x02\x02\u20E4\u20E6\x05\u03D0\u01E9\x02\u20E5\u20E7" +
		"\x05\u03E6\u01F4\x02\u20E6\u20E5\x03\x02\x02\x02\u20E6\u20E7\x03\x02\x02" +
		"\x02\u20E7\u03D3\x03\x02\x02\x02\u20E8\u20EA\x07k\x02\x02\u20E9\u20EB" +
		"\x07\u0131\x02\x02\u20EA\u20E9\x03\x02\x02\x02\u20EA\u20EB\x03\x02\x02" +
		"\x02\u20EB\u20EC\x03\x02\x02\x02\u20EC\u20ED\x05\u03D6\u01EC\x02\u20ED" +
		"\u03D5\x03\x02\x02\x02\u20EE\u20F3\x05\u03D8\u01ED\x02\u20EF\u20F0\x07" +
		"\b\x02\x02\u20F0\u20F2\x05\u03D8\u01ED\x02\u20F1\u20EF\x03\x02\x02\x02" +
		"\u20F2\u20F5\x03\x02\x02\x02\u20F3\u20F1\x03\x02\x02\x02\u20F3\u20F4\x03" +
		"\x02\x02\x02\u20F4\u03D7\x03\x02\x02\x02\u20F5\u20F3\x03\x02\x02\x02\u20F6" +
		"\u20F8\x05\u0540\u02A1\x02\u20F7\u20F9\x05\u0374\u01BB\x02\u20F8\u20F7" +
		"\x03\x02\x02\x02\u20F8\u20F9\x03\x02\x02\x02\u20F9\u20FA\x03\x02\x02\x02" +
		"\u20FA\u20FC\x07&\x02\x02\u20FB\u20FD\x05\u03DA\u01EE\x02\u20FC\u20FB" +
		"\x03\x02\x02\x02\u20FC\u20FD\x03\x02\x02\x02\u20FD\u20FE\x03\x02\x02\x02" +
		"\u20FE\u20FF\x07\x04\x02\x02\u20FF\u2100\x05\u038C\u01C7\x02\u2100\u2101" +
		"\x07\x05\x02\x02\u2101\u03D9\x03\x02\x02\x02\u2102\u2106\x07\u0105\x02" +
		"\x02\u2103\u2104\x07O\x02\x02\u2104\u2106\x07\u0105\x02\x02\u2105\u2102" +
		"\x03\x02\x02\x02\u2105\u2103\x03\x02\x02\x02\u2106\u03DB\x03\x02\x02\x02" +
		"\u2107\u2108\x05\u03D4\u01EB\x02\u2108\u03DD\x03\x02\x02\x02\u2109\u210E" +
		"\x07I\x02\x02\u210A\u210B\x05\u03E0\u01F1\x02\u210B\u210C\x05\u03E2\u01F2" +
		"\x02\u210C\u210F\x03\x02\x02\x02\u210D\u210F\x05\u0628\u0315\x02\u210E" +
		"\u210A\x03\x02\x02\x02\u210E\u210D\x03\x02\x02\x02\u210F\u03DF\x03\x02" +
		"\x02\x02\u2110\u2113\x03\x02\x02\x02\u2111\u2113\x07\u015C\x02\x02\u2112" +
		"\u2110\x03\x02\x02\x02\u2112\u2111\x03\x02\x02\x02\u2113\u03E1\x03\x02" +
		"\x02\x02\u2114\u2116\t/\x02\x02\u2115\u2114\x03\x02\x02\x02\u2115\u2116" +
		"\x03\x02\x02\x02\u2116\u2117\x03\x02\x02\x02\u2117\u2119\t\x13\x02\x02" +
		"\u2118\u211A\x05\u03E4\u01F3\x02\u2119\u2118\x03\x02\x02\x02\u2119\u211A" +
		"\x03\x02\x02\x02\u211A\u211B\x03\x02\x02\x02\u211B\u2125\x05\u053C\u029F" +
		"\x02\u211C\u211E\x07\u0171\x02\x02\u211D\u211F\x05\u03E4\u01F3\x02\u211E" +
		"\u211D\x03\x02\x02\x02\u211E\u211F\x03\x02\x02\x02\u211F\u2120\x03\x02" +
		"\x02\x02\u2120\u2125\x05\u053C\u029F\x02\u2121\u2122\x07^\x02\x02\u2122" +
		"\u2125\x05\u053C\u029F\x02\u2123\u2125\x05\u053C\u029F\x02\u2124\u2115" +
		"\x03\x02\x02\x02\u2124\u211C\x03\x02\x02\x02\u2124\u2121\x03\x02\x02\x02" +
		"\u2124\u2123\x03\x02\x02\x02\u2125\u03E3\x03\x02\x02\x02\u2126\u2127\x07" +
		"^\x02\x02\u2127\u03E5\x03\x02\x02\x02\u2128\u2129\t0\x02\x02\u2129\u03E7" +
		"\x03\x02\x02\x02\u212A\u2130\x07";
	private static readonly _serializedATNSegment16: string =
		":\x02\x02\u212B\u212C\x07R\x02\x02\u212C\u212D\x07\x04\x02\x02\u212D\u212E" +
		"\x05\u0502\u0282\x02\u212E\u212F\x07\x05\x02\x02\u212F\u2131\x03\x02\x02" +
		"\x02\u2130\u212B\x03\x02\x02\x02\u2130\u2131\x03\x02\x02\x02\u2131\u03E9" +
		"\x03\x02\x02\x02\u2132\u2133\x07 \x02\x02\u2133\u03EB\x03\x02\x02\x02" +
		"\u2134\u2135\x05\u03EE\u01F8\x02\u2135\u03ED\x03\x02\x02\x02\u2136\u2137" +
		"\x07U\x02\x02\u2137\u2138\x07\x95\x02\x02\u2138\u2139\x05\u03F0\u01F9" +
		"\x02\u2139\u03EF\x03\x02\x02\x02\u213A\u213F\x05\u03F2\u01FA\x02\u213B" +
		"\u213C\x07\b\x02\x02\u213C\u213E\x05\u03F2\u01FA\x02\u213D\u213B\x03\x02" +
		"\x02\x02\u213E\u2141\x03\x02\x02\x02\u213F\u213D\x03\x02\x02\x02\u213F" +
		"\u2140\x03\x02\x02\x02\u2140\u03F1\x03\x02\x02\x02\u2141\u213F\x03\x02" +
		"\x02\x02\u2142\u2146\x05\u048E\u0248\x02\u2143\u2144\x07f\x02\x02\u2144" +
		"\u2147\x05\u04FE\u0280\x02\u2145\u2147\x05\u0270\u0139\x02\u2146\u2143" +
		"\x03\x02\x02\x02\u2146\u2145\x03\x02\x02\x02\u2146\u2147\x03\x02\x02\x02" +
		"\u2147\u2149\x03\x02\x02\x02\u2148\u214A\x05\u0272\u013A\x02\u2149\u2148" +
		"\x03\x02\x02\x02\u2149\u214A\x03\x02\x02\x02\u214A\u03F3\x03\x02\x02\x02" +
		"\u214B\u214D\x05\u03F8\u01FD\x02\u214C\u214E\x05\u03FA\u01FE\x02\u214D" +
		"\u214C\x03\x02\x02\x02\u214D\u214E\x03\x02\x02\x02\u214E\u2154\x03\x02" +
		"\x02\x02\u214F\u2151\x05\u03FA\u01FE\x02\u2150\u2152\x05\u03F8\u01FD\x02" +
		"\u2151\u2150\x03\x02\x02\x02\u2151\u2152\x03\x02\x02\x02\u2152\u2154\x03" +
		"\x02\x02\x02\u2153\u214B\x03\x02\x02\x02\u2153\u214F\x03\x02\x02\x02\u2154" +
		"\u03F5\x03\x02\x02\x02\u2155\u2156\x05\u03F4\u01FB\x02\u2156\u03F7\x03" +
		"\x02\x02\x02\u2157\u2158\x07L\x02\x02\u2158\u215B\x05\u03FC\u01FF\x02" +
		"\u2159\u215A\x07\b\x02\x02\u215A\u215C\x05\u03FE\u0200\x02\u215B\u2159" +
		"\x03\x02\x02\x02\u215B\u215C\x03\x02\x02\x02\u215C\u216F\x03\x02\x02\x02" +
		"\u215D\u215E\x07?\x02\x02\u215E\u216C\x05\u0406\u0204\x02\u215F\u2160" +
		"\x05\u0400\u0201\x02\u2160\u2164\x05\u0404\u0203\x02\u2161\u2165\x07S" +
		"\x02\x02\u2162\u2163\x07k\x02\x02\u2163\u2165\x07\u01D5\x02\x02\u2164" +
		"\u2161\x03\x02\x02\x02\u2164\u2162\x03\x02\x02\x02\u2165\u216D\x03\x02" +
		"\x02\x02\u2166\u216A\x05\u0404\u0203\x02\u2167\u216B\x07S\x02\x02\u2168" +
		"\u2169\x07k\x02\x02\u2169\u216B\x07\u01D5\x02\x02\u216A\u2167\x03\x02" +
		"\x02\x02\u216A\u2168\x03\x02\x02\x02\u216B\u216D\x03\x02\x02\x02\u216C" +
		"\u215F\x03\x02\x02\x02\u216C\u2166\x03\x02\x02\x02\u216D\u216F\x03\x02" +
		"\x02\x02\u216E\u2157\x03\x02\x02\x02\u216E\u215D\x03\x02\x02\x02\u216F" +
		"\u03F9\x03\x02\x02\x02\u2170\u2175\x07Q\x02\x02\u2171\u2176\x05\u03FE" +
		"\u0200\x02\u2172\u2173\x05\u0400\u0201\x02\u2173\u2174\x05\u0404\u0203" +
		"\x02\u2174\u2176\x03\x02\x02\x02\u2175\u2171\x03\x02\x02\x02\u2175\u2172" +
		"\x03\x02\x02\x02\u2176\u03FB\x03\x02\x02\x02\u2177\u217A\x05\u048E\u0248" +
		"\x02\u2178\u217A\x07 \x02\x02\u2179\u2177\x03\x02\x02\x02\u2179\u2178" +
		"\x03\x02\x02\x02\u217A\u03FD\x03\x02\x02\x02\u217B\u217C\x05\u048E\u0248" +
		"\x02\u217C\u03FF\x03\x02\x02\x02\u217D\u2183\x05\u04B8\u025D\x02\u217E" +
		"\u217F\x07\x0E\x02\x02\u217F\u2183\x05\u0402\u0202\x02\u2180\u2181\x07" +
		"\x0F\x02\x02\u2181\u2183\x05\u0402\u0202\x02\u2182\u217D\x03\x02\x02\x02" +
		"\u2182\u217E\x03\x02\x02\x02\u2182\u2180\x03\x02\x02\x02\u2183\u0401\x03" +
		"\x02\x02\x02\u2184\u2187\x05\u0550\u02A9\x02\u2185\u2187\x05\u054E\u02A8" +
		"\x02\u2186\u2184\x03\x02\x02\x02\u2186\u2185\x03\x02\x02\x02\u2187\u0403" +
		"\x03\x02\x02\x02\u2188\u2189\t1\x02\x02\u2189\u0405\x03\x02\x02\x02\u218A" +
		"\u218B\t2\x02\x02\u218B\u0407\x03\x02\x02\x02\u218C\u218D\x07D\x02\x02" +
		"\u218D\u218E\x07\x95\x02\x02\u218E\u218F\x05\u040A\u0206\x02\u218F\u0409" +
		"\x03\x02\x02\x02\u2190\u2195\x05\u040C\u0207\x02\u2191\u2192\x07\b\x02" +
		"\x02\u2192\u2194\x05\u040C\u0207\x02\u2193\u2191\x03\x02\x02\x02\u2194" +
		"\u2197\x03\x02\x02\x02\u2195\u2193\x03\x02\x02\x02\u2195\u2196\x03\x02" +
		"\x02\x02\u2196\u040B\x03\x02\x02\x02\u2197\u2195\x03\x02\x02\x02\u2198" +
		"\u219E\x05\u048E\u0248\x02\u2199\u219E\x05\u040E\u0208\x02\u219A\u219E" +
		"\x05\u0412\u020A\x02\u219B\u219E\x05\u0410\u0209\x02\u219C\u219E\x05\u0414" +
		"\u020B\x02\u219D\u2198\x03\x02\x02\x02\u219D\u2199\x03\x02\x02\x02\u219D" +
		"\u219A\x03\x02\x02\x02\u219D\u219B\x03\x02\x02\x02\u219D\u219C\x03\x02" +
		"\x02\x02\u219E\u040D\x03\x02\x02\x02\u219F\u21A0\x07\x04\x02\x02\u21A0" +
		"\u21A1\x07\x05\x02\x02\u21A1\u040F\x03\x02\x02\x02\u21A2\u21A3\x07\u01D6" +
		"\x02\x02\u21A3\u21A4\x07\x04\x02\x02\u21A4\u21A5\x05\u0502\u0282\x02\u21A5" +
		"\u21A6\x07\x05\x02\x02\u21A6\u0411\x03\x02\x02\x02\u21A7\u21A8\x07\u01D7" +
		"\x02\x02\u21A8\u21A9\x07\x04\x02\x02\u21A9\u21AA\x05\u0502\u0282\x02\u21AA" +
		"\u21AB\x07\x05\x02\x02\u21AB\u0413\x03\x02\x02\x02\u21AC\u21AD\x07\u01D8" +
		"\x02\x02\u21AD\u21AE\x07\u01D9\x02\x02\u21AE\u21AF\x07\x04\x02\x02\u21AF" +
		"\u21B0\x05\u040A\u0206\x02\u21B0\u21B1\x07\x05\x02\x02\u21B1\u0415\x03" +
		"\x02\x02\x02\u21B2\u21B3\x07E\x02\x02\u21B3\u21B4\x05\u048E\u0248\x02" +
		"\u21B4\u0417\x03\x02\x02\x02\u21B5\u21BA\x05\u041C\u020F\x02\u21B6\u21B7" +
		"\x07@\x02\x02\u21B7\u21B8\x07\u012E\x02\x02\u21B8\u21BA\x07S\x02\x02\u21B9" +
		"\u21B5\x03\x02\x02\x02\u21B9\u21B6\x03\x02\x02\x02\u21BA\u0419\x03\x02" +
		"\x02\x02\u21BB\u21BC\x05\u0418\u020D\x02\u21BC\u041B\x03\x02\x02\x02\u21BD" +
		"\u21BF\x05\u041E\u0210\x02\u21BE\u21BD\x03\x02\x02\x02\u21BF\u21C0\x03" +
		"\x02\x02\x02\u21C0\u21BE\x03\x02\x02\x02\u21C0\u21C1\x03\x02\x02\x02\u21C1" +
		"\u041D\x03\x02\x02\x02\u21C2\u21C4\x05\u0420\u0211\x02\u21C3\u21C5\x05" +
		"\u0422\u0212\x02\u21C4\u21C3\x03\x02\x02\x02\u21C4\u21C5\x03\x02\x02\x02" +
		"\u21C5\u21C7\x03\x02\x02\x02\u21C6\u21C8\x05\u03B2\u01DA\x02\u21C7\u21C6" +
		"\x03\x02\x02\x02\u21C7\u21C8\x03\x02\x02\x02\u21C8\u041F\x03\x02\x02\x02" +
		"\u21C9\u21D3\x07@\x02\x02\u21CA\u21CB\x07\u010F\x02\x02\u21CB\u21CD\x07" +
		"\xF7\x02\x02\u21CC\u21CA\x03\x02\x02\x02\u21CC\u21CD\x03\x02\x02\x02\u21CD" +
		"\u21CE\x03\x02\x02\x02\u21CE\u21D4\x07\u0173\x02\x02\u21CF\u21D1\x07\xF7" +
		"\x02\x02\u21D0\u21CF\x03\x02\x02\x02\u21D0\u21D1\x03\x02\x02\x02\u21D1" +
		"\u21D2\x03\x02\x02\x02\u21D2\u21D4\x07\u0150\x02\x02\u21D3\u21CC\x03\x02" +
		"\x02\x02\u21D3\u21D0\x03\x02\x02\x02\u21D4\u0421\x03\x02\x02\x02\u21D5" +
		"\u21D6\x07\u0115\x02\x02\u21D6\u21D7\x05\u0538\u029D\x02\u21D7\u0423\x03" +
		"\x02\x02\x02\u21D8\u21D9\x07\u01A8\x02\x02\u21D9\u21DA\x07\x04\x02\x02" +
		"\u21DA\u21DB\x05\u0502\u0282\x02\u21DB\u21E3\x07\x05\x02\x02\u21DC\u21DD" +
		"\x07\b\x02\x02\u21DD\u21DE\x07\x04\x02\x02\u21DE\u21DF\x05\u0502\u0282" +
		"\x02\u21DF\u21E0\x07\x05\x02\x02\u21E0\u21E2\x03\x02\x02\x02\u21E1\u21DC" +
		"\x03\x02\x02\x02\u21E2\u21E5\x03\x02\x02\x02\u21E3\u21E1\x03\x02\x02\x02" +
		"\u21E3\u21E4\x03\x02\x02\x02\u21E4\u0425\x03\x02\x02\x02\u21E5\u21E3\x03" +
		"\x02\x02\x02\u21E6\u21E7\x07B\x02\x02\u21E7\u21E8\x05\u0428\u0215\x02" +
		"\u21E8\u0427\x03\x02\x02\x02\u21E9\u21EE\x05\u042A\u0216\x02\u21EA\u21EB" +
		"\x07\b\x02\x02\u21EB\u21ED\x05\u042A\u0216\x02\u21EC\u21EA\x03\x02\x02" +
		"\x02\u21ED\u21F0\x03\x02\x02\x02\u21EE\u21EC\x03\x02\x02\x02\u21EE\u21EF" +
		"\x03\x02\x02\x02\u21EF\u0429\x03\x02\x02\x02\u21F0\u21EE\x03\x02\x02\x02" +
		"\u21F1\u21F3\x05\u0436\u021C\x02\u21F2\u21F4\x05\u042E\u0218\x02\u21F3" +
		"\u21F2\x03\x02\x02\x02\u21F3\u21F4\x03\x02\x02\x02\u21F4\u21F6\x03\x02" +
		"\x02\x02\u21F5\u21F7\x05\u043C\u021F\x02\u21F6\u21F5\x03\x02\x02\x02\u21F6" +
		"\u21F7\x03\x02\x02\x02\u21F7\u222C\x03\x02\x02\x02\u21F8\u21FA\x05\u0440" +
		"\u0221\x02\u21F9\u21FB\x05\u0430\u0219\x02\u21FA\u21F9\x03\x02\x02\x02" +
		"\u21FA\u21FB\x03\x02\x02\x02\u21FB\u222C\x03\x02\x02\x02\u21FC\u21FE\x05" +
		"\u0454\u022B\x02\u21FD\u21FF\x05\u042E\u0218\x02\u21FE\u21FD\x03\x02\x02" +
		"\x02\u21FE\u21FF\x03\x02\x02\x02\u21FF\u222C\x03\x02\x02\x02\u2200\u2202" +
		"\x05\u03C8\u01E5\x02\u2201\u2203\x05\u042E\u0218\x02\u2202\u2201\x03\x02" +
		"\x02\x02\u2202\u2203\x03\x02\x02\x02\u2203\u222C\x03\x02\x02\x02\u2204" +
		"\u2211\x07J\x02\x02\u2205\u2207\x05\u0454\u022B\x02\u2206\u2208\x05\u042E" +
		"\u0218\x02\u2207\u2206\x03\x02\x02\x02\u2207\u2208\x03\x02\x02\x02\u2208" +
		"\u2212\x03\x02\x02\x02\u2209\u220B\x05\u0440\u0221\x02\u220A\u220C\x05" +
		"\u0430\u0219\x02\u220B\u220A\x03\x02\x02\x02\u220B\u220C\x03\x02\x02\x02" +
		"\u220C\u2212\x03\x02\x02\x02\u220D\u220F\x05\u03C8\u01E5\x02\u220E\u2210" +
		"\x05\u042E\u0218\x02\u220F\u220E\x03\x02\x02\x02\u220F\u2210\x03\x02\x02" +
		"\x02\u2210\u2212\x03\x02\x02\x02\u2211\u2205\x03\x02\x02\x02\u2211\u2209" +
		"\x03\x02\x02\x02\u2211\u220D\x03\x02\x02\x02\u2212\u222C\x03\x02\x02\x02" +
		"\u2213\u2214\x07\x04\x02\x02\u2214\u2225\x05\u042A\u0216\x02\u2215\u2216" +
		"\x07p\x02\x02\u2216\u2217\x07x\x02\x02\u2217\u2226\x05\u042A\u0216\x02" +
		"\u2218\u221A\x07{\x02\x02\u2219\u221B\x05\u0432\u021A\x02\u221A\u2219" +
		"\x03\x02\x02\x02\u221A\u221B\x03\x02\x02\x02\u221B\u221C\x03\x02\x02\x02" +
		"\u221C\u221D\x07x\x02\x02\u221D\u2226\x05\u042A\u0216\x02\u221E\u2220" +
		"\x05\u0432\u021A\x02\u221F\u221E\x03\x02\x02\x02\u221F\u2220\x03\x02\x02" +
		"\x02\u2220\u2221\x03\x02\x02\x02\u2221\u2222\x07x\x02\x02\u2222\u2223" +
		"\x05\u042A\u0216\x02\u2223\u2224\x05\u0434\u021B\x02\u2224\u2226\x03\x02" +
		"\x02\x02\u2225\u2215\x03\x02\x02\x02\u2225\u2218\x03\x02\x02\x02\u2225" +
		"\u221F\x03\x02\x02\x02\u2225\u2226\x03\x02\x02\x02\u2226\u2227\x03\x02" +
		"\x02\x02\u2227\u2229\x07\x05\x02\x02\u2228\u222A\x05\u042E\u0218\x02\u2229" +
		"\u2228\x03\x02\x02\x02\u2229\u222A\x03\x02\x02\x02\u222A\u222C\x03\x02" +
		"\x02\x02\u222B\u21F1\x03\x02\x02\x02\u222B\u21F8\x03\x02\x02\x02\u222B" +
		"\u21FC\x03\x02\x02\x02\u222B\u2200\x03\x02\x02\x02\u222B\u2204\x03\x02" +
		"\x02\x02\u222B\u2213\x03\x02\x02\x02\u222C\u223F\x03\x02\x02\x02\u222D" +
		"\u222E\x07p\x02\x02\u222E\u222F\x07x\x02\x02\u222F\u223E\x05\u042A\u0216" +
		"\x02\u2230\u2232\x07{\x02\x02\u2231\u2233\x05\u0432\u021A\x02\u2232\u2231" +
		"\x03\x02\x02\x02\u2232\u2233\x03\x02\x02\x02\u2233\u2234\x03\x02\x02\x02" +
		"\u2234\u2235\x07x\x02\x02\u2235\u223E\x05\u042A\u0216\x02\u2236\u2238" +
		"\x05\u0432\u021A\x02\u2237\u2236\x03\x02\x02\x02\u2237\u2238\x03\x02\x02" +
		"\x02\u2238\u2239\x03\x02\x02\x02\u2239\u223A\x07x\x02\x02\u223A\u223B" +
		"\x05\u042A\u0216\x02\u223B\u223C\x05\u0434\u021B\x02\u223C\u223E\x03\x02" +
		"\x02\x02\u223D\u222D\x03\x02\x02\x02\u223D\u2230\x03\x02\x02\x02\u223D" +
		"\u2237\x03\x02\x02\x02\u223E\u2241\x03\x02\x02\x02\u223F\u223D\x03\x02" +
		"\x02\x02\u223F\u2240\x03\x02\x02\x02\u2240\u042B\x03\x02\x02\x02\u2241" +
		"\u223F\x03\x02\x02\x02\u2242\u2244\x07&\x02\x02\u2243\u2242\x03\x02\x02" +
		"\x02\u2243\u2244\x03\x02\x02\x02\u2244\u2245\x03\x02\x02\x02\u2245\u224A" +
		"\x05\u0562\u02B2\x02\u2246\u2247\x07\x04\x02\x02\u2247\u2248\x05\u053E" +
		"\u02A0\x02\u2248\u2249\x07\x05\x02\x02\u2249\u224B\x03\x02\x02\x02\u224A" +
		"\u2246\x03\x02\x02\x02\u224A\u224B\x03\x02\x02\x02\u224B\u042D\x03\x02" +
		"\x02\x02\u224C\u224D\x05\u042C\u0217\x02\u224D\u042F\x03\x02\x02\x02\u224E" +
		"\u225B\x05\u042C\u0217\x02\u224F\u2251\x07&\x02\x02\u2250\u2252\x05\u0562" +
		"\u02B2\x02\u2251\u2250\x03\x02\x02\x02\u2251\u2252\x03\x02\x02\x02\u2252" +
		"\u2255\x03\x02\x02\x02\u2253\u2255\x05\u0562\u02B2\x02\u2254\u224F\x03" +
		"\x02\x02\x02\u2254\u2253\x03\x02\x02\x02\u2255\u2256\x03\x02\x02\x02\u2256" +
		"\u2257\x07\x04\x02\x02\u2257\u2258\x05\u0450\u0229\x02\u2258\u2259\x07" +
		"\x05\x02\x02\u2259\u225B\x03\x02\x02\x02\u225A\u224E\x03\x02\x02\x02\u225A" +
		"\u2254\x03\x02\x02\x02\u225B\u0431\x03\x02\x02\x02\u225C\u225E\t3\x02" +
		"\x02\u225D\u225F\x07}\x02\x02\u225E\u225D\x03\x02\x02\x02\u225E\u225F" +
		"\x03\x02\x02\x02\u225F\u0433\x03\x02\x02\x02\u2260\u2261\x07f\x02\x02" +
		"\u2261\u2262\x07\x04\x02\x02\u2262\u2263\x05\u053E\u02A0\x02\u2263\u2264" +
		"\x07\x05\x02\x02\u2264\u2268\x03\x02\x02\x02\u2265\u2266\x07R\x02\x02" +
		"\u2266\u2268\x05\u048E\u0248\x02\u2267\u2260\x03\x02\x02\x02\u2267\u2265" +
		"\x03\x02\x02\x02\u2268\u0435\x03\x02\x02\x02\u2269\u226B\x07S\x02\x02" +
		"\u226A\u2269\x03\x02\x02\x02\u226A\u226B\x03\x02\x02\x02\u226B\u226C\x03" +
		"\x02\x02\x02\u226C\u226E\x05\u053C\u029F\x02\u226D\u226F\x07\v\x02\x02" +
		"\u226E\u226D\x03\x02\x02\x02\u226E\u226F\x03\x02\x02\x02\u226F\u2279\x03" +
		"\x02\x02\x02\u2270\u2276\x07S\x02\x02\u2271\u2277\x05\u053C\u029F\x02" +
		"\u2272\u2273\x07\x04\x02\x02\u2273\u2274\x05\u053C\u029F\x02\u2274\u2275" +
		"\x07\x05\x02\x02\u2275\u2277\x03\x02\x02\x02\u2276\u2271\x03\x02\x02\x02" +
		"\u2276\u2272\x03\x02\x02\x02\u2277\u2279\x03\x02\x02\x02\u2278\u226A\x03" +
		"\x02\x02\x02\u2278\u2270\x03\x02\x02\x02\u2279\u0437\x03\x02\x02\x02\u227A" +
		"\u227F\x05\u0436\u021C\x02\u227B\u227C\x07\b\x02\x02\u227C\u227E\x05\u0436" +
		"\u021C\x02\u227D\u227B\x03\x02\x02\x02\u227E\u2281\x03\x02\x02\x02\u227F" +
		"\u227D\x03\x02\x02\x02\u227F\u2280\x03\x02\x02\x02\u2280\u0439\x03\x02" +
		"\x02\x02\u2281\u227F\x03\x02\x02\x02\u2282\u2287\x05\u0436\u021C\x02\u2283" +
		"\u2285\x07&\x02\x02\u2284\u2283\x03\x02\x02\x02\u2284\u2285\x03\x02\x02" +
		"\x02\u2285\u2286\x03\x02\x02\x02\u2286\u2288\x05\u0562\u02B2\x02\u2287" +
		"\u2284\x03\x02\x02\x02\u2287\u2288\x03\x02\x02\x02\u2288\u043B\x03\x02" +
		"\x02\x02\u2289\u228A\x07\u01DA\x02\x02\u228A\u228B\x05\u0546\u02A4\x02" +
		"\u228B\u228C\x07\x04\x02\x02\u228C\u228D\x05\u0502\u0282\x02\u228D\u228F" +
		"\x07\x05\x02\x02\u228E\u2290\x05\u043E\u0220\x02\u228F\u228E\x03\x02\x02" +
		"\x02\u228F\u2290\x03\x02\x02\x02\u2290\u043D\x03\x02\x02\x02\u2291\u2292" +
		"\x07\u0138\x02\x02\u2292\u2293\x07\x04\x02\x02\u2293\u2294\x05\u048E\u0248" +
		"\x02\u2294\u2295\x07\x05\x02\x02\u2295\u043F\x03\x02\x02\x02\u2296\u2298" +
		"\x05\u04C0\u0261\x02\u2297\u2299\x05\u0448\u0225\x02\u2298\u2297\x03\x02" +
		"\x02\x02\u2298\u2299\x03\x02\x02\x02\u2299\u22A3\x03\x02\x02\x02\u229A" +
		"\u229B\x07\u0142\x02\x02\u229B\u229C\x07B\x02\x02\u229C\u229D\x07\x04" +
		"\x02\x02\u229D\u229E\x05\u0444\u0223\x02\u229E\u22A0\x07\x05\x02\x02\u229F" +
		"\u22A1\x05\u0448\u0225\x02\u22A0\u229F\x03\x02\x02\x02\u22A0\u22A1\x03" +
		"\x02\x02\x02\u22A1\u22A3\x03\x02\x02\x02\u22A2\u2296\x03\x02\x02\x02\u22A2" +
		"\u229A\x03\x02\x02\x02\u22A3\u0441\x03\x02\x02\x02\u22A4\u22A6\x05\u04C0" +
		"\u0261\x02\u22A5\u22A7\x05\u0446\u0224\x02\u22A6\u22A5\x03\x02\x02\x02" +
		"\u22A6\u22A7\x03\x02\x02\x02\u22A7\u0443\x03\x02\x02\x02\u22A8\u22AD\x05" +
		"\u0442\u0222\x02\u22A9\u22AA\x07\b\x02\x02\u22AA\u22AC\x05\u0442\u0222" +
		"\x02\u22AB\u22A9\x03\x02\x02\x02\u22AC\u22AF\x03\x02\x02\x02\u22AD\u22AB" +
		"\x03\x02\x02\x02\u22AD\u22AE\x03\x02\x02\x02\u22AE\u0445\x03\x02\x02\x02" +
		"\u22AF\u22AD\x03\x02\x02\x02\u22B0\u22B1\x07&\x02\x02\u22B1\u22B2\x07" +
		"\x04\x02\x02\u22B2\u22B3\x05\u0450\u0229\x02\u22B3\u22B4\x07\x05\x02\x02" +
		"\u22B4\u0447\x03\x02\x02\x02\u22B5\u22B6\x07k\x02\x02\u22B6\u22B7\x07" +
		"\u01DB\x02\x02\u22B7\u0449\x03\x02\x02\x02\u22B8\u22B9\x07i\x02\x02\u22B9" +
		"\u22BA\x05\u048E\u0248\x02\u22BA\u044B\x03\x02\x02\x02\u22BB\u22C0\x07" +
		"i\x02\x02\u22BC\u22BD\x07\u01B4\x02\x02\u22BD\u22BE\x07\u0115\x02\x02" +
		"\u22BE\u22C1\x05\u03C0\u01E1\x02\u22BF\u22C1\x05\u048E\u0248\x02\u22C0" +
		"\u22BC\x03\x02\x02\x02\u22C0\u22BF\x03\x02\x02\x02\u22C1\u044D\x03\x02" +
		"\x02\x02\u22C2\u22C3\x05\u0450\u0229\x02\u22C3\u044F\x03\x02\x02\x02\u22C4" +
		"\u22C9\x05\u0452\u022A\x02\u22C5\u22C6\x07\b\x02\x02\u22C6\u22C8\x05\u0452" +
		"\u022A\x02\u22C7\u22C5\x03\x02\x02\x02\u22C8\u22CB\x03\x02\x02\x02\u22C9" +
		"\u22C7\x03\x02\x02\x02\u22C9\u22CA\x03\x02\x02\x02\u22CA\u0451\x03\x02" +
		"\x02\x02\u22CB\u22C9\x03\x02\x02\x02\u22CC\u22CD\x05\u0562\u02B2\x02\u22CD" +
		"\u22CF\x05\u0462\u0232\x02\u22CE\u22D0\x05n8\x02\u22CF\u22CE\x03\x02\x02" +
		"\x02\u22CF\u22D0\x03\x02\x02\x02\u22D0\u0453\x03\x02\x02\x02\u22D1\u22D2" +
		"\x07\u01DC\x02\x02\u22D2\u22E2\x07\x04\x02\x02\u22D3\u22D4\x05\u04B8\u025D" +
		"\x02\u22D4\u22D5\x05\u04D2\u026A\x02\u22D5\u22D6\x07\u01DD\x02\x02\u22D6" +
		"\u22D7\x05\u0456\u022C\x02\u22D7\u22E3\x03\x02\x02\x02\u22D8\u22D9\x07" +
		"\u01DE\x02\x02\u22D9\u22DA\x07\x04\x02\x02\u22DA\u22DB\x05\u045E\u0230" +
		"\x02\u22DB\u22DC\x07\x05\x02\x02\u22DC\u22DD\x07\b\x02\x02\u22DD\u22DE" +
		"\x05\u04B8\u025D\x02\u22DE\u22DF\x05\u04D2\u026A\x02\u22DF\u22E0\x07\u01DD" +
		"\x02\x02\u22E0\u22E1\x05\u0456\u022C\x02\u22E1\u22E3\x03\x02\x02\x02\u22E2" +
		"\u22D3\x03\x02\x02\x02\u22E2\u22D8\x03\x02\x02\x02\u22E3\u22E4\x03\x02" +
		"\x02\x02\u22E4\u22E5\x07\x05\x02\x02\u22E5\u0455\x03\x02\x02\x02\u22E6" +
		"\u22EB\x05\u0458\u022D\x02\u22E7\u22E8\x07\b\x02\x02\u22E8\u22EA\x05\u0458" +
		"\u022D\x02\u22E9\u22E7\x03\x02\x02\x02\u22EA\u22ED\x03\x02\x02\x02\u22EB" +
		"\u22E9\x03\x02\x02\x02\u22EB\u22EC\x03\x02\x02\x02\u22EC\u0457\x03\x02" +
		"\x02\x02\u22ED\u22EB\x03\x02\x02\x02\u22EE\u22F5\x05\u0562\u02B2\x02\u22EF" +
		"\u22F1\x05\u0462\u0232\x02\u22F0\u22F2\x05\u045A\u022E\x02\u22F1\u22F0" +
		"\x03\x02\x02\x02\u22F1\u22F2\x03\x02\x02\x02\u22F2\u22F6\x03\x02\x02\x02" +
		"\u22F3\u22F4\x07@\x02\x02\u22F4\u22F6\x07\u01DB\x02\x02\u22F5\u22EF\x03" +
		"\x02\x02\x02\u22F5\u22F3\x03\x02\x02\x02\u22F6\u0459\x03\x02\x02\x02\u22F7" +
		"\u22F9\x05\u045C\u022F\x02\u22F8\u22F7\x03\x02\x02\x02\u22F9\u22FA\x03" +
		"\x02\x02\x02\u22FA\u22F8\x03\x02\x02\x02\u22FA\u22FB\x03\x02\x02\x02\u22FB" +
		"\u045B\x03\x02\x02\x02\u22FC\u22FD\x077\x02\x02\u22FD\u2305\x05\u048E" +
		"\u0248\x02\u22FE\u22FF\x05\u0572\u02BA\x02\u22FF\u2300\x05\u048E\u0248" +
		"\x02\u2300\u2305\x03\x02\x02\x02\u2301\u2302\x07O\x02\x02\u2302\u2305" +
		"\x07P\x02\x02\u2303\u2305\x07P\x02\x02\u2304\u22FC\x03\x02\x02\x02\u2304" +
		"\u22FE\x03\x02\x02\x02\u2304\u2301\x03\x02\x02\x02\u2304\u2303\x03\x02" +
		"\x02\x02\u2305\u045D\x03\x02\x02\x02\u2306\u230B\x05\u0460\u0231\x02\u2307" +
		"\u2308\x07\b\x02\x02\u2308\u230A\x05\u0460\u0231\x02\u2309\u2307\x03\x02" +
		"\x02\x02\u230A\u230D\x03\x02\x02\x02\u230B\u2309\x03\x02\x02\x02\u230B" +
		"\u230C\x03\x02\x02\x02\u230C\u045F\x03\x02\x02\x02\u230D\u230B\x03\x02" +
		"\x02\x02\u230E\u230F\x05\u04B6\u025C\x02\u230F\u2310\x07&\x02\x02\u2310" +
		"\u2311\x05\u0570\u02B9\x02\u2311\u2315\x03\x02\x02\x02\u2312\u2313\x07" +
		"7\x02\x02\u2313\u2315\x05\u04B6\u025C\x02\u2314\u230E\x03\x02\x02\x02" +
		"\u2314\u2312\x03\x02\x02\x02\u2315\u0461\x03\x02\x02\x02\u2316\u2318\x07" +
		"\u01A1\x02\x02\u2317\u2316\x03\x02\x02\x02\u2317\u2318\x03\x02\x02\x02" +
		"\u2318\u2319\x03\x02\x02\x02\u2319\u2322\x05\u0466\u0234\x02\u231A\u2323" +
		"\x05\u0464\u0233\x02\u231B\u2320\x07%\x02\x02\u231C\u231D\x07\x06\x02" +
		"\x02\u231D\u231E\x05\u0550\u02A9\x02\u231E\u231F\x07\x07\x02\x02\u231F" +
		"\u2321\x03\x02\x02\x02\u2320\u231C\x03\x02\x02\x02\u2320\u2321\x03\x02" +
		"\x02\x02\u2321\u2323\x03\x02\x02\x02\u2322\u231A\x03\x02\x02\x02\u2322" +
		"\u231B\x03\x02\x02\x02\u2323\u2329\x03\x02\x02\x02\u2324\u2325\x05\u053C" +
		"\u029F\x02\u2325\u2326\x07\x1D\x02\x02\u2326\u2327\t4\x02\x02\u2327\u2329" +
		"\x03\x02\x02\x02\u2328\u2317\x03\x02\x02\x02\u2328\u2324\x03\x02\x02\x02" +
		"\u2329\u0463\x03\x02\x02\x02\u232A\u232C\x07\x06\x02\x02\u232B\u232D\x05" +
		"\u0550\u02A9\x02\u232C\u232B\x03\x02\x02\x02\u232C\u232D\x03\x02\x02\x02" +
		"\u232D\u232E\x03\x02\x02\x02\u232E\u2330\x07\x07\x02\x02\u232F\u232A\x03" +
		"\x02\x02\x02\u2330\u2333\x03\x02\x02\x02\u2331\u232F\x03\x02\x02\x02\u2331" +
		"\u2332\x03\x02\x02\x02\u2332\u0465\x03\x02\x02\x02\u2333\u2331\x03\x02" +
		"\x02\x02\u2334\u2344\x05\u046A\u0236\x02\u2335\u2344\x05\u046E\u0238\x02" +
		"\u2336\u2344\x05\u0472\u023A\x02\u2337\u2344\x05\u047A\u023E\x02\u2338" +
		"\u2344\x05\u0482\u0242\x02\u2339\u2341\x05\u0484\u0243\x02\u233A\u233C" +
		"\x05\u0488\u0245\x02\u233B\u233A\x03\x02\x02\x02\u233B\u233C\x03\x02\x02" +
		"\x02\u233C\u2342\x03\x02\x02\x02\u233D\u233E\x07\x04\x02\x02\u233E\u233F" +
		"\x05\u0550\u02A9\x02\u233F\u2340\x07\x05\x02\x02\u2340\u2342\x03\x02\x02" +
		"\x02\u2341\u233B\x03\x02\x02\x02\u2341\u233D\x03\x02\x02\x02\u2342\u2344" +
		"\x03\x02\x02\x02\u2343\u2334\x03\x02\x02\x02\u2343\u2335\x03\x02\x02\x02" +
		"\u2343\u2336\x03\x02\x02\x02\u2343\u2337\x03\x02\x02\x02\u2343\u2338\x03" +
		"\x02\x02\x02\u2343\u2339\x03\x02\x02\x02\u2344\u0467\x03\x02\x02\x02\u2345" +
		"\u234A\x05\u046E\u0238\x02\u2346\u234A\x05\u0474\u023B\x02\u2347\u234A" +
		"\x05\u047C\u023F\x02\u2348\u234A\x05\u0482\u0242\x02\u2349\u2345\x03\x02" +
		"\x02\x02\u2349\u2346\x03\x02\x02\x02\u2349\u2347\x03\x02\x02\x02\u2349" +
		"\u2348\x03\x02\x02\x02\u234A\u0469\x03\x02\x02\x02\u234B\u234D\x05\u056C" +
		"\u02B7\x02\u234C\u234E\x05\u0216\u010C\x02\u234D\u234C\x03\x02\x02\x02" +
		"\u234D\u234E\x03\x02\x02\x02\u234E\u2350\x03\x02\x02\x02\u234F\u2351\x05" +
		"\u046C\u0237\x02\u2350\u234F\x03\x02\x02\x02\u2350\u2351\x03\x02\x02\x02" +
		"\u2351\u046B\x03\x02\x02\x02\u2352\u2353\x07\x04\x02\x02\u2353\u2354\x05" +
		"\u0502\u0282\x02\u2354\u2355\x07\x05\x02\x02\u2355\u046D\x03\x02\x02\x02" +
		"\u2356\u236F\x07\u0193\x02\x02\u2357\u236F\x07\u0194\x02\x02\u2358\u236F" +
		"\x07\u01A2\x02\x02\u2359\u236F\x07\u0186\x02\x02\u235A\u236F\x07\u019F" +
		"\x02\x02\u235B\u235D\x07\u0190\x02\x02\u235C\u235E\x05\u0470\u0239\x02" +
		"\u235D\u235C\x03\x02\x02\x02\u235D\u235E\x03\x02\x02\x02\u235E\u236F\x03" +
		"\x02\x02\x02\u235F\u2360\x07\xC0\x02\x02\u2360\u236F\x07\u019E\x02\x02" +
		"\u2361\u2363\x07\u018D\x02\x02\u2362\u2364\x05\u046C\u0237\x02\u2363\u2362" +
		"\x03\x02\x02\x02\u2363\u2364\x03\x02\x02\x02\u2364\u236F\x03\x02\x02\x02" +
		"\u2365\u2367\x07\u018C\x02\x02\u2366\u2368\x05\u046C\u0237\x02\u2367\u2366" +
		"\x03\x02\x02\x02\u2367\u2368\x03\x02\x02\x02\u2368\u236F\x03\x02\x02\x02" +
		"\u2369\u236B\x07\u019B\x02\x02\u236A\u236C\x05\u046C\u0237\x02\u236B\u236A" +
		"\x03\x02\x02\x02\u236B\u236C\x03\x02\x02\x02\u236C\u236F\x03\x02\x02\x02" +
		"\u236D\u236F\x07\u0188\x02\x02\u236E\u2356\x03\x02\x02\x02\u236E\u2357" +
		"\x03\x02\x02\x02\u236E\u2358\x03\x02\x02\x02\u236E\u2359\x03\x02\x02\x02" +
		"\u236E\u235A\x03\x02\x02\x02\u236E\u235B\x03\x02\x02\x02\u236E\u235F\x03" +
		"\x02\x02\x02\u236E\u2361\x03\x02\x02\x02\u236E\u2365\x03\x02\x02\x02\u236E" +
		"\u2369\x03\x02\x02\x02\u236E\u236D\x03\x02\x02\x02\u236F\u046F\x03\x02" +
		"\x02\x02\u2370\u2371\x07\x04\x02\x02\u2371\u2372\x05\u0550\u02A9\x02\u2372" +
		"\u2373\x07\x05\x02\x02\u2373\u0471\x03\x02\x02\x02\u2374\u2377\x05\u0476" +
		"\u023C\x02\u2375\u2377\x05\u0478\u023D\x02\u2376\u2374\x03\x02\x02\x02" +
		"\u2376\u2375\x03\x02\x02\x02\u2377\u0473\x03\x02\x02\x02\u2378\u237B\x05" +
		"\u0476\u023C\x02\u2379\u237B\x05\u0478\u023D\x02\u237A\u2378\x03\x02\x02" +
		"\x02\u237A\u2379\x03\x02\x02\x02\u237B\u0475\x03\x02\x02\x02\u237C\u237E" +
		"\x07\u0187\x02\x02\u237D\u237F\x05\u0480\u0241\x02\u237E\u237D\x03\x02" +
		"\x02\x02\u237E\u237F\x03\x02\x02\x02\u237F\u2380\x03\x02\x02\x02\u2380" +
		"\u2381\x07\x04\x02\x02\u2381\u2382\x05\u0502\u0282\x02\u2382\u2383\x07" +
		"\x05\x02\x02\u2383\u0477\x03\x02\x02\x02\u2384\u2386\x07\u0187\x02\x02" +
		"\u2385\u2387\x05\u0480\u0241\x02\u2386\u2385\x03\x02\x02\x02\u2386\u2387" +
		"\x03\x02\x02\x02\u2387\u0479\x03\x02\x02\x02\u2388\u238D\x05\u047E\u0240" +
		"\x02\u2389\u238A\x07\x04\x02\x02\u238A\u238B\x05\u0550\u02A9\x02\u238B" +
		"\u238C\x07\x05\x02\x02\u238C\u238E\x03\x02\x02\x02\u238D\u2389\x03\x02" +
		"\x02\x02\u238D\u238E\x03\x02\x02\x02\u238E\u047B\x03\x02\x02\x02\u238F" +
		"\u2394\x05\u047E\u0240\x02\u2390\u2391\x07\x04\x02\x02\u2391\u2392\x05" +
		"\u0550\u02A9\x02\u2392\u2393\x07\x05\x02\x02\u2393\u2395\x03\x02\x02\x02" +
		"\u2394\u2390\x03\x02\x02\x02\u2394\u2395\x03\x02\x02\x02\u2395\u047D\x03" +
		"\x02\x02\x02\u2396\u2398\t5\x02\x02\u2397\u2399\x05\u0480\u0241\x02\u2398" +
		"\u2397\x03\x02\x02\x02\u2398\u2399\x03\x02\x02\x02\u2399\u23A1\x03\x02" +
		"\x02\x02\u239A\u23A1\x07\u01A9\x02\x02\u239B\u239C\x07\u0197\x02\x02\u239C" +
		"\u239E\t6\x02\x02\u239D\u239F\x05\u0480\u0241\x02\u239E\u239D\x03\x02" +
		"\x02\x02\u239E\u239F\x03\x02\x02\x02\u239F\u23A1\x03\x02\x02\x02\u23A0" +
		"\u2396\x03\x02\x02\x02\u23A0\u239A\x03\x02\x02\x02\u23A0\u239B\x03\x02" +
		"\x02\x02\u23A1\u047F\x03\x02\x02\x02\u23A2\u23A3\x07\u0178\x02\x02\u23A3" +
		"\u0481\x03\x02\x02\x02\u23A4\u23A9\t7\x02\x02\u23A5\u23A6\x07\x04\x02" +
		"\x02\u23A6\u23A7\x05\u0550\u02A9\x02\u23A7\u23A8\x07\x05\x02\x02\u23A8" +
		"\u23AA\x03\x02\x02\x02\u23A9\u23A5\x03\x02\x02\x02\u23A9\u23AA\x03\x02" +
		"\x02\x02\u23AA\u23AC\x03\x02\x02\x02\u23AB\u23AD\x05\u0486\u0244\x02\u23AC" +
		"\u23AB\x03\x02\x02\x02\u23AC\u23AD\x03\x02\x02\x02\u23AD\u0483\x03\x02" +
		"\x02\x02\u23AE\u23AF\x07\u0195\x02\x02\u23AF\u0485\x03\x02\x02\x02\u23B0" +
		"\u23B1\x07k\x02\x02\u23B1\u23B2\x07\u01A4\x02\x02\u23B2\u23B7\x07\u0184" +
		"\x02\x02\u23B3\u23B4\x07\u017D\x02\x02\u23B4\u23B5\x07\u01A4\x02\x02\u23B5" +
		"\u23B7\x07\u0184\x02\x02\u23B6\u23B0\x03\x02\x02\x02\u23B6\u23B3\x03\x02" +
		"\x02\x02\u23B7\u0487\x03\x02\x02\x02\u23B8\u23D2\x07\u0182\x02\x02\u23B9" +
		"\u23D2\x07\u010A\x02\x02\u23BA\u23D2\x07\xB2\x02\x02\u23BB\u23D2\x07\xDC" +
		"\x02\x02\u23BC\u23D2\x07\u0107\x02\x02\u23BD\u23D2\x05\u048A\u0246\x02" +
		"\u23BE\u23BF\x07\u0182\x02\x02\u23BF\u23C0\x07`\x02\x02\u23C0\u23D2\x07" +
		"\u010A\x02\x02\u23C1\u23C2\x07\xB2\x02\x02\u23C2\u23C6\x07`\x02\x02\u23C3" +
		"\u23C7\x07\xDC\x02\x02\u23C4\u23C7\x07\u0107\x02\x02\u23C5\u23C7\x05\u048A" +
		"\u0246\x02\u23C6\u23C3\x03\x02\x02\x02\u23C6\u23C4\x03\x02\x02\x02\u23C6" +
		"\u23C5\x03\x02\x02\x02\u23C7\u23D2\x03\x02\x02\x02\u23C8\u23C9\x07\xDC" +
		"\x02\x02\u23C9\u23CC\x07`\x02\x02\u23CA\u23CD\x07\u0107\x02\x02\u23CB" +
		"\u23CD\x05\u048A\u0246\x02\u23CC\u23CA\x03\x02\x02\x02\u23CC\u23CB\x03" +
		"\x02\x02\x02\u23CD\u23D2\x03\x02\x02\x02\u23CE\u23CF\x07\u0107\x02\x02" +
		"\u23CF\u23D0\x07`\x02\x02\u23D0\u23D2\x05\u048A\u0246\x02\u23D1\u23B8" +
		"\x03\x02\x02\x02\u23D1\u23B9\x03\x02\x02\x02\u23D1\u23BA\x03\x02\x02\x02" +
		"\u23D1\u23BB\x03\x02\x02\x02\u23D1\u23BC\x03\x02\x02\x02\u23D1\u23BD\x03" +
		"\x02\x02\x02\u23D1\u23BE\x03\x02\x02\x02\u23D1\u23C1\x03\x02\x02\x02\u23D1" +
		"\u23C8\x03\x02\x02\x02\u23D1\u23CE\x03\x02\x02\x02\u23D2\u0489\x03\x02" +
		"\x02\x02\u23D3\u23D8\x07\u0148\x02\x02\u23D4\u23D5\x07\x04\x02\x02\u23D5" +
		"\u23D6\x05\u0550\u02A9\x02\u23D6\u23D7\x07\x05\x02\x02\u23D7\u23D9\x03" +
		"\x02\x02";
	private static readonly _serializedATNSegment17: string =
		"\x02\u23D8\u23D4\x03\x02\x02\x02\u23D8\u23D9\x03\x02\x02\x02\u23D9\u048B" +
		"\x03\x02\x02\x02\u23DA\u23DB\x07\xC7\x02\x02\u23DB\u23DC\x05\u048E\u0248" +
		"\x02\u23DC\u048D\x03\x02\x02\x02\u23DD\u23DE\x05\u0490\u0249\x02\u23DE" +
		"\u048F\x03\x02\x02\x02\u23DF\u23E1\x05\u0492\u024A\x02\u23E0\u23E2\x05" +
		"\u04FC\u027F\x02\u23E1\u23E0\x03\x02\x02\x02\u23E1\u23E2\x03\x02\x02\x02" +
		"\u23E2\u0491\x03\x02\x02\x02\u23E3\u23E8\x05\u0494\u024B\x02\u23E4\u23E5" +
		"\t8\x02\x02\u23E5\u23E7\x05\u0494\u024B\x02\u23E6\u23E4\x03\x02\x02\x02" +
		"\u23E7\u23EA\x03\x02\x02\x02\u23E8\u23E6\x03\x02\x02\x02\u23E8\u23E9\x03" +
		"\x02\x02\x02\u23E9\u0493\x03\x02\x02\x02\u23EA\u23E8\x03\x02\x02\x02\u23EB" +
		"\u23F0\x05\u0496\u024C\x02\u23EC\u23ED\x07T\x02\x02\u23ED\u23EF\x05\u0496" +
		"\u024C\x02\u23EE\u23EC\x03\x02\x02\x02\u23EF\u23F2\x03\x02\x02\x02\u23F0" +
		"\u23EE\x03\x02\x02\x02\u23F0\u23F1\x03\x02\x02\x02\u23F1\u0495\x03\x02" +
		"\x02\x02\u23F2\u23F0\x03\x02\x02\x02\u23F3\u23F8\x05\u0498\u024D\x02\u23F4" +
		"\u23F5\x07#\x02\x02\u23F5\u23F7\x05\u0498\u024D\x02\u23F6\u23F4\x03\x02" +
		"\x02\x02\u23F7\u23FA\x03\x02\x02\x02\u23F8\u23F6\x03\x02\x02\x02\u23F8" +
		"\u23F9\x03\x02\x02\x02\u23F9\u0497\x03\x02\x02\x02\u23FA\u23F8\x03\x02" +
		"\x02\x02\u23FB\u2401\x05\u049A\u024E\x02\u23FC\u23FE\x07O\x02\x02\u23FD" +
		"\u23FC\x03\x02\x02\x02\u23FD\u23FE\x03\x02\x02\x02\u23FE\u23FF\x03\x02" +
		"\x02\x02\u23FF\u2400\x07F\x02\x02\u2400\u2402\x05\u051C\u028F\x02\u2401" +
		"\u23FD\x03\x02\x02\x02\u2401\u2402\x03\x02\x02\x02\u2402\u0499\x03\x02" +
		"\x02\x02\u2403\u2405\x07O\x02\x02\u2404\u2403\x03\x02\x02\x02\u2404\u2405" +
		"\x03\x02\x02\x02\u2405\u2406\x03\x02\x02\x02\u2406\u2407\x05\u049C\u024F" +
		"\x02\u2407\u049B\x03\x02\x02\x02\u2408\u240A\x05\u049E\u0250\x02\u2409" +
		"\u240B\t9\x02\x02\u240A\u2409\x03\x02\x02\x02\u240A\u240B\x03\x02\x02" +
		"\x02\u240B\u049D\x03\x02\x02\x02\u240C\u2424\x05\u04A0\u0251\x02\u240D" +
		"\u240F\x07v\x02\x02\u240E\u2410\x07O\x02\x02\u240F\u240E\x03\x02\x02\x02" +
		"\u240F\u2410\x03\x02\x02\x02\u2410\u2422\x03\x02\x02\x02\u2411\u2423\x07" +
		"P\x02\x02\u2412\u2423\x07b\x02\x02\u2413\u2423\x07>\x02\x02\u2414\u2423" +
		"\x07\u016F\x02\x02\u2415\u2416\x07:\x02\x02\u2416\u2417\x07B\x02\x02\u2417" +
		"\u2423\x05\u048E\u0248\x02\u2418\u2419\x07\u0115\x02\x02\u2419\u241A\x07" +
		"\x04\x02\x02\u241A\u241B\x05\u0508\u0285\x02\u241B\u241C\x07\x05\x02\x02" +
		"\u241C\u2423\x03\x02\x02\x02\u241D\u2423\x07\xBE\x02\x02\u241E\u2420\x05" +
		"\u0512\u028A\x02\u241F\u241E\x03\x02\x02\x02\u241F\u2420\x03\x02\x02\x02" +
		"\u2420\u2421\x03\x02\x02\x02\u2421\u2423\x07\u01E0\x02\x02\u2422\u2411" +
		"\x03\x02\x02\x02\u2422\u2412\x03\x02\x02\x02\u2422\u2413\x03\x02\x02\x02" +
		"\u2422\u2414\x03\x02\x02\x02\u2422\u2415\x03\x02\x02\x02\u2422\u2418\x03" +
		"\x02\x02\x02\u2422\u241D\x03\x02\x02\x02\u2422\u241F\x03\x02\x02\x02\u2423" +
		"\u2425\x03\x02\x02\x02\u2424\u240D\x03\x02\x02\x02\u2424\u2425\x03\x02" +
		"\x02\x02\u2425\u049F\x03\x02\x02\x02\u2426\u2432\x05\u04A2\u0252\x02\u2427" +
		"\u2428\t:\x02\x02\u2428\u2433\x05\u04A2\u0252\x02\u2429\u242A\x05\u0500" +
		"\u0281\x02\u242A\u2430\x05\u04F6\u027C\x02\u242B\u2431\x05\u03C8\u01E5" +
		"\x02\u242C\u242D\x07\x04\x02\x02\u242D\u242E\x05\u048E\u0248\x02\u242E" +
		"\u242F\x07\x05\x02\x02\u242F\u2431\x03\x02\x02\x02\u2430\u242B\x03\x02" +
		"\x02\x02\u2430\u242C\x03\x02\x02\x02\u2431\u2433\x03\x02\x02\x02\u2432" +
		"\u2427\x03\x02\x02\x02\u2432\u2429\x03\x02\x02\x02\u2432\u2433\x03\x02" +
		"\x02\x02\u2433\u04A1\x03\x02\x02\x02\u2434\u2446\x05\u04A4\u0253\x02\u2435" +
		"\u2437\x07O\x02\x02\u2436\u2435\x03\x02\x02\x02\u2436\u2437\x03\x02\x02" +
		"\x02\u2437\u2440\x03\x02\x02\x02\u2438\u2441\x07z\x02\x02\u2439\u2441" +
		"\x07t\x02\x02\u243A\u243B\x07\x81\x02\x02\u243B\u2441\x07`\x02\x02\u243C" +
		"\u243E\x07\u0185\x02\x02\u243D\u243F\x07]\x02\x02\u243E\u243D\x03\x02" +
		"\x02\x02\u243E\u243F\x03\x02\x02\x02\u243F\u2441\x03\x02\x02\x02\u2440" +
		"\u2438\x03\x02\x02\x02\u2440\u2439\x03\x02\x02\x02\u2440\u243A\x03\x02" +
		"\x02\x02\u2440\u243C\x03\x02\x02\x02\u2441\u2442\x03\x02\x02\x02\u2442" +
		"\u2444\x05\u04A4\u0253\x02\u2443\u2445\x05\u048C\u0247\x02\u2444\u2443" +
		"\x03\x02\x02\x02\u2444\u2445\x03\x02\x02\x02\u2445\u2447\x03\x02\x02\x02" +
		"\u2446\u2436\x03\x02\x02\x02\u2446\u2447\x03\x02\x02\x02\u2447\u04A3\x03" +
		"\x02\x02\x02\u2448\u244E\x05\u04A6\u0254\x02\u2449\u244A\x05\u04FC\u027F" +
		"\x02\u244A\u244B\x05\u04A6\u0254\x02\u244B\u244D\x03\x02\x02\x02\u244C" +
		"\u2449\x03\x02\x02\x02\u244D\u2450\x03\x02\x02\x02\u244E\u244C\x03\x02" +
		"\x02\x02\u244E\u244F\x03\x02\x02\x02\u244F\u04A5\x03\x02\x02\x02\u2450" +
		"\u244E\x03\x02\x02\x02\u2451\u2453\x05\u04FC\u027F\x02\u2452\u2451\x03" +
		"\x02\x02\x02\u2452\u2453\x03\x02\x02\x02\u2453\u2454\x03\x02\x02\x02\u2454" +
		"\u2455\x05\u04A8\u0255\x02\u2455\u04A7\x03\x02\x02\x02\u2456\u245B\x05" +
		"\u04AA\u0256\x02\u2457\u2458\t;\x02\x02\u2458\u245A\x05\u04AA\u0256\x02" +
		"\u2459\u2457\x03\x02\x02\x02\u245A\u245D\x03\x02\x02\x02\u245B\u2459\x03" +
		"\x02\x02\x02\u245B\u245C\x03\x02\x02\x02\u245C\u04A9\x03\x02\x02\x02\u245D" +
		"\u245B\x03\x02\x02\x02\u245E\u2463\x05\u04AC\u0257\x02\u245F\u2460\t<" +
		"\x02\x02\u2460\u2462\x05\u04AC\u0257\x02\u2461\u245F\x03\x02\x02\x02\u2462" +
		"\u2465\x03\x02\x02\x02\u2463\u2461\x03\x02\x02\x02\u2463\u2464\x03\x02" +
		"\x02\x02\u2464\u04AB\x03\x02\x02\x02\u2465\u2463\x03\x02\x02\x02\u2466" +
		"\u2469\x05\u04AE\u0258\x02\u2467\u2468\x07\x11\x02\x02\u2468\u246A\x05" +
		"\u048E\u0248\x02\u2469\u2467\x03\x02\x02\x02\u2469\u246A\x03\x02\x02\x02" +
		"\u246A\u04AD\x03\x02\x02\x02\u246B\u246D\t;\x02\x02\u246C\u246B\x03\x02" +
		"\x02\x02\u246C\u246D\x03\x02\x02\x02\u246D\u246E\x03\x02\x02\x02\u246E" +
		"\u246F\x05\u04B0\u0259\x02\u246F\u04AF\x03\x02\x02\x02\u2470\u2475\x05" +
		"\u04B2\u025A\x02\u2471\u2472\x07\x90\x02\x02\u2472\u2473\x07\u01A4\x02" +
		"\x02\u2473\u2474\x07\u0184\x02\x02\u2474\u2476\x05\u048E\u0248\x02\u2475" +
		"\u2471\x03\x02\x02\x02\u2475\u2476\x03\x02\x02\x02\u2476\u04B1\x03\x02" +
		"\x02\x02\u2477\u247A\x05\u04B4\u025B\x02\u2478\u2479\x07-\x02\x02\u2479" +
		"\u247B\x05\u0214\u010B\x02\u247A\u2478\x03\x02\x02\x02\u247A\u247B\x03" +
		"\x02\x02\x02\u247B\u04B3\x03\x02\x02\x02\u247C\u2481\x05\u04B8\u025D\x02" +
		"\u247D\u247E\x07\x1C\x02\x02\u247E\u2480\x05\u0462\u0232\x02\u247F\u247D" +
		"\x03\x02\x02\x02\u2480\u2483\x03\x02\x02\x02\u2481\u247F\x03\x02\x02\x02" +
		"\u2481\u2482\x03\x02\x02\x02\u2482\u04B5\x03\x02\x02\x02\u2483\u2481\x03" +
		"\x02\x02\x02\u2484\u2485\b\u025C\x01\x02\u2485\u248C\x05\u04B8\u025D\x02" +
		"\u2486\u2487\t;\x02\x02\u2487\u248C\x05\u04B6\u025C\v\u2488\u2489\x05" +
		"\u04FC\u027F\x02\u2489\u248A\x05\u04B6\u025C\x05\u248A\u248C\x03\x02\x02" +
		"\x02\u248B\u2484\x03\x02\x02\x02\u248B\u2486\x03\x02\x02\x02\u248B\u2488" +
		"\x03\x02\x02\x02\u248C\u24B4\x03\x02\x02\x02\u248D\u248E\f\n\x02\x02\u248E" +
		"\u248F\x07\x11\x02\x02\u248F\u24B3\x05\u04B6\u025C\v\u2490\u2491\f\t\x02" +
		"\x02\u2491\u2492\t<\x02\x02\u2492\u24B3\x05\u04B6\u025C\n\u2493\u2494" +
		"\f\b\x02\x02\u2494\u2495\t;\x02\x02\u2495\u24B3\x05\u04B6\u025C\t\u2496" +
		"\u2497\f\x07\x02\x02\u2497\u2498\x05\u04FC\u027F\x02\u2498\u2499\x05\u04B6" +
		"\u025C\b\u2499\u24B3\x03\x02\x02\x02\u249A\u249B\f\x06\x02\x02\u249B\u249C" +
		"\t:\x02\x02\u249C\u24B3\x05\u04B6\u025C\x07\u249D\u249E\f\f\x02\x02\u249E" +
		"\u249F\x07\x1C\x02\x02\u249F\u24B3\x05\u0462\u0232\x02\u24A0\u24A1\f\x04" +
		"\x02\x02\u24A1\u24B3\x05\u04FC\u027F\x02\u24A2\u24A3\f\x03\x02\x02\u24A3" +
		"\u24A5\x07v\x02\x02\u24A4\u24A6\x07O\x02\x02\u24A5\u24A4\x03\x02\x02\x02" +
		"\u24A5\u24A6\x03\x02\x02\x02\u24A6\u24B0\x03\x02\x02\x02\u24A7\u24A8\x07" +
		":\x02\x02\u24A8\u24A9\x07B\x02\x02\u24A9\u24B1\x05\u04B6\u025C\x02\u24AA" +
		"\u24AB\x07\u0115\x02\x02\u24AB\u24AC\x07\x04\x02\x02\u24AC\u24AD\x05\u0508" +
		"\u0285\x02\u24AD\u24AE\x07\x05\x02\x02\u24AE\u24B1\x03\x02\x02\x02\u24AF" +
		"\u24B1\x07\xBE\x02\x02\u24B0\u24A7\x03\x02\x02\x02\u24B0\u24AA\x03\x02" +
		"\x02\x02\u24B0\u24AF\x03\x02\x02\x02\u24B1\u24B3\x03\x02\x02\x02\u24B2" +
		"\u248D\x03\x02\x02\x02\u24B2\u2490\x03\x02\x02\x02\u24B2\u2493\x03\x02" +
		"\x02\x02\u24B2\u2496\x03\x02\x02\x02\u24B2\u249A\x03\x02\x02\x02\u24B2" +
		"\u249D\x03\x02\x02\x02\u24B2\u24A0\x03\x02\x02\x02\u24B2\u24A2\x03\x02" +
		"\x02\x02\u24B3\u24B6\x03\x02\x02\x02\u24B4\u24B2\x03\x02\x02\x02\u24B4" +
		"\u24B5\x03\x02\x02\x02\u24B5\u04B7\x03\x02\x02\x02\u24B6\u24B4\x03\x02" +
		"\x02\x02\u24B7\u24B8\x07\u018E\x02\x02\u24B8\u24DC\x05\u03C8\u01E5\x02" +
		"\u24B9\u24BC\x07%\x02\x02\u24BA\u24BD\x05\u03C8\u01E5\x02\u24BB\u24BD" +
		"\x05\u050A\u0286\x02\u24BC\u24BA\x03\x02\x02\x02\u24BC\u24BB\x03\x02\x02" +
		"\x02\u24BD\u24DC\x03\x02\x02\x02\u24BE\u24BF\x07\x1E\x02\x02\u24BF\u24DC" +
		"\x05\u0530\u0299\x02\u24C0\u24C1\x07\u01D8\x02\x02\u24C1\u24C2\x07\x04" +
		"\x02\x02\u24C2\u24C3\x05\u0502\u0282\x02\u24C3\u24C4\x07\x05\x02\x02\u24C4" +
		"\u24DC\x03\x02\x02\x02\u24C5\u24C6\x07d\x02\x02\u24C6\u24DC\x05\u03C8" +
		"\u01E5\x02\u24C7\u24DC\x05\u0528\u0295\x02\u24C8\u24DC\x05\u0548\u02A5" +
		"\x02\u24C9\u24DC\x05\u04BA\u025E\x02\u24CA\u24CB\x07\x04\x02\x02\u24CB" +
		"\u24CC\x05\u048E\u0248\x02\u24CC\u24CD\x07\x05\x02\x02\u24CD\u24CE\x05" +
		"\u0530\u0299\x02\u24CE\u24DC\x03\x02\x02\x02\u24CF\u24DC\x05\u051E\u0290" +
		"\x02\u24D0\u24DC\x05\u04BE\u0260\x02\u24D1\u24D3\x05\u03C8\u01E5\x02\u24D2" +
		"\u24D4\x05\u052E\u0298\x02\u24D3\u24D2\x03\x02\x02\x02\u24D3\u24D4\x03" +
		"\x02\x02\x02\u24D4\u24DC\x03\x02\x02\x02\u24D5\u24DC\x05\u04F2\u027A\x02" +
		"\u24D6\u24DC\x05\u04F4\u027B\x02\u24D7\u24D8\x05\u04F0\u0279\x02\u24D8" +
		"\u24D9\x07\x7F\x02\x02\u24D9\u24DA\x05\u04F0\u0279\x02\u24DA\u24DC\x03" +
		"\x02\x02\x02\u24DB\u24B7\x03\x02\x02\x02\u24DB\u24B9\x03\x02\x02\x02\u24DB" +
		"\u24BE\x03\x02\x02\x02\u24DB\u24C0\x03\x02\x02\x02\u24DB\u24C5\x03\x02" +
		"\x02\x02\u24DB\u24C7\x03\x02\x02\x02\u24DB\u24C8\x03\x02\x02\x02\u24DB" +
		"\u24C9\x03\x02\x02\x02\u24DB\u24CA\x03\x02\x02\x02\u24DB\u24CF\x03\x02" +
		"\x02\x02\u24DB\u24D0\x03\x02\x02\x02\u24DB\u24D1\x03\x02\x02\x02\u24DB" +
		"\u24D5\x03\x02\x02\x02\u24DB\u24D6\x03\x02\x02\x02\u24DB\u24D7\x03\x02" +
		"\x02\x02\u24DC\u04B9\x03\x02\x02\x02\u24DD\u24DE\x07\u0228\x02\x02\u24DE" +
		"\u04BB\x03\x02\x02\x02\u24DF\u24E0\x05\u0546\u02A4\x02\u24E0\u24F6\x07" +
		"\x04\x02\x02\u24E1\u24E5\x05\u0504\u0283\x02\u24E2\u24E3\x07\b\x02\x02" +
		"\u24E3\u24E4\x07g\x02\x02\u24E4\u24E6\x05\u0506\u0284\x02\u24E5\u24E2" +
		"\x03\x02\x02\x02\u24E5\u24E6\x03\x02\x02\x02\u24E6\u24E8\x03\x02\x02\x02" +
		"\u24E7\u24E9\x05\u03EC\u01F7\x02\u24E8\u24E7\x03\x02\x02\x02\u24E8\u24E9" +
		"\x03\x02\x02\x02\u24E9\u24F7\x03\x02\x02\x02\u24EA\u24EB\x07g\x02\x02" +
		"\u24EB\u24ED\x05\u0506\u0284\x02\u24EC\u24EE\x05\u03EC\u01F7\x02\u24ED" +
		"\u24EC\x03\x02\x02\x02\u24ED\u24EE\x03\x02\x02\x02\u24EE\u24F7\x03\x02" +
		"\x02\x02\u24EF\u24F0\t0\x02\x02\u24F0\u24F2\x05\u0504\u0283\x02\u24F1" +
		"\u24F3\x05\u03EC\u01F7\x02\u24F2\u24F1\x03\x02\x02\x02\u24F2\u24F3\x03" +
		"\x02\x02\x02\u24F3\u24F7\x03\x02\x02\x02\u24F4\u24F7\x07\v\x02\x02\u24F5" +
		"\u24F7\x03\x02\x02\x02\u24F6\u24E1\x03\x02\x02\x02\u24F6\u24EA\x03\x02" +
		"\x02\x02\u24F6\u24EF\x03\x02\x02\x02\u24F6\u24F4\x03\x02\x02\x02\u24F6" +
		"\u24F5\x03\x02\x02\x02\u24F7\u24F8\x03\x02\x02\x02\u24F8\u24F9\x07\x05" +
		"\x02\x02\u24F9\u04BD\x03\x02\x02\x02\u24FA\u24FC\x05\u04BC\u025F\x02\u24FB" +
		"\u24FD\x05\u04D6\u026C\x02\u24FC\u24FB\x03\x02\x02\x02\u24FC\u24FD\x03" +
		"\x02\x02\x02\u24FD\u24FF\x03\x02\x02\x02\u24FE\u2500\x05\u04D8\u026D\x02" +
		"\u24FF\u24FE\x03\x02\x02\x02\u24FF\u2500\x03\x02\x02\x02\u2500\u2502\x03" +
		"\x02\x02\x02\u2501\u2503\x05\u04E0\u0271\x02\u2502\u2501\x03\x02\x02\x02" +
		"\u2502\u2503\x03\x02\x02\x02\u2503\u2506\x03\x02\x02\x02\u2504\u2506\x05" +
		"\u04C2\u0262\x02\u2505\u24FA\x03\x02\x02\x02\u2505\u2504\x03\x02\x02\x02" +
		"\u2506\u04BF\x03\x02\x02\x02\u2507\u250A\x05\u04BC\u025F\x02\u2508\u250A" +
		"\x05\u04C2\u0262\x02\u2509\u2507\x03\x02\x02\x02\u2509\u2508\x03\x02\x02" +
		"\x02\u250A\u04C1\x03\x02\x02\x02\u250B\u250C\x07n\x02\x02\u250C\u250D" +
		"\x07@\x02\x02\u250D\u250E\x07\x04\x02\x02\u250E\u250F\x05\u048E\u0248" +
		"\x02\u250F\u2510\x07\x05\x02\x02\u2510\u25C4\x03\x02\x02\x02\u2511\u25C4" +
		"\x072\x02\x02\u2512\u2517\x074\x02\x02\u2513\u2514\x07\x04\x02\x02\u2514" +
		"\u2515\x05\u0550\u02A9\x02\u2515\u2516\x07\x05\x02\x02\u2516\u2518\x03" +
		"\x02\x02\x02\u2517\u2513\x03\x02\x02\x02\u2517\u2518\x03\x02\x02\x02\u2518" +
		"\u25C4\x03\x02\x02\x02\u2519\u251E\x075\x02\x02\u251A\u251B\x07\x04\x02" +
		"\x02\u251B\u251C\x05\u0550\u02A9\x02\u251C\u251D\x07\x05\x02\x02\u251D" +
		"\u251F\x03\x02\x02\x02\u251E\u251A\x03\x02\x02\x02\u251E\u251F\x03\x02" +
		"\x02\x02\u251F\u25C4\x03\x02\x02\x02\u2520\u2525\x07M\x02\x02\u2521\u2522" +
		"\x07\x04\x02\x02\u2522\u2523\x05\u0550\u02A9\x02\u2523\u2524\x07\x05\x02" +
		"\x02\u2524\u2526\x03\x02\x02\x02\u2525\u2521\x03\x02\x02\x02\u2525\u2526" +
		"\x03\x02\x02\x02\u2526\u25C4\x03\x02\x02\x02\u2527\u252C\x07N\x02\x02" +
		"\u2528\u2529\x07\x04\x02\x02\u2529\u252A\x05\u0550\u02A9\x02\u252A\u252B" +
		"\x07\x05\x02\x02\u252B\u252D\x03\x02\x02\x02\u252C\u2528\x03\x02\x02\x02" +
		"\u252C\u252D\x03\x02\x02\x02\u252D\u25C4\x03\x02\x02\x02\u252E\u25C4\x07" +
		"3\x02\x02\u252F\u25C4\x076\x02\x02\u2530\u25C4\x07[\x02\x02\u2531\u25C4" +
		"\x07e\x02\x02\u2532\u25C4\x071\x02\x02\u2533\u25C4\x07q\x02\x02\u2534" +
		"\u2535\x07+\x02\x02\u2535\u2536\x07\x04\x02\x02\u2536\u2537\x05\u048E" +
		"\u0248\x02\u2537\u2538\x07&\x02\x02\u2538\u2539\x05\u0462\u0232\x02\u2539" +
		"\u253A\x07\x05\x02\x02\u253A\u25C4\x03\x02\x02\x02\u253B\u253C\x07\u018F" +
		"\x02\x02\u253C\u253E\x07\x04\x02\x02\u253D\u253F\x05\u050E\u0288\x02\u253E" +
		"\u253D\x03\x02\x02\x02\u253E\u253F\x03\x02\x02\x02\u253F\u2540\x03\x02" +
		"\x02\x02\u2540\u25C4\x07\x05\x02\x02\u2541\u2542\x07\u01EB\x02\x02\u2542" +
		"\u2543\x07\x04\x02\x02\u2543\u2546\x05\u048E\u0248\x02\u2544\u2545\x07" +
		"\b\x02\x02\u2545\u2547\x05\u0512\u028A\x02\u2546\u2544\x03\x02\x02\x02" +
		"\u2546\u2547\x03\x02\x02\x02\u2547\u2548\x03\x02\x02\x02\u2548\u2549\x07" +
		"\x05\x02\x02\u2549\u25C4\x03\x02\x02\x02\u254A\u254B\x07\u019C\x02\x02" +
		"\u254B\u254C\x07\x04\x02\x02\u254C\u254D\x05\u0514\u028B\x02\u254D\u254E" +
		"\x07\x05\x02\x02\u254E\u25C4\x03\x02\x02\x02\u254F\u2550\x07\u019D\x02" +
		"\x02\u2550\u2552\x07\x04\x02\x02\u2551\u2553\x05\u0516\u028C\x02\u2552" +
		"\u2551\x03\x02\x02\x02\u2552\u2553\x03\x02\x02\x02\u2553\u2554\x03\x02" +
		"\x02\x02\u2554\u25C4\x07\x05\x02\x02\u2555\u2556\x07\u01A3\x02\x02\u2556" +
		"\u2558\x07\x04\x02\x02\u2557\u2559\x05\u0518\u028D\x02\u2558\u2557\x03" +
		"\x02\x02\x02\u2558\u2559\x03\x02\x02\x02\u2559\u255A\x03\x02\x02\x02\u255A" +
		"\u25C4\x07\x05\x02\x02\u255B\u255C\x07\u01A6\x02\x02\u255C\u255D\x07\x04" +
		"\x02\x02\u255D\u255E\x05\u048E\u0248\x02\u255E\u255F\x07&\x02\x02\u255F" +
		"\u2560\x05\u0462\u0232\x02\u2560\u2561\x07\x05\x02\x02\u2561\u25C4\x03" +
		"\x02\x02\x02\u2562\u2563\x07\u01A7\x02\x02\u2563\u2565\x07\x04\x02\x02" +
		"\u2564\u2566\t=\x02\x02\u2565\u2564\x03\x02\x02\x02\u2565\u2566\x03\x02" +
		"\x02\x02\u2566\u2567\x03\x02\x02\x02\u2567\u2568\x05\u051A\u028E\x02\u2568" +
		"\u2569\x07\x05\x02\x02\u2569\u25C4\x03\x02\x02\x02\u256A\u256B\x07\u019A" +
		"\x02\x02\u256B\u256C\x07\x04\x02\x02\u256C\u256D\x05\u048E\u0248\x02\u256D" +
		"\u256E\x07\b\x02\x02\u256E\u256F\x05\u048E\u0248\x02\u256F\u2570\x07\x05" +
		"\x02\x02\u2570\u25C4\x03\x02\x02\x02\u2571\u2572\x07\u018B\x02\x02\u2572" +
		"\u2573\x07\x04\x02\x02\u2573\u2574\x05\u0502\u0282\x02\u2574\u2575\x07" +
		"\x05\x02\x02\u2575\u25C4\x03\x02\x02\x02\u2576\u2577\x07\u0191\x02\x02" +
		"\u2577\u2578\x07\x04\x02\x02\u2578\u2579\x05\u0502\u0282\x02\u2579\u257A" +
		"\x07\x05\x02\x02\u257A\u25C4\x03\x02\x02\x02\u257B\u257C\x07\u0196\x02" +
		"\x02\u257C\u257D\x07\x04\x02\x02\u257D\u257E\x05\u0502\u0282\x02\u257E" +
		"\u257F\x07\x05\x02\x02\u257F\u25C4\x03\x02\x02\x02\u2580\u2581\x07\u01AB" +
		"\x02\x02\u2581\u2582\x07\x04\x02\x02\u2582\u2583\x05\u0502\u0282\x02\u2583" +
		"\u2584\x07\x05\x02\x02\u2584\u25C4\x03\x02\x02\x02\u2585\u2586\x07\u01AC" +
		"\x02\x02\u2586\u2587\x07\x04\x02\x02\u2587\u2588\x07\u010C\x02\x02\u2588" +
		"\u258E\x05\u0570\u02B9\x02\u2589\u258C\x07\b\x02\x02\u258A\u258D\x05\u04C8" +
		"\u0265\x02\u258B\u258D\x05\u0502\u0282\x02\u258C\u258A\x03\x02\x02\x02" +
		"\u258C\u258B\x03\x02\x02\x02\u258D\u258F\x03\x02\x02\x02\u258E\u2589\x03" +
		"\x02\x02\x02\u258E\u258F\x03\x02\x02\x02\u258F\u2590\x03\x02\x02\x02\u2590" +
		"\u2591\x07\x05\x02\x02\u2591\u25C4\x03\x02\x02\x02\u2592\u2593\x07\u01AD" +
		"\x02\x02\u2593\u2594\x07\x04\x02\x02\u2594\u2595\x05\u04B8\u025D\x02\u2595" +
		"\u2596\x05\u04D2\u026A\x02\u2596\u2597\x07\x05\x02\x02\u2597\u25C4\x03" +
		"\x02\x02\x02\u2598\u2599\x07\u01AE\x02\x02\u2599\u259A\x07\x04\x02\x02" +
		"\u259A\u259B\x05\u04CA\u0266\x02\u259B\u259C\x07\x05\x02\x02\u259C\u25C4" +
		"\x03\x02\x02\x02\u259D\u259E\x07\u01AF\x02\x02\u259E\u259F\x07\x04\x02" +
		"\x02\u259F\u25A0\x05\u04CE\u0268\x02\u25A0\u25A2\x05\u048E\u0248\x02\u25A1" +
		"\u25A3\x05\u04D0\u0269\x02\u25A2\u25A1\x03\x02\x02\x02\u25A2\u25A3\x03" +
		"\x02\x02\x02\u25A3\u25A4\x03\x02\x02\x02\u25A4\u25A5\x07\x05\x02\x02\u25A5" +
		"\u25C4\x03\x02\x02\x02\u25A6\u25A7\x07\u01B0\x02\x02\u25A7\u25A8\x07\x04" +
		"\x02\x02\u25A8\u25A9\x07\u010C\x02\x02\u25A9\u25AC\x05\u0570\u02B9\x02" +
		"\u25AA\u25AB\x07\b\x02\x02\u25AB\u25AD\x05\u048E\u0248\x02\u25AC\u25AA" +
		"\x03\x02\x02\x02\u25AC\u25AD\x03\x02\x02\x02\u25AD\u25AE\x03\x02\x02\x02" +
		"\u25AE\u25AF\x07\x05\x02\x02\u25AF\u25C4\x03\x02\x02\x02\u25B0\u25B1\x07" +
		"\u01B1\x02\x02\u25B1\u25B2\x07\x04\x02\x02\u25B2\u25B3\x07\u0181\x02\x02" +
		"\u25B3\u25B4\x05\u048E\u0248\x02\u25B4\u25B5\x07\b\x02\x02\u25B5\u25B7" +
		"\x05\u04C4\u0263\x02\u25B6\u25B8\x05\u04C6\u0264\x02\u25B7\u25B6\x03\x02" +
		"\x02\x02\u25B7\u25B8\x03\x02\x02\x02\u25B8\u25B9\x03\x02\x02\x02\u25B9" +
		"\u25BA\x07\x05\x02\x02\u25BA\u25C4\x03\x02\x02\x02\u25BB\u25BC\x07\u01B2" +
		"\x02\x02\u25BC\u25BD\x07\x04\x02\x02\u25BD\u25BE\x05\u04CE\u0268\x02\u25BE" +
		"\u25BF\x05\u048E\u0248\x02\u25BF\u25C0\x07&\x02\x02\u25C0\u25C1\x05\u0466" +
		"\u0234\x02\u25C1\u25C2\x07\x05\x02\x02\u25C2\u25C4\x03\x02\x02\x02\u25C3" +
		"\u250B\x03\x02\x02\x02\u25C3\u2511\x03\x02\x02\x02\u25C3\u2512\x03\x02" +
		"\x02\x02\u25C3\u2519\x03\x02\x02\x02\u25C3\u2520\x03\x02\x02\x02\u25C3" +
		"\u2527\x03\x02\x02\x02\u25C3\u252E\x03\x02\x02\x02\u25C3\u252F\x03\x02" +
		"\x02\x02\u25C3\u2530\x03\x02\x02\x02\u25C3\u2531\x03\x02\x02\x02\u25C3" +
		"\u2532\x03\x02\x02\x02\u25C3\u2533\x03\x02\x02\x02\u25C3\u2534\x03\x02" +
		"\x02\x02\u25C3\u253B\x03\x02\x02\x02\u25C3\u2541\x03\x02\x02\x02\u25C3" +
		"\u254A\x03\x02\x02\x02\u25C3\u254F\x03\x02\x02\x02\u25C3\u2555\x03\x02" +
		"\x02\x02\u25C3\u255B\x03\x02\x02\x02\u25C3\u2562\x03\x02\x02\x02\u25C3" +
		"\u256A\x03\x02\x02\x02\u25C3\u2571\x03\x02\x02\x02\u25C3\u2576\x03\x02" +
		"\x02\x02\u25C3\u257B\x03\x02\x02\x02\u25C3\u2580\x03\x02\x02\x02\u25C3" +
		"\u2585\x03\x02\x02\x02\u25C3\u2592\x03\x02\x02\x02\u25C3\u2598\x03\x02" +
		"\x02\x02\u25C3\u259D\x03\x02\x02\x02\u25C3\u25A6\x03\x02\x02\x02\u25C3" +
		"\u25B0\x03\x02\x02\x02\u25C3\u25BB\x03\x02\x02\x02\u25C4\u04C3\x03\x02" +
		"\x02\x02\u25C5\u25C6\x07\u0179\x02\x02\u25C6\u25CB\x05\u048E\u0248\x02" +
		"\u25C7\u25C8\x07\u0179\x02\x02\u25C8\u25C9\x07\u010F\x02\x02\u25C9\u25CB" +
		"\x07\u01C4\x02\x02\u25CA\u25C5\x03\x02\x02\x02\u25CA\u25C7\x03\x02\x02" +
		"\x02\u25CB\u04C5\x03\x02\x02\x02\u25CC\u25CD\x07\b\x02\x02\u25CD\u25CE" +
		"\x07\u0155\x02\x02\u25CE\u25D7\x07\u0183\x02\x02\u25CF\u25D0\x07\b\x02" +
		"\x02\u25D0\u25D1\x07\u0155\x02\x02\u25D1\u25D7\x07\u010F\x02\x02\u25D2" +
		"\u25D3\x07\b\x02\x02\u25D3\u25D4\x07\u0155\x02\x02\u25D4\u25D5\x07\u010F" +
		"\x02\x02\u25D5\u25D7\x07\u01C4\x02\x02\u25D6\u25CC\x03\x02\x02\x02\u25D6" +
		"\u25CF\x03\x02\x02\x02\u25D6\u25D2\x03\x02\x02\x02\u25D7\u04C7\x03\x02" +
		"\x02\x02\u25D8\u25D9\x07\u01AA\x02\x02\u25D9\u25DA\x07\x04\x02\x02\u25DA" +
		"\u25DB\x05\u04CA\u0266\x02\u25DB\u25DC\x07\x05\x02\x02\u25DC\u04C9\x03" +
		"\x02\x02\x02\u25DD\u25E2\x05\u04CC\u0267\x02\u25DE\u25DF\x07\b\x02\x02" +
		"\u25DF\u25E1\x05\u04CC\u0267\x02\u25E0\u25DE\x03\x02\x02\x02\u25E1\u25E4" +
		"\x03\x02\x02\x02\u25E2\u25E0\x03\x02\x02\x02\u25E2\u25E3\x03\x02\x02\x02" +
		"\u25E3\u04CB\x03\x02\x02\x02\u25E4\u25E2\x03\x02\x02\x02\u25E5\u25E8\x05" +
		"\u048E\u0248\x02\u25E6\u25E7\x07&\x02\x02\u25E7\u25E9\x05\u0570\u02B9" +
		"\x02\u25E8\u25E6\x03\x02\x02\x02\u25E8\u25E9\x03\x02\x02\x02\u25E9\u04CD" +
		"\x03\x02\x02\x02\u25EA\u25EB\t>\x02\x02\u25EB\u04CF\x03\x02\x02\x02\u25EC" +
		"\u25ED\x07\u0126\x02\x02\u25ED\u25F1\x07\u017C\x02\x02\u25EE\u25EF\x07" +
		"\u015D\x02\x02\u25EF\u25F1\x07\u017C\x02\x02\u25F0\u25EC\x03\x02\x02\x02" +
		"\u25F0\u25EE\x03\x02\x02\x02\u25F1\u04D1\x03\x02\x02\x02\u25F2\u25F3\x07" +
		"\u0120\x02\x02\u25F3\u2602\x05\u04B8\u025D\x02\u25F4\u25F5\x07\u0120\x02" +
		"\x02\u25F5\u25F6\x05\u04B8\u025D\x02\u25F6\u25F7\x05\u04D4\u026B\x02\u25F7" +
		"\u2602\x03\x02\x02\x02\u25F8\u25F9\x07\u0120\x02\x02\u25F9\u25FA\x05\u04D4" +
		"\u026B\x02\u25FA\u25FB\x05\u04B8\u025D\x02\u25FB\u2602\x03\x02\x02\x02" +
		"\u25FC\u25FD\x07\u0120\x02\x02\u25FD\u25FE\x05\u04D4\u026B\x02\u25FE\u25FF" +
		"\x05\u04B8\u025D\x02\u25FF\u2600\x05\u04D4\u026B\x02\u2600\u2602\x03\x02" +
		"\x02\x02\u2601\u25F2\x03\x02\x02\x02\u2601\u25F4\x03\x02\x02\x02\u2601" +
		"\u25F8\x03\x02\x02\x02\u2601\u25FC\x03\x02\x02\x02\u2602\u04D3\x03\x02" +
		"\x02\x02\u2603\u2604\x07\x95\x02\x02\u2604\u2605\t?\x02\x02\u2605\u04D5" +
		"\x03\x02\x02\x02\u2606\u2607\x07\u01E1\x02\x02\u2607\u2608\x07D\x02\x02" +
		"\u2608\u2609\x07\x04\x02\x02\u2609\u260A\x05\u03EE\u01F8\x02\u260A\u260B" +
		"\x07\x05\x02\x02\u260B\u04D7\x03\x02\x02\x02\u260C\u260D\x07\u01E2\x02" +
		"\x02\u260D\u260E\x07\x04\x02\x02\u260E\u260F\x07i\x02\x02\u260F\u2610" +
		"\x05\u048E\u0248\x02\u2610\u2611\x07\x05\x02\x02\u2611\u04D9\x03\x02\x02" +
		"\x02\u2612\u2613\x07j\x02\x02\u2613\u2614\x05\u04DC\u026F\x02\u2614\u04DB" +
		"\x03\x02\x02\x02\u2615\u261A\x05\u04DE\u0270\x02\u2616\u2617\x07\b\x02" +
		"\x02\u2617\u2619\x05\u04DE\u0270\x02\u2618\u2616\x03\x02\x02\x02\u2619" +
		"\u261C\x03\x02\x02\x02\u261A\u2618\x03\x02\x02\x02\u261A\u261B\x03\x02" +
		"\x02\x02\u261B\u04DD\x03\x02\x02\x02\u261C\u261A\x03\x02\x02\x02\u261D" +
		"\u261E\x05\u0562\u02B2\x02\u261E\u261F\x07&\x02\x02\u261F\u2620\x05\u04E2" +
		"\u0272\x02\u2620\u04DF\x03\x02\x02\x02\u2621\u2624\x07~\x02\x02\u2622" +
		"\u2625\x05\u04E2\u0272\x02\u2623\u2625\x05\u0562\u02B2\x02\u2624\u2622" +
		"\x03\x02\x02\x02\u2624\u2623\x03\x02\x02\x02\u2625\u04E1\x03\x02\x02\x02" +
		"\u2626\u2628\x07\x04\x02\x02\u2627\u2629\x05\u04E4\u0273\x02\u2628\u2627" +
		"\x03\x02\x02\x02\u2628\u2629\x03\x02\x02\x02\u2629\u262B\x03\x02\x02\x02" +
		"\u262A\u262C\x05\u04E6\u0274\x02\u262B\u262A\x03\x02\x02\x02\u262B\u262C" +
		"\x03\x02\x02\x02\u262C\u262E\x03\x02\x02\x02\u262D\u262F\x05\u03EC\u01F7" +
		"\x02\u262E\u262D\x03\x02\x02\x02\u262E\u262F\x03\x02\x02\x02\u262F\u2631" +
		"\x03\x02\x02\x02\u2630\u2632\x05\u04E8\u0275\x02\u2631\u2630\x03\x02\x02" +
		"\x02\u2631\u2632\x03\x02\x02\x02\u2632\u2633\x03\x02\x02\x02\u2633\u2634" +
		"\x07\x05\x02\x02\u2634\u04E3\x03\x02\x02\x02\u2635\u2636\x05\u0562\u02B2" +
		"\x02\u2636\u04E5\x03\x02\x02\x02\u2637\u2638\x07\u011F\x02\x02\u2638\u2639" +
		"\x07\x95\x02\x02\u2639\u263A\x05\u0502\u0282\x02\u263A\u04E7\x03\x02\x02" +
		"\x02\u263B\u263C\x07\u012D\x02\x02\u263C\u263E\x05\u04EA\u0276\x02\u263D" +
		"\u263F\x05\u04EE\u0278\x02\u263E\u263D\x03\x02\x02\x02\u263E\u263F\x03" +
		"\x02\x02\x02\u263F\u264B\x03\x02\x02\x02\u2640\u2641\x07\u0142\x02\x02" +
		"\u2641\u2643\x05\u04EA\u0276\x02\u2642\u2644\x05\u04EE\u0278\x02\u2643" +
		"\u2642\x03\x02\x02\x02\u2643\u2644\x03\x02\x02\x02\u2644\u264B\x03\x02" +
		"\x02\x02\u2645\u2646\x07\u01E3\x02\x02\u2646\u2648\x05\u04EA\u0276\x02" +
		"\u2647\u2649\x05\u04EE\u0278\x02\u2648\u2647\x03\x02\x02\x02\u2648\u2649" +
		"\x03\x02\x02\x02\u2649\u264B\x03\x02\x02\x02\u264A\u263B\x03\x02\x02\x02" +
		"\u264A\u2640\x03\x02\x02\x02\u264A\u2645\x03\x02\x02\x02\u264B\u04E9\x03" +
		"\x02\x02\x02\u264C\u2653\x05\u04EC\u0277\x02\u264D\u264E\x07\u0185\x02" +
		"\x02\u264E\u264F\x05\u04EC\u0277\x02\u264F\u2650\x07#\x02\x02\u2650\u2651" +
		"\x05\u04EC\u0277\x02\u2651\u2653\x03\x02\x02\x02\u2652\u264C\x03\x02\x02" +
		"\x02\u2652\u264D\x03\x02\x02\x02\u2653\u04EB\x03\x02\x02\x02\u2654\u2655" +
		"\x07\u016C\x02\x02\u2655\u265C\t@\x02\x02\u2656\u2657\x07\u01B4\x02\x02" +
		"\u2657\u265C\x07\u01A0\x02\x02\u2658\u2659\x05\u048E\u0248\x02\u2659\u265A" +
		"\t@\x02\x02\u265A\u265C\x03\x02\x02\x02\u265B\u2654\x03\x02\x02\x02\u265B" +
		"\u2656\x03\x02\x02\x02\u265B\u2658\x03\x02\x02\x02\u265C\u04ED\x03\x02" +
		"\x02\x02\u265D\u2664\x07\xC9\x02\x02\u265E\u265F\x07\u01B4\x02\x02\u265F" +
		"\u2665\x07\u01A0\x02\x02\u2660\u2665\x07D\x02\x02\u2661\u2665\x07\u01D5" +
		"\x02\x02\u2662\u2663\x07\u010F\x02\x02\u2663\u2665\x07\u01E4\x02\x02\u2664" +
		"\u265E\x03\x02\x02\x02\u2664\u2660\x03\x02\x02\x02\u2664\u2661\x03\x02" +
		"\x02\x02\u2664\u2662\x03\x02\x02\x02\u2665\u04EF\x03\x02\x02\x02\u2666" +
		"\u2667\x07\u01A0\x02\x02\u2667\u2669\x07\x04\x02\x02\u2668\u266A\x05\u0502" +
		"\u0282\x02\u2669\u2668\x03\x02\x02\x02\u2669\u266A\x03\x02\x02\x02\u266A" +
		"\u266B\x03\x02\x02\x02\u266B\u2673\x07\x05\x02\x02\u266C\u266D\x07\x04" +
		"\x02\x02\u266D\u266E\x05\u0502\u0282\x02\u266E\u266F\x07\b\x02\x02\u266F" +
		"\u2670\x05\u048E\u0248\x02\u2670\u2671\x07\x05\x02\x02\u2671\u2673\x03" +
		"\x02\x02\x02\u2672\u2666\x03\x02\x02\x02\u2672\u266C\x03\x02\x02\x02\u2673" +
		"\u04F1\x03\x02\x02\x02\u2674\u2675\x07\u01A0\x02\x02\u2675\u2677\x07\x04" +
		"\x02\x02\u2676\u2678\x05\u0502\u0282\x02\u2677\u2676\x03\x02\x02\x02\u2677" +
		"\u2678\x03\x02\x02\x02\u2678\u2679\x03\x02\x02\x02\u2679\u267A\x07\x05" +
		"\x02\x02\u267A\u04F3\x03\x02\x02\x02\u267B\u267C\x07\x04\x02\x02\u267C" +
		"\u267D\x05\u0502\u0282\x02\u267D\u267E\x07\b\x02\x02\u267E\u267F\x05\u048E" +
		"\u0248\x02\u267F";
	private static readonly _serializedATNSegment18: string =
		"\u2680\x07\x05\x02\x02\u2680\u04F5\x03\x02\x02\x02\u2681\u2682\tA\x02" +
		"\x02\u2682\u04F7\x03\x02\x02\x02\u2683\u2686\x07\x1F\x02\x02\u2684\u2686" +
		"\x05\u04FA\u027E\x02\u2685\u2683\x03\x02\x02\x02\u2685\u2684\x03\x02\x02" +
		"\x02\u2686\u04F9\x03\x02\x02\x02\u2687\u2688\tB\x02\x02\u2688\u04FB\x03" +
		"\x02\x02\x02\u2689\u2690\x07\x1F\x02\x02\u268A\u268B\x07\u0118\x02\x02" +
		"\u268B\u268C\x07\x04\x02\x02\u268C\u268D\x05\u02BA\u015E\x02\u268D\u268E" +
		"\x07\x05\x02\x02\u268E\u2690\x03\x02\x02\x02\u268F\u2689\x03\x02\x02\x02" +
		"\u268F\u268A\x03\x02\x02\x02\u2690\u04FD\x03\x02\x02\x02\u2691\u2698\x05" +
		"\u04F8\u027D\x02\u2692\u2693\x07\u0118\x02\x02\u2693\u2694\x07\x04\x02" +
		"\x02\u2694\u2695\x05\u02BA\u015E\x02\u2695\u2696\x07\x05\x02\x02\u2696" +
		"\u2698\x03\x02\x02\x02\u2697\u2691\x03\x02\x02\x02\u2697\u2692\x03\x02" +
		"\x02\x02\u2698\u04FF\x03\x02\x02\x02\u2699\u26A6\x05\u04F8\u027D\x02\u269A" +
		"\u269B\x07\u0118\x02\x02\u269B\u269C\x07\x04\x02\x02\u269C\u269D\x05\u02BA" +
		"\u015E\x02\u269D\u269E\x07\x05\x02\x02\u269E\u26A6\x03\x02\x02\x02\u269F" +
		"\u26A6\x07z\x02\x02\u26A0\u26A1\x07O\x02\x02\u26A1\u26A6\x07z\x02\x02" +
		"\u26A2\u26A6\x07t\x02\x02\u26A3\u26A4\x07O\x02\x02\u26A4\u26A6\x07t\x02" +
		"\x02\u26A5\u2699\x03\x02\x02\x02\u26A5\u269A\x03\x02\x02\x02\u26A5\u269F" +
		"\x03\x02\x02\x02\u26A5\u26A0\x03\x02\x02\x02\u26A5\u26A2\x03\x02\x02\x02" +
		"\u26A5\u26A3\x03\x02\x02\x02\u26A6\u0501\x03\x02\x02\x02\u26A7\u26AC\x05" +
		"\u048E\u0248\x02\u26A8\u26A9\x07\b\x02\x02\u26A9\u26AB\x05\u048E\u0248" +
		"\x02\u26AA\u26A8\x03\x02\x02\x02\u26AB\u26AE\x03\x02\x02\x02\u26AC\u26AA" +
		"\x03\x02\x02\x02\u26AC\u26AD\x03\x02\x02\x02\u26AD\u0503\x03\x02\x02\x02" +
		"\u26AE\u26AC\x03\x02\x02\x02\u26AF\u26B4\x05\u0506\u0284\x02\u26B0\u26B1" +
		"\x07\b\x02\x02\u26B1\u26B3\x05\u0506\u0284\x02\u26B2\u26B0\x03\x02\x02" +
		"\x02\u26B3\u26B6\x03\x02\x02\x02\u26B4\u26B2\x03\x02\x02\x02\u26B4\u26B5" +
		"\x03\x02\x02\x02\u26B5\u0505\x03\x02\x02\x02\u26B6\u26B4\x03\x02\x02\x02" +
		"\u26B7\u26BD\x05\u048E\u0248\x02\u26B8\u26B9\x05\u028A\u0146\x02\u26B9" +
		"\u26BA\tC\x02\x02\u26BA\u26BB\x05\u048E\u0248\x02\u26BB\u26BD\x03\x02" +
		"\x02\x02\u26BC\u26B7\x03\x02\x02\x02\u26BC\u26B8\x03\x02\x02\x02\u26BD" +
		"\u0507\x03\x02\x02\x02\u26BE\u26C3\x05\u0462\u0232\x02\u26BF\u26C0\x07" +
		"\b\x02\x02\u26C0\u26C2\x05\u0462\u0232\x02\u26C1\u26BF\x03\x02\x02\x02" +
		"\u26C2\u26C5\x03\x02\x02\x02\u26C3\u26C1\x03\x02\x02\x02\u26C3\u26C4\x03" +
		"\x02\x02\x02\u26C4\u0509\x03\x02\x02\x02\u26C5\u26C3\x03\x02\x02\x02\u26C6" +
		"\u26C9\x07\x06\x02\x02\u26C7\u26CA\x05\u0502\u0282\x02\u26C8\u26CA\x05" +
		"\u050C\u0287\x02\u26C9\u26C7\x03\x02\x02\x02\u26C9\u26C8\x03\x02\x02\x02" +
		"\u26C9\u26CA\x03\x02\x02\x02\u26CA\u26CB\x03\x02\x02\x02\u26CB\u26CC\x07" +
		"\x07\x02\x02\u26CC\u050B\x03\x02\x02\x02\u26CD\u26D2\x05\u050A\u0286\x02" +
		"\u26CE\u26CF\x07\b\x02\x02\u26CF\u26D1\x05\u050A\u0286\x02\u26D0\u26CE" +
		"\x03\x02\x02\x02\u26D1\u26D4\x03\x02\x02\x02\u26D2\u26D0\x03\x02\x02\x02" +
		"\u26D2\u26D3\x03\x02\x02\x02\u26D3\u050D\x03\x02\x02\x02\u26D4\u26D2\x03" +
		"\x02\x02\x02\u26D5\u26D6\x05\u0510\u0289\x02\u26D6\u26D7\x07B\x02\x02" +
		"\u26D7\u26D8\x05\u048E\u0248\x02\u26D8\u050F\x03\x02\x02\x02\u26D9\u26E2" +
		"\x05\u0572\u02BA\x02\u26DA\u26E2\x07\u0182\x02\x02\u26DB\u26E2\x07\u010A" +
		"\x02\x02\u26DC\u26E2\x07\xB2\x02\x02\u26DD\u26E2\x07\xDC\x02\x02\u26DE" +
		"\u26E2\x07\u0107\x02\x02\u26DF\u26E2\x07\u0148\x02\x02\u26E0\u26E2\x05" +
		"\u0552\u02AA\x02\u26E1\u26D9\x03\x02\x02\x02\u26E1\u26DA\x03\x02\x02\x02" +
		"\u26E1\u26DB\x03\x02\x02\x02\u26E1\u26DC\x03\x02\x02\x02\u26E1\u26DD\x03" +
		"\x02\x02\x02\u26E1\u26DE\x03\x02\x02\x02\u26E1\u26DF\x03\x02\x02\x02\u26E1" +
		"\u26E0\x03\x02\x02\x02\u26E2\u0511\x03\x02\x02\x02\u26E3\u26E4\tD\x02" +
		"\x02\u26E4\u0513\x03\x02\x02\x02\u26E5\u26E6\x05\u048E\u0248\x02\u26E6" +
		"\u26E7\x07V\x02\x02\u26E7\u26E8\x05\u048E\u0248\x02\u26E8\u26E9\x07B\x02" +
		"\x02\u26E9\u26EC\x05\u048E\u0248\x02\u26EA\u26EB\x07@\x02\x02\u26EB\u26ED" +
		"\x05\u048E\u0248\x02\u26EC\u26EA\x03\x02\x02\x02\u26EC\u26ED\x03\x02\x02" +
		"\x02\u26ED\u0515\x03\x02\x02\x02\u26EE\u26EF\x05\u04B6\u025C\x02\u26EF" +
		"\u26F0\x07F\x02\x02\u26F0\u26F1\x05\u04B6\u025C\x02\u26F1\u0517\x03\x02" +
		"\x02\x02\u26F2\u26F3\x05\u048E\u0248\x02\u26F3\u26F4\x07B\x02\x02\u26F4" +
		"\u26F5\x05\u048E\u0248\x02\u26F5\u26F6\x07@\x02\x02\u26F6\u26F7\x05\u048E" +
		"\u0248\x02\u26F7\u270E\x03\x02\x02\x02\u26F8\u26F9\x05\u048E\u0248\x02" +
		"\u26F9\u26FA\x07@\x02\x02\u26FA\u26FB\x05\u048E\u0248\x02\u26FB\u26FC" +
		"\x07B\x02\x02\u26FC\u26FD\x05\u048E\u0248\x02\u26FD\u270E\x03\x02\x02" +
		"\x02\u26FE\u26FF\x05\u048E\u0248\x02\u26FF\u2700\x07B\x02\x02\u2700\u2701" +
		"\x05\u048E\u0248\x02\u2701\u270E\x03\x02\x02\x02\u2702\u2703\x05\u048E" +
		"\u0248\x02\u2703\u2704\x07@\x02\x02\u2704\u2705\x05\u048E\u0248\x02\u2705" +
		"\u270E\x03\x02\x02\x02\u2706\u2707\x05\u048E\u0248\x02\u2707\u2708\x07" +
		"\x81\x02\x02\u2708\u2709\x05\u048E\u0248\x02\u2709\u270A\x07\xC7\x02\x02" +
		"\u270A\u270B\x05\u048E\u0248\x02\u270B\u270E\x03\x02\x02\x02\u270C\u270E" +
		"\x05\u0502\u0282\x02\u270D\u26F2\x03\x02\x02\x02\u270D\u26F8\x03\x02\x02" +
		"\x02\u270D\u26FE\x03\x02\x02\x02\u270D\u2702\x03\x02\x02\x02\u270D\u2706" +
		"\x03\x02\x02\x02\u270D\u270C\x03\x02\x02\x02\u270E\u0519\x03\x02\x02\x02" +
		"\u270F\u2710\x05\u048E\u0248\x02\u2710\u2711\x07B\x02\x02\u2711\u2712" +
		"\x05\u0502\u0282\x02\u2712\u2717\x03\x02\x02\x02\u2713\u2714\x07B\x02" +
		"\x02\u2714\u2717\x05\u0502\u0282\x02\u2715\u2717\x05\u0502\u0282\x02\u2716" +
		"\u270F\x03\x02\x02\x02\u2716\u2713\x03\x02\x02\x02\u2716\u2715\x03\x02" +
		"\x02\x02\u2717\u051B\x03\x02\x02\x02\u2718\u271E\x05\u03C8\u01E5\x02\u2719" +
		"\u271A\x07\x04\x02\x02\u271A\u271B\x05\u0502\u0282\x02\u271B\u271C\x07" +
		"\x05\x02\x02\u271C\u271E\x03\x02\x02\x02\u271D\u2718\x03\x02\x02\x02\u271D" +
		"\u2719\x03\x02\x02\x02\u271E\u051D\x03\x02\x02\x02\u271F\u2721\x07*\x02" +
		"\x02\u2720\u2722\x05\u0526\u0294\x02\u2721\u2720\x03\x02\x02\x02\u2721" +
		"\u2722\x03\x02\x02\x02\u2722\u2723\x03\x02\x02\x02\u2723\u2725\x05\u0520" +
		"\u0291\x02\u2724\u2726\x05\u0524\u0293\x02\u2725\u2724\x03\x02\x02\x02" +
		"\u2725\u2726\x03\x02\x02\x02\u2726\u2727\x03\x02\x02\x02\u2727\u2728\x07" +
		"\u01C8\x02\x02\u2728\u051F\x03\x02\x02\x02\u2729\u272B\x05\u0522\u0292" +
		"\x02\u272A\u2729\x03\x02\x02\x02\u272B\u272C\x03\x02\x02\x02\u272C\u272A" +
		"\x03\x02\x02\x02\u272C\u272D\x03\x02\x02\x02\u272D\u0521\x03\x02\x02\x02" +
		"\u272E\u272F\x07h\x02\x02\u272F\u2730\x05\u048E\u0248\x02\u2730\u2731" +
		"\x07_\x02\x02\u2731\u2732\x05\u048E\u0248\x02\u2732\u0523\x03\x02\x02" +
		"\x02\u2733\u2734\x07<\x02\x02\u2734\u2735\x05\u048E\u0248\x02\u2735\u0525" +
		"\x03\x02\x02\x02\u2736\u2737\x05\u048E\u0248\x02\u2737\u0527\x03\x02\x02" +
		"\x02\u2738\u273A\x05\u0562\u02B2\x02\u2739\u273B\x05\u052E\u0298\x02\u273A" +
		"\u2739\x03\x02\x02\x02\u273A\u273B\x03\x02\x02\x02\u273B\u0529\x03\x02" +
		"\x02\x02\u273C\u273F\x07\r\x02\x02\u273D\u2740\x05\u0542\u02A2\x02\u273E" +
		"\u2740\x07\v\x02\x02\u273F\u273D\x03\x02\x02\x02\u273F\u273E\x03\x02\x02" +
		"\x02\u2740\u274E\x03\x02\x02\x02\u2741\u274A\x07\x06\x02\x02\u2742\u274B" +
		"\x05\u048E\u0248\x02\u2743\u2745\x05\u052C\u0297\x02\u2744\u2743\x03\x02" +
		"\x02\x02\u2744\u2745\x03\x02\x02\x02\u2745\u2746\x03\x02\x02\x02\u2746" +
		"\u2748\x07\n\x02\x02\u2747\u2749\x05\u052C\u0297\x02\u2748\u2747\x03\x02" +
		"\x02\x02\u2748\u2749\x03\x02\x02\x02\u2749\u274B\x03\x02\x02\x02\u274A" +
		"\u2742\x03\x02\x02\x02\u274A\u2744\x03\x02\x02\x02\u274B\u274C\x03\x02" +
		"\x02\x02\u274C\u274E\x07\x07\x02\x02\u274D\u273C\x03\x02\x02\x02\u274D" +
		"\u2741\x03\x02\x02\x02\u274E\u052B\x03\x02\x02\x02\u274F\u2750\x05\u048E" +
		"\u0248\x02\u2750\u052D\x03\x02\x02\x02\u2751\u2753\x05\u052A\u0296\x02" +
		"\u2752\u2751\x03\x02\x02\x02\u2753\u2754\x03\x02\x02\x02\u2754\u2752\x03" +
		"\x02\x02\x02\u2754\u2755\x03\x02\x02\x02\u2755\u052F\x03\x02\x02\x02\u2756" +
		"\u2758\x05\u052A\u0296\x02\u2757\u2756\x03\x02\x02\x02\u2758\u275B\x03" +
		"\x02\x02\x02\u2759\u2757\x03\x02\x02\x02\u2759\u275A\x03\x02\x02\x02\u275A" +
		"\u0531\x03\x02\x02\x02\u275B\u2759\x03\x02\x02\x02\u275C\u275D\x05\u0534" +
		"\u029B\x02\u275D\u0533\x03\x02\x02\x02\u275E\u2763\x05\u0536\u029C\x02" +
		"\u275F\u2760\x07\b\x02\x02\u2760\u2762\x05\u0536\u029C\x02\u2761\u275F" +
		"\x03\x02\x02\x02\u2762\u2765\x03\x02\x02\x02\u2763\u2761\x03\x02\x02\x02" +
		"\u2763\u2764\x03\x02\x02\x02\u2764\u0535\x03\x02\x02\x02\u2765\u2763\x03" +
		"\x02\x02\x02\u2766\u276B\x05\u048E\u0248\x02\u2767\u2768\x07&\x02\x02" +
		"\u2768\u276C\x05\u0570\u02B9\x02\u2769\u276C\x05\u0572\u02BA\x02\u276A" +
		"\u276C\x03\x02\x02\x02\u276B\u2767\x03\x02\x02\x02\u276B\u2769\x03\x02" +
		"\x02\x02\u276B\u276A\x03\x02\x02\x02\u276C\u276F\x03\x02\x02\x02\u276D" +
		"\u276F\x07\v\x02\x02\u276E\u2766\x03\x02\x02\x02\u276E\u276D\x03\x02\x02" +
		"\x02\u276F\u0537\x03\x02\x02\x02\u2770\u2775\x05\u053C\u029F\x02\u2771" +
		"\u2772\x07\b\x02\x02\u2772\u2774\x05\u053C\u029F\x02\u2773\u2771\x03\x02" +
		"\x02\x02\u2774\u2777\x03\x02\x02\x02\u2775\u2773\x03\x02\x02\x02\u2775" +
		"\u2776\x03\x02\x02\x02\u2776\u0539\x03\x02\x02\x02\u2777\u2775\x03\x02" +
		"\x02\x02\u2778\u277A\x05\u0562\u02B2\x02\u2779\u277B\x05\u052E\u0298\x02" +
		"\u277A\u2779\x03\x02\x02\x02\u277A\u277B\x03\x02\x02\x02\u277B\u053B\x03" +
		"\x02\x02\x02\u277C\u277E\x05\u0562\u02B2\x02\u277D\u277F\x05\u052E\u0298" +
		"\x02\u277E\u277D\x03\x02\x02\x02\u277E\u277F\x03\x02\x02\x02\u277F\u053D" +
		"\x03\x02\x02\x02\u2780\u2785\x05\u0540\u02A1\x02\u2781\u2782\x07\b\x02" +
		"\x02\u2782\u2784\x05\u0540\u02A1\x02\u2783\u2781\x03\x02\x02\x02\u2784" +
		"\u2787\x03\x02\x02\x02\u2785\u2783\x03\x02\x02\x02\u2785\u2786\x03\x02" +
		"\x02\x02\u2786\u053F\x03\x02\x02\x02\u2787\u2785\x03\x02\x02\x02\u2788" +
		"\u2789\x05\u0562\u02B2\x02\u2789\u0541\x03\x02\x02\x02\u278A\u278B\x05" +
		"\u0570\u02B9\x02\u278B\u0543\x03\x02\x02\x02\u278C\u278D\x05\u0552\u02AA" +
		"\x02\u278D\u0545\x03\x02\x02\x02\u278E\u2793\x05\u056C\u02B7\x02\u278F" +
		"\u2790\x05\u0562\u02B2\x02\u2790\u2791\x05\u052E\u0298\x02\u2791\u2793" +
		"\x03\x02\x02\x02\u2792\u278E\x03\x02\x02\x02\u2792\u278F\x03\x02\x02\x02" +
		"\u2793\u0547\x03\x02\x02\x02\u2794\u27B8\x05\u0550\u02A9\x02\u2795\u27B8" +
		"\x05\u054E\u02A8\x02\u2796\u27B8\x05\u0552\u02AA\x02\u2797\u27B8\x05\u054C" +
		"\u02A7\x02\u2798\u27B8\x05\u054A\u02A6\x02\u2799\u27A3\x05\u0546\u02A4" +
		"\x02\u279A\u27A4\x05\u0552\u02AA\x02\u279B\u279C\x07\x04\x02\x02\u279C" +
		"\u279E\x05\u0504\u0283\x02\u279D\u279F\x05\u03EC\u01F7\x02\u279E\u279D" +
		"\x03\x02\x02\x02\u279E\u279F\x03\x02\x02\x02\u279F\u27A0\x03\x02\x02\x02" +
		"\u27A0\u27A1\x07\x05\x02\x02\u27A1\u27A2\x05\u0552\u02AA\x02\u27A2\u27A4" +
		"\x03\x02\x02\x02\u27A3\u279A\x03\x02\x02\x02\u27A3\u279B\x03\x02\x02\x02" +
		"\u27A4\u27B8\x03\x02\x02\x02\u27A5\u27A6\x05\u0468\u0235\x02\u27A6\u27A7" +
		"\x05\u0552\u02AA\x02\u27A7\u27B8\x03\x02\x02\x02\u27A8\u27B2\x05\u0484" +
		"\u0243\x02\u27A9\u27AB\x05\u0552\u02AA\x02\u27AA\u27AC\x05\u0488\u0245" +
		"\x02\u27AB\u27AA\x03\x02\x02\x02\u27AB\u27AC\x03\x02\x02\x02\u27AC\u27B3" +
		"\x03\x02\x02\x02\u27AD\u27AE\x07\x04\x02\x02\u27AE\u27AF\x05\u0550\u02A9" +
		"\x02\u27AF\u27B0\x07\x05\x02\x02\u27B0\u27B1\x05\u0552\u02AA\x02\u27B1" +
		"\u27B3\x03\x02\x02\x02\u27B2\u27A9\x03\x02\x02\x02\u27B2\u27AD\x03\x02" +
		"\x02\x02\u27B3\u27B8\x03\x02\x02\x02\u27B4\u27B8\x07b\x02\x02\u27B5\u27B8" +
		"\x07>\x02\x02\u27B6\u27B8\x07P\x02\x02\u27B7\u2794\x03\x02\x02\x02\u27B7" +
		"\u2795\x03\x02\x02\x02\u27B7\u2796\x03\x02\x02\x02\u27B7\u2797\x03\x02" +
		"\x02\x02\u27B7\u2798\x03\x02\x02\x02\u27B7\u2799\x03\x02\x02\x02\u27B7" +
		"\u27A5\x03\x02\x02\x02\u27B7\u27A8\x03\x02\x02\x02\u27B7\u27B4\x03\x02" +
		"\x02\x02\u27B7\u27B5\x03\x02\x02\x02\u27B7\u27B6\x03\x02\x02\x02\u27B8" +
		"\u0549\x03\x02\x02\x02\u27B9\u27BA\x07\u0221\x02\x02\u27BA\u054B\x03\x02" +
		"\x02\x02\u27BB\u27BC\x07\u021D\x02\x02\u27BC\u054D\x03\x02\x02\x02\u27BD" +
		"\u27BE\x07\u0227\x02\x02\u27BE\u054F\x03\x02\x02\x02\u27BF\u27C0\x07\u0225" +
		"\x02\x02\u27C0\u0551\x03\x02\x02\x02\u27C1\u27C3\x05\u0554\u02AB\x02\u27C2" +
		"\u27C4\x05\u0556\u02AC\x02\u27C3\u27C2\x03\x02\x02\x02\u27C3\u27C4\x03" +
		"\x02\x02\x02\u27C4\u0553\x03\x02\x02\x02\u27C5\u27D1\x07\u0218\x02\x02" +
		"\u27C6\u27D1\x07\u021A\x02\x02\u27C7\u27CB\x07\u021C\x02\x02\u27C8\u27CA" +
		"\x07\u0236\x02\x02\u27C9\u27C8\x03\x02\x02\x02\u27CA\u27CD\x03\x02\x02" +
		"\x02\u27CB\u27C9\x03\x02\x02\x02\u27CB\u27CC\x03\x02\x02\x02\u27CC\u27CE" +
		"\x03\x02\x02\x02\u27CD\u27CB\x03\x02\x02\x02\u27CE\u27D1\x07\u0237\x02" +
		"\x02\u27CF\u27D1\x07\u0232\x02\x02\u27D0\u27C5\x03\x02\x02\x02\u27D0\u27C6" +
		"\x03\x02\x02\x02\u27D0\u27C7\x03\x02\x02\x02\u27D0\u27CF\x03\x02\x02\x02" +
		"\u27D1\u0555\x03\x02\x02\x02\u27D2\u27D3\x07\u01E9\x02\x02\u27D3\u27D4" +
		"\x05\u0554\u02AB\x02\u27D4\u0557\x03\x02\x02\x02\u27D5\u27DB\x05\u0550" +
		"\u02A9\x02\u27D6\u27D7\x07\x0E\x02\x02\u27D7\u27DB\x05\u0550\u02A9\x02" +
		"\u27D8\u27D9\x07\x0F\x02\x02\u27D9\u27DB\x05\u0550\u02A9\x02\u27DA\u27D5" +
		"\x03\x02\x02\x02\u27DA\u27D6\x03\x02\x02\x02\u27DA\u27D8\x03\x02\x02\x02" +
		"\u27DB\u0559\x03\x02\x02\x02\u27DC\u27DD\x05\u055E\u02B0\x02\u27DD\u055B" +
		"\x03\x02\x02\x02\u27DE\u27DF\x05\u055E\u02B0\x02\u27DF\u055D\x03\x02\x02" +
		"\x02\u27E0\u27E5\x05\u056E\u02B8\x02\u27E1\u27E5\x076\x02\x02\u27E2\u27E5" +
		"\x07[\x02\x02\u27E3\u27E5\x07\u020E\x02\x02\u27E4\u27E0\x03\x02\x02\x02" +
		"\u27E4\u27E1\x03\x02\x02\x02\u27E4\u27E2\x03\x02\x02\x02\u27E4\u27E3\x03" +
		"\x02\x02\x02\u27E5\u055F\x03\x02\x02\x02\u27E6\u27EB\x05\u055E\u02B0\x02" +
		"\u27E7\u27E8\x07\b\x02\x02\u27E8\u27EA\x05\u055E\u02B0\x02\u27E9\u27E7" +
		"\x03\x02\x02\x02\u27EA\u27ED\x03\x02\x02\x02\u27EB\u27E9\x03\x02\x02\x02" +
		"\u27EB\u27EC\x03\x02\x02\x02\u27EC\u0561\x03\x02\x02\x02\u27ED\u27EB\x03" +
		"\x02\x02\x02\u27EE\u27F3\x05\u0572\u02BA\x02\u27EF\u27F3\x05\u0576\u02BC" +
		"\x02\u27F0\u27F3\x05\u0578\u02BD\x02\u27F1\u27F3\x05\u0652\u032A\x02\u27F2" +
		"\u27EE\x03\x02\x02\x02\u27F2\u27EF\x03\x02\x02\x02\u27F2\u27F0\x03\x02" +
		"\x02\x02\u27F2\u27F1\x03\x02\x02\x02\u27F3\u0563\x03\x02\x02\x02\u27F4" +
		"\u27F5\x05\u0572\u02BA\x02\u27F5\u0565\x03\x02\x02\x02\u27F6\u2803\x05" +
		"\u02A6\u0154\x02\u27F7\u27F8\x07\x04\x02\x02\u27F8\u27F9\x05\u048E\u0248" +
		"\x02\u27F9\u27FA\x07\x05\x02\x02\u27FA\u27FB\x03\x02\x02\x02\u27FB\u27FD" +
		"\x05\u0572\u02BA\x02\u27FC\u27FE\x05\u0270\u0139\x02\u27FD\u27FC\x03\x02" +
		"\x02\x02\u27FD\u27FE\x03\x02\x02\x02\u27FE\u2800\x03\x02\x02\x02\u27FF" +
		"\u2801\x05\u0272\u013A\x02\u2800\u27FF\x03\x02\x02\x02\u2800\u2801\x03" +
		"\x02\x02\x02\u2801\u2803\x03\x02\x02\x02\u2802\u27F6\x03\x02\x02\x02\u2802" +
		"\u27F7\x03\x02\x02\x02\u2803\u0567\x03\x02\x02\x02\u2804\u2805\x07k\x02" +
		"\x02\u2805\u2807\x05t;\x02\u2806\u2804\x03\x02\x02\x02\u2806\u2807\x03" +
		"\x02\x02\x02\u2807\u2809\x03\x02\x02\x02\u2808\u280A\x05\u0104\x83\x02" +
		"\u2809\u2808\x03\x02\x02\x02\u2809\u280A\x03\x02\x02\x02\u280A\u0569\x03" +
		"\x02\x02\x02\u280B\u280C\x07i\x02\x02\u280C\u280D\x05\u0572\u02BA\x02" +
		"\u280D\u056B\x03\x02\x02\x02\u280E\u2813\x05\u0572\u02BA\x02\u280F\u2813" +
		"\x05\u0576\u02BC\x02\u2810\u2813\x05\u0652\u032A\x02\u2811\u2813\x05\u057A" +
		"\u02BE\x02\u2812\u280E\x03\x02\x02\x02\u2812\u280F\x03\x02\x02\x02\u2812" +
		"\u2810\x03\x02\x02\x02\u2812\u2811\x03\x02\x02\x02\u2813\u056D\x03\x02" +
		"\x02\x02\u2814\u2819\x05\u0572\u02BA\x02\u2815\u2819\x05\u0576\u02BC\x02" +
		"\u2816\u2819\x05\u0578\u02BD\x02\u2817\u2819\x05\u057A\u02BE\x02\u2818" +
		"\u2814\x03\x02\x02\x02\u2818\u2815\x03\x02\x02\x02\u2818\u2816\x03\x02" +
		"\x02\x02\u2818\u2817\x03\x02\x02\x02\u2819\u056F\x03\x02\x02\x02\u281A" +
		"\u2821\x05\u0572\u02BA\x02\u281B\u2821\x05\u0652\u032A\x02\u281C\u2821" +
		"\x05\u0576\u02BC\x02\u281D\u2821\x05\u0578\u02BD\x02\u281E\u2821\x05\u057A" +
		"\u02BE\x02\u281F\u2821\x05\u057C\u02BF\x02\u2820\u281A\x03\x02\x02\x02" +
		"\u2820\u281B\x03\x02\x02\x02\u2820\u281C\x03\x02\x02\x02\u2820\u281D\x03" +
		"\x02\x02\x02\u2820\u281E\x03\x02\x02\x02\u2820\u281F\x03\x02\x02\x02\u2821" +
		"\u0571\x03\x02\x02\x02\u2822\u2824\x07\u020F\x02\x02\u2823\u2825\x05\u0556" +
		"\u02AC\x02\u2824\u2823\x03\x02\x02\x02\u2824\u2825\x03\x02\x02\x02\u2825" +
		"\u282C\x03\x02\x02\x02\u2826\u282C\x07\u0210\x02\x02\u2827\u282C\x07\u0214" +
		"\x02\x02\u2828\u282C\x05\u04BA\u025E\x02\u2829\u282C\x05\u0574\u02BB\x02" +
		"\u282A\u282C\x05\u0652\u032A\x02\u282B\u2822\x03\x02\x02\x02\u282B\u2826" +
		"\x03\x02\x02\x02\u282B\u2827\x03\x02\x02\x02\u282B\u2828\x03\x02\x02\x02" +
		"\u282B\u2829\x03\x02\x02\x02\u282B\u282A\x03\x02\x02\x02\u282C\u0573\x03" +
		"\x02\x02\x02\u282D\u282E\x07\u0229\x02\x02\u282E\u0575\x03\x02\x02\x02" +
		"\u282F\u2830\tE\x02\x02\u2830\u0577\x03\x02\x02\x02\u2831\u2865\x07\u0185" +
		"\x02\x02\u2832\u2865\x07\u0186\x02\x02\u2833\u2865\x05\u0472\u023A\x02" +
		"\u2834\u2865\x07\u0188\x02\x02\u2835\u2865\x07\u0189\x02\x02\u2836\u2865" +
		"\x05\u047A\u023E\x02\u2837\u2865\x07\u018B\x02\x02\u2838\u2865\x07\u018C" +
		"\x02\x02\u2839\u2865\x07\u018D\x02\x02\u283A\u2865\x07\u018E\x02\x02\u283B" +
		"\u2865\x07\u018F\x02\x02\u283C\u2865\x07\u0190\x02\x02\u283D\u2865\x07" +
		"\u0191\x02\x02\u283E\u2865\x07\u01D8\x02\x02\u283F\u2865\x07\u0192\x02" +
		"\x02\u2840\u2865\x07\u0193\x02\x02\u2841\u2865\x07\u0194\x02\x02\u2842" +
		"\u2865\x07\u0195\x02\x02\u2843\u2865\x07\u0196\x02\x02\u2844\u2865\x07" +
		"\u0197\x02\x02\u2845\u2865\x07\u0198\x02\x02\u2846\u2865\x07\u0199\x02" +
		"\x02\u2847\u2865\x07\u01EB\x02\x02\u2848\u2865\x07\u019A\x02\x02\u2849" +
		"\u2865\x05\u046E\u0238\x02\u284A\u2865\x07\u01C7\x02\x02\u284B\u2865\x07" +
		"\u019C\x02\x02\u284C\u2865\x07\u019D\x02\x02\u284D\u2865\x07\u019E\x02" +
		"\x02\u284E\u2865\x07\u019F\x02\x02\u284F\u2865\x07\u01A0\x02\x02\u2850" +
		"\u2865\x07\u01A1\x02\x02\u2851\u2865\x07\u01A2\x02\x02\u2852\u2865\x07" +
		"\u01A3\x02\x02\u2853\u2865\x07\u01A4\x02\x02\u2854\u2865\x07\u01A5\x02" +
		"\x02\u2855\u2865\x07\u01A6\x02\x02\u2856\u2865\x07\u01A7\x02\x02\u2857" +
		"\u2865\x07\u01A8\x02\x02\u2858\u2865\x07\u01A9\x02\x02\u2859\u2865\x07" +
		"\u01AA\x02\x02\u285A\u2865\x07\u01AB\x02\x02\u285B\u2865\x07\u01AC\x02" +
		"\x02\u285C\u2865\x07\u01AD\x02\x02\u285D\u2865\x07\u01AE\x02\x02\u285E" +
		"\u2865\x07\u01DE\x02\x02\u285F\u2865\x07\u01AF\x02\x02\u2860\u2865\x07" +
		"\u01B0\x02\x02\u2861\u2865\x07\u01B1\x02\x02\u2862\u2865\x07\u01B2\x02" +
		"\x02\u2863\u2865\x07\u01DC\x02\x02\u2864\u2831\x03\x02\x02\x02\u2864\u2832" +
		"\x03\x02\x02\x02\u2864\u2833\x03\x02\x02\x02\u2864\u2834\x03\x02\x02\x02" +
		"\u2864\u2835\x03\x02\x02\x02\u2864\u2836\x03\x02\x02\x02\u2864\u2837\x03" +
		"\x02\x02\x02\u2864\u2838\x03\x02\x02\x02\u2864\u2839\x03\x02\x02\x02\u2864" +
		"\u283A\x03\x02\x02\x02\u2864\u283B\x03\x02\x02\x02\u2864\u283C\x03\x02" +
		"\x02\x02\u2864\u283D\x03\x02\x02\x02\u2864\u283E\x03\x02\x02\x02\u2864" +
		"\u283F\x03\x02\x02\x02\u2864\u2840\x03\x02\x02\x02\u2864\u2841\x03\x02" +
		"\x02\x02\u2864\u2842\x03\x02\x02\x02\u2864\u2843\x03\x02\x02\x02\u2864" +
		"\u2844\x03\x02\x02\x02\u2864\u2845\x03\x02\x02\x02\u2864\u2846\x03\x02" +
		"\x02\x02\u2864\u2847\x03\x02\x02\x02\u2864\u2848\x03\x02\x02\x02\u2864" +
		"\u2849\x03\x02\x02\x02\u2864\u284A\x03\x02\x02\x02\u2864\u284B\x03\x02" +
		"\x02\x02\u2864\u284C\x03\x02\x02\x02\u2864\u284D\x03\x02\x02\x02\u2864" +
		"\u284E\x03\x02\x02\x02\u2864\u284F\x03\x02\x02\x02\u2864\u2850\x03\x02" +
		"\x02\x02\u2864\u2851\x03\x02\x02\x02\u2864\u2852\x03\x02\x02\x02\u2864" +
		"\u2853\x03\x02\x02\x02\u2864\u2854\x03\x02\x02\x02\u2864\u2855\x03\x02" +
		"\x02\x02\u2864\u2856\x03\x02\x02\x02\u2864\u2857\x03\x02\x02\x02\u2864" +
		"\u2858\x03\x02\x02\x02\u2864\u2859\x03\x02\x02\x02\u2864\u285A\x03\x02" +
		"\x02\x02\u2864\u285B\x03\x02\x02\x02\u2864\u285C\x03\x02\x02\x02\u2864" +
		"\u285D\x03\x02\x02\x02\u2864\u285E\x03\x02\x02\x02\u2864\u285F\x03\x02" +
		"\x02\x02\u2864\u2860\x03\x02\x02\x02\u2864\u2861\x03\x02\x02\x02\u2864" +
		"\u2862\x03\x02\x02\x02\u2864\u2863\x03\x02\x02\x02\u2865\u0579\x03\x02" +
		"\x02\x02\u2866\u2867\tF\x02\x02\u2867\u057B\x03\x02\x02\x02\u2868\u2869" +
		"\tG\x02\x02\u2869\u057D\x03\x02\x02\x02\u286A\u286B\x05\u0580\u02C1\x02" +
		"\u286B\u286C\x05\u058A\u02C6\x02\u286C\u286D\x05\u0588\u02C5\x02\u286D" +
		"\u057F\x03\x02\x02\x02\u286E\u2870\x05\u0582\u02C2\x02\u286F\u286E\x03" +
		"\x02\x02\x02\u2870\u2873\x03\x02\x02\x02\u2871\u286F\x03\x02\x02\x02\u2871" +
		"\u2872\x03\x02\x02\x02\u2872\u0581\x03\x02\x02\x02\u2873\u2871\x03\x02" +
		"\x02\x02\u2874\u2875\x05\u0584\u02C3\x02\u2875\u2876\x07\u0119\x02\x02" +
		"\u2876\u2877\x07\u01EC\x02\x02\u2877\u2889\x03\x02\x02\x02\u2878\u2879" +
		"\x05\u0584\u02C3\x02\u2879\u287A\x07\u01ED\x02\x02\u287A\u287B\x05\u0586" +
		"\u02C4\x02\u287B\u2889\x03\x02\x02\x02\u287C\u287D\x05\u0584\u02C3\x02" +
		"\u287D\u287E\x07\u01EE\x02\x02\u287E\u287F\x07\u01EF\x02\x02\u287F\u2889" +
		"\x03\x02\x02\x02\u2880\u2881\x05\u0584\u02C3\x02\u2881\u2882\x07\u01EE" +
		"\x02\x02\u2882\u2883\x07\u01F0\x02\x02\u2883\u2889\x03\x02\x02\x02\u2884" +
		"\u2885\x05\u0584\u02C3\x02\u2885\u2886\x07\u01EE\x02\x02\u2886\u2887\x07" +
		"\u01F1\x02\x02\u2887\u2889\x03\x02\x02\x02\u2888\u2874\x03\x02\x02\x02" +
		"\u2888\u2878\x03\x02\x02\x02\u2888\u287C\x03\x02\x02\x02\u2888\u2880\x03" +
		"\x02\x02\x02\u2888\u2884\x03\x02\x02\x02\u2889\u0583\x03\x02\x02\x02\u288A" +
		"\u288B\x07\x1F\x02\x02\u288B\u0585\x03\x02\x02\x02\u288C\u2891\x05\u0552" +
		"\u02AA\x02\u288D\u2891\x05\u057C\u02BF\x02\u288E\u2891\x05\u0652\u032A" +
		"\x02\u288F\u2891\x05\u0576\u02BC\x02\u2890\u288C\x03\x02\x02\x02\u2890" +
		"\u288D\x03\x02\x02\x02\u2890\u288E\x03\x02\x02\x02\u2890\u288F\x03\x02" +
		"\x02\x02\u2891\u0587\x03\x02\x02\x02\u2892\u2895\x03\x02\x02\x02\u2893" +
		"\u2895\x07\t\x02\x02\u2894\u2892\x03\x02\x02\x02\u2894\u2893\x03\x02\x02" +
		"\x02\u2895\u0589\x03\x02\x02\x02\u2896\u2897\x05\u058C\u02C7\x02\u2897" +
		"\u2898\x07\x94\x02\x02\u2898\u2899\x05\u05B6\u02DC\x02\u2899\u289A\x05" +
		"\u063E\u0320\x02\u289A\u289B\x07\u01C8\x02\x02\u289B\u289C\x05\u064C\u0327" +
		"\x02\u289C\u058B\x03\x02\x02\x02\u289D\u28A2\x05\u0648\u0325\x02\u289E" +
		"\u28A0\x05\u058E\u02C8\x02\u289F\u28A1\x05\u0590\u02C9\x02\u28A0\u289F" +
		"\x03\x02\x02\x02\u28A0\u28A1\x03\x02\x02\x02\u28A1\u28A3\x03\x02\x02\x02" +
		"\u28A2\u289E\x03\x02\x02\x02\u28A2\u28A3\x03\x02\x02\x02\u28A3\u058D\x03" +
		"\x02\x02\x02\u28A4\u28A5\x07\xB4\x02\x02\u28A5\u058F\x03\x02\x02\x02\u28A6" +
		"\u28A8\x05\u0594\u02CB\x02\u28A7\u28A6\x03\x02\x02\x02\u28A8\u28A9\x03" +
		"\x02\x02\x02\u28A9\u28A7\x03\x02\x02\x02\u28A9\u28AA\x03\x02\x02\x02\u28AA" +
		"\u0591\x03\x02\x02\x02\u28AB\u28AC\x07\x14\x02\x02\u28AC\u28AD\x05\u0650" +
		"\u0329\x02\u28AD\u28AE\x07\x15\x02\x02\u28AE\u0593\x03\x02\x02\x02\u28AF" +
		"\u28B3\x05\u0596\u02CC\x02\u28B0\u28B3\x07\xB4\x02\x02\u28B1\u28B3\x05" +
		"\u0592\u02CA\x02\u28B2\u28AF\x03\x02\x02\x02\u28B2\u28B0\x03\x02\x02\x02" +
		"\u28B2\u28B1\x03\x02\x02\x02\u28B3\u0595\x03\x02\x02\x02\u28B4\u28C4\x05" +
		"\u05A6\u02D4\x02\u28B5\u28B6\x07\u01F2\x02\x02\u28B6\u28B7\x07@\x02\x02" +
		"\u28B7\u28C5\x05\u05A4\u02D3\x02\u28B8\u28B9\x05\u05A8\u02D5\x02\u28B9" +
		"\u28BA\x05\u05AA\u02D6\x02\u28BA\u28BB\x05\u05AC\u02D7\x02\u28BB\u28BC" +
		"\x05\u05AE\u02D8\x02\u28BC\u28BD\x05\u05B0\u02D9\x02\u28BD\u28C5\x03\x02" +
		"\x02\x02\u28BE\u28BF\x05\u0598\u02CD\x02\u28BF\u28C0\x07\xAE\x02\x02\u28C0" +
		"\u28C1\x05\u059C\u02CF\x02\u28C1\u28C2\x05\u05A2\u02D2\x02\u28C2\u28C3" +
		"\x05\u059A\u02CE\x02\u28C3\u28C5\x03\x02\x02\x02\u28C4\u28B5\x03\x02\x02" +
		"\x02\u28C4\u28B8\x03\x02\x02\x02\u28C4\u28BE\x03\x02\x02\x02\u28C5\u28C6" +
		"\x03\x02\x02\x02\u28C6\u28C7\x07\t\x02\x02\u28C7\u0597\x03\x02\x02\x02" +
		"\u28C8\u28CD\x03\x02\x02\x02\u28C9\u28CA\x07\u010F\x02\x02\u28CA\u28CD" +
		"\x07\u0146\x02\x02\u28CB\u28CD\x07\u0146\x02\x02\u28CC\u28C8\x03\x02\x02" +
		"\x02\u28CC\u28C9\x03\x02\x02\x02\u28CC\u28CB\x03\x02\x02\x02\u28CD\u0599" +
		"\x03\x02\x02\x02\u28CE\u28CF\x05\u03C6\u01E4\x02\u28CF\u059B\x03\x02\x02" +
		"\x02\u28D0\u28D6\x03\x02\x02\x02\u28D1\u28D2\x07\x04\x02\x02\u28D2\u28D3" +
		"\x05\u059E\u02D0\x02\u28D3\u28D4\x07\x05\x02\x02\u28D4\u28D6\x03\x02\x02" +
		"\x02\u28D5\u28D0\x03\x02\x02\x02\u28D5\u28D1\x03\x02\x02\x02\u28D6\u059D" +
		"\x03\x02\x02\x02\u28D7\u28DC\x05\u05A0\u02D1\x02\u28D8\u28D9\x07\b\x02" +
		"\x02\u28D9\u28DB\x05\u05A0\u02D1\x02\u28DA\u28D8\x03\x02\x02\x02\u28DB" +
		"\u28DE\x03\x02\x02\x02\u28DC\u28DA\x03\x02\x02\x02\u28DC\u28DD\x03\x02" +
		"\x02\x02\u28DD\u059F\x03\x02\x02\x02\u28DE\u28DC\x03\x02\x02\x02\u28DF" +
		"\u28E0\x05\u05A6\u02D4\x02\u28E0\u28E1\x05\u05AA\u02D6\x02\u28E1\u05A1" +
		"\x03\x02\x02\x02\u28E2\u28E3\tH\x02\x02\u28E3\u05A3\x03\x02\x02\x02\u28E4" +
		"\u28E7\x07\x1E\x02\x02\u28E5\u28E7\x05\u0562\u02B2\x02\u28E6\u28E4\x03" +
		"\x02\x02\x02\u28E6\u28E5\x03\x02\x02\x02\u28E7\u05A5\x03\x02\x02\x02\u28E8" +
		"\u28E9\x05\u0650\u0329\x02\u28E9\u05A7\x03\x02\x02\x02\u28EA\u28ED\x03" +
		"\x02\x02\x02\u28EB\u28ED\x07\u01F3\x02\x02\u28EC\u28EA\x03\x02\x02\x02" +
		"\u28EC\u28EB\x03\x02\x02\x02\u28ED\u05A9\x03\x02\x02\x02\u28EE\u28EF\x05" +
		"\u0462\u0232\x02\u28EF\u05AB\x03\x02\x02\x02\u28F0\u28F4\x03\x02\x02\x02" +
		"\u28F1\u28F2\x07-\x02\x02\u28F2\u28F4\x05\u0214\u010B\x02\u28F3\u28F0" +
		"\x03\x02\x02\x02\u28F3\u28F1\x03\x02\x02\x02\u28F4\u05AD\x03\x02\x02\x02" +
		"\u28F5\u28F9\x03\x02\x02\x02\u28F6\u28F7\x07O\x02\x02\u28F7\u28F9\x07" +
		"P\x02\x02\u28F8\u28F5\x03\x02\x02\x02\u28F8\u28F6\x03\x02\x02\x02\u28F9" +
		"\u05AF\x03\x02\x02\x02\u28FA\u28FF\x03\x02\x02\x02\u28FB\u28FC\x05\u05B2" +
		"\u02DA\x02\u28FC\u28FD\x05\u0654\u032B\x02\u28FD\u28FF\x03\x02\x02\x02" +
		"\u28FE\u28FA\x03\x02\x02\x02\u28FE\u28FB\x03\x02\x02\x02\u28FF\u05B1\x03" +
		"\x02\x02\x02\u2900\u2903\x05\u05B4\u02DB\x02\u2901\u2903\x077\x02\x02" +
		"\u2902\u2900\x03\x02\x02\x02\u2902\u2901\x03\x02\x02\x02\u2903\u05B3\x03" +
		"\x02\x02\x02\u2904\u2905\tI\x02\x02\u2905\u05B5\x03\x02\x02\x02\u2906" +
		"\u2908\x05\u05B8\u02DD\x02\u2907\u2906\x03\x02\x02\x02\u2908\u290B\x03" +
		"\x02\x02\x02\u2909\u2907\x03\x02\x02\x02\u2909\u290A\x03\x02\x02\x02\u290A" +
		"\u05B7\x03\x02\x02\x02\u290B\u2909\x03\x02\x02\x02\u290C\u290D\x05\u058A" +
		"\u02C6\x02\u290D\u290E\x07\t\x02\x02\u290E\u2928\x03";
	private static readonly _serializedATNSegment19: string =
		"\x02\x02\x02\u290F\u2928\x05\u05FA\u02FE\x02\u2910\u2928\x05\u05FE\u0300" +
		"\x02\u2911\u2928\x05\u05C0\u02E1\x02\u2912\u2928\x05\u05D0\u02E9\x02\u2913" +
		"\u2928\x05\u05D6\u02EC\x02\u2914\u2928\x05\u05E0\u02F1\x02\u2915\u2928" +
		"\x05\u05E2\u02F2\x02\u2916\u2928\x05\u05E4\u02F3\x02\u2917\u2928\x05\u05F2" +
		"\u02FA\x02\u2918\u2928\x05\u05F6\u02FC\x02\u2919\u2928\x05\u060A\u0306" +
		"\x02\u291A\u2928\x05\u0610\u0309\x02\u291B\u2928\x05\u0612\u030A\x02\u291C" +
		"\u2928\x05\u05BA\u02DE\x02\u291D\u2928\x05\u05BC\u02DF\x02\u291E\u2928" +
		"\x05\u05C2\u02E2\x02\u291F\u2928\x05\u061A\u030E\x02\u2920\u2928\x05\u0626" +
		"\u0314\x02\u2921\u2928\x05\u062E\u0318\x02\u2922\u2928\x05\u0630\u0319" +
		"\x02\u2923\u2928\x05\u0632\u031A\x02\u2924\u2928\x05\u0634\u031B\x02\u2925" +
		"\u2928\x05\u0636\u031C\x02\u2926\u2928\x05\u063A\u031E\x02\u2927\u290C" +
		"\x03\x02\x02\x02\u2927\u290F\x03\x02\x02\x02\u2927\u2910\x03\x02\x02\x02" +
		"\u2927\u2911\x03\x02\x02\x02\u2927\u2912\x03\x02\x02\x02\u2927\u2913\x03" +
		"\x02\x02\x02\u2927\u2914\x03\x02\x02\x02\u2927\u2915\x03\x02\x02\x02\u2927" +
		"\u2916\x03\x02\x02\x02\u2927\u2917\x03\x02\x02\x02\u2927\u2918\x03\x02" +
		"\x02\x02\u2927\u2919\x03\x02\x02\x02\u2927\u291A\x03\x02\x02\x02\u2927" +
		"\u291B\x03\x02\x02\x02\u2927\u291C\x03\x02\x02\x02\u2927\u291D\x03\x02" +
		"\x02\x02\u2927\u291E\x03\x02\x02\x02\u2927\u291F\x03\x02\x02\x02\u2927" +
		"\u2920\x03\x02\x02\x02\u2927\u2921\x03\x02\x02\x02\u2927\u2922\x03\x02" +
		"\x02\x02\u2927\u2923\x03\x02\x02\x02\u2927\u2924\x03\x02\x02\x02\u2927" +
		"\u2925\x03\x02\x02\x02\u2927\u2926\x03\x02\x02\x02\u2928\u05B9\x03\x02" +
		"\x02\x02\u2929\u292A\x07\u01F4\x02\x02\u292A\u292B\x05\u0658\u032D\x02" +
		"\u292B\u292C\x07\t\x02\x02\u292C\u05BB\x03\x02\x02\x02\u292D\u292E\x07" +
		"\u01B3\x02\x02\u292E\u292F\x05\u0650\u0329\x02\u292F\u2930\x07\x04\x02" +
		"\x02\u2930\u2931\x05\u05BE\u02E0\x02\u2931\u2932\x07\x05\x02\x02\u2932" +
		"\u2933\x07\t\x02\x02\u2933\u293C\x03\x02\x02\x02\u2934\u2935\x07;\x02" +
		"\x02\u2935\u2936\x05\u0650\u0329\x02\u2936\u2937\x07\x04\x02\x02\u2937" +
		"\u2938\x05\u05BE\u02E0\x02\u2938\u2939\x07\x05\x02\x02\u2939\u293A\x07" +
		"\t\x02\x02\u293A\u293C\x03\x02\x02\x02\u293B\u292D\x03\x02\x02\x02\u293B" +
		"\u2934\x03\x02\x02\x02\u293C\u05BD\x03\x02\x02\x02\u293D\u2940\x03\x02" +
		"\x02\x02\u293E\u2940\x05\u0502\u0282\x02\u293F\u293D\x03\x02\x02\x02\u293F" +
		"\u293E\x03\x02\x02\x02\u2940\u05BF\x03\x02\x02\x02\u2941\u2942\x05\u05CE" +
		"\u02E8\x02\u2942\u2943\x05\u05B4\u02DB\x02\u2943\u2944\x05\u0654\u032B" +
		"\x02\u2944\u2945\x07\t\x02\x02\u2945\u05C1\x03\x02\x02\x02\u2946\u2947" +
		"\x07\u01F5\x02\x02\u2947\u2948\x05\u05C4\u02E3\x02\u2948\u2949\x07\u01F6" +
		"\x02\x02\u2949\u294A\x05\u05C6\u02E4\x02\u294A\u294B\x07\t\x02\x02\u294B" +
		"\u05C3\x03\x02\x02\x02\u294C\u2950\x03\x02\x02\x02\u294D\u2950\x07\u01B4" +
		"\x02\x02\u294E\u2950\x07\u01F7\x02\x02\u294F\u294C\x03\x02\x02\x02\u294F" +
		"\u294D\x03\x02\x02\x02\u294F\u294E\x03\x02\x02\x02\u2950\u05C5\x03\x02" +
		"\x02\x02\u2951\u2956\x05\u05C8\u02E5\x02\u2952\u2953\x07\b\x02\x02\u2953" +
		"\u2955\x05\u05C8\u02E5\x02\u2954\u2952\x03\x02\x02\x02\u2955\u2958\x03" +
		"\x02\x02\x02\u2956\u2954\x03\x02\x02\x02\u2956\u2957\x03\x02\x02\x02\u2957" +
		"\u05C7\x03\x02\x02\x02\u2958\u2956\x03\x02\x02\x02\u2959\u295A\x05\u05CC" +
		"\u02E7\x02\u295A\u295B\x05\u05B4\u02DB\x02\u295B\u295C\x05\u05CA\u02E6" +
		"\x02\u295C\u05C9\x03\x02\x02\x02\u295D\u295E\x05\u0562\u02B2\x02\u295E" +
		"\u05CB\x03\x02\x02\x02\u295F\u2960\x05\u05CE\u02E8\x02\u2960\u05CD\x03" +
		"\x02\x02\x02\u2961\u2964\x05\u0214\u010B\x02\u2962\u2964\x07\x1E\x02\x02" +
		"\u2963\u2961\x03\x02\x02\x02\u2963\u2962\x03\x02\x02\x02\u2964\u296B\x03" +
		"\x02\x02\x02\u2965\u2966\x07\x06\x02\x02\u2966\u2967\x05\u065A\u032E\x02" +
		"\u2967\u2968\x07\x07\x02\x02\u2968\u296A\x03\x02\x02\x02\u2969\u2965\x03" +
		"\x02\x02\x02\u296A\u296D\x03\x02\x02\x02\u296B\u2969\x03\x02\x02\x02\u296B" +
		"\u296C\x03\x02\x02\x02\u296C\u05CF\x03\x02\x02\x02\u296D\u296B\x03\x02" +
		"\x02\x02\u296E\u296F\x07\xDE\x02\x02\u296F\u2970\x05\u0656\u032C\x02\u2970" +
		"\u2971\x07_\x02\x02\u2971\u2972\x05\u05B6\u02DC\x02\u2972\u2973\x05\u05D2" +
		"\u02EA\x02\u2973\u2974\x05\u05D4\u02EB\x02\u2974\u2975\x07\u01C8\x02\x02" +
		"\u2975\u2976\x07\xDE\x02\x02\u2976\u2977\x07\t\x02\x02\u2977\u05D1\x03" +
		"\x02\x02\x02\u2978\u2979\x07\u01F8\x02\x02\u2979\u297A\x05\u048E\u0248" +
		"\x02\u297A\u297B\x07_\x02\x02\u297B\u297C\x05\u05B6\u02DC\x02\u297C\u297E" +
		"\x03\x02\x02\x02\u297D\u2978\x03\x02\x02\x02\u297E\u2981\x03\x02\x02\x02" +
		"\u297F\u297D\x03\x02\x02\x02\u297F\u2980\x03\x02\x02\x02\u2980\u05D3\x03" +
		"\x02\x02\x02\u2981\u297F\x03\x02\x02\x02\u2982\u2986\x03\x02\x02\x02\u2983" +
		"\u2984\x07<\x02\x02\u2984\u2986\x05\u05B6\u02DC\x02\u2985\u2982\x03\x02" +
		"\x02\x02\u2985\u2983\x03\x02\x02\x02\u2986\u05D5\x03\x02\x02\x02\u2987" +
		"\u2988\x07*\x02\x02\u2988\u2989\x05\u05D8\u02ED\x02\u2989\u298A\x05\u05DA" +
		"\u02EE\x02\u298A\u298B\x05\u05DE\u02F0\x02\u298B\u298C\x07\u01C8\x02\x02" +
		"\u298C\u298D\x07*\x02\x02\u298D\u298E\x07\t\x02\x02\u298E\u05D7\x03\x02" +
		"\x02\x02\u298F\u2992\x03\x02\x02\x02\u2990\u2992\x05\u0654\u032B\x02\u2991" +
		"\u298F\x03\x02\x02\x02\u2991\u2990\x03\x02\x02\x02\u2992\u05D9\x03\x02" +
		"\x02\x02\u2993\u2995\x05\u05DC\u02EF\x02\u2994\u2993\x03\x02\x02\x02\u2995" +
		"\u2996\x03\x02\x02\x02\u2996\u2994\x03\x02\x02\x02\u2996\u2997\x03\x02" +
		"\x02\x02\u2997\u05DB\x03\x02\x02\x02\u2998\u2999\x07h\x02\x02\u2999\u299A" +
		"\x05\u0502\u0282\x02\u299A\u299B\x07_\x02\x02\u299B\u299C\x05\u05B6\u02DC" +
		"\x02\u299C\u05DD\x03\x02\x02\x02\u299D\u29A1\x03\x02\x02\x02\u299E\u299F" +
		"\x07<\x02\x02\u299F\u29A1\x05\u05B6\u02DC\x02\u29A0\u299D\x03\x02\x02" +
		"\x02\u29A0\u299E\x03\x02\x02\x02\u29A1\u05DF\x03\x02\x02\x02\u29A2\u29A3" +
		"\x05\u064A\u0326\x02\u29A3\u29A4\x05\u060E\u0308\x02\u29A4\u05E1\x03\x02" +
		"\x02\x02\u29A5\u29A6\x05\u064A\u0326\x02\u29A6\u29A7\x07\u01F9\x02\x02" +
		"\u29A7\u29A8\x05\u065C\u032F\x02\u29A8\u29A9\x05\u060E\u0308\x02\u29A9" +
		"\u05E3\x03\x02\x02\x02\u29AA\u29AB\x05\u064A\u0326\x02\u29AB\u29AC\x07" +
		"@\x02\x02\u29AC\u29AD\x05\u05E6\u02F4\x02\u29AD\u29AE\x05\u060E\u0308" +
		"\x02\u29AE\u05E5\x03\x02\x02\x02\u29AF\u29B0\x05\u05F0\u02F9\x02\u29B0" +
		"\u29C0\x07F\x02\x02\u29B1\u29B2\x05\u03C0\u01E1\x02\u29B2\u29B3\x05\u05EA" +
		"\u02F6\x02\u29B3\u29C1\x03\x02\x02\x02\u29B4\u29C1\x05\u03C6\u01E4\x02" +
		"\u29B5\u29C1\x05\u037C\u01BF\x02\u29B6\u29B7\x07\xCC\x02\x02\u29B7\u29B8" +
		"\x05\u048E\u0248\x02\u29B8\u29B9\x05\u05E8\u02F5\x02\u29B9\u29C1\x03\x02" +
		"\x02\x02\u29BA\u29BB\x05\u05EC\u02F7\x02\u29BB\u29BC\x05\u048E\u0248\x02" +
		"\u29BC\u29BD\x07\x1A\x02\x02\u29BD\u29BE\x05\u048E\u0248\x02\u29BE\u29BF" +
		"\x05\u05EE\u02F8\x02\u29BF\u29C1\x03\x02\x02\x02\u29C0\u29B1\x03\x02\x02" +
		"\x02\u29C0\u29B4\x03\x02\x02\x02\u29C0\u29B5\x03\x02\x02\x02\u29C0\u29B6" +
		"\x03\x02\x02\x02\u29C0\u29BA\x03\x02\x02\x02\u29C1\u05E7\x03\x02\x02\x02" +
		"\u29C2\u29C6\x03\x02\x02\x02\u29C3\u29C4\x07f\x02\x02\u29C4\u29C6\x05" +
		"\u0502\u0282\x02\u29C5\u29C2\x03\x02\x02\x02\u29C5\u29C3\x03\x02\x02\x02" +
		"\u29C6\u05E9\x03\x02\x02\x02\u29C7\u29D4\x03\x02\x02\x02\u29C8\u29C9\x07" +
		"\x04\x02\x02\u29C9\u29CE\x05\u048E\u0248\x02\u29CA\u29CB\x07\b\x02\x02" +
		"\u29CB\u29CD\x05\u048E\u0248\x02\u29CC\u29CA\x03\x02\x02\x02\u29CD\u29D0" +
		"\x03\x02\x02\x02\u29CE\u29CC\x03\x02\x02\x02\u29CE\u29CF\x03\x02\x02\x02" +
		"\u29CF\u29D1\x03\x02\x02\x02\u29D0\u29CE\x03\x02\x02\x02\u29D1\u29D2\x07" +
		"\x05\x02\x02\u29D2\u29D4\x03\x02\x02\x02\u29D3\u29C7\x03\x02\x02\x02\u29D3" +
		"\u29C8\x03\x02\x02\x02\u29D4\u05EB\x03\x02\x02\x02\u29D5\u29D8\x03\x02" +
		"\x02\x02\u29D6\u29D8\x07\u01FA\x02\x02\u29D7\u29D5\x03\x02\x02\x02\u29D7" +
		"\u29D6\x03\x02\x02\x02\u29D8\u05ED\x03\x02\x02\x02\u29D9\u29DD\x03\x02" +
		"\x02\x02\u29DA\u29DB\x07\x95\x02\x02\u29DB\u29DD\x05\u048E\u0248\x02\u29DC" +
		"\u29D9\x03\x02\x02\x02\u29DC\u29DA\x03\x02\x02\x02\u29DD\u05EF\x03\x02" +
		"\x02\x02\u29DE\u29DF\x05\u0212\u010A\x02\u29DF\u05F1\x03\x02\x02\x02\u29E0" +
		"\u29E1\x05\u064A\u0326\x02\u29E1\u29E2\x07\u01FB\x02\x02\u29E2\u29E3\x05" +
		"\u05F0\u02F9\x02\u29E3\u29E4\x05\u05F4\u02FB\x02\u29E4\u29E5\x07F\x02" +
		"\x02\u29E5\u29E6\x07%\x02\x02\u29E6\u29E7\x05\u048E\u0248\x02\u29E7\u29E8" +
		"\x05\u060E\u0308\x02\u29E8\u05F3\x03\x02\x02\x02\u29E9\u29ED\x03\x02\x02" +
		"\x02\u29EA\u29EB\x07\u01FC\x02\x02\u29EB\u29ED\x05\u0550\u02A9\x02\u29EC" +
		"\u29E9\x03\x02\x02\x02\u29EC\u29EA\x03\x02\x02\x02\u29ED\u05F5\x03\x02" +
		"\x02\x02\u29EE\u29EF\x05\u05F8\u02FD\x02\u29EF\u29F1\x05\u064C\u0327\x02" +
		"\u29F0\u29F2\x05\u064E\u0328\x02\u29F1\u29F0\x03\x02\x02\x02\u29F1\u29F2" +
		"\x03\x02\x02\x02\u29F2\u29F3\x03\x02\x02\x02\u29F3\u29F4\x07\t\x02\x02" +
		"\u29F4\u05F7\x03\x02\x02\x02\u29F5\u29F6\tJ\x02\x02\u29F6\u05F9\x03\x02" +
		"\x02\x02\u29F7\u2A03\x07\u01FE\x02\x02\u29F8\u29F9\x07\u010E\x02\x02\u29F9" +
		"\u2A04\x05\u0654\u032B\x02\u29FA\u2A00\x07\u01FF\x02\x02\u29FB\u29FC\x07" +
		"\xCC\x02\x02\u29FC\u29FD\x05\u048E\u0248\x02\u29FD\u29FE\x05\u05E8\u02F5" +
		"\x02\u29FE\u2A01\x03\x02\x02\x02\u29FF\u2A01\x05\u03C6\u01E4\x02\u2A00" +
		"\u29FB\x03\x02\x02\x02\u2A00\u29FF\x03\x02\x02\x02\u2A01\u2A04\x03\x02" +
		"\x02\x02\u2A02\u2A04\x05\u05FC\u02FF\x02\u2A03\u29F8\x03\x02\x02\x02\u2A03" +
		"\u29FA\x03\x02\x02\x02\u2A03\u2A02\x03\x02\x02\x02\u2A04\u2A05\x03\x02" +
		"\x02\x02\u2A05\u2A06\x07\t\x02\x02\u2A06\u05FB\x03\x02\x02\x02\u2A07\u2A0A" +
		"\x03\x02\x02\x02\u2A08\u2A0A\x05\u0654\u032B\x02\u2A09\u2A07\x03\x02\x02" +
		"\x02\u2A09\u2A08\x03\x02\x02\x02\u2A0A\u05FD\x03\x02\x02\x02\u2A0B\u2A0D" +
		"\x07\u0200\x02\x02\u2A0C\u2A0E\x05\u0600\u0301\x02\u2A0D\u2A0C\x03\x02" +
		"\x02\x02\u2A0D\u2A0E\x03\x02\x02\x02\u2A0E\u2A0F\x03\x02\x02\x02\u2A0F" +
		"\u2A10\x05\u0552\u02AA\x02\u2A10\u2A11\x05\u0602\u0302\x02\u2A11\u2A12" +
		"\x05\u0604\u0303\x02\u2A12\u2A13\x07\t\x02\x02\u2A13\u2A2E\x03\x02\x02" +
		"\x02\u2A14\u2A16\x07\u0200\x02\x02\u2A15\u2A17\x05\u0600\u0301\x02\u2A16" +
		"\u2A15\x03\x02\x02\x02\u2A16\u2A17\x03\x02\x02\x02\u2A17\u2A18\x03\x02" +
		"\x02\x02\u2A18\u2A19\x05\u0572\u02BA\x02\u2A19\u2A1A\x05\u0604\u0303\x02" +
		"\u2A1A\u2A1B\x07\t\x02\x02\u2A1B\u2A2E\x03\x02\x02\x02\u2A1C\u2A1E\x07" +
		"\u0200\x02\x02\u2A1D\u2A1F\x05\u0600\u0301\x02\u2A1E\u2A1D\x03\x02\x02" +
		"\x02\u2A1E\u2A1F\x03\x02\x02\x02\u2A1F\u2A20\x03\x02\x02\x02\u2A20\u2A21" +
		"\x07\u0201\x02\x02\u2A21\u2A22\x05\u0552\u02AA\x02\u2A22\u2A23\x05\u0604" +
		"\u0303\x02\u2A23\u2A24\x07\t\x02\x02\u2A24\u2A2E\x03\x02\x02\x02\u2A25" +
		"\u2A27\x07\u0200\x02\x02\u2A26\u2A28\x05\u0600\u0301\x02\u2A27\u2A26\x03" +
		"\x02\x02\x02\u2A27\u2A28\x03\x02\x02\x02\u2A28\u2A29\x03\x02\x02\x02\u2A29" +
		"\u2A2A\x05\u0604\u0303\x02\u2A2A\u2A2B\x07\t\x02\x02\u2A2B\u2A2E\x03\x02" +
		"\x02\x02\u2A2C\u2A2E\x07\u0200\x02\x02\u2A2D\u2A0B\x03\x02\x02\x02\u2A2D" +
		"\u2A14\x03\x02\x02\x02\u2A2D\u2A1C\x03\x02\x02\x02\u2A2D\u2A25\x03\x02" +
		"\x02\x02\u2A2D\u2A2C\x03\x02\x02\x02\u2A2E\u05FF\x03\x02\x02\x02\u2A2F" +
		"\u2A30\tK\x02\x02\u2A30\u0601\x03\x02\x02\x02\u2A31\u2A39\x03\x02\x02" +
		"\x02\u2A32\u2A33\x07\b\x02\x02\u2A33\u2A35\x05\u048E\u0248\x02\u2A34\u2A32" +
		"\x03\x02\x02\x02\u2A35\u2A36\x03\x02\x02\x02\u2A36\u2A34\x03\x02\x02\x02" +
		"\u2A36\u2A37\x03\x02\x02\x02\u2A37\u2A39\x03\x02\x02\x02\u2A38\u2A31\x03" +
		"\x02\x02\x02\u2A38\u2A34\x03\x02\x02\x02\u2A39\u0603\x03\x02\x02\x02\u2A3A" +
		"\u2A3E\x03\x02\x02\x02\u2A3B\u2A3C\x07f\x02\x02\u2A3C\u2A3E\x05\u0608" +
		"\u0305\x02\u2A3D\u2A3A\x03\x02\x02\x02\u2A3D\u2A3B\x03\x02\x02\x02\u2A3E" +
		"\u0605\x03\x02\x02\x02\u2A3F\u2A40\x05\u0572\u02BA\x02\u2A40\u2A41\x07" +
		"\f\x02\x02\u2A41\u2A42\x05\u048E\u0248\x02\u2A42\u0607\x03\x02\x02\x02" +
		"\u2A43\u2A48\x05\u0606\u0304\x02\u2A44\u2A45\x07\b\x02\x02\u2A45\u2A47" +
		"\x05\u0606\u0304\x02\u2A46\u2A44\x03\x02\x02\x02\u2A47\u2A4A\x03\x02\x02" +
		"\x02\u2A48\u2A46\x03\x02\x02\x02\u2A48\u2A49\x03\x02\x02\x02\u2A49\u0609" +
		"\x03\x02\x02\x02\u2A4A\u2A48\x03\x02\x02\x02\u2A4B\u2A4C\x07\u0208\x02" +
		"\x02\u2A4C\u2A4D\x05\u0654\u032B\x02\u2A4D\u2A4E\x05\u060C\u0307\x02\u2A4E" +
		"\u2A4F\x07\t\x02\x02\u2A4F\u060B\x03\x02\x02\x02\u2A50\u2A54\x03\x02\x02" +
		"\x02\u2A51\u2A52\x07\b\x02\x02\u2A52\u2A54\x05\u0654\u032B\x02\u2A53\u2A50" +
		"\x03\x02\x02\x02\u2A53\u2A51\x03\x02\x02\x02\u2A54\u060D\x03\x02\x02\x02" +
		"\u2A55\u2A56\x07\u0209\x02\x02\u2A56\u2A57\x05\u05B6\u02DC\x02\u2A57\u2A58" +
		"\x07\u01C8\x02\x02\u2A58\u2A59\x07\u0209\x02\x02\u2A59\u2A5A\x05\u064C" +
		"\u0327\x02\u2A5A\u2A5B\x07\t\x02\x02\u2A5B\u060F\x03\x02\x02\x02\u2A5C" +
		"\u2A5D\x05\u065E\u0330\x02\u2A5D\u2A5E\x07\t\x02\x02\u2A5E\u0611\x03\x02" +
		"\x02\x02\u2A5F\u2A60\x07\xCC\x02\x02\u2A60\u2A68\x05\u048E\u0248\x02\u2A61" +
		"\u2A62\x05\u0618\u030D\x02\u2A62\u2A63\x05\u0614\u030B\x02\u2A63\u2A69" +
		"\x03\x02\x02\x02\u2A64\u2A65\x05\u0614\u030B\x02\u2A65\u2A66\x05\u0618" +
		"\u030D\x02\u2A66\u2A69\x03\x02\x02\x02\u2A67\u2A69\x03\x02\x02\x02\u2A68" +
		"\u2A61\x03\x02\x02\x02\u2A68\u2A64\x03\x02\x02\x02\u2A68\u2A67\x03\x02" +
		"\x02\x02\u2A69\u2A6A\x03\x02\x02\x02\u2A6A\u2A6B\x07\t\x02\x02\u2A6B\u0613" +
		"\x03\x02\x02\x02\u2A6C\u2A70\x03\x02\x02\x02\u2A6D\u2A6E\x07f\x02\x02" +
		"\u2A6E\u2A70\x05\u0616\u030C\x02\u2A6F\u2A6C\x03\x02\x02\x02\u2A6F\u2A6D" +
		"\x03\x02\x02\x02\u2A70\u0615\x03\x02\x02\x02\u2A71\u2A76\x05\u048E\u0248" +
		"\x02\u2A72\u2A73\x07\b\x02\x02\u2A73\u2A75\x05\u048E\u0248\x02\u2A74\u2A72" +
		"\x03\x02\x02\x02\u2A75\u2A78\x03\x02\x02\x02\u2A76\u2A74\x03\x02\x02\x02" +
		"\u2A76\u2A77\x03\x02\x02\x02\u2A77\u0617\x03\x02\x02\x02\u2A78\u2A76\x03" +
		"\x02\x02\x02\u2A79\u2A80\x03\x02\x02\x02\u2A7A\u2A7C\x07I\x02\x02\u2A7B" +
		"\u2A7D\x07\u015C\x02\x02\u2A7C\u2A7B\x03\x02\x02\x02\u2A7C\u2A7D\x03\x02" +
		"\x02\x02\u2A7D\u2A7E\x03\x02\x02\x02\u2A7E\u2A80\x05\u0628\u0315\x02\u2A7F" +
		"\u2A79\x03\x02\x02\x02\u2A7F\u2A7A\x03\x02\x02\x02\u2A80\u0619\x03\x02" +
		"\x02\x02\u2A81\u2A93\x07\u020A\x02\x02\u2A82\u2A83\x05\u063C\u031F\x02" +
		"\u2A83\u2A84\x05\u0622\u0312\x02\u2A84\u2A8A\x07@\x02\x02\u2A85\u2A8B" +
		"\x05\u03C6\u01E4\x02\u2A86\u2A87\x07\xCC\x02\x02\u2A87\u2A88\x05\u0654" +
		"\u032B\x02\u2A88\u2A89\x05\u0620\u0311\x02\u2A89\u2A8B\x03\x02\x02\x02" +
		"\u2A8A\u2A85\x03\x02\x02\x02\u2A8A\u2A86\x03\x02\x02\x02\u2A8B\u2A94\x03" +
		"\x02\x02\x02\u2A8C\u2A91\x05\u0562\u02B2\x02\u2A8D\u2A8E\x07\x04\x02\x02" +
		"\u2A8E\u2A8F\x05\u061E\u0310\x02\u2A8F\u2A90\x07\x05\x02\x02\u2A90\u2A92" +
		"\x03\x02\x02\x02\u2A91\u2A8D\x03\x02\x02\x02\u2A91\u2A92\x03\x02\x02\x02" +
		"\u2A92\u2A94\x03\x02\x02\x02\u2A93\u2A82\x03\x02\x02\x02\u2A93\u2A8C\x03" +
		"\x02\x02\x02\u2A94\u2A95\x03\x02\x02\x02\u2A95\u2A96\x07\t\x02\x02\u2A96" +
		"\u061B\x03\x02\x02\x02\u2A97\u2A98\x05\u0562\u02B2\x02\u2A98\u2A99\x07" +
		"\x16\x02\x02\u2A99\u2A9A\x05\u048E\u0248\x02\u2A9A\u2A9D\x03\x02\x02\x02" +
		"\u2A9B\u2A9D\x05\u048E\u0248\x02\u2A9C\u2A97\x03\x02\x02\x02\u2A9C\u2A9B" +
		"\x03\x02\x02\x02\u2A9D\u061D\x03\x02\x02\x02\u2A9E\u2AA3\x05\u061C\u030F" +
		"\x02\u2A9F\u2AA0\x07\b\x02\x02\u2AA0\u2AA2\x05\u061C\u030F\x02\u2AA1\u2A9F" +
		"\x03\x02\x02\x02\u2AA2\u2AA5\x03\x02\x02\x02\u2AA3\u2AA1\x03\x02\x02\x02" +
		"\u2AA3\u2AA4\x03\x02\x02\x02\u2AA4\u061F\x03\x02\x02\x02\u2AA5\u2AA3\x03" +
		"\x02\x02\x02\u2AA6\u2AAA\x03\x02\x02\x02\u2AA7\u2AA8\x07f\x02\x02\u2AA8" +
		"\u2AAA\x05\u0502\u0282\x02\u2AA9\u2AA6\x03\x02\x02\x02\u2AA9\u2AA7\x03" +
		"\x02\x02\x02\u2AAA\u0621\x03\x02\x02\x02\u2AAB\u2AB0\x03\x02\x02\x02\u2AAC" +
		"\u2AAD\x05\u0624\u0313\x02\u2AAD\u2AAE\x07\u0146\x02\x02\u2AAE\u2AB0\x03" +
		"\x02\x02\x02\u2AAF\u2AAB\x03\x02\x02\x02\u2AAF\u2AAC\x03\x02\x02\x02\u2AB0" +
		"\u0623\x03\x02\x02\x02\u2AB1\u2AB4\x03\x02\x02\x02\u2AB2\u2AB4\x07\u010F" +
		"\x02\x02\u2AB3\u2AB1\x03\x02\x02\x02\u2AB3\u2AB2\x03\x02\x02\x02\u2AB4" +
		"\u0625\x03\x02\x02\x02\u2AB5\u2AB7\x07?\x02\x02\u2AB6\u2AB8\x05\u062C" +
		"\u0317\x02\u2AB7\u2AB6\x03\x02\x02\x02\u2AB7\u2AB8\x03\x02\x02\x02\u2AB8" +
		"\u2AB9\x03\x02\x02\x02\u2AB9\u2ABA\x05\u062A\u0316\x02\u2ABA\u2ABB\x05" +
		"\u063C\u031F\x02\u2ABB\u2ABC\x07I\x02\x02\u2ABC\u2ABD\x05\u0628\u0315" +
		"\x02\u2ABD\u2ABE\x07\t\x02\x02\u2ABE\u0627\x03\x02\x02\x02\u2ABF\u2AC0" +
		"\x05\u0502\u0282\x02\u2AC0\u0629\x03\x02\x02\x02\u2AC1\u2AC5\x03\x02\x02" +
		"\x02\u2AC2\u2AC5\x07B\x02\x02\u2AC3\u2AC5\x07F\x02\x02\u2AC4\u2AC1\x03" +
		"\x02\x02\x02\u2AC4\u2AC2\x03\x02\x02\x02\u2AC4\u2AC3\x03\x02\x02\x02\u2AC5" +
		"\u062B\x03\x02\x02\x02\u2AC6\u2AD6\x07\u010E\x02\x02\u2AC7\u2AD6\x07\u0127" +
		"\x02\x02\u2AC8\u2AD6\x07\xD1\x02\x02\u2AC9\u2AD6\x07\xFB\x02\x02\u2ACA" +
		"\u2ACB\x07\x84\x02\x02\u2ACB\u2AD6\x05\u048E\u0248\x02\u2ACC\u2ACD\x07" +
		"\u0135\x02\x02\u2ACD\u2AD6\x05\u048E\u0248\x02\u2ACE\u2AD6\x05\u048E\u0248" +
		"\x02\u2ACF\u2AD6\x07 \x02\x02\u2AD0\u2AD3\tL\x02\x02\u2AD1\u2AD4\x05\u048E" +
		"\u0248\x02\u2AD2\u2AD4\x07 \x02\x02\u2AD3\u2AD1\x03\x02\x02\x02\u2AD3" +
		"\u2AD2\x03\x02\x02\x02\u2AD3\u2AD4\x03\x02\x02\x02\u2AD4\u2AD6\x03\x02" +
		"\x02\x02\u2AD5\u2AC6\x03\x02\x02\x02\u2AD5\u2AC7\x03\x02\x02\x02\u2AD5" +
		"\u2AC8\x03\x02\x02\x02\u2AD5\u2AC9\x03\x02\x02\x02\u2AD5\u2ACA\x03\x02" +
		"\x02\x02\u2AD5\u2ACC\x03\x02\x02\x02\u2AD5\u2ACE\x03\x02\x02\x02\u2AD5" +
		"\u2ACF\x03\x02\x02\x02\u2AD5\u2AD0\x03\x02\x02\x02\u2AD6\u062D\x03\x02" +
		"\x02\x02\u2AD7\u2AD9\x07\u010B\x02\x02\u2AD8\u2ADA\x05\u062C\u0317\x02" +
		"\u2AD9\u2AD8\x03\x02\x02\x02\u2AD9\u2ADA\x03\x02\x02\x02\u2ADA\u2ADB\x03" +
		"\x02\x02\x02\u2ADB\u2ADC\x05\u063C\u031F\x02\u2ADC\u2ADD\x07\t\x02\x02" +
		"\u2ADD\u062F\x03\x02\x02\x02\u2ADE\u2ADF\x07\x9F\x02\x02\u2ADF\u2AE0\x05" +
		"\u063C\u031F\x02\u2AE0\u2AE1\x07\t\x02\x02\u2AE1\u0631\x03\x02\x02\x02" +
		"\u2AE2\u2AE3\x07P\x02\x02\u2AE3\u2AE4\x07\t\x02\x02\u2AE4\u0633\x03\x02" +
		"\x02\x02\u2AE5\u2AE7\x07\xA3\x02\x02\u2AE6\u2AE8\x05\u0638\u031D\x02\u2AE7" +
		"\u2AE6\x03\x02\x02\x02\u2AE7\u2AE8\x03\x02\x02\x02\u2AE8\u2AE9\x03\x02" +
		"\x02\x02\u2AE9\u2AEA\x07\t\x02\x02\u2AEA\u0635\x03\x02\x02\x02\u2AEB\u2AED" +
		"\x07\u0141\x02\x02\u2AEC\u2AEE\x05\u0638\u031D\x02\u2AED\u2AEC\x03\x02" +
		"\x02\x02\u2AED\u2AEE\x03\x02\x02\x02\u2AEE\u2AEF\x03\x02\x02\x02\u2AEF" +
		"\u2AF0\x07\t\x02\x02\u2AF0\u0637\x03\x02\x02\x02\u2AF1\u2AF3\x07#\x02" +
		"\x02\u2AF2\u2AF4\x07\u010F\x02\x02\u2AF3\u2AF2\x03\x02\x02\x02\u2AF3\u2AF4" +
		"\x03\x02\x02\x02\u2AF4\u2AF5\x03\x02\x02\x02\u2AF5\u2AF6\x07\x9B\x02\x02" +
		"\u2AF6\u0639\x03\x02\x02\x02\u2AF7\u2AF8\x07\u014F\x02\x02\u2AF8\u2AF9" +
		"\x05\u0214\u010B\x02\u2AF9\u2AFA\x07`\x02\x02\u2AFA\u2AFB\x077\x02\x02" +
		"\u2AFB\u2AFC\x07\t\x02\x02\u2AFC\u2B04\x03\x02\x02\x02\u2AFD\u2B00\x07" +
		"\u013B\x02\x02\u2AFE\u2B01\x05\u0214\u010B\x02\u2AFF\u2B01\x07 \x02\x02" +
		"\u2B00\u2AFE\x03\x02\x02\x02\u2B00\u2AFF\x03\x02\x02\x02\u2B01\u2B02\x03" +
		"\x02\x02\x02\u2B02\u2B04\x07\t\x02\x02\u2B03\u2AF7\x03\x02\x02\x02\u2B03" +
		"\u2AFD\x03\x02\x02\x02\u2B04\u063B\x03\x02\x02\x02\u2B05\u2B08\x05\u0562" +
		"\u02B2\x02\u2B06\u2B08\x07\x1E\x02\x02\u2B07\u2B05\x03\x02\x02\x02\u2B07" +
		"\u2B06\x03\x02\x02\x02\u2B08\u063D\x03\x02\x02\x02\u2B09\u2B0D\x03\x02" +
		"\x02\x02\u2B0A\u2B0B\x07\u0207\x02\x02\u2B0B\u2B0D\x05\u0640\u0321\x02" +
		"\u2B0C\u2B09\x03\x02\x02\x02\u2B0C\u2B0A\x03\x02\x02\x02\u2B0D\u063F\x03" +
		"\x02\x02\x02\u2B0E\u2B10\x05\u0642\u0322\x02\u2B0F\u2B0E\x03\x02\x02\x02" +
		"\u2B10\u2B11\x03\x02\x02\x02\u2B11\u2B0F\x03\x02\x02\x02\u2B11\u2B12\x03" +
		"\x02\x02\x02\u2B12\u0641\x03\x02\x02\x02\u2B13\u2B14\x07h\x02\x02\u2B14" +
		"\u2B15\x05\u0644\u0323\x02\u2B15\u2B16\x07_\x02\x02\u2B16\u2B17\x05\u05B6" +
		"\u02DC\x02\u2B17\u0643\x03\x02\x02\x02\u2B18\u2B1D\x05\u0646\u0324\x02" +
		"\u2B19\u2B1A\x07T\x02\x02\u2B1A\u2B1C\x05\u0646\u0324\x02\u2B1B\u2B19" +
		"\x03\x02\x02\x02\u2B1C\u2B1F\x03\x02\x02\x02\u2B1D\u2B1B\x03\x02\x02\x02" +
		"\u2B1D\u2B1E\x03\x02\x02\x02\u2B1E\u0645\x03\x02\x02\x02\u2B1F\u2B1D\x03" +
		"\x02\x02\x02\u2B20\u2B24\x05\u0650\u0329\x02\u2B21\u2B22\x07\u0201\x02" +
		"\x02\u2B22\u2B24\x05\u0552\u02AA\x02\u2B23\u2B20\x03\x02\x02\x02\u2B23" +
		"\u2B21\x03\x02\x02\x02\u2B24\u0647\x03\x02\x02\x02\u2B25\u2B28\x03\x02" +
		"\x02\x02\u2B26\u2B28\x05\u0592\u02CA\x02\u2B27\u2B25\x03\x02\x02\x02\u2B27" +
		"\u2B26\x03\x02\x02\x02\u2B28\u0649\x03\x02\x02\x02\u2B29\u2B2C\x03\x02" +
		"\x02\x02\u2B2A\u2B2C\x05\u0592\u02CA\x02\u2B2B\u2B29\x03\x02\x02\x02\u2B2B" +
		"\u2B2A\x03\x02\x02\x02\u2B2C\u064B\x03\x02\x02\x02\u2B2D\u2B30\x03\x02" +
		"\x02\x02\u2B2E\u2B30\x05\u0650\u0329\x02\u2B2F\u2B2D\x03\x02\x02\x02\u2B2F" +
		"\u2B2E\x03\x02\x02\x02\u2B30\u064D\x03\x02\x02\x02\u2B31\u2B32\x07h\x02" +
		"\x02\u2B32\u2B33\x05\u0658\u032D\x02\u2B33\u064F\x03\x02\x02\x02\u2B34" +
		"\u2B37\x05\u0562\u02B2\x02\u2B35\u2B37\x05\u0652\u032A\x02\u2B36\u2B34" +
		"\x03\x02\x02\x02\u2B36\u2B35\x03\x02\x02\x02\u2B37\u0651\x03\x02\x02\x02" +
		"\u2B38\u2B39\tM\x02\x02\u2B39\u0653\x03\x02\x02\x02\u2B3A\u2B3C\x05\u0532" +
		"\u029A\x02\u2B3B\u2B3A\x03\x02\x02\x02\u2B3B\u2B3C\x03\x02\x02\x02\u2B3C" +
		"\u2B3E\x03\x02\x02\x02\u2B3D\u2B3F\x05\u03DE\u01F0\x02\u2B3E\u2B3D\x03" +
		"\x02\x02\x02\u2B3E\u2B3F\x03\x02\x02\x02\u2B3F\u2B41\x03\x02\x02\x02\u2B40" +
		"\u2B42\x05\u0426\u0214\x02\u2B41\u2B40\x03\x02\x02\x02\u2B41\u2B42\x03" +
		"\x02\x02\x02\u2B42\u2B44\x03\x02\x02\x02\u2B43\u2B45\x05\u044A\u0226\x02" +
		"\u2B44\u2B43\x03\x02\x02\x02\u2B44\u2B45\x03\x02\x02\x02\u2B45\u2B47\x03" +
		"\x02\x02\x02\u2B46\u2B48\x05\u0408\u0205\x02\u2B47\u2B46\x03\x02\x02\x02" +
		"\u2B47\u2B48\x03\x02\x02\x02\u2B48\u2B4A\x03\x02\x02\x02\u2B49\u2B4B\x05" +
		"\u0416\u020C\x02\u2B4A\u2B49\x03\x02\x02\x02\u2B4A\u2B4B\x03\x02\x02\x02" +
		"\u2B4B\u2B4D\x03\x02\x02\x02\u2B4C\u2B4E\x05\u04DA\u026E\x02\u2B4D\u2B4C" +
		"\x03\x02\x02\x02\u2B4D\u2B4E\x03\x02\x02\x02\u2B4E\u0655\x03\x02\x02\x02" +
		"\u2B4F\u2B50\x05\u0654\u032B\x02\u2B50\u0657\x03\x02\x02\x02\u2B51\u2B52" +
		"\x05\u0654\u032B\x02\u2B52\u0659\x03\x02\x02\x02\u2B53\u2B54\x05\u048E" +
		"\u0248\x02\u2B54\u065B\x03\x02\x02\x02\u2B55\u2B56\x05\u048E\u0248\x02" +
		"\u2B56\u065D\x03\x02\x02\x02\u2B57\u2B59\x05\b\x05\x02\u2B58\u2B5A\x05" +
		"\u0660\u0331\x02\u2B59\u2B58\x03\x02\x02\x02\u2B59\u2B5A\x03\x02\x02\x02" +
		"\u2B5A\u065F\x03\x02\x02\x02\u2B5B\u2B5C\x07I\x02\x02\u2B5C\u2B5D\x05" +
		"\u03E0\u01F1\x02\u2B5D\u2B5E\x05\u0628\u0315\x02\u2B5E\u0661\x03\x02\x02" +
		"\x02\u0440\u0668\u066C\u06EB\u06EF\u06F8\u0701\u0707\u070D\u0720\u072C" +
		"\u0732\u073A\u0742\u0748\u0751\u0759\u076B\u076E\u0773\u077C\u0785\u0789" +
		"\u0795\u07A9\u07B6\u07BD\u07C5\u07CA\u07D1\u07D7\u07DE\u07E9\u07ED\u07F1" +
		"\u07FE\u0802\u0807\u080C\u0818\u0821\u082E\u0833\u083E\u0844\u084A\u084F" +
		"\u085A\u0860\u0866\u086F\u0879\u0888\u088E\u0895\u089A\u08A1\u08AC\u08C4" +
		"\u08CB\u08D4\u08DD\u08E5\u08EF\u08F8\u0901\u0909\u0911\u091A\u0923\u0927" +
		"\u092E\u0936\u0940\u0946\u094A\u094E\u0952\u0956\u095B\u095E\u0962\u0977" +
		"\u097D\u09DC\u09E3\u09F3\u0A01\u0A0B\u0A0D\u0A12\u0A16\u0A19\u0A1F\u0A21" +
		"\u0A3D\u0A47\u0A54\u0A5B\u0A61\u0A65\u0A6B\u0A70\u0A73\u0A75\u0A7A\u0A7E" +
		"\u0A82\u0A86\u0A8A\u0A8D\u0A91\u0A99\u0A9D\u0AA1\u0AAA\u0AB1\u0AB6\u0ABD" +
		"\u0AC2\u0AC9\u0ACE\u0AE0\u0AE5\u0AF1\u0AF6\u0AFF\u0B06\u0B0D\u0B13\u0B18" +
		"\u0B1C\u0B1F\u0B22\u0B25\u0B28\u0B2B\u0B30\u0B33\u0B36\u0B39\u0B3C\u0B3F" +
		"\u0B45\u0B49\u0B4C\u0B4F\u0B52\u0B55\u0B57\u0B60\u0B6F\u0B77\u0B7D\u0B81" +
		"\u0B86\u0B8A\u0B91\u0B98\u0B9D\u0BA1\u0BA4\u0BA8\u0BAB\u0BAD\u0BB4\u0BB7" +
		"\u0BBC\u0BBF\u0BC6\u0BCF\u0BD6\u0BDB\u0BDE\u0BE1\u0BE3\u0BE8\u0BED\u0BFA" +
		"\u0C04\u0C11\u0C14\u0C17\u0C1E\u0C26\u0C29\u0C2C\u0C33\u0C37\u0C3D\u0C40" +
		"\u0C43\u0C46\u0C52\u0C55\u0C58\u0C5C\u0C6A\u0C7C\u0C87\u0C96\u0CA6\u0CBB" +
		"\u0CC0\u0CC3\u0CC7\u0CCA\u0CD0\u0CD3\u0CD5\u0CE0\u0CE9\u0CFC\u0D00\u0D0B" +
		"\u0D14\u0D1A\u0D20\u0D24\u0D27\u0D2A\u0D2D\u0D30\u0D36\u0D3A\u0D41\u0D47" +
		"\u0D4B\u0D4E\u0D51\u0D54\u0D5C\u0D60\u0D64\u0D6A\u0D6E\u0D74\u0D82\u0D8B" +
		"\u0D9C\u0DA1\u0DA4\u0DA6\u0DB0\u0DB7\u0DBC\u0DBF\u0DC2\u0DC9\u0DCC\u0DCE" +
		"\u0DD4\u0DDD\u0DE7\u0DEC\u0DF5\u0DFE\u0E02\u0E09\u0E13\u0E1E\u0E8C\u0E94" +
		"\u0E97\u0EA1\u0EA6\u0EB0\u0EBB\u0EC7\u0ED4\u0EDE\u0EEB\u0EEE\u0EF5\u0EFE" +
		"\u0F01\u0F08\u0F0A\u0F12\u0F1C\u0F1E\u0F26\u0F2A\u0F2F\u0F3A\u0F3E\u0F43" +
		"\u0F4D\u0F53\u0F60\u0F66\u0F68\u0F6F\u0F77\u0F7C\u0F8B\u0F98\u0F9A\u0F9E" +
		"\u0FB2\u0FC3\u0FC6\u0FC9\u0FCC\u0FCF\u0FD7\u0FDA\u0FDD\u100B\u100E\u1011" +
		"\u101C\u1025\u1029\u102C\u1035\u103B\u103F\u104A\u1054\u105C\u1061\u106D" +
		"\u107E\u1084\u108B\u1093\u10A1\u10BD\u10C4\u10D2\u10E1\u10EE\u10F7\u1110" +
		"\u111B\u115E\u1169\u116F\u1177\u1182\u1190\u1199\u11A3\u11AF\u11BE\u11C9" +
		"\u11D1\u11DB\u11E2\u11E5\u11EB\u11EE\u11FD\u120A\u1227\u122E\u123D\u1246" +
		"\u1251\u1253\u125C\u1267\u1269\u1270\u127F\u1285\u128D\u1293\u129B\u12A5" +
		"\u12AB\u12B3\u12B9\u12C1\u12C8\u12D1\u12D3\u12EC\u12F3\u12FE\u1304\u130D" +
		"\u1312\u1318\u131F\u1324\u1328\u132B\u1331\u13C6\u13CA\u13CF\u13DA\u13E5" +
		"\u13F0\u13FB\u1406\u1411\u141C\u1428\u1433\u143B\u1442\u1448\u1450\u1455" +
		"\u145A\u145F\u1465\u146C\u1472\u1478\u147D\u1483\u148A\u148F\u1495\u149C" +
		"\u149F\u14AC\u14B5\u14C1\u14C3\u14D5\u14DC\u14E6\u14EB\u14EF\u14F3\u14F7" +
		"\u14F9\u1535\u153C\u1542\u154D\u1550\u1557\u155A\u1564\u1567\u1569\u157C" +
		"\u1588\u1591\u159A\u15A6\u15A8\u15AE\u15B2\u15B5\u15BA\u15C0\u15C3\u15C6" +
		"\u15C9\u15CD\u15D1\u15DA\u15E0\u15E3\u15E6\u15E9\u15EB\u15FB\u15FF\u1602" +
		"\u1605\u1608\u160B\u1610\u1613\u1615\u1622\u162E\u163C\u1640\u164C\u164E" +
		"\u1653\u165B\u1665\u166E\u1676\u167F\u1681\u1685\u168E\u1693\u1699\u169E" +
		"\u16A2\u16A7\u16B9\u16BE\u16CD\u16D6\u16E1\u16E7\u170C\u1716\u171D\u1728" +
		"\u1736\u173E\u1743\u174B\u1753\u1759\u1761\u1767\u176F\u1771\u1777\u177F" +
		"\u1781\u1787\u178F\u1791\u17A9\u17B0\u17BA\u17C6\u17CB\u17D8\u17E4\u17F0" +
		"\u17F2\u17F8\u17FD\u1805\u180C\u1839\u183E\u1845\u184A\u1851\u185B\u1865" +
		"\u1869\u1874\u1885\u18CC\u198F\u199C\u19A7\u19B4\u19C0\u19CE\u19EE\u19FC" +
		"\u1A6C\u1A6E\u1A79\u1A84\u1A8F\u1A9C\u1AA8\u1AB3\u1ABA\u1B97\u1BA6\u1BB1" +
		"\u1BB8\u1BEE\u1C7B\u1C81\u1C84\u1C8E\u1CAB\u1CB5\u1CBC\u1CD3\u1CDC\u1CE8" +
		"\u1CEE\u1CF6\u1CF8\u1CFC\u1D06\u1D0A\u1D14\u1D17\u1D1B\u1D1F\u1D27\u1D32" +
		"\u1D3E\u1D42\u1D45\u1D49\u1D4C\u1D51\u1D55\u1D58\u1D5C\u1D5F\u1D63\u1D66" +
		"\u1D71\u1D78\u1D85\u1D93\u1D97\u1D9C\u1DA3\u1DAA\u1DAD\u1DB2\u1DB5\u1DBE" +
		"\u1DC0\u1DC5\u1DC9\u1DD5\u1DD8\u1DDF\u1DE3\u1DE8\u1DF2\u1DFB\u1DFE\u1E03" +
		"\u1E0E\u1E12\u1E18\u1E1F\u1E33\u1E48\u1E4C\u1E51\u1EA4\u1EAA\u1EB7\u1EBB" +
		"\u1EBF\u1EC3\u1EC9\u1ED0\u1ED3\u1ED6\u1ED9\u1EDC\u1EE3\u1EE5\u1EE9\u1EEC" +
		"\u1EF3\u1EF5\u1EFC\u1F03\u1F07\u1F0B\u1F1B\u1F22\u1F2C\u1F39\u1F44\u1F4B" +
		"\u1F50\u1F54\u1F58\u1F5D\u1F6A\u1F6F\u1F73\u1F7B\u1F7E\u1F82\u1F8D\u1F90" +
		"\u1F92\u1FA2\u1FA5\u1FAC\u1FAF\u1FB4\u1FC3\u1FC9\u1FD2\u1FDB\u1FE2\u1FE5" +
		"\u1FEB\u1FF0\u1FF6\u1FFC\u1FFF\u2002\u2009\u200D\u2010\u201F\u2022\u2029" +
		"\u202C\u2033\u2036\u2039\u2040\u204D\u2057\u2069\u206B\u2073\u2077\u2081" +
		"\u2085\u2089\u208D\u208F\u2094\u2098\u209C\u209E\u20A0\u20A4\u20A8\u20AB" +
		"\u20AE\u20B1\u20B4\u20B6\u20B9\u20BC\u20BF\u20C2\u20C5\u20C8\u20D1\u20D3" +
		"\u20D8\u20DC\u20E2\u20E6\u20EA\u20F3\u20F8\u20FC\u2105\u210E\u2112\u2115" +
		"\u2119\u211E\u2124\u2130\u213F\u2146\u2149\u214D\u2151\u2153\u215B\u2164" +
		"\u216A\u216C\u216E\u2175\u2179\u2182";
	private static readonly _serializedATNSegment20: string =
		"\u2186\u2195\u219D\u21B9\u21C0\u21C4\u21C7\u21CC\u21D0\u21D3\u21E3\u21EE" +
		"\u21F3\u21F6\u21FA\u21FE\u2202\u2207\u220B\u220F\u2211\u221A\u221F\u2225" +
		"\u2229\u222B\u2232\u2237\u223D\u223F\u2243\u224A\u2251\u2254\u225A\u225E" +
		"\u2267\u226A\u226E\u2276\u2278\u227F\u2284\u2287\u228F\u2298\u22A0\u22A2" +
		"\u22A6\u22AD\u22C0\u22C9\u22CF\u22E2\u22EB\u22F1\u22F5\u22FA\u2304\u230B" +
		"\u2314\u2317\u2320\u2322\u2328\u232C\u2331\u233B\u2341\u2343\u2349\u234D" +
		"\u2350\u235D\u2363\u2367\u236B\u236E\u2376\u237A\u237E\u2386\u238D\u2394" +
		"\u2398\u239E\u23A0\u23A9\u23AC\u23B6\u23C6\u23CC\u23D1\u23D8\u23E1\u23E8" +
		"\u23F0\u23F8\u23FD\u2401\u2404\u240A\u240F\u241F\u2422\u2424\u2430\u2432" +
		"\u2436\u243E\u2440\u2444\u2446\u244E\u2452\u245B\u2463\u2469\u246C\u2475" +
		"\u247A\u2481\u248B\u24A5\u24B0\u24B2\u24B4\u24BC\u24D3\u24DB\u24E5\u24E8" +
		"\u24ED\u24F2\u24F6\u24FC\u24FF\u2502\u2505\u2509\u2517\u251E\u2525\u252C" +
		"\u253E\u2546\u2552\u2558\u2565\u258C\u258E\u25A2\u25AC\u25B7\u25C3\u25CA" +
		"\u25D6\u25E2\u25E8\u25F0\u2601\u261A\u2624\u2628\u262B\u262E\u2631\u263E" +
		"\u2643\u2648\u264A\u2652\u265B\u2664\u2669\u2672\u2677\u2685\u268F\u2697" +
		"\u26A5\u26AC\u26B4\u26BC\u26C3\u26C9\u26D2\u26E1\u26EC\u270D\u2716\u271D" +
		"\u2721\u2725\u272C\u273A\u273F\u2744\u2748\u274A\u274D\u2754\u2759\u2763" +
		"\u276B\u276E\u2775\u277A\u277E\u2785\u2792\u279E\u27A3\u27AB\u27B2\u27B7" +
		"\u27C3\u27CB\u27D0\u27DA\u27E4\u27EB\u27F2\u27FD\u2800\u2802\u2806\u2809" +
		"\u2812\u2818\u2820\u2824\u282B\u2864\u2871\u2888\u2890\u2894\u28A0\u28A2" +
		"\u28A9\u28B2\u28C4\u28CC\u28D5\u28DC\u28E6\u28EC\u28F3\u28F8\u28FE\u2902" +
		"\u2909\u2927\u293B\u293F\u294F\u2956\u2963\u296B\u297F\u2985\u2991\u2996" +
		"\u29A0\u29C0\u29C5\u29CE\u29D3\u29D7\u29DC\u29EC\u29F1\u2A00\u2A03\u2A09" +
		"\u2A0D\u2A16\u2A1E\u2A27\u2A2D\u2A36\u2A38\u2A3D\u2A48\u2A53\u2A68\u2A6F" +
		"\u2A76\u2A7C\u2A7F\u2A8A\u2A91\u2A93\u2A9C\u2AA3\u2AA9\u2AAF\u2AB3\u2AB7" +
		"\u2AC4\u2AD3\u2AD5\u2AD9\u2AE7\u2AED\u2AF3\u2B00\u2B03\u2B07\u2B0C\u2B11" +
		"\u2B1D\u2B23\u2B27\u2B2B\u2B2F\u2B36\u2B3B\u2B3E\u2B41\u2B44\u2B47\u2B4A" +
		"\u2B4D\u2B59";
	public static readonly _serializedATN: string = Utils.join(
		[
			PostgreSQLParser._serializedATNSegment0,
			PostgreSQLParser._serializedATNSegment1,
			PostgreSQLParser._serializedATNSegment2,
			PostgreSQLParser._serializedATNSegment3,
			PostgreSQLParser._serializedATNSegment4,
			PostgreSQLParser._serializedATNSegment5,
			PostgreSQLParser._serializedATNSegment6,
			PostgreSQLParser._serializedATNSegment7,
			PostgreSQLParser._serializedATNSegment8,
			PostgreSQLParser._serializedATNSegment9,
			PostgreSQLParser._serializedATNSegment10,
			PostgreSQLParser._serializedATNSegment11,
			PostgreSQLParser._serializedATNSegment12,
			PostgreSQLParser._serializedATNSegment13,
			PostgreSQLParser._serializedATNSegment14,
			PostgreSQLParser._serializedATNSegment15,
			PostgreSQLParser._serializedATNSegment16,
			PostgreSQLParser._serializedATNSegment17,
			PostgreSQLParser._serializedATNSegment18,
			PostgreSQLParser._serializedATNSegment19,
			PostgreSQLParser._serializedATNSegment20,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!PostgreSQLParser.__ATN) {
			PostgreSQLParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(PostgreSQLParser._serializedATN));
		}

		return PostgreSQLParser.__ATN;
	}

}

export class ProgramContext extends ParserRuleContext {
	public stmtmulti(): StmtmultiContext {
		return this.getRuleContext(0, StmtmultiContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_program; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterProgram) {
			listener.enterProgram(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitProgram) {
			listener.exitProgram(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitProgram) {
			return visitor.visitProgram(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PlsqlrootContext extends ParserRuleContext {
	public pl_function(): Pl_functionContext {
		return this.getRuleContext(0, Pl_functionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_plsqlroot; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPlsqlroot) {
			listener.enterPlsqlroot(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPlsqlroot) {
			listener.exitPlsqlroot(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPlsqlroot) {
			return visitor.visitPlsqlroot(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StmtmultiContext extends ParserRuleContext {
	public stmt(): StmtContext[];
	public stmt(i: number): StmtContext;
	public stmt(i?: number): StmtContext | StmtContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StmtContext);
		} else {
			return this.getRuleContext(i, StmtContext);
		}
	}
	public SEMI(): TerminalNode[];
	public SEMI(i: number): TerminalNode;
	public SEMI(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.SEMI);
		} else {
			return this.getToken(PostgreSQLParser.SEMI, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmtmulti; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmtmulti) {
			listener.enterStmtmulti(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmtmulti) {
			listener.exitStmtmulti(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmtmulti) {
			return visitor.visitStmtmulti(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StmtContext extends ParserRuleContext {
	public altereventtrigstmt(): AltereventtrigstmtContext | undefined {
		return this.tryGetRuleContext(0, AltereventtrigstmtContext);
	}
	public altercollationstmt(): AltercollationstmtContext | undefined {
		return this.tryGetRuleContext(0, AltercollationstmtContext);
	}
	public alterdatabasestmt(): AlterdatabasestmtContext | undefined {
		return this.tryGetRuleContext(0, AlterdatabasestmtContext);
	}
	public alterdatabasesetstmt(): AlterdatabasesetstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterdatabasesetstmtContext);
	}
	public alterdefaultprivilegesstmt(): AlterdefaultprivilegesstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterdefaultprivilegesstmtContext);
	}
	public alterdomainstmt(): AlterdomainstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterdomainstmtContext);
	}
	public alterenumstmt(): AlterenumstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterenumstmtContext);
	}
	public alterextensionstmt(): AlterextensionstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterextensionstmtContext);
	}
	public alterextensioncontentsstmt(): AlterextensioncontentsstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterextensioncontentsstmtContext);
	}
	public alterfdwstmt(): AlterfdwstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterfdwstmtContext);
	}
	public alterforeignserverstmt(): AlterforeignserverstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterforeignserverstmtContext);
	}
	public alterfunctionstmt(): AlterfunctionstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterfunctionstmtContext);
	}
	public altergroupstmt(): AltergroupstmtContext | undefined {
		return this.tryGetRuleContext(0, AltergroupstmtContext);
	}
	public alterobjectdependsstmt(): AlterobjectdependsstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterobjectdependsstmtContext);
	}
	public alterobjectschemastmt(): AlterobjectschemastmtContext | undefined {
		return this.tryGetRuleContext(0, AlterobjectschemastmtContext);
	}
	public alterownerstmt(): AlterownerstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterownerstmtContext);
	}
	public alteroperatorstmt(): AlteroperatorstmtContext | undefined {
		return this.tryGetRuleContext(0, AlteroperatorstmtContext);
	}
	public altertypestmt(): AltertypestmtContext | undefined {
		return this.tryGetRuleContext(0, AltertypestmtContext);
	}
	public alterpolicystmt(): AlterpolicystmtContext | undefined {
		return this.tryGetRuleContext(0, AlterpolicystmtContext);
	}
	public alterseqstmt(): AlterseqstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterseqstmtContext);
	}
	public altersystemstmt(): AltersystemstmtContext | undefined {
		return this.tryGetRuleContext(0, AltersystemstmtContext);
	}
	public altertablestmt(): AltertablestmtContext | undefined {
		return this.tryGetRuleContext(0, AltertablestmtContext);
	}
	public altertblspcstmt(): AltertblspcstmtContext | undefined {
		return this.tryGetRuleContext(0, AltertblspcstmtContext);
	}
	public altercompositetypestmt(): AltercompositetypestmtContext | undefined {
		return this.tryGetRuleContext(0, AltercompositetypestmtContext);
	}
	public alterpublicationstmt(): AlterpublicationstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterpublicationstmtContext);
	}
	public alterrolesetstmt(): AlterrolesetstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterrolesetstmtContext);
	}
	public alterrolestmt(): AlterrolestmtContext | undefined {
		return this.tryGetRuleContext(0, AlterrolestmtContext);
	}
	public altersubscriptionstmt(): AltersubscriptionstmtContext | undefined {
		return this.tryGetRuleContext(0, AltersubscriptionstmtContext);
	}
	public alterstatsstmt(): AlterstatsstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterstatsstmtContext);
	}
	public altertsconfigurationstmt(): AltertsconfigurationstmtContext | undefined {
		return this.tryGetRuleContext(0, AltertsconfigurationstmtContext);
	}
	public altertsdictionarystmt(): AltertsdictionarystmtContext | undefined {
		return this.tryGetRuleContext(0, AltertsdictionarystmtContext);
	}
	public alterusermappingstmt(): AlterusermappingstmtContext | undefined {
		return this.tryGetRuleContext(0, AlterusermappingstmtContext);
	}
	public analyzestmt(): AnalyzestmtContext | undefined {
		return this.tryGetRuleContext(0, AnalyzestmtContext);
	}
	public callstmt(): CallstmtContext | undefined {
		return this.tryGetRuleContext(0, CallstmtContext);
	}
	public checkpointstmt(): CheckpointstmtContext | undefined {
		return this.tryGetRuleContext(0, CheckpointstmtContext);
	}
	public closeportalstmt(): CloseportalstmtContext | undefined {
		return this.tryGetRuleContext(0, CloseportalstmtContext);
	}
	public clusterstmt(): ClusterstmtContext | undefined {
		return this.tryGetRuleContext(0, ClusterstmtContext);
	}
	public commentstmt(): CommentstmtContext | undefined {
		return this.tryGetRuleContext(0, CommentstmtContext);
	}
	public constraintssetstmt(): ConstraintssetstmtContext | undefined {
		return this.tryGetRuleContext(0, ConstraintssetstmtContext);
	}
	public copystmt(): CopystmtContext | undefined {
		return this.tryGetRuleContext(0, CopystmtContext);
	}
	public createamstmt(): CreateamstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateamstmtContext);
	}
	public createasstmt(): CreateasstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateasstmtContext);
	}
	public createassertionstmt(): CreateassertionstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateassertionstmtContext);
	}
	public createcaststmt(): CreatecaststmtContext | undefined {
		return this.tryGetRuleContext(0, CreatecaststmtContext);
	}
	public createconversionstmt(): CreateconversionstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateconversionstmtContext);
	}
	public createdomainstmt(): CreatedomainstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatedomainstmtContext);
	}
	public createextensionstmt(): CreateextensionstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateextensionstmtContext);
	}
	public createfdwstmt(): CreatefdwstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatefdwstmtContext);
	}
	public createforeignserverstmt(): CreateforeignserverstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateforeignserverstmtContext);
	}
	public createforeigntablestmt(): CreateforeigntablestmtContext | undefined {
		return this.tryGetRuleContext(0, CreateforeigntablestmtContext);
	}
	public createfunctionstmt(): CreatefunctionstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatefunctionstmtContext);
	}
	public creategroupstmt(): CreategroupstmtContext | undefined {
		return this.tryGetRuleContext(0, CreategroupstmtContext);
	}
	public creatematviewstmt(): CreatematviewstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatematviewstmtContext);
	}
	public createopclassstmt(): CreateopclassstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateopclassstmtContext);
	}
	public createopfamilystmt(): CreateopfamilystmtContext | undefined {
		return this.tryGetRuleContext(0, CreateopfamilystmtContext);
	}
	public createpublicationstmt(): CreatepublicationstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatepublicationstmtContext);
	}
	public alteropfamilystmt(): AlteropfamilystmtContext | undefined {
		return this.tryGetRuleContext(0, AlteropfamilystmtContext);
	}
	public createpolicystmt(): CreatepolicystmtContext | undefined {
		return this.tryGetRuleContext(0, CreatepolicystmtContext);
	}
	public createplangstmt(): CreateplangstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateplangstmtContext);
	}
	public createschemastmt(): CreateschemastmtContext | undefined {
		return this.tryGetRuleContext(0, CreateschemastmtContext);
	}
	public createseqstmt(): CreateseqstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateseqstmtContext);
	}
	public createstmt(): CreatestmtContext | undefined {
		return this.tryGetRuleContext(0, CreatestmtContext);
	}
	public createsubscriptionstmt(): CreatesubscriptionstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatesubscriptionstmtContext);
	}
	public createstatsstmt(): CreatestatsstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatestatsstmtContext);
	}
	public createtablespacestmt(): CreatetablespacestmtContext | undefined {
		return this.tryGetRuleContext(0, CreatetablespacestmtContext);
	}
	public createtransformstmt(): CreatetransformstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatetransformstmtContext);
	}
	public createtrigstmt(): CreatetrigstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatetrigstmtContext);
	}
	public createeventtrigstmt(): CreateeventtrigstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateeventtrigstmtContext);
	}
	public createrolestmt(): CreaterolestmtContext | undefined {
		return this.tryGetRuleContext(0, CreaterolestmtContext);
	}
	public createuserstmt(): CreateuserstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateuserstmtContext);
	}
	public createusermappingstmt(): CreateusermappingstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateusermappingstmtContext);
	}
	public createdbstmt(): CreatedbstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatedbstmtContext);
	}
	public deallocatestmt(): DeallocatestmtContext | undefined {
		return this.tryGetRuleContext(0, DeallocatestmtContext);
	}
	public declarecursorstmt(): DeclarecursorstmtContext | undefined {
		return this.tryGetRuleContext(0, DeclarecursorstmtContext);
	}
	public definestmt(): DefinestmtContext | undefined {
		return this.tryGetRuleContext(0, DefinestmtContext);
	}
	public deletestmt(): DeletestmtContext | undefined {
		return this.tryGetRuleContext(0, DeletestmtContext);
	}
	public discardstmt(): DiscardstmtContext | undefined {
		return this.tryGetRuleContext(0, DiscardstmtContext);
	}
	public dostmt(): DostmtContext | undefined {
		return this.tryGetRuleContext(0, DostmtContext);
	}
	public dropcaststmt(): DropcaststmtContext | undefined {
		return this.tryGetRuleContext(0, DropcaststmtContext);
	}
	public dropopclassstmt(): DropopclassstmtContext | undefined {
		return this.tryGetRuleContext(0, DropopclassstmtContext);
	}
	public dropopfamilystmt(): DropopfamilystmtContext | undefined {
		return this.tryGetRuleContext(0, DropopfamilystmtContext);
	}
	public dropownedstmt(): DropownedstmtContext | undefined {
		return this.tryGetRuleContext(0, DropownedstmtContext);
	}
	public dropstmt(): DropstmtContext | undefined {
		return this.tryGetRuleContext(0, DropstmtContext);
	}
	public dropsubscriptionstmt(): DropsubscriptionstmtContext | undefined {
		return this.tryGetRuleContext(0, DropsubscriptionstmtContext);
	}
	public droptablespacestmt(): DroptablespacestmtContext | undefined {
		return this.tryGetRuleContext(0, DroptablespacestmtContext);
	}
	public droptransformstmt(): DroptransformstmtContext | undefined {
		return this.tryGetRuleContext(0, DroptransformstmtContext);
	}
	public droprolestmt(): DroprolestmtContext | undefined {
		return this.tryGetRuleContext(0, DroprolestmtContext);
	}
	public dropusermappingstmt(): DropusermappingstmtContext | undefined {
		return this.tryGetRuleContext(0, DropusermappingstmtContext);
	}
	public dropdbstmt(): DropdbstmtContext | undefined {
		return this.tryGetRuleContext(0, DropdbstmtContext);
	}
	public executestmt(): ExecutestmtContext | undefined {
		return this.tryGetRuleContext(0, ExecutestmtContext);
	}
	public explainstmt(): ExplainstmtContext | undefined {
		return this.tryGetRuleContext(0, ExplainstmtContext);
	}
	public fetchstmt(): FetchstmtContext | undefined {
		return this.tryGetRuleContext(0, FetchstmtContext);
	}
	public grantstmt(): GrantstmtContext | undefined {
		return this.tryGetRuleContext(0, GrantstmtContext);
	}
	public grantrolestmt(): GrantrolestmtContext | undefined {
		return this.tryGetRuleContext(0, GrantrolestmtContext);
	}
	public importforeignschemastmt(): ImportforeignschemastmtContext | undefined {
		return this.tryGetRuleContext(0, ImportforeignschemastmtContext);
	}
	public indexstmt(): IndexstmtContext | undefined {
		return this.tryGetRuleContext(0, IndexstmtContext);
	}
	public insertstmt(): InsertstmtContext | undefined {
		return this.tryGetRuleContext(0, InsertstmtContext);
	}
	public listenstmt(): ListenstmtContext | undefined {
		return this.tryGetRuleContext(0, ListenstmtContext);
	}
	public refreshmatviewstmt(): RefreshmatviewstmtContext | undefined {
		return this.tryGetRuleContext(0, RefreshmatviewstmtContext);
	}
	public loadstmt(): LoadstmtContext | undefined {
		return this.tryGetRuleContext(0, LoadstmtContext);
	}
	public lockstmt(): LockstmtContext | undefined {
		return this.tryGetRuleContext(0, LockstmtContext);
	}
	public notifystmt(): NotifystmtContext | undefined {
		return this.tryGetRuleContext(0, NotifystmtContext);
	}
	public preparestmt(): PreparestmtContext | undefined {
		return this.tryGetRuleContext(0, PreparestmtContext);
	}
	public reassignownedstmt(): ReassignownedstmtContext | undefined {
		return this.tryGetRuleContext(0, ReassignownedstmtContext);
	}
	public reindexstmt(): ReindexstmtContext | undefined {
		return this.tryGetRuleContext(0, ReindexstmtContext);
	}
	public removeaggrstmt(): RemoveaggrstmtContext | undefined {
		return this.tryGetRuleContext(0, RemoveaggrstmtContext);
	}
	public removefuncstmt(): RemovefuncstmtContext | undefined {
		return this.tryGetRuleContext(0, RemovefuncstmtContext);
	}
	public removeoperstmt(): RemoveoperstmtContext | undefined {
		return this.tryGetRuleContext(0, RemoveoperstmtContext);
	}
	public renamestmt(): RenamestmtContext | undefined {
		return this.tryGetRuleContext(0, RenamestmtContext);
	}
	public revokestmt(): RevokestmtContext | undefined {
		return this.tryGetRuleContext(0, RevokestmtContext);
	}
	public revokerolestmt(): RevokerolestmtContext | undefined {
		return this.tryGetRuleContext(0, RevokerolestmtContext);
	}
	public rulestmt(): RulestmtContext | undefined {
		return this.tryGetRuleContext(0, RulestmtContext);
	}
	public seclabelstmt(): SeclabelstmtContext | undefined {
		return this.tryGetRuleContext(0, SeclabelstmtContext);
	}
	public selectstmt(): SelectstmtContext | undefined {
		return this.tryGetRuleContext(0, SelectstmtContext);
	}
	public transactionstmt(): TransactionstmtContext | undefined {
		return this.tryGetRuleContext(0, TransactionstmtContext);
	}
	public truncatestmt(): TruncatestmtContext | undefined {
		return this.tryGetRuleContext(0, TruncatestmtContext);
	}
	public unlistenstmt(): UnlistenstmtContext | undefined {
		return this.tryGetRuleContext(0, UnlistenstmtContext);
	}
	public updatestmt(): UpdatestmtContext | undefined {
		return this.tryGetRuleContext(0, UpdatestmtContext);
	}
	public vacuumstmt(): VacuumstmtContext | undefined {
		return this.tryGetRuleContext(0, VacuumstmtContext);
	}
	public variableresetstmt(): VariableresetstmtContext | undefined {
		return this.tryGetRuleContext(0, VariableresetstmtContext);
	}
	public variablesetstmt(): VariablesetstmtContext | undefined {
		return this.tryGetRuleContext(0, VariablesetstmtContext);
	}
	public variableshowstmt(): VariableshowstmtContext | undefined {
		return this.tryGetRuleContext(0, VariableshowstmtContext);
	}
	public viewstmt(): ViewstmtContext | undefined {
		return this.tryGetRuleContext(0, ViewstmtContext);
	}
	public plsqlconsolecommand(): PlsqlconsolecommandContext | undefined {
		return this.tryGetRuleContext(0, PlsqlconsolecommandContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt) {
			listener.enterStmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt) {
			listener.exitStmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt) {
			return visitor.visitStmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PlsqlconsolecommandContext extends ParserRuleContext {
	public MetaCommand(): TerminalNode { return this.getToken(PostgreSQLParser.MetaCommand, 0); }
	public EndMetaCommand(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EndMetaCommand, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_plsqlconsolecommand; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPlsqlconsolecommand) {
			listener.enterPlsqlconsolecommand(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPlsqlconsolecommand) {
			listener.exitPlsqlconsolecommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPlsqlconsolecommand) {
			return visitor.visitPlsqlconsolecommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallstmtContext extends ParserRuleContext {
	public KW_CALL(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CALL, 0); }
	public func_application(): Func_applicationContext {
		return this.getRuleContext(0, Func_applicationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_callstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCallstmt) {
			listener.enterCallstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCallstmt) {
			listener.exitCallstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCallstmt) {
			return visitor.visitCallstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreaterolestmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_ROLE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ROLE, 0); }
	public roleid(): RoleidContext {
		return this.getRuleContext(0, RoleidContext);
	}
	public optrolelist(): OptrolelistContext {
		return this.getRuleContext(0, OptrolelistContext);
	}
	public opt_with(): Opt_withContext | undefined {
		return this.tryGetRuleContext(0, Opt_withContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createrolestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreaterolestmt) {
			listener.enterCreaterolestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreaterolestmt) {
			listener.exitCreaterolestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreaterolestmt) {
			return visitor.visitCreaterolestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_withContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_with; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_with) {
			listener.enterOpt_with(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_with) {
			listener.exitOpt_with(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_with) {
			return visitor.visitOpt_with(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptrolelistContext extends ParserRuleContext {
	public createoptroleelem(): CreateoptroleelemContext[];
	public createoptroleelem(i: number): CreateoptroleelemContext;
	public createoptroleelem(i?: number): CreateoptroleelemContext | CreateoptroleelemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CreateoptroleelemContext);
		} else {
			return this.getRuleContext(i, CreateoptroleelemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_optrolelist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOptrolelist) {
			listener.enterOptrolelist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOptrolelist) {
			listener.exitOptrolelist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOptrolelist) {
			return visitor.visitOptrolelist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlteroptrolelistContext extends ParserRuleContext {
	public alteroptroleelem(): AlteroptroleelemContext[];
	public alteroptroleelem(i: number): AlteroptroleelemContext;
	public alteroptroleelem(i?: number): AlteroptroleelemContext | AlteroptroleelemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(AlteroptroleelemContext);
		} else {
			return this.getRuleContext(i, AlteroptroleelemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alteroptrolelist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlteroptrolelist) {
			listener.enterAlteroptrolelist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlteroptrolelist) {
			listener.exitAlteroptrolelist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlteroptrolelist) {
			return visitor.visitAlteroptrolelist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlteroptroleelemContext extends ParserRuleContext {
	public KW_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PASSWORD, 0); }
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	public KW_ENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ENCRYPTED, 0); }
	public KW_UNENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNENCRYPTED, 0); }
	public KW_INHERIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INHERIT, 0); }
	public KW_NOINHERIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOINHERIT, 0); }
	public KW_CREATEUSER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CREATEUSER, 0); }
	public KW_NOCREATEUSER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOCREATEUSER, 0); }
	public KW_CREATEROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CREATEROLE, 0); }
	public KW_NOCREATEROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOCREATEROLE, 0); }
	public KW_CREATEDB(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CREATEDB, 0); }
	public KW_NOCREATEDB(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOCREATEDB, 0); }
	public KW_SUPERUSER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SUPERUSER, 0); }
	public KW_NOSUPERUSER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOSUPERUSER, 0); }
	public KW_CONNECTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONNECTION, 0); }
	public KW_LIMIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LIMIT, 0); }
	public signediconst(): SignediconstContext | undefined {
		return this.tryGetRuleContext(0, SignediconstContext);
	}
	public KW_VALID(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALID, 0); }
	public KW_UNTIL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNTIL, 0); }
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USER, 0); }
	public role_list(): Role_listContext | undefined {
		return this.tryGetRuleContext(0, Role_listContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alteroptroleelem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlteroptroleelem) {
			listener.enterAlteroptroleelem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlteroptroleelem) {
			listener.exitAlteroptroleelem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlteroptroleelem) {
			return visitor.visitAlteroptroleelem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateoptroleelemContext extends ParserRuleContext {
	public alteroptroleelem(): AlteroptroleelemContext | undefined {
		return this.tryGetRuleContext(0, AlteroptroleelemContext);
	}
	public KW_SYSID(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SYSID, 0); }
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public KW_ADMIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADMIN, 0); }
	public role_list(): Role_listContext | undefined {
		return this.tryGetRuleContext(0, Role_listContext);
	}
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLE, 0); }
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IN, 0); }
	public KW_GROUP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GROUP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createoptroleelem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateoptroleelem) {
			listener.enterCreateoptroleelem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateoptroleelem) {
			listener.exitCreateoptroleelem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateoptroleelem) {
			return visitor.visitCreateoptroleelem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateuserstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_USER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USER, 0); }
	public roleid(): RoleidContext {
		return this.getRuleContext(0, RoleidContext);
	}
	public optrolelist(): OptrolelistContext {
		return this.getRuleContext(0, OptrolelistContext);
	}
	public opt_with(): Opt_withContext | undefined {
		return this.tryGetRuleContext(0, Opt_withContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createuserstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateuserstmt) {
			listener.enterCreateuserstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateuserstmt) {
			listener.exitCreateuserstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateuserstmt) {
			return visitor.visitCreateuserstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterrolestmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public rolespec(): RolespecContext {
		return this.getRuleContext(0, RolespecContext);
	}
	public alteroptrolelist(): AlteroptrolelistContext {
		return this.getRuleContext(0, AlteroptrolelistContext);
	}
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLE, 0); }
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USER, 0); }
	public opt_with(): Opt_withContext | undefined {
		return this.tryGetRuleContext(0, Opt_withContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterrolestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterrolestmt) {
			listener.enterAlterrolestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterrolestmt) {
			listener.exitAlterrolestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterrolestmt) {
			return visitor.visitAlterrolestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_in_databaseContext extends ParserRuleContext {
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IN, 0); }
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATABASE, 0); }
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_in_database; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_in_database) {
			listener.enterOpt_in_database(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_in_database) {
			listener.exitOpt_in_database(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_in_database) {
			return visitor.visitOpt_in_database(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterrolesetstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public opt_in_database(): Opt_in_databaseContext {
		return this.getRuleContext(0, Opt_in_databaseContext);
	}
	public setresetclause(): SetresetclauseContext {
		return this.getRuleContext(0, SetresetclauseContext);
	}
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLE, 0); }
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USER, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public rolespec(): RolespecContext | undefined {
		return this.tryGetRuleContext(0, RolespecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterrolesetstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterrolesetstmt) {
			listener.enterAlterrolesetstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterrolesetstmt) {
			listener.exitAlterrolesetstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterrolesetstmt) {
			return visitor.visitAlterrolesetstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DroprolestmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public role_list(): Role_listContext {
		return this.getRuleContext(0, Role_listContext);
	}
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLE, 0); }
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USER, 0); }
	public KW_GROUP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GROUP, 0); }
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_droprolestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDroprolestmt) {
			listener.enterDroprolestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDroprolestmt) {
			listener.exitDroprolestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDroprolestmt) {
			return visitor.visitDroprolestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreategroupstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_GROUP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_GROUP, 0); }
	public groupname(): GroupnameContext {
		return this.getRuleContext(0, GroupnameContext);
	}
	public optrolelist(): OptrolelistContext {
		return this.getRuleContext(0, OptrolelistContext);
	}
	public opt_with(): Opt_withContext | undefined {
		return this.tryGetRuleContext(0, Opt_withContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_creategroupstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreategroupstmt) {
			listener.enterCreategroupstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreategroupstmt) {
			listener.exitCreategroupstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreategroupstmt) {
			return visitor.visitCreategroupstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AltergroupstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_GROUP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_GROUP, 0); }
	public rolespec(): RolespecContext {
		return this.getRuleContext(0, RolespecContext);
	}
	public add_drop(): Add_dropContext {
		return this.getRuleContext(0, Add_dropContext);
	}
	public KW_USER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USER, 0); }
	public role_list(): Role_listContext {
		return this.getRuleContext(0, Role_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_altergroupstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAltergroupstmt) {
			listener.enterAltergroupstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAltergroupstmt) {
			listener.exitAltergroupstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAltergroupstmt) {
			return visitor.visitAltergroupstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Add_dropContext extends ParserRuleContext {
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADD, 0); }
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_add_drop; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAdd_drop) {
			listener.enterAdd_drop(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAdd_drop) {
			listener.exitAdd_drop(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAdd_drop) {
			return visitor.visitAdd_drop(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateschemastmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_SCHEMA(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public optschemaeltlist(): OptschemaeltlistContext {
		return this.getRuleContext(0, OptschemaeltlistContext);
	}
	public KW_AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AUTHORIZATION, 0); }
	public rolespec(): RolespecContext | undefined {
		return this.tryGetRuleContext(0, RolespecContext);
	}
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public optschemaname(): OptschemanameContext | undefined {
		return this.tryGetRuleContext(0, OptschemanameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createschemastmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateschemastmt) {
			listener.enterCreateschemastmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateschemastmt) {
			listener.exitCreateschemastmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateschemastmt) {
			return visitor.visitCreateschemastmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptschemanameContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_optschemaname; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOptschemaname) {
			listener.enterOptschemaname(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOptschemaname) {
			listener.exitOptschemaname(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOptschemaname) {
			return visitor.visitOptschemaname(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptschemaeltlistContext extends ParserRuleContext {
	public schema_stmt(): Schema_stmtContext[];
	public schema_stmt(i: number): Schema_stmtContext;
	public schema_stmt(i?: number): Schema_stmtContext | Schema_stmtContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Schema_stmtContext);
		} else {
			return this.getRuleContext(i, Schema_stmtContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_optschemaeltlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOptschemaeltlist) {
			listener.enterOptschemaeltlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOptschemaeltlist) {
			listener.exitOptschemaeltlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOptschemaeltlist) {
			return visitor.visitOptschemaeltlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Schema_stmtContext extends ParserRuleContext {
	public createstmt(): CreatestmtContext | undefined {
		return this.tryGetRuleContext(0, CreatestmtContext);
	}
	public indexstmt(): IndexstmtContext | undefined {
		return this.tryGetRuleContext(0, IndexstmtContext);
	}
	public createseqstmt(): CreateseqstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateseqstmtContext);
	}
	public createtrigstmt(): CreatetrigstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatetrigstmtContext);
	}
	public grantstmt(): GrantstmtContext | undefined {
		return this.tryGetRuleContext(0, GrantstmtContext);
	}
	public viewstmt(): ViewstmtContext | undefined {
		return this.tryGetRuleContext(0, ViewstmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_schema_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSchema_stmt) {
			listener.enterSchema_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSchema_stmt) {
			listener.exitSchema_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSchema_stmt) {
			return visitor.visitSchema_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VariablesetstmtContext extends ParserRuleContext {
	public KW_SET(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SET, 0); }
	public set_rest(): Set_restContext {
		return this.getRuleContext(0, Set_restContext);
	}
	public KW_LOCAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCAL, 0); }
	public KW_SESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SESSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_variablesetstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVariablesetstmt) {
			listener.enterVariablesetstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVariablesetstmt) {
			listener.exitVariablesetstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVariablesetstmt) {
			return visitor.visitVariablesetstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_restContext extends ParserRuleContext {
	public KW_TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRANSACTION, 0); }
	public transaction_mode_list(): Transaction_mode_listContext | undefined {
		return this.tryGetRuleContext(0, Transaction_mode_listContext);
	}
	public KW_SESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SESSION, 0); }
	public KW_CHARACTERISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CHARACTERISTICS, 0); }
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public set_rest_more(): Set_rest_moreContext | undefined {
		return this.tryGetRuleContext(0, Set_rest_moreContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_set_rest; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_rest) {
			listener.enterSet_rest(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_rest) {
			listener.exitSet_rest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_rest) {
			return visitor.visitSet_rest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Generic_setContext extends ParserRuleContext {
	public var_name(): Var_nameContext {
		return this.getRuleContext(0, Var_nameContext);
	}
	public var_list(): Var_listContext {
		return this.getRuleContext(0, Var_listContext);
	}
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_generic_set; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGeneric_set) {
			listener.enterGeneric_set(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGeneric_set) {
			listener.exitGeneric_set(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGeneric_set) {
			return visitor.visitGeneric_set(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_rest_moreContext extends ParserRuleContext {
	public generic_set(): Generic_setContext | undefined {
		return this.tryGetRuleContext(0, Generic_setContext);
	}
	public var_name(): Var_nameContext | undefined {
		return this.tryGetRuleContext(0, Var_nameContext);
	}
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT, 0); }
	public KW_TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TIME, 0); }
	public KW_ZONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ZONE, 0); }
	public zone_value(): Zone_valueContext | undefined {
		return this.tryGetRuleContext(0, Zone_valueContext);
	}
	public KW_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CATALOG, 0); }
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public KW_NAMES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NAMES, 0); }
	public opt_encoding(): Opt_encodingContext | undefined {
		return this.tryGetRuleContext(0, Opt_encodingContext);
	}
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLE, 0); }
	public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | undefined {
		return this.tryGetRuleContext(0, Nonreservedword_or_sconstContext);
	}
	public KW_SESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SESSION, 0); }
	public KW_AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AUTHORIZATION, 0); }
	public KW_XML(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XML, 0); }
	public KW_OPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPTION, 0); }
	public document_or_content(): Document_or_contentContext | undefined {
		return this.tryGetRuleContext(0, Document_or_contentContext);
	}
	public KW_TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRANSACTION, 0); }
	public KW_SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SNAPSHOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_set_rest_more; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_rest_more) {
			listener.enterSet_rest_more(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_rest_more) {
			listener.exitSet_rest_more(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_rest_more) {
			return visitor.visitSet_rest_more(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Var_nameContext extends ParserRuleContext {
	public colid(): ColidContext[];
	public colid(i: number): ColidContext;
	public colid(i?: number): ColidContext | ColidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColidContext);
		} else {
			return this.getRuleContext(i, ColidContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.DOT);
		} else {
			return this.getToken(PostgreSQLParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_var_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVar_name) {
			listener.enterVar_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVar_name) {
			listener.exitVar_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVar_name) {
			return visitor.visitVar_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Var_listContext extends ParserRuleContext {
	public var_value(): Var_valueContext[];
	public var_value(i: number): Var_valueContext;
	public var_value(i?: number): Var_valueContext | Var_valueContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Var_valueContext);
		} else {
			return this.getRuleContext(i, Var_valueContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_var_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVar_list) {
			listener.enterVar_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVar_list) {
			listener.exitVar_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVar_list) {
			return visitor.visitVar_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Var_valueContext extends ParserRuleContext {
	public opt_boolean_or_string(): Opt_boolean_or_stringContext | undefined {
		return this.tryGetRuleContext(0, Opt_boolean_or_stringContext);
	}
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_var_value; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVar_value) {
			listener.enterVar_value(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVar_value) {
			listener.exitVar_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVar_value) {
			return visitor.visitVar_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Iso_levelContext extends ParserRuleContext {
	public KW_READ(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_READ, 0); }
	public KW_UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNCOMMITTED, 0); }
	public KW_COMMITTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COMMITTED, 0); }
	public KW_REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REPEATABLE, 0); }
	public KW_SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SERIALIZABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_iso_level; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIso_level) {
			listener.enterIso_level(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIso_level) {
			listener.exitIso_level(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIso_level) {
			return visitor.visitIso_level(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_boolean_or_stringContext extends ParserRuleContext {
	public KW_TRUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRUE, 0); }
	public KW_FALSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FALSE, 0); }
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ON, 0); }
	public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | undefined {
		return this.tryGetRuleContext(0, Nonreservedword_or_sconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_boolean_or_string; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_boolean_or_string) {
			listener.enterOpt_boolean_or_string(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_boolean_or_string) {
			listener.exitOpt_boolean_or_string(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_boolean_or_string) {
			return visitor.visitOpt_boolean_or_string(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Zone_valueContext extends ParserRuleContext {
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public constinterval(): ConstintervalContext | undefined {
		return this.tryGetRuleContext(0, ConstintervalContext);
	}
	public opt_interval(): Opt_intervalContext | undefined {
		return this.tryGetRuleContext(0, Opt_intervalContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	public KW_LOCAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_zone_value; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterZone_value) {
			listener.enterZone_value(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitZone_value) {
			listener.exitZone_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitZone_value) {
			return visitor.visitZone_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_encodingContext extends ParserRuleContext {
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_encoding; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_encoding) {
			listener.enterOpt_encoding(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_encoding) {
			listener.exitOpt_encoding(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_encoding) {
			return visitor.visitOpt_encoding(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Nonreservedword_or_sconstContext extends ParserRuleContext {
	public nonreservedword(): NonreservedwordContext | undefined {
		return this.tryGetRuleContext(0, NonreservedwordContext);
	}
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_nonreservedword_or_sconst; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterNonreservedword_or_sconst) {
			listener.enterNonreservedword_or_sconst(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitNonreservedword_or_sconst) {
			listener.exitNonreservedword_or_sconst(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitNonreservedword_or_sconst) {
			return visitor.visitNonreservedword_or_sconst(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VariableresetstmtContext extends ParserRuleContext {
	public KW_RESET(): TerminalNode { return this.getToken(PostgreSQLParser.KW_RESET, 0); }
	public reset_rest(): Reset_restContext {
		return this.getRuleContext(0, Reset_restContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_variableresetstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVariableresetstmt) {
			listener.enterVariableresetstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVariableresetstmt) {
			listener.exitVariableresetstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVariableresetstmt) {
			return visitor.visitVariableresetstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reset_restContext extends ParserRuleContext {
	public generic_reset(): Generic_resetContext | undefined {
		return this.tryGetRuleContext(0, Generic_resetContext);
	}
	public KW_TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TIME, 0); }
	public KW_ZONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ZONE, 0); }
	public KW_TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRANSACTION, 0); }
	public KW_ISOLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ISOLATION, 0); }
	public KW_LEVEL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEVEL, 0); }
	public KW_SESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SESSION, 0); }
	public KW_AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AUTHORIZATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_reset_rest; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReset_rest) {
			listener.enterReset_rest(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReset_rest) {
			listener.exitReset_rest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReset_rest) {
			return visitor.visitReset_rest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Generic_resetContext extends ParserRuleContext {
	public var_name(): Var_nameContext | undefined {
		return this.tryGetRuleContext(0, Var_nameContext);
	}
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_generic_reset; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGeneric_reset) {
			listener.enterGeneric_reset(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGeneric_reset) {
			listener.exitGeneric_reset(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGeneric_reset) {
			return visitor.visitGeneric_reset(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetresetclauseContext extends ParserRuleContext {
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public set_rest(): Set_restContext | undefined {
		return this.tryGetRuleContext(0, Set_restContext);
	}
	public variableresetstmt(): VariableresetstmtContext | undefined {
		return this.tryGetRuleContext(0, VariableresetstmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_setresetclause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSetresetclause) {
			listener.enterSetresetclause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSetresetclause) {
			listener.exitSetresetclause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSetresetclause) {
			return visitor.visitSetresetclause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionsetresetclauseContext extends ParserRuleContext {
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public set_rest_more(): Set_rest_moreContext | undefined {
		return this.tryGetRuleContext(0, Set_rest_moreContext);
	}
	public variableresetstmt(): VariableresetstmtContext | undefined {
		return this.tryGetRuleContext(0, VariableresetstmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_functionsetresetclause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunctionsetresetclause) {
			listener.enterFunctionsetresetclause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunctionsetresetclause) {
			listener.exitFunctionsetresetclause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunctionsetresetclause) {
			return visitor.visitFunctionsetresetclause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VariableshowstmtContext extends ParserRuleContext {
	public KW_SHOW(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SHOW, 0); }
	public var_name(): Var_nameContext | undefined {
		return this.tryGetRuleContext(0, Var_nameContext);
	}
	public KW_TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TIME, 0); }
	public KW_ZONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ZONE, 0); }
	public KW_TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRANSACTION, 0); }
	public KW_ISOLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ISOLATION, 0); }
	public KW_LEVEL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEVEL, 0); }
	public KW_SESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SESSION, 0); }
	public KW_AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AUTHORIZATION, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_variableshowstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVariableshowstmt) {
			listener.enterVariableshowstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVariableshowstmt) {
			listener.exitVariableshowstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVariableshowstmt) {
			return visitor.visitVariableshowstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstraintssetstmtContext extends ParserRuleContext {
	public KW_SET(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SET, 0); }
	public KW_CONSTRAINTS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CONSTRAINTS, 0); }
	public constraints_set_list(): Constraints_set_listContext {
		return this.getRuleContext(0, Constraints_set_listContext);
	}
	public constraints_set_mode(): Constraints_set_modeContext {
		return this.getRuleContext(0, Constraints_set_modeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_constraintssetstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterConstraintssetstmt) {
			listener.enterConstraintssetstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitConstraintssetstmt) {
			listener.exitConstraintssetstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitConstraintssetstmt) {
			return visitor.visitConstraintssetstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Constraints_set_listContext extends ParserRuleContext {
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public qualified_name_list(): Qualified_name_listContext | undefined {
		return this.tryGetRuleContext(0, Qualified_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_constraints_set_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterConstraints_set_list) {
			listener.enterConstraints_set_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitConstraints_set_list) {
			listener.exitConstraints_set_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitConstraints_set_list) {
			return visitor.visitConstraints_set_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Constraints_set_modeContext extends ParserRuleContext {
	public KW_DEFERRED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFERRED, 0); }
	public KW_IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IMMEDIATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_constraints_set_mode; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterConstraints_set_mode) {
			listener.enterConstraints_set_mode(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitConstraints_set_mode) {
			listener.exitConstraints_set_mode(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitConstraints_set_mode) {
			return visitor.visitConstraints_set_mode(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CheckpointstmtContext extends ParserRuleContext {
	public KW_CHECKPOINT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CHECKPOINT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_checkpointstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCheckpointstmt) {
			listener.enterCheckpointstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCheckpointstmt) {
			listener.exitCheckpointstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCheckpointstmt) {
			return visitor.visitCheckpointstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DiscardstmtContext extends ParserRuleContext {
	public KW_DISCARD(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DISCARD, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_TEMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMP, 0); }
	public KW_TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMPORARY, 0); }
	public KW_PLANS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PLANS, 0); }
	public KW_SEQUENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEQUENCES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_discardstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDiscardstmt) {
			listener.enterDiscardstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDiscardstmt) {
			listener.exitDiscardstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDiscardstmt) {
			return visitor.visitDiscardstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AltertablestmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public relation_expr(): Relation_exprContext | undefined {
		return this.tryGetRuleContext(0, Relation_exprContext);
	}
	public alter_table_cmds(): Alter_table_cmdsContext | undefined {
		return this.tryGetRuleContext(0, Alter_table_cmdsContext);
	}
	public partition_cmd(): Partition_cmdContext | undefined {
		return this.tryGetRuleContext(0, Partition_cmdContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IN, 0); }
	public KW_TABLESPACE(): TerminalNode[];
	public KW_TABLESPACE(i: number): TerminalNode;
	public KW_TABLESPACE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_TABLESPACE);
		} else {
			return this.getToken(PostgreSQLParser.KW_TABLESPACE, i);
		}
	}
	public name(): NameContext[];
	public name(i: number): NameContext;
	public name(i?: number): NameContext | NameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameContext);
		} else {
			return this.getRuleContext(i, NameContext);
		}
	}
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public KW_OWNED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OWNED, 0); }
	public KW_BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BY, 0); }
	public role_list(): Role_listContext | undefined {
		return this.tryGetRuleContext(0, Role_listContext);
	}
	public opt_nowait(): Opt_nowaitContext | undefined {
		return this.tryGetRuleContext(0, Opt_nowaitContext);
	}
	public KW_INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INDEX, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public index_partition_cmd(): Index_partition_cmdContext | undefined {
		return this.tryGetRuleContext(0, Index_partition_cmdContext);
	}
	public KW_SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEQUENCE, 0); }
	public KW_VIEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VIEW, 0); }
	public KW_MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MATERIALIZED, 0); }
	public KW_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOREIGN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_altertablestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAltertablestmt) {
			listener.enterAltertablestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAltertablestmt) {
			listener.exitAltertablestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAltertablestmt) {
			return visitor.visitAltertablestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_table_cmdsContext extends ParserRuleContext {
	public alter_table_cmd(): Alter_table_cmdContext[];
	public alter_table_cmd(i: number): Alter_table_cmdContext;
	public alter_table_cmd(i?: number): Alter_table_cmdContext | Alter_table_cmdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_table_cmdContext);
		} else {
			return this.getRuleContext(i, Alter_table_cmdContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_table_cmds; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_table_cmds) {
			listener.enterAlter_table_cmds(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_table_cmds) {
			listener.exitAlter_table_cmds(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_table_cmds) {
			return visitor.visitAlter_table_cmds(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Partition_cmdContext extends ParserRuleContext {
	public KW_ATTACH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ATTACH, 0); }
	public KW_PARTITION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PARTITION, 0); }
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public partitionboundspec(): PartitionboundspecContext | undefined {
		return this.tryGetRuleContext(0, PartitionboundspecContext);
	}
	public KW_DETACH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DETACH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_partition_cmd; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPartition_cmd) {
			listener.enterPartition_cmd(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPartition_cmd) {
			listener.exitPartition_cmd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPartition_cmd) {
			return visitor.visitPartition_cmd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_partition_cmdContext extends ParserRuleContext {
	public KW_ATTACH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ATTACH, 0); }
	public KW_PARTITION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PARTITION, 0); }
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_index_partition_cmd; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndex_partition_cmd) {
			listener.enterIndex_partition_cmd(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndex_partition_cmd) {
			listener.exitIndex_partition_cmd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndex_partition_cmd) {
			return visitor.visitIndex_partition_cmd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_table_cmdContext extends ParserRuleContext {
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADD, 0); }
	public columnDef(): ColumnDefContext | undefined {
		return this.tryGetRuleContext(0, ColumnDefContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public KW_COLUMN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLUMN, 0); }
	public KW_ALTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALTER, 0); }
	public colid(): ColidContext[];
	public colid(i: number): ColidContext;
	public colid(i?: number): ColidContext | ColidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColidContext);
		} else {
			return this.getRuleContext(i, ColidContext);
		}
	}
	public alter_column_default(): Alter_column_defaultContext | undefined {
		return this.tryGetRuleContext(0, Alter_column_defaultContext);
	}
	public opt_column(): Opt_columnContext | undefined {
		return this.tryGetRuleContext(0, Opt_columnContext);
	}
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public KW_EXPRESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXPRESSION, 0); }
	public KW_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STATISTICS, 0); }
	public signediconst(): SignediconstContext | undefined {
		return this.tryGetRuleContext(0, SignediconstContext);
	}
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public reloptions(): ReloptionsContext | undefined {
		return this.tryGetRuleContext(0, ReloptionsContext);
	}
	public KW_RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESET, 0); }
	public KW_STORAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STORAGE, 0); }
	public KW_GENERATED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GENERATED, 0); }
	public generated_when(): Generated_whenContext | undefined {
		return this.tryGetRuleContext(0, Generated_whenContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public KW_IDENTITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IDENTITY, 0); }
	public optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext | undefined {
		return this.tryGetRuleContext(0, OptparenthesizedseqoptlistContext);
	}
	public alter_identity_column_option_list(): Alter_identity_column_option_listContext | undefined {
		return this.tryGetRuleContext(0, Alter_identity_column_option_listContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public typename(): TypenameContext | undefined {
		return this.tryGetRuleContext(0, TypenameContext);
	}
	public opt_set_data(): Opt_set_dataContext | undefined {
		return this.tryGetRuleContext(0, Opt_set_dataContext);
	}
	public opt_collate_clause(): Opt_collate_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_collate_clauseContext);
	}
	public alter_using(): Alter_usingContext | undefined {
		return this.tryGetRuleContext(0, Alter_usingContext);
	}
	public alter_generic_options(): Alter_generic_optionsContext | undefined {
		return this.tryGetRuleContext(0, Alter_generic_optionsContext);
	}
	public tableconstraint(): TableconstraintContext | undefined {
		return this.tryGetRuleContext(0, TableconstraintContext);
	}
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINT, 0); }
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public constraintattributespec(): ConstraintattributespecContext | undefined {
		return this.tryGetRuleContext(0, ConstraintattributespecContext);
	}
	public KW_VALIDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALIDATE, 0); }
	public KW_WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITHOUT, 0); }
	public KW_OIDS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OIDS, 0); }
	public KW_CLUSTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CLUSTER, 0); }
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ON, 0); }
	public KW_LOGGED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOGGED, 0); }
	public KW_UNLOGGED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNLOGGED, 0); }
	public KW_ENABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ENABLE, 0); }
	public KW_TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRIGGER, 0); }
	public KW_ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALWAYS, 0); }
	public KW_REPLICA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REPLICA, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USER, 0); }
	public KW_DISABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DISABLE, 0); }
	public KW_RULE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RULE, 0); }
	public KW_INHERIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INHERIT, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OF, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public KW_OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OWNER, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	public rolespec(): RolespecContext | undefined {
		return this.tryGetRuleContext(0, RolespecContext);
	}
	public KW_TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public replica_identity(): Replica_identityContext | undefined {
		return this.tryGetRuleContext(0, Replica_identityContext);
	}
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROW, 0); }
	public KW_LEVEL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEVEL, 0); }
	public KW_SECURITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SECURITY, 0); }
	public KW_FORCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FORCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_table_cmd; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_table_cmd) {
			listener.enterAlter_table_cmd(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_table_cmd) {
			listener.exitAlter_table_cmd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_table_cmd) {
			return visitor.visitAlter_table_cmd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_column_defaultContext extends ParserRuleContext {
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public KW_DEFAULT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DEFAULT, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_column_default; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_column_default) {
			listener.enterAlter_column_default(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_column_default) {
			listener.exitAlter_column_default(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_column_default) {
			return visitor.visitAlter_column_default(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_drop_behaviorContext extends ParserRuleContext {
	public KW_CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CASCADE, 0); }
	public KW_RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_drop_behavior; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_drop_behavior) {
			listener.enterOpt_drop_behavior(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_drop_behavior) {
			listener.exitOpt_drop_behavior(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_drop_behavior) {
			return visitor.visitOpt_drop_behavior(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_collate_clauseContext extends ParserRuleContext {
	public KW_COLLATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_COLLATE, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_collate_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_collate_clause) {
			listener.enterOpt_collate_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_collate_clause) {
			listener.exitOpt_collate_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_collate_clause) {
			return visitor.visitOpt_collate_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_usingContext extends ParserRuleContext {
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_using; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_using) {
			listener.enterAlter_using(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_using) {
			listener.exitAlter_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_using) {
			return visitor.visitAlter_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Replica_identityContext extends ParserRuleContext {
	public KW_NOTHING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOTHING, 0); }
	public KW_FULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FULL, 0); }
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public KW_INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INDEX, 0); }
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_replica_identity; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReplica_identity) {
			listener.enterReplica_identity(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReplica_identity) {
			listener.exitReplica_identity(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReplica_identity) {
			return visitor.visitReplica_identity(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReloptionsContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public reloption_list(): Reloption_listContext {
		return this.getRuleContext(0, Reloption_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_reloptions; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReloptions) {
			listener.enterReloptions(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReloptions) {
			listener.exitReloptions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReloptions) {
			return visitor.visitReloptions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_reloptionsContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	public reloptions(): ReloptionsContext {
		return this.getRuleContext(0, ReloptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_reloptions; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_reloptions) {
			listener.enterOpt_reloptions(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_reloptions) {
			listener.exitOpt_reloptions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_reloptions) {
			return visitor.visitOpt_reloptions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reloption_listContext extends ParserRuleContext {
	public reloption_elem(): Reloption_elemContext[];
	public reloption_elem(i: number): Reloption_elemContext;
	public reloption_elem(i?: number): Reloption_elemContext | Reloption_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Reloption_elemContext);
		} else {
			return this.getRuleContext(i, Reloption_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_reloption_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReloption_list) {
			listener.enterReloption_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReloption_list) {
			listener.exitReloption_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReloption_list) {
			return visitor.visitReloption_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reloption_elemContext extends ParserRuleContext {
	public collabel(): CollabelContext[];
	public collabel(i: number): CollabelContext;
	public collabel(i?: number): CollabelContext | CollabelContext[] {
		if (i === undefined) {
			return this.getRuleContexts(CollabelContext);
		} else {
			return this.getRuleContext(i, CollabelContext);
		}
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EQUAL, 0); }
	public def_arg(): Def_argContext | undefined {
		return this.tryGetRuleContext(0, Def_argContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.DOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_reloption_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReloption_elem) {
			listener.enterReloption_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReloption_elem) {
			listener.exitReloption_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReloption_elem) {
			return visitor.visitReloption_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_identity_column_option_listContext extends ParserRuleContext {
	public alter_identity_column_option(): Alter_identity_column_optionContext[];
	public alter_identity_column_option(i: number): Alter_identity_column_optionContext;
	public alter_identity_column_option(i?: number): Alter_identity_column_optionContext | Alter_identity_column_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_identity_column_optionContext);
		} else {
			return this.getRuleContext(i, Alter_identity_column_optionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_identity_column_option_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_identity_column_option_list) {
			listener.enterAlter_identity_column_option_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_identity_column_option_list) {
			listener.exitAlter_identity_column_option_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_identity_column_option_list) {
			return visitor.visitAlter_identity_column_option_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_identity_column_optionContext extends ParserRuleContext {
	public KW_RESTART(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESTART, 0); }
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	public opt_with(): Opt_withContext | undefined {
		return this.tryGetRuleContext(0, Opt_withContext);
	}
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public seqoptelem(): SeqoptelemContext | undefined {
		return this.tryGetRuleContext(0, SeqoptelemContext);
	}
	public KW_GENERATED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GENERATED, 0); }
	public generated_when(): Generated_whenContext | undefined {
		return this.tryGetRuleContext(0, Generated_whenContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_identity_column_option; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_identity_column_option) {
			listener.enterAlter_identity_column_option(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_identity_column_option) {
			listener.exitAlter_identity_column_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_identity_column_option) {
			return visitor.visitAlter_identity_column_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionboundspecContext extends ParserRuleContext {
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_VALUES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALUES, 0); }
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITH, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
	}
	public hash_partbound(): Hash_partboundContext | undefined {
		return this.tryGetRuleContext(0, Hash_partboundContext);
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
	}
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IN, 0); }
	public expr_list(): Expr_listContext[];
	public expr_list(i: number): Expr_listContext;
	public expr_list(i?: number): Expr_listContext | Expr_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Expr_listContext);
		} else {
			return this.getRuleContext(i, Expr_listContext);
		}
	}
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_partitionboundspec; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPartitionboundspec) {
			listener.enterPartitionboundspec(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPartitionboundspec) {
			listener.exitPartitionboundspec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPartitionboundspec) {
			return visitor.visitPartitionboundspec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Hash_partbound_elemContext extends ParserRuleContext {
	public nonreservedword(): NonreservedwordContext {
		return this.getRuleContext(0, NonreservedwordContext);
	}
	public iconst(): IconstContext {
		return this.getRuleContext(0, IconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_hash_partbound_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterHash_partbound_elem) {
			listener.enterHash_partbound_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitHash_partbound_elem) {
			listener.exitHash_partbound_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitHash_partbound_elem) {
			return visitor.visitHash_partbound_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Hash_partboundContext extends ParserRuleContext {
	public hash_partbound_elem(): Hash_partbound_elemContext[];
	public hash_partbound_elem(i: number): Hash_partbound_elemContext;
	public hash_partbound_elem(i?: number): Hash_partbound_elemContext | Hash_partbound_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Hash_partbound_elemContext);
		} else {
			return this.getRuleContext(i, Hash_partbound_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_hash_partbound; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterHash_partbound) {
			listener.enterHash_partbound(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitHash_partbound) {
			listener.exitHash_partbound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitHash_partbound) {
			return visitor.visitHash_partbound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AltercompositetypestmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_TYPE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TYPE, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public alter_type_cmds(): Alter_type_cmdsContext {
		return this.getRuleContext(0, Alter_type_cmdsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_altercompositetypestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAltercompositetypestmt) {
			listener.enterAltercompositetypestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAltercompositetypestmt) {
			listener.exitAltercompositetypestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAltercompositetypestmt) {
			return visitor.visitAltercompositetypestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_type_cmdsContext extends ParserRuleContext {
	public alter_type_cmd(): Alter_type_cmdContext[];
	public alter_type_cmd(i: number): Alter_type_cmdContext;
	public alter_type_cmd(i?: number): Alter_type_cmdContext | Alter_type_cmdContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_type_cmdContext);
		} else {
			return this.getRuleContext(i, Alter_type_cmdContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_type_cmds; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_type_cmds) {
			listener.enterAlter_type_cmds(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_type_cmds) {
			listener.exitAlter_type_cmds(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_type_cmds) {
			return visitor.visitAlter_type_cmds(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_type_cmdContext extends ParserRuleContext {
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADD, 0); }
	public KW_ATTRIBUTE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ATTRIBUTE, 0); }
	public tablefuncelement(): TablefuncelementContext | undefined {
		return this.tryGetRuleContext(0, TablefuncelementContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DROP, 0); }
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public KW_ALTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public typename(): TypenameContext | undefined {
		return this.tryGetRuleContext(0, TypenameContext);
	}
	public opt_set_data(): Opt_set_dataContext | undefined {
		return this.tryGetRuleContext(0, Opt_set_dataContext);
	}
	public opt_collate_clause(): Opt_collate_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_collate_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_type_cmd; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_type_cmd) {
			listener.enterAlter_type_cmd(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_type_cmd) {
			listener.exitAlter_type_cmd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_type_cmd) {
			return visitor.visitAlter_type_cmd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CloseportalstmtContext extends ParserRuleContext {
	public KW_CLOSE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CLOSE, 0); }
	public cursor_name(): Cursor_nameContext | undefined {
		return this.tryGetRuleContext(0, Cursor_nameContext);
	}
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_closeportalstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCloseportalstmt) {
			listener.enterCloseportalstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCloseportalstmt) {
			listener.exitCloseportalstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCloseportalstmt) {
			return visitor.visitCloseportalstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CopystmtContext extends ParserRuleContext {
	public KW_COPY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_COPY, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public copy_from(): Copy_fromContext | undefined {
		return this.tryGetRuleContext(0, Copy_fromContext);
	}
	public copy_file_name(): Copy_file_nameContext {
		return this.getRuleContext(0, Copy_file_nameContext);
	}
	public copy_options(): Copy_optionsContext {
		return this.getRuleContext(0, Copy_optionsContext);
	}
	public opt_binary(): Opt_binaryContext | undefined {
		return this.tryGetRuleContext(0, Opt_binaryContext);
	}
	public opt_column_list(): Opt_column_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_column_listContext);
	}
	public opt_program(): Opt_programContext | undefined {
		return this.tryGetRuleContext(0, Opt_programContext);
	}
	public copy_delimiter(): Copy_delimiterContext | undefined {
		return this.tryGetRuleContext(0, Copy_delimiterContext);
	}
	public opt_with(): Opt_withContext | undefined {
		return this.tryGetRuleContext(0, Opt_withContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public preparablestmt(): PreparablestmtContext | undefined {
		return this.tryGetRuleContext(0, PreparablestmtContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copystmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopystmt) {
			listener.enterCopystmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopystmt) {
			listener.exitCopystmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopystmt) {
			return visitor.visitCopystmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_fromContext extends ParserRuleContext {
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copy_from; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_from) {
			listener.enterCopy_from(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_from) {
			listener.exitCopy_from(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_from) {
			return visitor.visitCopy_from(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_programContext extends ParserRuleContext {
	public KW_PROGRAM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PROGRAM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_program; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_program) {
			listener.enterOpt_program(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_program) {
			listener.exitOpt_program(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_program) {
			return visitor.visitOpt_program(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_file_nameContext extends ParserRuleContext {
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public KW_STDIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STDIN, 0); }
	public KW_STDOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STDOUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copy_file_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_file_name) {
			listener.enterCopy_file_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_file_name) {
			listener.exitCopy_file_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_file_name) {
			return visitor.visitCopy_file_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_optionsContext extends ParserRuleContext {
	public copy_opt_list(): Copy_opt_listContext | undefined {
		return this.tryGetRuleContext(0, Copy_opt_listContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public copy_generic_opt_list(): Copy_generic_opt_listContext | undefined {
		return this.tryGetRuleContext(0, Copy_generic_opt_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copy_options; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_options) {
			listener.enterCopy_options(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_options) {
			listener.exitCopy_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_options) {
			return visitor.visitCopy_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_opt_listContext extends ParserRuleContext {
	public copy_opt_item(): Copy_opt_itemContext[];
	public copy_opt_item(i: number): Copy_opt_itemContext;
	public copy_opt_item(i?: number): Copy_opt_itemContext | Copy_opt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Copy_opt_itemContext);
		} else {
			return this.getRuleContext(i, Copy_opt_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copy_opt_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_opt_list) {
			listener.enterCopy_opt_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_opt_list) {
			listener.exitCopy_opt_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_opt_list) {
			return visitor.visitCopy_opt_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_opt_itemContext extends ParserRuleContext {
	public KW_BINARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BINARY, 0); }
	public KW_FREEZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FREEZE, 0); }
	public KW_DELIMITER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DELIMITER, 0); }
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public opt_as(): Opt_asContext | undefined {
		return this.tryGetRuleContext(0, Opt_asContext);
	}
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	public KW_CSV(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CSV, 0); }
	public KW_HEADER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_HEADER, 0); }
	public KW_QUOTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_QUOTE, 0); }
	public KW_ESCAPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ESCAPE, 0); }
	public KW_FORCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FORCE, 0); }
	public columnlist(): ColumnlistContext | undefined {
		return this.tryGetRuleContext(0, ColumnlistContext);
	}
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.STAR, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_ENCODING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ENCODING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copy_opt_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_opt_item) {
			listener.enterCopy_opt_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_opt_item) {
			listener.exitCopy_opt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_opt_item) {
			return visitor.visitCopy_opt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_binaryContext extends ParserRuleContext {
	public KW_BINARY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BINARY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_binary; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_binary) {
			listener.enterOpt_binary(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_binary) {
			listener.exitOpt_binary(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_binary) {
			return visitor.visitOpt_binary(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_delimiterContext extends ParserRuleContext {
	public KW_DELIMITERS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DELIMITERS, 0); }
	public sconst(): SconstContext {
		return this.getRuleContext(0, SconstContext);
	}
	public opt_using(): Opt_usingContext | undefined {
		return this.tryGetRuleContext(0, Opt_usingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copy_delimiter; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_delimiter) {
			listener.enterCopy_delimiter(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_delimiter) {
			listener.exitCopy_delimiter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_delimiter) {
			return visitor.visitCopy_delimiter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_usingContext extends ParserRuleContext {
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_using; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_using) {
			listener.enterOpt_using(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_using) {
			listener.exitOpt_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_using) {
			return visitor.visitOpt_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_generic_opt_listContext extends ParserRuleContext {
	public copy_generic_opt_elem(): Copy_generic_opt_elemContext[];
	public copy_generic_opt_elem(i: number): Copy_generic_opt_elemContext;
	public copy_generic_opt_elem(i?: number): Copy_generic_opt_elemContext | Copy_generic_opt_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Copy_generic_opt_elemContext);
		} else {
			return this.getRuleContext(i, Copy_generic_opt_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copy_generic_opt_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_generic_opt_list) {
			listener.enterCopy_generic_opt_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_generic_opt_list) {
			listener.exitCopy_generic_opt_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_generic_opt_list) {
			return visitor.visitCopy_generic_opt_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_generic_opt_elemContext extends ParserRuleContext {
	public collabel(): CollabelContext {
		return this.getRuleContext(0, CollabelContext);
	}
	public copy_generic_opt_arg(): Copy_generic_opt_argContext | undefined {
		return this.tryGetRuleContext(0, Copy_generic_opt_argContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copy_generic_opt_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_generic_opt_elem) {
			listener.enterCopy_generic_opt_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_generic_opt_elem) {
			listener.exitCopy_generic_opt_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_generic_opt_elem) {
			return visitor.visitCopy_generic_opt_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_generic_opt_argContext extends ParserRuleContext {
	public opt_boolean_or_string(): Opt_boolean_or_stringContext | undefined {
		return this.tryGetRuleContext(0, Opt_boolean_or_stringContext);
	}
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.STAR, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public copy_generic_opt_arg_list(): Copy_generic_opt_arg_listContext | undefined {
		return this.tryGetRuleContext(0, Copy_generic_opt_arg_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copy_generic_opt_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_generic_opt_arg) {
			listener.enterCopy_generic_opt_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_generic_opt_arg) {
			listener.exitCopy_generic_opt_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_generic_opt_arg) {
			return visitor.visitCopy_generic_opt_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_generic_opt_arg_listContext extends ParserRuleContext {
	public copy_generic_opt_arg_list_item(): Copy_generic_opt_arg_list_itemContext[];
	public copy_generic_opt_arg_list_item(i: number): Copy_generic_opt_arg_list_itemContext;
	public copy_generic_opt_arg_list_item(i?: number): Copy_generic_opt_arg_list_itemContext | Copy_generic_opt_arg_list_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Copy_generic_opt_arg_list_itemContext);
		} else {
			return this.getRuleContext(i, Copy_generic_opt_arg_list_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copy_generic_opt_arg_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_generic_opt_arg_list) {
			listener.enterCopy_generic_opt_arg_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_generic_opt_arg_list) {
			listener.exitCopy_generic_opt_arg_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_generic_opt_arg_list) {
			return visitor.visitCopy_generic_opt_arg_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Copy_generic_opt_arg_list_itemContext extends ParserRuleContext {
	public opt_boolean_or_string(): Opt_boolean_or_stringContext {
		return this.getRuleContext(0, Opt_boolean_or_stringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_copy_generic_opt_arg_list_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCopy_generic_opt_arg_list_item) {
			listener.enterCopy_generic_opt_arg_list_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCopy_generic_opt_arg_list_item) {
			listener.exitCopy_generic_opt_arg_list_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCopy_generic_opt_arg_list_item) {
			return visitor.visitCopy_generic_opt_arg_list_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatestmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TABLE, 0); }
	public table_qualified_name(): Table_qualified_nameContext {
		return this.getRuleContext(0, Table_qualified_nameContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OF, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public KW_PARTITION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARTITION, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public partitionboundspec(): PartitionboundspecContext | undefined {
		return this.tryGetRuleContext(0, PartitionboundspecContext);
	}
	public opttemp(): OpttempContext | undefined {
		return this.tryGetRuleContext(0, OpttempContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public table_column_list(): Table_column_listContext | undefined {
		return this.tryGetRuleContext(0, Table_column_listContext);
	}
	public optinherit(): OptinheritContext | undefined {
		return this.tryGetRuleContext(0, OptinheritContext);
	}
	public optpartitionspec(): OptpartitionspecContext | undefined {
		return this.tryGetRuleContext(0, OptpartitionspecContext);
	}
	public table_access_method_clause(): Table_access_method_clauseContext | undefined {
		return this.tryGetRuleContext(0, Table_access_method_clauseContext);
	}
	public optwith(): OptwithContext | undefined {
		return this.tryGetRuleContext(0, OptwithContext);
	}
	public oncommitoption(): OncommitoptionContext | undefined {
		return this.tryGetRuleContext(0, OncommitoptionContext);
	}
	public opttablespace(): OpttablespaceContext | undefined {
		return this.tryGetRuleContext(0, OpttablespaceContext);
	}
	public opttypedtableelementlist(): OpttypedtableelementlistContext | undefined {
		return this.tryGetRuleContext(0, OpttypedtableelementlistContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatestmt) {
			listener.enterCreatestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatestmt) {
			listener.exitCreatestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatestmt) {
			return visitor.visitCreatestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpttempContext extends ParserRuleContext {
	public KW_TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMPORARY, 0); }
	public KW_TEMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMP, 0); }
	public KW_LOCAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCAL, 0); }
	public KW_GLOBAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GLOBAL, 0); }
	public KW_UNLOGGED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNLOGGED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opttemp; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpttemp) {
			listener.enterOpttemp(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpttemp) {
			listener.exitOpttemp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpttemp) {
			return visitor.visitOpttemp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_column_listContext extends ParserRuleContext {
	public tableelementlist(): TableelementlistContext {
		return this.getRuleContext(0, TableelementlistContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_table_column_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTable_column_list) {
			listener.enterTable_column_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTable_column_list) {
			listener.exitTable_column_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTable_column_list) {
			return visitor.visitTable_column_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpttableelementlistContext extends ParserRuleContext {
	public tableelementlist(): TableelementlistContext {
		return this.getRuleContext(0, TableelementlistContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opttableelementlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpttableelementlist) {
			listener.enterOpttableelementlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpttableelementlist) {
			listener.exitOpttableelementlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpttableelementlist) {
			return visitor.visitOpttableelementlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpttypedtableelementlistContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public typedtableelementlist(): TypedtableelementlistContext {
		return this.getRuleContext(0, TypedtableelementlistContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opttypedtableelementlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpttypedtableelementlist) {
			listener.enterOpttypedtableelementlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpttypedtableelementlist) {
			listener.exitOpttypedtableelementlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpttypedtableelementlist) {
			return visitor.visitOpttypedtableelementlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableelementlistContext extends ParserRuleContext {
	public tableelement(): TableelementContext[];
	public tableelement(i: number): TableelementContext;
	public tableelement(i?: number): TableelementContext | TableelementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TableelementContext);
		} else {
			return this.getRuleContext(i, TableelementContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_tableelementlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTableelementlist) {
			listener.enterTableelementlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTableelementlist) {
			listener.exitTableelementlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTableelementlist) {
			return visitor.visitTableelementlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TypedtableelementlistContext extends ParserRuleContext {
	public typedtableelement(): TypedtableelementContext[];
	public typedtableelement(i: number): TypedtableelementContext;
	public typedtableelement(i?: number): TypedtableelementContext | TypedtableelementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypedtableelementContext);
		} else {
			return this.getRuleContext(i, TypedtableelementContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_typedtableelementlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTypedtableelementlist) {
			listener.enterTypedtableelementlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTypedtableelementlist) {
			listener.exitTypedtableelementlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTypedtableelementlist) {
			return visitor.visitTypedtableelementlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableelementContext extends ParserRuleContext {
	public columnDef(): ColumnDefContext | undefined {
		return this.tryGetRuleContext(0, ColumnDefContext);
	}
	public tablelikeclause(): TablelikeclauseContext | undefined {
		return this.tryGetRuleContext(0, TablelikeclauseContext);
	}
	public tableconstraint(): TableconstraintContext | undefined {
		return this.tryGetRuleContext(0, TableconstraintContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_tableelement; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTableelement) {
			listener.enterTableelement(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTableelement) {
			listener.exitTableelement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTableelement) {
			return visitor.visitTableelement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TypedtableelementContext extends ParserRuleContext {
	public columnOptions(): ColumnOptionsContext | undefined {
		return this.tryGetRuleContext(0, ColumnOptionsContext);
	}
	public tableconstraint(): TableconstraintContext | undefined {
		return this.tryGetRuleContext(0, TableconstraintContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_typedtableelement; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTypedtableelement) {
			listener.enterTypedtableelement(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTypedtableelement) {
			listener.exitTypedtableelement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTypedtableelement) {
			return visitor.visitTypedtableelement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnDefContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public typename(): TypenameContext {
		return this.getRuleContext(0, TypenameContext);
	}
	public colquallist(): ColquallistContext {
		return this.getRuleContext(0, ColquallistContext);
	}
	public create_generic_options(): Create_generic_optionsContext | undefined {
		return this.tryGetRuleContext(0, Create_generic_optionsContext);
	}
	public KW_COLLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATE, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_columnDef; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColumnDef) {
			listener.enterColumnDef(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColumnDef) {
			listener.exitColumnDef(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColumnDef) {
			return visitor.visitColumnDef(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnOptionsContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public colquallist(): ColquallistContext {
		return this.getRuleContext(0, ColquallistContext);
	}
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_OPTIONS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPTIONS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_columnOptions; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColumnOptions) {
			listener.enterColumnOptions(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColumnOptions) {
			listener.exitColumnOptions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColumnOptions) {
			return visitor.visitColumnOptions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColquallistContext extends ParserRuleContext {
	public colconstraint(): ColconstraintContext[];
	public colconstraint(i: number): ColconstraintContext;
	public colconstraint(i?: number): ColconstraintContext | ColconstraintContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColconstraintContext);
		} else {
			return this.getRuleContext(i, ColconstraintContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_colquallist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColquallist) {
			listener.enterColquallist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColquallist) {
			listener.exitColquallist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColquallist) {
			return visitor.visitColquallist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColconstraintContext extends ParserRuleContext {
	public colconstraintelem(): ColconstraintelemContext {
		return this.getRuleContext(0, ColconstraintelemContext);
	}
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINT, 0); }
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public deferrable_trigger(): Deferrable_triggerContext | undefined {
		return this.tryGetRuleContext(0, Deferrable_triggerContext);
	}
	public initially_trigger(): Initially_triggerContext | undefined {
		return this.tryGetRuleContext(0, Initially_triggerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_colconstraint; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColconstraint) {
			listener.enterColconstraint(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColconstraint) {
			listener.exitColconstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColconstraint) {
			return visitor.visitColconstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColconstraintelemContext extends ParserRuleContext {
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	public KW_UNIQUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNIQUE, 0); }
	public opt_definition(): Opt_definitionContext | undefined {
		return this.tryGetRuleContext(0, Opt_definitionContext);
	}
	public optconstablespace(): OptconstablespaceContext | undefined {
		return this.tryGetRuleContext(0, OptconstablespaceContext);
	}
	public KW_PRIMARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRIMARY, 0); }
	public KW_KEY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_KEY, 0); }
	public KW_CHECK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CHECK, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_no_inherit(): Opt_no_inheritContext | undefined {
		return this.tryGetRuleContext(0, Opt_no_inheritContext);
	}
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	public b_expr(): B_exprContext | undefined {
		return this.tryGetRuleContext(0, B_exprContext);
	}
	public KW_GENERATED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GENERATED, 0); }
	public generated_when(): Generated_whenContext | undefined {
		return this.tryGetRuleContext(0, Generated_whenContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public KW_IDENTITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IDENTITY, 0); }
	public KW_STORED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STORED, 0); }
	public optparenthesizedseqoptlist(): OptparenthesizedseqoptlistContext | undefined {
		return this.tryGetRuleContext(0, OptparenthesizedseqoptlistContext);
	}
	public KW_REFERENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REFERENCES, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public opt_column_list(): Opt_column_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_column_listContext);
	}
	public key_match(): Key_matchContext | undefined {
		return this.tryGetRuleContext(0, Key_matchContext);
	}
	public key_actions(): Key_actionsContext | undefined {
		return this.tryGetRuleContext(0, Key_actionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_colconstraintelem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColconstraintelem) {
			listener.enterColconstraintelem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColconstraintelem) {
			listener.exitColconstraintelem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColconstraintelem) {
			return visitor.visitColconstraintelem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Generated_whenContext extends ParserRuleContext {
	public KW_ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALWAYS, 0); }
	public KW_BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BY, 0); }
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_generated_when; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGenerated_when) {
			listener.enterGenerated_when(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGenerated_when) {
			listener.exitGenerated_when(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGenerated_when) {
			return visitor.visitGenerated_when(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Deferrable_triggerContext extends ParserRuleContext {
	public KW_DEFERRABLE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DEFERRABLE, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_deferrable_trigger; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDeferrable_trigger) {
			listener.enterDeferrable_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDeferrable_trigger) {
			listener.exitDeferrable_trigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDeferrable_trigger) {
			return visitor.visitDeferrable_trigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Initially_triggerContext extends ParserRuleContext {
	public KW_INITIALLY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INITIALLY, 0); }
	public KW_DEFERRED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFERRED, 0); }
	public KW_IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IMMEDIATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_initially_trigger; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterInitially_trigger) {
			listener.enterInitially_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitInitially_trigger) {
			listener.exitInitially_trigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitInitially_trigger) {
			return visitor.visitInitially_trigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablelikeclauseContext extends ParserRuleContext {
	public KW_LIKE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_LIKE, 0); }
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public tablelikeoptionlist(): TablelikeoptionlistContext {
		return this.getRuleContext(0, TablelikeoptionlistContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_tablelikeclause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTablelikeclause) {
			listener.enterTablelikeclause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTablelikeclause) {
			listener.exitTablelikeclause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTablelikeclause) {
			return visitor.visitTablelikeclause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablelikeoptionlistContext extends ParserRuleContext {
	public tablelikeoption(): TablelikeoptionContext[];
	public tablelikeoption(i: number): TablelikeoptionContext;
	public tablelikeoption(i?: number): TablelikeoptionContext | TablelikeoptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TablelikeoptionContext);
		} else {
			return this.getRuleContext(i, TablelikeoptionContext);
		}
	}
	public KW_INCLUDING(): TerminalNode[];
	public KW_INCLUDING(i: number): TerminalNode;
	public KW_INCLUDING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_INCLUDING);
		} else {
			return this.getToken(PostgreSQLParser.KW_INCLUDING, i);
		}
	}
	public KW_EXCLUDING(): TerminalNode[];
	public KW_EXCLUDING(i: number): TerminalNode;
	public KW_EXCLUDING(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_EXCLUDING);
		} else {
			return this.getToken(PostgreSQLParser.KW_EXCLUDING, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_tablelikeoptionlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTablelikeoptionlist) {
			listener.enterTablelikeoptionlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTablelikeoptionlist) {
			listener.exitTablelikeoptionlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTablelikeoptionlist) {
			return visitor.visitTablelikeoptionlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablelikeoptionContext extends ParserRuleContext {
	public KW_COMMENTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COMMENTS, 0); }
	public KW_CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINTS, 0); }
	public KW_DEFAULTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULTS, 0); }
	public KW_IDENTITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IDENTITY, 0); }
	public KW_GENERATED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GENERATED, 0); }
	public KW_INDEXES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INDEXES, 0); }
	public KW_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STATISTICS, 0); }
	public KW_STORAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STORAGE, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_tablelikeoption; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTablelikeoption) {
			listener.enterTablelikeoption(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTablelikeoption) {
			listener.exitTablelikeoption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTablelikeoption) {
			return visitor.visitTablelikeoption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TableconstraintContext extends ParserRuleContext {
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINT, 0); }
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public constraintelem(): ConstraintelemContext {
		return this.getRuleContext(0, ConstraintelemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_tableconstraint; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTableconstraint) {
			listener.enterTableconstraint(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTableconstraint) {
			listener.exitTableconstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTableconstraint) {
			return visitor.visitTableconstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstraintelemContext extends ParserRuleContext {
	public KW_CHECK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CHECK, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public constraintattributespec(): ConstraintattributespecContext | undefined {
		return this.tryGetRuleContext(0, ConstraintattributespecContext);
	}
	public KW_UNIQUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNIQUE, 0); }
	public columnlist(): ColumnlistContext | undefined {
		return this.tryGetRuleContext(0, ColumnlistContext);
	}
	public existingindex(): ExistingindexContext | undefined {
		return this.tryGetRuleContext(0, ExistingindexContext);
	}
	public opt_c_include(): Opt_c_includeContext | undefined {
		return this.tryGetRuleContext(0, Opt_c_includeContext);
	}
	public opt_definition(): Opt_definitionContext | undefined {
		return this.tryGetRuleContext(0, Opt_definitionContext);
	}
	public optconstablespace(): OptconstablespaceContext | undefined {
		return this.tryGetRuleContext(0, OptconstablespaceContext);
	}
	public KW_PRIMARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRIMARY, 0); }
	public KW_KEY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_KEY, 0); }
	public KW_EXCLUDE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXCLUDE, 0); }
	public exclusionconstraintlist(): ExclusionconstraintlistContext | undefined {
		return this.tryGetRuleContext(0, ExclusionconstraintlistContext);
	}
	public access_method_clause(): Access_method_clauseContext | undefined {
		return this.tryGetRuleContext(0, Access_method_clauseContext);
	}
	public exclusionwhereclause(): ExclusionwhereclauseContext | undefined {
		return this.tryGetRuleContext(0, ExclusionwhereclauseContext);
	}
	public KW_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_REFERENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REFERENCES, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public opt_column_list(): Opt_column_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_column_listContext);
	}
	public key_match(): Key_matchContext | undefined {
		return this.tryGetRuleContext(0, Key_matchContext);
	}
	public key_actions(): Key_actionsContext | undefined {
		return this.tryGetRuleContext(0, Key_actionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_constraintelem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterConstraintelem) {
			listener.enterConstraintelem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitConstraintelem) {
			listener.exitConstraintelem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitConstraintelem) {
			return visitor.visitConstraintelem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_no_inheritContext extends ParserRuleContext {
	public KW_NO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_NO, 0); }
	public KW_INHERIT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INHERIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_no_inherit; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_no_inherit) {
			listener.enterOpt_no_inherit(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_no_inherit) {
			listener.exitOpt_no_inherit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_no_inherit) {
			return visitor.visitOpt_no_inherit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_column_listContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public columnlist(): ColumnlistContext {
		return this.getRuleContext(0, ColumnlistContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_column_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_column_list) {
			listener.enterOpt_column_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_column_list) {
			listener.exitOpt_column_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_column_list) {
			return visitor.visitOpt_column_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnlistContext extends ParserRuleContext {
	public columnElem(): ColumnElemContext[];
	public columnElem(i: number): ColumnElemContext;
	public columnElem(i?: number): ColumnElemContext | ColumnElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColumnElemContext);
		} else {
			return this.getRuleContext(i, ColumnElemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_columnlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColumnlist) {
			listener.enterColumnlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColumnlist) {
			listener.exitColumnlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColumnlist) {
			return visitor.visitColumnlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnElemContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_columnElem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColumnElem) {
			listener.enterColumnElem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColumnElem) {
			listener.exitColumnElem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColumnElem) {
			return visitor.visitColumnElem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_c_includeContext extends ParserRuleContext {
	public KW_INCLUDE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INCLUDE, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public columnlist(): ColumnlistContext {
		return this.getRuleContext(0, ColumnlistContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_c_include; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_c_include) {
			listener.enterOpt_c_include(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_c_include) {
			listener.exitOpt_c_include(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_c_include) {
			return visitor.visitOpt_c_include(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_matchContext extends ParserRuleContext {
	public KW_MATCH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_MATCH, 0); }
	public KW_FULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FULL, 0); }
	public KW_PARTIAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARTIAL, 0); }
	public KW_SIMPLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SIMPLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_key_match; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterKey_match) {
			listener.enterKey_match(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitKey_match) {
			listener.exitKey_match(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitKey_match) {
			return visitor.visitKey_match(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExclusionconstraintlistContext extends ParserRuleContext {
	public exclusionconstraintelem(): ExclusionconstraintelemContext[];
	public exclusionconstraintelem(i: number): ExclusionconstraintelemContext;
	public exclusionconstraintelem(i?: number): ExclusionconstraintelemContext | ExclusionconstraintelemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExclusionconstraintelemContext);
		} else {
			return this.getRuleContext(i, ExclusionconstraintelemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_exclusionconstraintlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExclusionconstraintlist) {
			listener.enterExclusionconstraintlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExclusionconstraintlist) {
			listener.exitExclusionconstraintlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExclusionconstraintlist) {
			return visitor.visitExclusionconstraintlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExclusionconstraintelemContext extends ParserRuleContext {
	public index_elem(): Index_elemContext {
		return this.getRuleContext(0, Index_elemContext);
	}
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	public any_operator(): Any_operatorContext | undefined {
		return this.tryGetRuleContext(0, Any_operatorContext);
	}
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_exclusionconstraintelem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExclusionconstraintelem) {
			listener.enterExclusionconstraintelem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExclusionconstraintelem) {
			listener.exitExclusionconstraintelem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExclusionconstraintelem) {
			return visitor.visitExclusionconstraintelem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExclusionwhereclauseContext extends ParserRuleContext {
	public KW_WHERE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHERE, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_exclusionwhereclause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExclusionwhereclause) {
			listener.enterExclusionwhereclause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExclusionwhereclause) {
			listener.exitExclusionwhereclause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExclusionwhereclause) {
			return visitor.visitExclusionwhereclause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_actionsContext extends ParserRuleContext {
	public key_update(): Key_updateContext | undefined {
		return this.tryGetRuleContext(0, Key_updateContext);
	}
	public key_delete(): Key_deleteContext | undefined {
		return this.tryGetRuleContext(0, Key_deleteContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_key_actions; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterKey_actions) {
			listener.enterKey_actions(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitKey_actions) {
			listener.exitKey_actions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitKey_actions) {
			return visitor.visitKey_actions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_updateContext extends ParserRuleContext {
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public KW_UPDATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_UPDATE, 0); }
	public key_action(): Key_actionContext {
		return this.getRuleContext(0, Key_actionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_key_update; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterKey_update) {
			listener.enterKey_update(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitKey_update) {
			listener.exitKey_update(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitKey_update) {
			return visitor.visitKey_update(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_deleteContext extends ParserRuleContext {
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public KW_DELETE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DELETE, 0); }
	public key_action(): Key_actionContext {
		return this.getRuleContext(0, Key_actionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_key_delete; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterKey_delete) {
			listener.enterKey_delete(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitKey_delete) {
			listener.exitKey_delete(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitKey_delete) {
			return visitor.visitKey_delete(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Key_actionContext extends ParserRuleContext {
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_ACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ACTION, 0); }
	public KW_RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESTRICT, 0); }
	public KW_CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CASCADE, 0); }
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_key_action; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterKey_action) {
			listener.enterKey_action(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitKey_action) {
			listener.exitKey_action(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitKey_action) {
			return visitor.visitKey_action(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptinheritContext extends ParserRuleContext {
	public KW_INHERITS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INHERITS, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public qualified_name_list(): Qualified_name_listContext {
		return this.getRuleContext(0, Qualified_name_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_optinherit; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOptinherit) {
			listener.enterOptinherit(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOptinherit) {
			listener.exitOptinherit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOptinherit) {
			return visitor.visitOptinherit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptpartitionspecContext extends ParserRuleContext {
	public partitionspec(): PartitionspecContext {
		return this.getRuleContext(0, PartitionspecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_optpartitionspec; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOptpartitionspec) {
			listener.enterOptpartitionspec(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOptpartitionspec) {
			listener.exitOptpartitionspec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOptpartitionspec) {
			return visitor.visitOptpartitionspec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PartitionspecContext extends ParserRuleContext {
	public KW_PARTITION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PARTITION, 0); }
	public KW_BY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BY, 0); }
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public part_params(): Part_paramsContext {
		return this.getRuleContext(0, Part_paramsContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_partitionspec; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPartitionspec) {
			listener.enterPartitionspec(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPartitionspec) {
			listener.exitPartitionspec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPartitionspec) {
			return visitor.visitPartitionspec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Part_paramsContext extends ParserRuleContext {
	public part_elem(): Part_elemContext[];
	public part_elem(i: number): Part_elemContext;
	public part_elem(i?: number): Part_elemContext | Part_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Part_elemContext);
		} else {
			return this.getRuleContext(i, Part_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_part_params; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPart_params) {
			listener.enterPart_params(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPart_params) {
			listener.exitPart_params(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPart_params) {
			return visitor.visitPart_params(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Part_elemContext extends ParserRuleContext {
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public opt_collate(): Opt_collateContext | undefined {
		return this.tryGetRuleContext(0, Opt_collateContext);
	}
	public opt_class(): Opt_classContext | undefined {
		return this.tryGetRuleContext(0, Opt_classContext);
	}
	public func_expr_windowless(): Func_expr_windowlessContext | undefined {
		return this.tryGetRuleContext(0, Func_expr_windowlessContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_part_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPart_elem) {
			listener.enterPart_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPart_elem) {
			listener.exitPart_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPart_elem) {
			return visitor.visitPart_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_access_method_clauseContext extends ParserRuleContext {
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_table_access_method_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTable_access_method_clause) {
			listener.enterTable_access_method_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTable_access_method_clause) {
			listener.exitTable_access_method_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTable_access_method_clause) {
			return visitor.visitTable_access_method_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptwithContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITH, 0); }
	public reloptions(): ReloptionsContext | undefined {
		return this.tryGetRuleContext(0, ReloptionsContext);
	}
	public KW_WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITHOUT, 0); }
	public KW_OIDS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OIDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_optwith; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOptwith) {
			listener.enterOptwith(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOptwith) {
			listener.exitOptwith(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOptwith) {
			return visitor.visitOptwith(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OncommitoptionContext extends ParserRuleContext {
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public KW_COMMIT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_COMMIT, 0); }
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_DELETE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DELETE, 0); }
	public KW_ROWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROWS, 0); }
	public KW_PRESERVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRESERVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_oncommitoption; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOncommitoption) {
			listener.enterOncommitoption(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOncommitoption) {
			listener.exitOncommitoption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOncommitoption) {
			return visitor.visitOncommitoption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpttablespaceContext extends ParserRuleContext {
	public KW_TABLESPACE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opttablespace; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpttablespace) {
			listener.enterOpttablespace(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpttablespace) {
			listener.exitOpttablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpttablespace) {
			return visitor.visitOpttablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptconstablespaceContext extends ParserRuleContext {
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public KW_INDEX(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INDEX, 0); }
	public KW_TABLESPACE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_optconstablespace; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOptconstablespace) {
			listener.enterOptconstablespace(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOptconstablespace) {
			listener.exitOptconstablespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOptconstablespace) {
			return visitor.visitOptconstablespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExistingindexContext extends ParserRuleContext {
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public KW_INDEX(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INDEX, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_existingindex; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExistingindex) {
			listener.enterExistingindex(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExistingindex) {
			listener.exitExistingindex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExistingindex) {
			return visitor.visitExistingindex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatestatsstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_STATISTICS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_STATISTICS, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	public KW_FROM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FROM, 0); }
	public from_list(): From_listContext {
		return this.getRuleContext(0, From_listContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public opt_name_list(): Opt_name_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createstatsstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatestatsstmt) {
			listener.enterCreatestatsstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatestatsstmt) {
			listener.exitCreatestatsstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatestatsstmt) {
			return visitor.visitCreatestatsstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterstatsstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_STATISTICS(): TerminalNode[];
	public KW_STATISTICS(i: number): TerminalNode;
	public KW_STATISTICS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_STATISTICS);
		} else {
			return this.getToken(PostgreSQLParser.KW_STATISTICS, i);
		}
	}
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public KW_SET(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SET, 0); }
	public signediconst(): SignediconstContext {
		return this.getRuleContext(0, SignediconstContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterstatsstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterstatsstmt) {
			listener.enterAlterstatsstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterstatsstmt) {
			listener.exitAlterstatsstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterstatsstmt) {
			return visitor.visitAlterstatsstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateasstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TABLE, 0); }
	public create_as_target(): Create_as_targetContext {
		return this.getRuleContext(0, Create_as_targetContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public selectstmt(): SelectstmtContext {
		return this.getRuleContext(0, SelectstmtContext);
	}
	public opttemp(): OpttempContext | undefined {
		return this.tryGetRuleContext(0, OpttempContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public opt_with_data(): Opt_with_dataContext | undefined {
		return this.tryGetRuleContext(0, Opt_with_dataContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createasstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateasstmt) {
			listener.enterCreateasstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateasstmt) {
			listener.exitCreateasstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateasstmt) {
			return visitor.visitCreateasstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_as_targetContext extends ParserRuleContext {
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public opt_column_list(): Opt_column_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_column_listContext);
	}
	public table_access_method_clause(): Table_access_method_clauseContext | undefined {
		return this.tryGetRuleContext(0, Table_access_method_clauseContext);
	}
	public optwith(): OptwithContext | undefined {
		return this.tryGetRuleContext(0, OptwithContext);
	}
	public oncommitoption(): OncommitoptionContext | undefined {
		return this.tryGetRuleContext(0, OncommitoptionContext);
	}
	public opttablespace(): OpttablespaceContext | undefined {
		return this.tryGetRuleContext(0, OpttablespaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_create_as_target; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_as_target) {
			listener.enterCreate_as_target(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_as_target) {
			listener.exitCreate_as_target(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_as_target) {
			return visitor.visitCreate_as_target(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_with_dataContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_DATA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATA, 0); }
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_with_data; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_with_data) {
			listener.enterOpt_with_data(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_with_data) {
			listener.exitOpt_with_data(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_with_data) {
			return visitor.visitOpt_with_data(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatematviewstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_MATERIALIZED(): TerminalNode { return this.getToken(PostgreSQLParser.KW_MATERIALIZED, 0); }
	public KW_VIEW(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VIEW, 0); }
	public create_mv_target(): Create_mv_targetContext {
		return this.getRuleContext(0, Create_mv_targetContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public selectstmt(): SelectstmtContext {
		return this.getRuleContext(0, SelectstmtContext);
	}
	public optnolog(): OptnologContext | undefined {
		return this.tryGetRuleContext(0, OptnologContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public opt_with_data(): Opt_with_dataContext | undefined {
		return this.tryGetRuleContext(0, Opt_with_dataContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_creatematviewstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatematviewstmt) {
			listener.enterCreatematviewstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatematviewstmt) {
			listener.exitCreatematviewstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatematviewstmt) {
			return visitor.visitCreatematviewstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_mv_targetContext extends ParserRuleContext {
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public opt_column_list(): Opt_column_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_column_listContext);
	}
	public table_access_method_clause(): Table_access_method_clauseContext | undefined {
		return this.tryGetRuleContext(0, Table_access_method_clauseContext);
	}
	public opt_reloptions(): Opt_reloptionsContext | undefined {
		return this.tryGetRuleContext(0, Opt_reloptionsContext);
	}
	public opttablespace(): OpttablespaceContext | undefined {
		return this.tryGetRuleContext(0, OpttablespaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_create_mv_target; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_mv_target) {
			listener.enterCreate_mv_target(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_mv_target) {
			listener.exitCreate_mv_target(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_mv_target) {
			return visitor.visitCreate_mv_target(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptnologContext extends ParserRuleContext {
	public KW_UNLOGGED(): TerminalNode { return this.getToken(PostgreSQLParser.KW_UNLOGGED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_optnolog; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOptnolog) {
			listener.enterOptnolog(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOptnolog) {
			listener.exitOptnolog(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOptnolog) {
			return visitor.visitOptnolog(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RefreshmatviewstmtContext extends ParserRuleContext {
	public KW_REFRESH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_REFRESH, 0); }
	public KW_MATERIALIZED(): TerminalNode { return this.getToken(PostgreSQLParser.KW_MATERIALIZED, 0); }
	public KW_VIEW(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VIEW, 0); }
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public opt_concurrently(): Opt_concurrentlyContext | undefined {
		return this.tryGetRuleContext(0, Opt_concurrentlyContext);
	}
	public opt_with_data(): Opt_with_dataContext | undefined {
		return this.tryGetRuleContext(0, Opt_with_dataContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_refreshmatviewstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRefreshmatviewstmt) {
			listener.enterRefreshmatviewstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRefreshmatviewstmt) {
			listener.exitRefreshmatviewstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRefreshmatviewstmt) {
			return visitor.visitRefreshmatviewstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateseqstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_SEQUENCE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SEQUENCE, 0); }
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public opttemp(): OpttempContext | undefined {
		return this.tryGetRuleContext(0, OpttempContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public optseqoptlist(): OptseqoptlistContext | undefined {
		return this.tryGetRuleContext(0, OptseqoptlistContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createseqstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateseqstmt) {
			listener.enterCreateseqstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateseqstmt) {
			listener.exitCreateseqstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateseqstmt) {
			return visitor.visitCreateseqstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterseqstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_SEQUENCE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SEQUENCE, 0); }
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public seqoptlist(): SeqoptlistContext {
		return this.getRuleContext(0, SeqoptlistContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterseqstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterseqstmt) {
			listener.enterAlterseqstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterseqstmt) {
			listener.exitAlterseqstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterseqstmt) {
			return visitor.visitAlterseqstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptseqoptlistContext extends ParserRuleContext {
	public seqoptlist(): SeqoptlistContext {
		return this.getRuleContext(0, SeqoptlistContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_optseqoptlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOptseqoptlist) {
			listener.enterOptseqoptlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOptseqoptlist) {
			listener.exitOptseqoptlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOptseqoptlist) {
			return visitor.visitOptseqoptlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptparenthesizedseqoptlistContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public seqoptlist(): SeqoptlistContext {
		return this.getRuleContext(0, SeqoptlistContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_optparenthesizedseqoptlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOptparenthesizedseqoptlist) {
			listener.enterOptparenthesizedseqoptlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOptparenthesizedseqoptlist) {
			listener.exitOptparenthesizedseqoptlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOptparenthesizedseqoptlist) {
			return visitor.visitOptparenthesizedseqoptlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SeqoptlistContext extends ParserRuleContext {
	public seqoptelem(): SeqoptelemContext[];
	public seqoptelem(i: number): SeqoptelemContext;
	public seqoptelem(i?: number): SeqoptelemContext | SeqoptelemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SeqoptelemContext);
		} else {
			return this.getRuleContext(i, SeqoptelemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_seqoptlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSeqoptlist) {
			listener.enterSeqoptlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSeqoptlist) {
			listener.exitSeqoptlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSeqoptlist) {
			return visitor.visitSeqoptlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SeqoptelemContext extends ParserRuleContext {
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public simpletypename(): SimpletypenameContext | undefined {
		return this.tryGetRuleContext(0, SimpletypenameContext);
	}
	public KW_CACHE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CACHE, 0); }
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	public KW_CYCLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CYCLE, 0); }
	public KW_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INCREMENT, 0); }
	public opt_by(): Opt_byContext | undefined {
		return this.tryGetRuleContext(0, Opt_byContext);
	}
	public KW_MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MAXVALUE, 0); }
	public KW_MINVALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MINVALUE, 0); }
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_OWNED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OWNED, 0); }
	public KW_BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BY, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public KW_SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEQUENCE, 0); }
	public KW_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NAME, 0); }
	public KW_START(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_START, 0); }
	public opt_with(): Opt_withContext | undefined {
		return this.tryGetRuleContext(0, Opt_withContext);
	}
	public KW_RESTART(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESTART, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_seqoptelem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSeqoptelem) {
			listener.enterSeqoptelem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSeqoptelem) {
			listener.exitSeqoptelem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSeqoptelem) {
			return visitor.visitSeqoptelem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_byContext extends ParserRuleContext {
	public KW_BY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_by; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_by) {
			listener.enterOpt_by(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_by) {
			listener.exitOpt_by(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_by) {
			return visitor.visitOpt_by(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NumericonlyContext extends ParserRuleContext {
	public fconst(): FconstContext | undefined {
		return this.tryGetRuleContext(0, FconstContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.MINUS, 0); }
	public signediconst(): SignediconstContext | undefined {
		return this.tryGetRuleContext(0, SignediconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_numericonly; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterNumericonly) {
			listener.enterNumericonly(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitNumericonly) {
			listener.exitNumericonly(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitNumericonly) {
			return visitor.visitNumericonly(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Numericonly_listContext extends ParserRuleContext {
	public numericonly(): NumericonlyContext[];
	public numericonly(i: number): NumericonlyContext;
	public numericonly(i?: number): NumericonlyContext | NumericonlyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NumericonlyContext);
		} else {
			return this.getRuleContext(i, NumericonlyContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_numericonly_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterNumericonly_list) {
			listener.enterNumericonly_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitNumericonly_list) {
			listener.exitNumericonly_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitNumericonly_list) {
			return visitor.visitNumericonly_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateplangstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_LANGUAGE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public opt_or_replace(): Opt_or_replaceContext | undefined {
		return this.tryGetRuleContext(0, Opt_or_replaceContext);
	}
	public opt_trusted(): Opt_trustedContext | undefined {
		return this.tryGetRuleContext(0, Opt_trustedContext);
	}
	public opt_procedural(): Opt_proceduralContext | undefined {
		return this.tryGetRuleContext(0, Opt_proceduralContext);
	}
	public KW_HANDLER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_HANDLER, 0); }
	public handler_name(): Handler_nameContext | undefined {
		return this.tryGetRuleContext(0, Handler_nameContext);
	}
	public opt_inline_handler(): Opt_inline_handlerContext | undefined {
		return this.tryGetRuleContext(0, Opt_inline_handlerContext);
	}
	public opt_validator(): Opt_validatorContext | undefined {
		return this.tryGetRuleContext(0, Opt_validatorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createplangstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateplangstmt) {
			listener.enterCreateplangstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateplangstmt) {
			listener.exitCreateplangstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateplangstmt) {
			return visitor.visitCreateplangstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_trustedContext extends ParserRuleContext {
	public KW_TRUSTED(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TRUSTED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_trusted; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_trusted) {
			listener.enterOpt_trusted(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_trusted) {
			listener.exitOpt_trusted(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_trusted) {
			return visitor.visitOpt_trusted(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Handler_nameContext extends ParserRuleContext {
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public attrs(): AttrsContext | undefined {
		return this.tryGetRuleContext(0, AttrsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_handler_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterHandler_name) {
			listener.enterHandler_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitHandler_name) {
			listener.exitHandler_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitHandler_name) {
			return visitor.visitHandler_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_inline_handlerContext extends ParserRuleContext {
	public KW_INLINE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INLINE, 0); }
	public handler_name(): Handler_nameContext {
		return this.getRuleContext(0, Handler_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_inline_handler; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_inline_handler) {
			listener.enterOpt_inline_handler(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_inline_handler) {
			listener.exitOpt_inline_handler(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_inline_handler) {
			return visitor.visitOpt_inline_handler(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Validator_clauseContext extends ParserRuleContext {
	public KW_VALIDATOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VALIDATOR, 0); }
	public handler_name(): Handler_nameContext | undefined {
		return this.tryGetRuleContext(0, Handler_nameContext);
	}
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_validator_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterValidator_clause) {
			listener.enterValidator_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitValidator_clause) {
			listener.exitValidator_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitValidator_clause) {
			return visitor.visitValidator_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_validatorContext extends ParserRuleContext {
	public validator_clause(): Validator_clauseContext {
		return this.getRuleContext(0, Validator_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_validator; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_validator) {
			listener.enterOpt_validator(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_validator) {
			listener.exitOpt_validator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_validator) {
			return visitor.visitOpt_validator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_proceduralContext extends ParserRuleContext {
	public KW_PROCEDURAL(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PROCEDURAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_procedural; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_procedural) {
			listener.enterOpt_procedural(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_procedural) {
			listener.exitOpt_procedural(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_procedural) {
			return visitor.visitOpt_procedural(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatetablespacestmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_TABLESPACE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_LOCATION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_LOCATION, 0); }
	public sconst(): SconstContext {
		return this.getRuleContext(0, SconstContext);
	}
	public opttablespaceowner(): OpttablespaceownerContext | undefined {
		return this.tryGetRuleContext(0, OpttablespaceownerContext);
	}
	public opt_reloptions(): Opt_reloptionsContext | undefined {
		return this.tryGetRuleContext(0, Opt_reloptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createtablespacestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatetablespacestmt) {
			listener.enterCreatetablespacestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatetablespacestmt) {
			listener.exitCreatetablespacestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatetablespacestmt) {
			return visitor.visitCreatetablespacestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpttablespaceownerContext extends ParserRuleContext {
	public KW_OWNER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OWNER, 0); }
	public rolespec(): RolespecContext {
		return this.getRuleContext(0, RolespecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opttablespaceowner; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpttablespaceowner) {
			listener.enterOpttablespaceowner(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpttablespaceowner) {
			listener.exitOpttablespaceowner(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpttablespaceowner) {
			return visitor.visitOpttablespaceowner(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DroptablespacestmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_TABLESPACE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_droptablespacestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDroptablespacestmt) {
			listener.enterDroptablespacestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDroptablespacestmt) {
			listener.exitDroptablespacestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDroptablespacestmt) {
			return visitor.visitDroptablespacestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateextensionstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_EXTENSION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXTENSION, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public create_extension_opt_list(): Create_extension_opt_listContext {
		return this.getRuleContext(0, Create_extension_opt_listContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public opt_with(): Opt_withContext | undefined {
		return this.tryGetRuleContext(0, Opt_withContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createextensionstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateextensionstmt) {
			listener.enterCreateextensionstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateextensionstmt) {
			listener.exitCreateextensionstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateextensionstmt) {
			return visitor.visitCreateextensionstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_extension_opt_listContext extends ParserRuleContext {
	public create_extension_opt_item(): Create_extension_opt_itemContext[];
	public create_extension_opt_item(i: number): Create_extension_opt_itemContext;
	public create_extension_opt_item(i?: number): Create_extension_opt_itemContext | Create_extension_opt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Create_extension_opt_itemContext);
		} else {
			return this.getRuleContext(i, Create_extension_opt_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_create_extension_opt_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_extension_opt_list) {
			listener.enterCreate_extension_opt_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_extension_opt_list) {
			listener.exitCreate_extension_opt_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_extension_opt_list) {
			return visitor.visitCreate_extension_opt_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_extension_opt_itemContext extends ParserRuleContext {
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public KW_VERSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VERSION, 0); }
	public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | undefined {
		return this.tryGetRuleContext(0, Nonreservedword_or_sconstContext);
	}
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CASCADE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_create_extension_opt_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_extension_opt_item) {
			listener.enterCreate_extension_opt_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_extension_opt_item) {
			listener.exitCreate_extension_opt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_extension_opt_item) {
			return visitor.visitCreate_extension_opt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterextensionstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_EXTENSION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXTENSION, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_UPDATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_UPDATE, 0); }
	public alter_extension_opt_list(): Alter_extension_opt_listContext {
		return this.getRuleContext(0, Alter_extension_opt_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterextensionstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterextensionstmt) {
			listener.enterAlterextensionstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterextensionstmt) {
			listener.exitAlterextensionstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterextensionstmt) {
			return visitor.visitAlterextensionstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_extension_opt_listContext extends ParserRuleContext {
	public alter_extension_opt_item(): Alter_extension_opt_itemContext[];
	public alter_extension_opt_item(i: number): Alter_extension_opt_itemContext;
	public alter_extension_opt_item(i?: number): Alter_extension_opt_itemContext | Alter_extension_opt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_extension_opt_itemContext);
		} else {
			return this.getRuleContext(i, Alter_extension_opt_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_extension_opt_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_extension_opt_list) {
			listener.enterAlter_extension_opt_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_extension_opt_list) {
			listener.exitAlter_extension_opt_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_extension_opt_list) {
			return visitor.visitAlter_extension_opt_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_extension_opt_itemContext extends ParserRuleContext {
	public KW_TO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TO, 0); }
	public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext {
		return this.getRuleContext(0, Nonreservedword_or_sconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_extension_opt_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_extension_opt_item) {
			listener.enterAlter_extension_opt_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_extension_opt_item) {
			listener.exitAlter_extension_opt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_extension_opt_item) {
			return visitor.visitAlter_extension_opt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterextensioncontentsstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_EXTENSION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXTENSION, 0); }
	public name(): NameContext[];
	public name(i: number): NameContext;
	public name(i?: number): NameContext | NameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameContext);
		} else {
			return this.getRuleContext(i, NameContext);
		}
	}
	public add_drop(): Add_dropContext {
		return this.getRuleContext(0, Add_dropContext);
	}
	public object_type_name(): Object_type_nameContext | undefined {
		return this.tryGetRuleContext(0, Object_type_nameContext);
	}
	public object_type_any_name(): Object_type_any_nameContext | undefined {
		return this.tryGetRuleContext(0, Object_type_any_nameContext);
	}
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public KW_AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AGGREGATE, 0); }
	public aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Aggregate_with_argtypesContext);
	}
	public KW_CAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CAST, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public typename(): TypenameContext[];
	public typename(i: number): TypenameContext;
	public typename(i?: number): TypenameContext | TypenameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypenameContext);
		} else {
			return this.getRuleContext(i, TypenameContext);
		}
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOMAIN, 0); }
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public function_with_argtypes(): Function_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Function_with_argtypesContext);
	}
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public operator_with_argtypes(): Operator_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Operator_with_argtypesContext);
	}
	public KW_CLASS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CLASS, 0); }
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public KW_FAMILY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FAMILY, 0); }
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public KW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINE, 0); }
	public KW_TRANSFORM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRANSFORM, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterextensioncontentsstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterextensioncontentsstmt) {
			listener.enterAlterextensioncontentsstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterextensioncontentsstmt) {
			listener.exitAlterextensioncontentsstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterextensioncontentsstmt) {
			return visitor.visitAlterextensioncontentsstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatefdwstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_FOREIGN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_DATA(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DATA, 0); }
	public KW_WRAPPER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WRAPPER, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public opt_fdw_options(): Opt_fdw_optionsContext | undefined {
		return this.tryGetRuleContext(0, Opt_fdw_optionsContext);
	}
	public create_generic_options(): Create_generic_optionsContext | undefined {
		return this.tryGetRuleContext(0, Create_generic_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createfdwstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatefdwstmt) {
			listener.enterCreatefdwstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatefdwstmt) {
			listener.exitCreatefdwstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatefdwstmt) {
			return visitor.visitCreatefdwstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fdw_optionContext extends ParserRuleContext {
	public KW_HANDLER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_HANDLER, 0); }
	public handler_name(): Handler_nameContext | undefined {
		return this.tryGetRuleContext(0, Handler_nameContext);
	}
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_VALIDATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALIDATOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_fdw_option; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFdw_option) {
			listener.enterFdw_option(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFdw_option) {
			listener.exitFdw_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFdw_option) {
			return visitor.visitFdw_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fdw_optionsContext extends ParserRuleContext {
	public fdw_option(): Fdw_optionContext[];
	public fdw_option(i: number): Fdw_optionContext;
	public fdw_option(i?: number): Fdw_optionContext | Fdw_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Fdw_optionContext);
		} else {
			return this.getRuleContext(i, Fdw_optionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_fdw_options; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFdw_options) {
			listener.enterFdw_options(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFdw_options) {
			listener.exitFdw_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFdw_options) {
			return visitor.visitFdw_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_fdw_optionsContext extends ParserRuleContext {
	public fdw_options(): Fdw_optionsContext {
		return this.getRuleContext(0, Fdw_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_fdw_options; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_fdw_options) {
			listener.enterOpt_fdw_options(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_fdw_options) {
			listener.exitOpt_fdw_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_fdw_options) {
			return visitor.visitOpt_fdw_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterfdwstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_FOREIGN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_DATA(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DATA, 0); }
	public KW_WRAPPER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WRAPPER, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public alter_generic_options(): Alter_generic_optionsContext | undefined {
		return this.tryGetRuleContext(0, Alter_generic_optionsContext);
	}
	public opt_fdw_options(): Opt_fdw_optionsContext | undefined {
		return this.tryGetRuleContext(0, Opt_fdw_optionsContext);
	}
	public fdw_options(): Fdw_optionsContext | undefined {
		return this.tryGetRuleContext(0, Fdw_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterfdwstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterfdwstmt) {
			listener.enterAlterfdwstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterfdwstmt) {
			listener.exitAlterfdwstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterfdwstmt) {
			return visitor.visitAlterfdwstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Create_generic_optionsContext extends ParserRuleContext {
	public KW_OPTIONS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPTIONS, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public generic_option_list(): Generic_option_listContext {
		return this.getRuleContext(0, Generic_option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_create_generic_options; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreate_generic_options) {
			listener.enterCreate_generic_options(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreate_generic_options) {
			listener.exitCreate_generic_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreate_generic_options) {
			return visitor.visitCreate_generic_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Generic_option_listContext extends ParserRuleContext {
	public generic_option_elem(): Generic_option_elemContext[];
	public generic_option_elem(i: number): Generic_option_elemContext;
	public generic_option_elem(i?: number): Generic_option_elemContext | Generic_option_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Generic_option_elemContext);
		} else {
			return this.getRuleContext(i, Generic_option_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_generic_option_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGeneric_option_list) {
			listener.enterGeneric_option_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGeneric_option_list) {
			listener.exitGeneric_option_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGeneric_option_list) {
			return visitor.visitGeneric_option_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_generic_optionsContext extends ParserRuleContext {
	public KW_OPTIONS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPTIONS, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public alter_generic_option_list(): Alter_generic_option_listContext {
		return this.getRuleContext(0, Alter_generic_option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_generic_options; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_generic_options) {
			listener.enterAlter_generic_options(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_generic_options) {
			listener.exitAlter_generic_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_generic_options) {
			return visitor.visitAlter_generic_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_generic_option_listContext extends ParserRuleContext {
	public alter_generic_option_elem(): Alter_generic_option_elemContext[];
	public alter_generic_option_elem(i: number): Alter_generic_option_elemContext;
	public alter_generic_option_elem(i?: number): Alter_generic_option_elemContext | Alter_generic_option_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Alter_generic_option_elemContext);
		} else {
			return this.getRuleContext(i, Alter_generic_option_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_generic_option_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_generic_option_list) {
			listener.enterAlter_generic_option_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_generic_option_list) {
			listener.exitAlter_generic_option_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_generic_option_list) {
			return visitor.visitAlter_generic_option_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alter_generic_option_elemContext extends ParserRuleContext {
	public generic_option_elem(): Generic_option_elemContext {
		return this.getRuleContext(0, Generic_option_elemContext);
	}
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADD, 0); }
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alter_generic_option_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlter_generic_option_elem) {
			listener.enterAlter_generic_option_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlter_generic_option_elem) {
			listener.exitAlter_generic_option_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlter_generic_option_elem) {
			return visitor.visitAlter_generic_option_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Generic_option_elemContext extends ParserRuleContext {
	public generic_option_name(): Generic_option_nameContext {
		return this.getRuleContext(0, Generic_option_nameContext);
	}
	public generic_option_arg(): Generic_option_argContext {
		return this.getRuleContext(0, Generic_option_argContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_generic_option_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGeneric_option_elem) {
			listener.enterGeneric_option_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGeneric_option_elem) {
			listener.exitGeneric_option_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGeneric_option_elem) {
			return visitor.visitGeneric_option_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Generic_option_nameContext extends ParserRuleContext {
	public collabel(): CollabelContext {
		return this.getRuleContext(0, CollabelContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_generic_option_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGeneric_option_name) {
			listener.enterGeneric_option_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGeneric_option_name) {
			listener.exitGeneric_option_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGeneric_option_name) {
			return visitor.visitGeneric_option_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Generic_option_argContext extends ParserRuleContext {
	public sconst(): SconstContext {
		return this.getRuleContext(0, SconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_generic_option_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGeneric_option_arg) {
			listener.enterGeneric_option_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGeneric_option_arg) {
			listener.exitGeneric_option_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGeneric_option_arg) {
			return visitor.visitGeneric_option_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateforeignserverstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_SERVER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SERVER, 0); }
	public name(): NameContext[];
	public name(i: number): NameContext;
	public name(i?: number): NameContext | NameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameContext);
		} else {
			return this.getRuleContext(i, NameContext);
		}
	}
	public KW_FOREIGN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_DATA(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DATA, 0); }
	public KW_WRAPPER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WRAPPER, 0); }
	public opt_type(): Opt_typeContext | undefined {
		return this.tryGetRuleContext(0, Opt_typeContext);
	}
	public opt_foreign_server_version(): Opt_foreign_server_versionContext | undefined {
		return this.tryGetRuleContext(0, Opt_foreign_server_versionContext);
	}
	public create_generic_options(): Create_generic_optionsContext | undefined {
		return this.tryGetRuleContext(0, Create_generic_optionsContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createforeignserverstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateforeignserverstmt) {
			listener.enterCreateforeignserverstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateforeignserverstmt) {
			listener.exitCreateforeignserverstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateforeignserverstmt) {
			return visitor.visitCreateforeignserverstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_typeContext extends ParserRuleContext {
	public KW_TYPE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TYPE, 0); }
	public sconst(): SconstContext {
		return this.getRuleContext(0, SconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_type; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_type) {
			listener.enterOpt_type(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_type) {
			listener.exitOpt_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_type) {
			return visitor.visitOpt_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Foreign_server_versionContext extends ParserRuleContext {
	public KW_VERSION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VERSION, 0); }
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_foreign_server_version; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterForeign_server_version) {
			listener.enterForeign_server_version(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitForeign_server_version) {
			listener.exitForeign_server_version(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitForeign_server_version) {
			return visitor.visitForeign_server_version(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_foreign_server_versionContext extends ParserRuleContext {
	public foreign_server_version(): Foreign_server_versionContext {
		return this.getRuleContext(0, Foreign_server_versionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_foreign_server_version; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_foreign_server_version) {
			listener.enterOpt_foreign_server_version(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_foreign_server_version) {
			listener.exitOpt_foreign_server_version(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_foreign_server_version) {
			return visitor.visitOpt_foreign_server_version(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterforeignserverstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_SERVER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SERVER, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public alter_generic_options(): Alter_generic_optionsContext | undefined {
		return this.tryGetRuleContext(0, Alter_generic_optionsContext);
	}
	public foreign_server_version(): Foreign_server_versionContext | undefined {
		return this.tryGetRuleContext(0, Foreign_server_versionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterforeignserverstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterforeignserverstmt) {
			listener.enterAlterforeignserverstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterforeignserverstmt) {
			listener.exitAlterforeignserverstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterforeignserverstmt) {
			return visitor.visitAlterforeignserverstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateforeigntablestmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_FOREIGN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_TABLE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TABLE, 0); }
	public qualified_name(): Qualified_nameContext[];
	public qualified_name(i: number): Qualified_nameContext;
	public qualified_name(i?: number): Qualified_nameContext | Qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_nameContext);
		} else {
			return this.getRuleContext(i, Qualified_nameContext);
		}
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_SERVER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SERVER, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public opttableelementlist(): OpttableelementlistContext | undefined {
		return this.tryGetRuleContext(0, OpttableelementlistContext);
	}
	public optinherit(): OptinheritContext | undefined {
		return this.tryGetRuleContext(0, OptinheritContext);
	}
	public create_generic_options(): Create_generic_optionsContext | undefined {
		return this.tryGetRuleContext(0, Create_generic_optionsContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public KW_PARTITION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARTITION, 0); }
	public KW_OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OF, 0); }
	public partitionboundspec(): PartitionboundspecContext | undefined {
		return this.tryGetRuleContext(0, PartitionboundspecContext);
	}
	public opttypedtableelementlist(): OpttypedtableelementlistContext | undefined {
		return this.tryGetRuleContext(0, OpttypedtableelementlistContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createforeigntablestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateforeigntablestmt) {
			listener.enterCreateforeigntablestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateforeigntablestmt) {
			listener.exitCreateforeigntablestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateforeigntablestmt) {
			return visitor.visitCreateforeigntablestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ImportforeignschemastmtContext extends ParserRuleContext {
	public KW_IMPORT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_IMPORT, 0); }
	public KW_FOREIGN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_SCHEMA(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public name(): NameContext[];
	public name(i: number): NameContext;
	public name(i?: number): NameContext | NameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameContext);
		} else {
			return this.getRuleContext(i, NameContext);
		}
	}
	public KW_FROM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_SERVER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SERVER, 0); }
	public KW_INTO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INTO, 0); }
	public import_qualification(): Import_qualificationContext | undefined {
		return this.tryGetRuleContext(0, Import_qualificationContext);
	}
	public create_generic_options(): Create_generic_optionsContext | undefined {
		return this.tryGetRuleContext(0, Create_generic_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_importforeignschemastmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterImportforeignschemastmt) {
			listener.enterImportforeignschemastmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitImportforeignschemastmt) {
			listener.exitImportforeignschemastmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitImportforeignschemastmt) {
			return visitor.visitImportforeignschemastmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Import_qualification_typeContext extends ParserRuleContext {
	public KW_LIMIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LIMIT, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	public KW_EXCEPT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXCEPT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_import_qualification_type; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterImport_qualification_type) {
			listener.enterImport_qualification_type(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitImport_qualification_type) {
			listener.exitImport_qualification_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitImport_qualification_type) {
			return visitor.visitImport_qualification_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Import_qualificationContext extends ParserRuleContext {
	public import_qualification_type(): Import_qualification_typeContext {
		return this.getRuleContext(0, Import_qualification_typeContext);
	}
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public relation_expr_list(): Relation_expr_listContext {
		return this.getRuleContext(0, Relation_expr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_import_qualification; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterImport_qualification) {
			listener.enterImport_qualification(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitImport_qualification) {
			listener.exitImport_qualification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitImport_qualification) {
			return visitor.visitImport_qualification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateusermappingstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_USER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USER, 0); }
	public KW_MAPPING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_MAPPING, 0); }
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public auth_ident(): Auth_identContext {
		return this.getRuleContext(0, Auth_identContext);
	}
	public KW_SERVER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SERVER, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public create_generic_options(): Create_generic_optionsContext | undefined {
		return this.tryGetRuleContext(0, Create_generic_optionsContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createusermappingstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateusermappingstmt) {
			listener.enterCreateusermappingstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateusermappingstmt) {
			listener.exitCreateusermappingstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateusermappingstmt) {
			return visitor.visitCreateusermappingstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Auth_identContext extends ParserRuleContext {
	public rolespec(): RolespecContext | undefined {
		return this.tryGetRuleContext(0, RolespecContext);
	}
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_auth_ident; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAuth_ident) {
			listener.enterAuth_ident(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAuth_ident) {
			listener.exitAuth_ident(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAuth_ident) {
			return visitor.visitAuth_ident(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropusermappingstmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_USER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USER, 0); }
	public KW_MAPPING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_MAPPING, 0); }
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public auth_ident(): Auth_identContext {
		return this.getRuleContext(0, Auth_identContext);
	}
	public KW_SERVER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SERVER, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_dropusermappingstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDropusermappingstmt) {
			listener.enterDropusermappingstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDropusermappingstmt) {
			listener.exitDropusermappingstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDropusermappingstmt) {
			return visitor.visitDropusermappingstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterusermappingstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_USER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USER, 0); }
	public KW_MAPPING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_MAPPING, 0); }
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public auth_ident(): Auth_identContext {
		return this.getRuleContext(0, Auth_identContext);
	}
	public KW_SERVER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SERVER, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public alter_generic_options(): Alter_generic_optionsContext {
		return this.getRuleContext(0, Alter_generic_optionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterusermappingstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterusermappingstmt) {
			listener.enterAlterusermappingstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterusermappingstmt) {
			listener.exitAlterusermappingstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterusermappingstmt) {
			return visitor.visitAlterusermappingstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatepolicystmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_POLICY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_POLICY, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public rowsecuritydefaultpermissive(): RowsecuritydefaultpermissiveContext | undefined {
		return this.tryGetRuleContext(0, RowsecuritydefaultpermissiveContext);
	}
	public rowsecuritydefaultforcmd(): RowsecuritydefaultforcmdContext | undefined {
		return this.tryGetRuleContext(0, RowsecuritydefaultforcmdContext);
	}
	public rowsecuritydefaulttorole(): RowsecuritydefaulttoroleContext | undefined {
		return this.tryGetRuleContext(0, RowsecuritydefaulttoroleContext);
	}
	public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext | undefined {
		return this.tryGetRuleContext(0, RowsecurityoptionalexprContext);
	}
	public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext | undefined {
		return this.tryGetRuleContext(0, RowsecurityoptionalwithcheckContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createpolicystmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatepolicystmt) {
			listener.enterCreatepolicystmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatepolicystmt) {
			listener.exitCreatepolicystmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatepolicystmt) {
			return visitor.visitCreatepolicystmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterpolicystmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_POLICY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_POLICY, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public rowsecurityoptionaltorole(): RowsecurityoptionaltoroleContext | undefined {
		return this.tryGetRuleContext(0, RowsecurityoptionaltoroleContext);
	}
	public rowsecurityoptionalexpr(): RowsecurityoptionalexprContext | undefined {
		return this.tryGetRuleContext(0, RowsecurityoptionalexprContext);
	}
	public rowsecurityoptionalwithcheck(): RowsecurityoptionalwithcheckContext | undefined {
		return this.tryGetRuleContext(0, RowsecurityoptionalwithcheckContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterpolicystmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterpolicystmt) {
			listener.enterAlterpolicystmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterpolicystmt) {
			listener.exitAlterpolicystmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterpolicystmt) {
			return visitor.visitAlterpolicystmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowsecurityoptionalexprContext extends ParserRuleContext {
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_rowsecurityoptionalexpr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRowsecurityoptionalexpr) {
			listener.enterRowsecurityoptionalexpr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRowsecurityoptionalexpr) {
			listener.exitRowsecurityoptionalexpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRowsecurityoptionalexpr) {
			return visitor.visitRowsecurityoptionalexpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowsecurityoptionalwithcheckContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_CHECK(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CHECK, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_rowsecurityoptionalwithcheck; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRowsecurityoptionalwithcheck) {
			listener.enterRowsecurityoptionalwithcheck(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRowsecurityoptionalwithcheck) {
			listener.exitRowsecurityoptionalwithcheck(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRowsecurityoptionalwithcheck) {
			return visitor.visitRowsecurityoptionalwithcheck(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowsecuritydefaulttoroleContext extends ParserRuleContext {
	public KW_TO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TO, 0); }
	public role_list(): Role_listContext {
		return this.getRuleContext(0, Role_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_rowsecuritydefaulttorole; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRowsecuritydefaulttorole) {
			listener.enterRowsecuritydefaulttorole(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRowsecuritydefaulttorole) {
			listener.exitRowsecuritydefaulttorole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRowsecuritydefaulttorole) {
			return visitor.visitRowsecuritydefaulttorole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowsecurityoptionaltoroleContext extends ParserRuleContext {
	public KW_TO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TO, 0); }
	public role_list(): Role_listContext {
		return this.getRuleContext(0, Role_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_rowsecurityoptionaltorole; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRowsecurityoptionaltorole) {
			listener.enterRowsecurityoptionaltorole(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRowsecurityoptionaltorole) {
			listener.exitRowsecurityoptionaltorole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRowsecurityoptionaltorole) {
			return visitor.visitRowsecurityoptionaltorole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowsecuritydefaultpermissiveContext extends ParserRuleContext {
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_rowsecuritydefaultpermissive; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRowsecuritydefaultpermissive) {
			listener.enterRowsecuritydefaultpermissive(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRowsecuritydefaultpermissive) {
			listener.exitRowsecuritydefaultpermissive(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRowsecuritydefaultpermissive) {
			return visitor.visitRowsecuritydefaultpermissive(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowsecuritydefaultforcmdContext extends ParserRuleContext {
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public row_security_cmd(): Row_security_cmdContext {
		return this.getRuleContext(0, Row_security_cmdContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_rowsecuritydefaultforcmd; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRowsecuritydefaultforcmd) {
			listener.enterRowsecuritydefaultforcmd(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRowsecuritydefaultforcmd) {
			listener.exitRowsecuritydefaultforcmd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRowsecuritydefaultforcmd) {
			return visitor.visitRowsecuritydefaultforcmd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Row_security_cmdContext extends ParserRuleContext {
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_SELECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SELECT, 0); }
	public KW_INSERT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INSERT, 0); }
	public KW_UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UPDATE, 0); }
	public KW_DELETE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DELETE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_row_security_cmd; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRow_security_cmd) {
			listener.enterRow_security_cmd(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRow_security_cmd) {
			listener.exitRow_security_cmd(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRow_security_cmd) {
			return visitor.visitRow_security_cmd(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateamstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_ACCESS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ACCESS, 0); }
	public KW_METHOD(): TerminalNode { return this.getToken(PostgreSQLParser.KW_METHOD, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_TYPE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TYPE, 0); }
	public am_type(): Am_typeContext {
		return this.getRuleContext(0, Am_typeContext);
	}
	public KW_HANDLER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_HANDLER, 0); }
	public handler_name(): Handler_nameContext {
		return this.getRuleContext(0, Handler_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createamstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateamstmt) {
			listener.enterCreateamstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateamstmt) {
			listener.exitCreateamstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateamstmt) {
			return visitor.visitCreateamstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Am_typeContext extends ParserRuleContext {
	public KW_INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INDEX, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_am_type; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAm_type) {
			listener.enterAm_type(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAm_type) {
			listener.exitAm_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAm_type) {
			return visitor.visitAm_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatetrigstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_TRIGGER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TRIGGER, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public triggeractiontime(): TriggeractiontimeContext {
		return this.getRuleContext(0, TriggeractiontimeContext);
	}
	public triggerevents(): TriggereventsContext {
		return this.getRuleContext(0, TriggereventsContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public KW_EXECUTE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXECUTE, 0); }
	public function_or_procedure(): Function_or_procedureContext {
		return this.getRuleContext(0, Function_or_procedureContext);
	}
	public func_name(): Func_nameContext {
		return this.getRuleContext(0, Func_nameContext);
	}
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public triggerfuncargs(): TriggerfuncargsContext {
		return this.getRuleContext(0, TriggerfuncargsContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public triggerreferencing(): TriggerreferencingContext | undefined {
		return this.tryGetRuleContext(0, TriggerreferencingContext);
	}
	public triggerforspec(): TriggerforspecContext | undefined {
		return this.tryGetRuleContext(0, TriggerforspecContext);
	}
	public triggerwhen(): TriggerwhenContext | undefined {
		return this.tryGetRuleContext(0, TriggerwhenContext);
	}
	public constraintattributespec(): ConstraintattributespecContext | undefined {
		return this.tryGetRuleContext(0, ConstraintattributespecContext);
	}
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINT, 0); }
	public optconstrfromtable(): OptconstrfromtableContext | undefined {
		return this.tryGetRuleContext(0, OptconstrfromtableContext);
	}
	public foreachrow(): ForeachrowContext | undefined {
		return this.tryGetRuleContext(0, ForeachrowContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createtrigstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatetrigstmt) {
			listener.enterCreatetrigstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatetrigstmt) {
			listener.exitCreatetrigstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatetrigstmt) {
			return visitor.visitCreatetrigstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggeractiontimeContext extends ParserRuleContext {
	public KW_BEFORE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BEFORE, 0); }
	public KW_AFTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AFTER, 0); }
	public KW_INSTEAD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INSTEAD, 0); }
	public KW_OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggeractiontime; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggeractiontime) {
			listener.enterTriggeractiontime(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggeractiontime) {
			listener.exitTriggeractiontime(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggeractiontime) {
			return visitor.visitTriggeractiontime(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ForeachrowContext extends ParserRuleContext {
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public roworstatment(): RoworstatmentContext {
		return this.getRuleContext(0, RoworstatmentContext);
	}
	public KW_EACH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EACH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_foreachrow; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterForeachrow) {
			listener.enterForeachrow(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitForeachrow) {
			listener.exitForeachrow(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitForeachrow) {
			return visitor.visitForeachrow(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoworstatmentContext extends ParserRuleContext {
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROW, 0); }
	public KW_STATEMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STATEMENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_roworstatment; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRoworstatment) {
			listener.enterRoworstatment(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRoworstatment) {
			listener.exitRoworstatment(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRoworstatment) {
			return visitor.visitRoworstatment(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggereventsContext extends ParserRuleContext {
	public triggeroneevent(): TriggeroneeventContext[];
	public triggeroneevent(i: number): TriggeroneeventContext;
	public triggeroneevent(i?: number): TriggeroneeventContext | TriggeroneeventContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TriggeroneeventContext);
		} else {
			return this.getRuleContext(i, TriggeroneeventContext);
		}
	}
	public KW_OR(): TerminalNode[];
	public KW_OR(i: number): TerminalNode;
	public KW_OR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_OR);
		} else {
			return this.getToken(PostgreSQLParser.KW_OR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggerevents; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggerevents) {
			listener.enterTriggerevents(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggerevents) {
			listener.exitTriggerevents(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggerevents) {
			return visitor.visitTriggerevents(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggeroneeventContext extends ParserRuleContext {
	public KW_INSERT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INSERT, 0); }
	public KW_DELETE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DELETE, 0); }
	public KW_UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UPDATE, 0); }
	public KW_OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OF, 0); }
	public columnlist(): ColumnlistContext | undefined {
		return this.tryGetRuleContext(0, ColumnlistContext);
	}
	public KW_TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRUNCATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggeroneevent; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggeroneevent) {
			listener.enterTriggeroneevent(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggeroneevent) {
			listener.exitTriggeroneevent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggeroneevent) {
			return visitor.visitTriggeroneevent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerreferencingContext extends ParserRuleContext {
	public KW_REFERENCING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_REFERENCING, 0); }
	public triggertransitions(): TriggertransitionsContext {
		return this.getRuleContext(0, TriggertransitionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggerreferencing; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggerreferencing) {
			listener.enterTriggerreferencing(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggerreferencing) {
			listener.exitTriggerreferencing(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggerreferencing) {
			return visitor.visitTriggerreferencing(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggertransitionsContext extends ParserRuleContext {
	public triggertransition(): TriggertransitionContext[];
	public triggertransition(i: number): TriggertransitionContext;
	public triggertransition(i?: number): TriggertransitionContext | TriggertransitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TriggertransitionContext);
		} else {
			return this.getRuleContext(i, TriggertransitionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggertransitions; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggertransitions) {
			listener.enterTriggertransitions(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggertransitions) {
			listener.exitTriggertransitions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggertransitions) {
			return visitor.visitTriggertransitions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggertransitionContext extends ParserRuleContext {
	public transitionoldornew(): TransitionoldornewContext {
		return this.getRuleContext(0, TransitionoldornewContext);
	}
	public transitionrowortable(): TransitionrowortableContext {
		return this.getRuleContext(0, TransitionrowortableContext);
	}
	public transitionrelname(): TransitionrelnameContext {
		return this.getRuleContext(0, TransitionrelnameContext);
	}
	public opt_as(): Opt_asContext | undefined {
		return this.tryGetRuleContext(0, Opt_asContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggertransition; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggertransition) {
			listener.enterTriggertransition(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggertransition) {
			listener.exitTriggertransition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggertransition) {
			return visitor.visitTriggertransition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransitionoldornewContext extends ParserRuleContext {
	public KW_NEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NEW, 0); }
	public KW_OLD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OLD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_transitionoldornew; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTransitionoldornew) {
			listener.enterTransitionoldornew(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTransitionoldornew) {
			listener.exitTransitionoldornew(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTransitionoldornew) {
			return visitor.visitTransitionoldornew(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransitionrowortableContext extends ParserRuleContext {
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROW, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_transitionrowortable; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTransitionrowortable) {
			listener.enterTransitionrowortable(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTransitionrowortable) {
			listener.exitTransitionrowortable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTransitionrowortable) {
			return visitor.visitTransitionrowortable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransitionrelnameContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_transitionrelname; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTransitionrelname) {
			listener.enterTransitionrelname(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTransitionrelname) {
			listener.exitTransitionrelname(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTransitionrelname) {
			return visitor.visitTransitionrelname(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerforspecContext extends ParserRuleContext {
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public triggerfortype(): TriggerfortypeContext {
		return this.getRuleContext(0, TriggerfortypeContext);
	}
	public triggerforopteach(): TriggerforopteachContext | undefined {
		return this.tryGetRuleContext(0, TriggerforopteachContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggerforspec; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggerforspec) {
			listener.enterTriggerforspec(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggerforspec) {
			listener.exitTriggerforspec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggerforspec) {
			return visitor.visitTriggerforspec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerforopteachContext extends ParserRuleContext {
	public KW_EACH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EACH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggerforopteach; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggerforopteach) {
			listener.enterTriggerforopteach(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggerforopteach) {
			listener.exitTriggerforopteach(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggerforopteach) {
			return visitor.visitTriggerforopteach(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerfortypeContext extends ParserRuleContext {
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROW, 0); }
	public KW_STATEMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STATEMENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggerfortype; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggerfortype) {
			listener.enterTriggerfortype(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggerfortype) {
			listener.exitTriggerfortype(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggerfortype) {
			return visitor.visitTriggerfortype(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerwhenContext extends ParserRuleContext {
	public KW_WHEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHEN, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggerwhen; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggerwhen) {
			listener.enterTriggerwhen(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggerwhen) {
			listener.exitTriggerwhen(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggerwhen) {
			return visitor.visitTriggerwhen(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_or_procedureContext extends ParserRuleContext {
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_function_or_procedure; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunction_or_procedure) {
			listener.enterFunction_or_procedure(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunction_or_procedure) {
			listener.exitFunction_or_procedure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunction_or_procedure) {
			return visitor.visitFunction_or_procedure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerfuncargsContext extends ParserRuleContext {
	public triggerfuncarg(): TriggerfuncargContext[];
	public triggerfuncarg(i: number): TriggerfuncargContext;
	public triggerfuncarg(i?: number): TriggerfuncargContext | TriggerfuncargContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TriggerfuncargContext);
		} else {
			return this.getRuleContext(i, TriggerfuncargContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggerfuncargs; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggerfuncargs) {
			listener.enterTriggerfuncargs(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggerfuncargs) {
			listener.exitTriggerfuncargs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggerfuncargs) {
			return visitor.visitTriggerfuncargs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TriggerfuncargContext extends ParserRuleContext {
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public fconst(): FconstContext | undefined {
		return this.tryGetRuleContext(0, FconstContext);
	}
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public collabel(): CollabelContext | undefined {
		return this.tryGetRuleContext(0, CollabelContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_triggerfuncarg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTriggerfuncarg) {
			listener.enterTriggerfuncarg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTriggerfuncarg) {
			listener.exitTriggerfuncarg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTriggerfuncarg) {
			return visitor.visitTriggerfuncarg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OptconstrfromtableContext extends ParserRuleContext {
	public KW_FROM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FROM, 0); }
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_optconstrfromtable; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOptconstrfromtable) {
			listener.enterOptconstrfromtable(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOptconstrfromtable) {
			listener.exitOptconstrfromtable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOptconstrfromtable) {
			return visitor.visitOptconstrfromtable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstraintattributespecContext extends ParserRuleContext {
	public constraintattributeElem(): ConstraintattributeElemContext[];
	public constraintattributeElem(i: number): ConstraintattributeElemContext;
	public constraintattributeElem(i?: number): ConstraintattributeElemContext | ConstraintattributeElemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ConstraintattributeElemContext);
		} else {
			return this.getRuleContext(i, ConstraintattributeElemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_constraintattributespec; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterConstraintattributespec) {
			listener.enterConstraintattributespec(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitConstraintattributespec) {
			listener.exitConstraintattributespec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitConstraintattributespec) {
			return visitor.visitConstraintattributespec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstraintattributeElemContext extends ParserRuleContext {
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_DEFERRABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFERRABLE, 0); }
	public KW_INITIALLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INITIALLY, 0); }
	public KW_IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IMMEDIATE, 0); }
	public KW_DEFERRED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFERRED, 0); }
	public KW_VALID(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALID, 0); }
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_INHERIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INHERIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_constraintattributeElem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterConstraintattributeElem) {
			listener.enterConstraintattributeElem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitConstraintattributeElem) {
			listener.exitConstraintattributeElem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitConstraintattributeElem) {
			return visitor.visitConstraintattributeElem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateeventtrigstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_EVENT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EVENT, 0); }
	public KW_TRIGGER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TRIGGER, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public collabel(): CollabelContext {
		return this.getRuleContext(0, CollabelContext);
	}
	public KW_EXECUTE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXECUTE, 0); }
	public function_or_procedure(): Function_or_procedureContext {
		return this.getRuleContext(0, Function_or_procedureContext);
	}
	public func_name(): Func_nameContext {
		return this.getRuleContext(0, Func_nameContext);
	}
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_WHEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WHEN, 0); }
	public event_trigger_when_list(): Event_trigger_when_listContext | undefined {
		return this.tryGetRuleContext(0, Event_trigger_when_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createeventtrigstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateeventtrigstmt) {
			listener.enterCreateeventtrigstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateeventtrigstmt) {
			listener.exitCreateeventtrigstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateeventtrigstmt) {
			return visitor.visitCreateeventtrigstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Event_trigger_when_listContext extends ParserRuleContext {
	public event_trigger_when_item(): Event_trigger_when_itemContext[];
	public event_trigger_when_item(i: number): Event_trigger_when_itemContext;
	public event_trigger_when_item(i?: number): Event_trigger_when_itemContext | Event_trigger_when_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Event_trigger_when_itemContext);
		} else {
			return this.getRuleContext(i, Event_trigger_when_itemContext);
		}
	}
	public KW_AND(): TerminalNode[];
	public KW_AND(i: number): TerminalNode;
	public KW_AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_AND);
		} else {
			return this.getToken(PostgreSQLParser.KW_AND, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_event_trigger_when_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterEvent_trigger_when_list) {
			listener.enterEvent_trigger_when_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitEvent_trigger_when_list) {
			listener.exitEvent_trigger_when_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitEvent_trigger_when_list) {
			return visitor.visitEvent_trigger_when_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Event_trigger_when_itemContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public KW_IN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_IN, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public event_trigger_value_list(): Event_trigger_value_listContext {
		return this.getRuleContext(0, Event_trigger_value_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_event_trigger_when_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterEvent_trigger_when_item) {
			listener.enterEvent_trigger_when_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitEvent_trigger_when_item) {
			listener.exitEvent_trigger_when_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitEvent_trigger_when_item) {
			return visitor.visitEvent_trigger_when_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Event_trigger_value_listContext extends ParserRuleContext {
	public sconst(): SconstContext[];
	public sconst(i: number): SconstContext;
	public sconst(i?: number): SconstContext | SconstContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SconstContext);
		} else {
			return this.getRuleContext(i, SconstContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_event_trigger_value_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterEvent_trigger_value_list) {
			listener.enterEvent_trigger_value_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitEvent_trigger_value_list) {
			listener.exitEvent_trigger_value_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitEvent_trigger_value_list) {
			return visitor.visitEvent_trigger_value_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AltereventtrigstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_EVENT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EVENT, 0); }
	public KW_TRIGGER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TRIGGER, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public enable_trigger(): Enable_triggerContext {
		return this.getRuleContext(0, Enable_triggerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_altereventtrigstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAltereventtrigstmt) {
			listener.enterAltereventtrigstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAltereventtrigstmt) {
			listener.exitAltereventtrigstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAltereventtrigstmt) {
			return visitor.visitAltereventtrigstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Enable_triggerContext extends ParserRuleContext {
	public KW_ENABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ENABLE, 0); }
	public KW_REPLICA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REPLICA, 0); }
	public KW_ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALWAYS, 0); }
	public KW_DISABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DISABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_enable_trigger; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterEnable_trigger) {
			listener.enterEnable_trigger(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitEnable_trigger) {
			listener.exitEnable_trigger(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitEnable_trigger) {
			return visitor.visitEnable_trigger(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateassertionstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_ASSERTION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ASSERTION, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public KW_CHECK(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CHECK, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public constraintattributespec(): ConstraintattributespecContext {
		return this.getRuleContext(0, ConstraintattributespecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createassertionstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateassertionstmt) {
			listener.enterCreateassertionstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateassertionstmt) {
			listener.exitCreateassertionstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateassertionstmt) {
			return visitor.visitCreateassertionstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefinestmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AGGREGATE, 0); }
	public func_name(): Func_nameContext | undefined {
		return this.tryGetRuleContext(0, Func_nameContext);
	}
	public aggr_args(): Aggr_argsContext | undefined {
		return this.tryGetRuleContext(0, Aggr_argsContext);
	}
	public definition(): DefinitionContext | undefined {
		return this.tryGetRuleContext(0, DefinitionContext);
	}
	public opt_or_replace(): Opt_or_replaceContext | undefined {
		return this.tryGetRuleContext(0, Opt_or_replaceContext);
	}
	public old_aggr_definition(): Old_aggr_definitionContext | undefined {
		return this.tryGetRuleContext(0, Old_aggr_definitionContext);
	}
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public any_operator(): Any_operatorContext | undefined {
		return this.tryGetRuleContext(0, Any_operatorContext);
	}
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public any_name(): Any_nameContext[];
	public any_name(i: number): Any_nameContext;
	public any_name(i?: number): Any_nameContext | Any_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Any_nameContext);
		} else {
			return this.getRuleContext(i, Any_nameContext);
		}
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opttablefuncelementlist(): OpttablefuncelementlistContext | undefined {
		return this.tryGetRuleContext(0, OpttablefuncelementlistContext);
	}
	public KW_ENUM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ENUM, 0); }
	public opt_enum_val_list(): Opt_enum_val_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_enum_val_listContext);
	}
	public KW_RANGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RANGE, 0); }
	public KW_TEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEXT, 0); }
	public KW_SEARCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEARCH, 0); }
	public KW_PARSER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARSER, 0); }
	public KW_DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DICTIONARY, 0); }
	public KW_TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMPLATE, 0); }
	public KW_CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONFIGURATION, 0); }
	public KW_COLLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATION, 0); }
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_definestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDefinestmt) {
			listener.enterDefinestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDefinestmt) {
			listener.exitDefinestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDefinestmt) {
			return visitor.visitDefinestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefinitionContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public def_list(): Def_listContext {
		return this.getRuleContext(0, Def_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_definition; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDefinition) {
			listener.enterDefinition(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDefinition) {
			listener.exitDefinition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDefinition) {
			return visitor.visitDefinition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Def_listContext extends ParserRuleContext {
	public def_elem(): Def_elemContext[];
	public def_elem(i: number): Def_elemContext;
	public def_elem(i?: number): Def_elemContext | Def_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Def_elemContext);
		} else {
			return this.getRuleContext(i, Def_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_def_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDef_list) {
			listener.enterDef_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDef_list) {
			listener.exitDef_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDef_list) {
			return visitor.visitDef_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Def_elemContext extends ParserRuleContext {
	public collabel(): CollabelContext {
		return this.getRuleContext(0, CollabelContext);
	}
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EQUAL, 0); }
	public def_arg(): Def_argContext | undefined {
		return this.tryGetRuleContext(0, Def_argContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_def_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDef_elem) {
			listener.enterDef_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDef_elem) {
			listener.exitDef_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDef_elem) {
			return visitor.visitDef_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Def_argContext extends ParserRuleContext {
	public func_type(): Func_typeContext | undefined {
		return this.tryGetRuleContext(0, Func_typeContext);
	}
	public reserved_keyword(): Reserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Reserved_keywordContext);
	}
	public qual_all_op(): Qual_all_opContext | undefined {
		return this.tryGetRuleContext(0, Qual_all_opContext);
	}
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public KW_NONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NONE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_def_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDef_arg) {
			listener.enterDef_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDef_arg) {
			listener.exitDef_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDef_arg) {
			return visitor.visitDef_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Old_aggr_definitionContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public old_aggr_list(): Old_aggr_listContext {
		return this.getRuleContext(0, Old_aggr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_old_aggr_definition; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOld_aggr_definition) {
			listener.enterOld_aggr_definition(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOld_aggr_definition) {
			listener.exitOld_aggr_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOld_aggr_definition) {
			return visitor.visitOld_aggr_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Old_aggr_listContext extends ParserRuleContext {
	public old_aggr_elem(): Old_aggr_elemContext[];
	public old_aggr_elem(i: number): Old_aggr_elemContext;
	public old_aggr_elem(i?: number): Old_aggr_elemContext | Old_aggr_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Old_aggr_elemContext);
		} else {
			return this.getRuleContext(i, Old_aggr_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_old_aggr_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOld_aggr_list) {
			listener.enterOld_aggr_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOld_aggr_list) {
			listener.exitOld_aggr_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOld_aggr_list) {
			return visitor.visitOld_aggr_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Old_aggr_elemContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public EQUAL(): TerminalNode { return this.getToken(PostgreSQLParser.EQUAL, 0); }
	public def_arg(): Def_argContext {
		return this.getRuleContext(0, Def_argContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_old_aggr_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOld_aggr_elem) {
			listener.enterOld_aggr_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOld_aggr_elem) {
			listener.exitOld_aggr_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOld_aggr_elem) {
			return visitor.visitOld_aggr_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_enum_val_listContext extends ParserRuleContext {
	public enum_val_list(): Enum_val_listContext {
		return this.getRuleContext(0, Enum_val_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_enum_val_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_enum_val_list) {
			listener.enterOpt_enum_val_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_enum_val_list) {
			listener.exitOpt_enum_val_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_enum_val_list) {
			return visitor.visitOpt_enum_val_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Enum_val_listContext extends ParserRuleContext {
	public sconst(): SconstContext[];
	public sconst(i: number): SconstContext;
	public sconst(i?: number): SconstContext | SconstContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SconstContext);
		} else {
			return this.getRuleContext(i, SconstContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_enum_val_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterEnum_val_list) {
			listener.enterEnum_val_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitEnum_val_list) {
			listener.exitEnum_val_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitEnum_val_list) {
			return visitor.visitEnum_val_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterenumstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_TYPE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TYPE, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADD, 0); }
	public KW_VALUE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VALUE, 0); }
	public sconst(): SconstContext[];
	public sconst(i: number): SconstContext;
	public sconst(i?: number): SconstContext | SconstContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SconstContext);
		} else {
			return this.getRuleContext(i, SconstContext);
		}
	}
	public opt_if_not_exists(): Opt_if_not_existsContext | undefined {
		return this.tryGetRuleContext(0, Opt_if_not_existsContext);
	}
	public KW_BEFORE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BEFORE, 0); }
	public KW_AFTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AFTER, 0); }
	public KW_RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RENAME, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterenumstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterenumstmt) {
			listener.enterAlterenumstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterenumstmt) {
			listener.exitAlterenumstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterenumstmt) {
			return visitor.visitAlterenumstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_if_not_existsContext extends ParserRuleContext {
	public KW_IF(): TerminalNode { return this.getToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_if_not_exists; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_if_not_exists) {
			listener.enterOpt_if_not_exists(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_if_not_exists) {
			listener.exitOpt_if_not_exists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_if_not_exists) {
			return visitor.visitOpt_if_not_exists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateopclassstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public KW_CLASS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CLASS, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_TYPE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TYPE, 0); }
	public typename(): TypenameContext {
		return this.getRuleContext(0, TypenameContext);
	}
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public opclass_item_list(): Opclass_item_listContext {
		return this.getRuleContext(0, Opclass_item_listContext);
	}
	public opt_default(): Opt_defaultContext | undefined {
		return this.tryGetRuleContext(0, Opt_defaultContext);
	}
	public opt_opfamily(): Opt_opfamilyContext | undefined {
		return this.tryGetRuleContext(0, Opt_opfamilyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createopclassstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateopclassstmt) {
			listener.enterCreateopclassstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateopclassstmt) {
			listener.exitCreateopclassstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateopclassstmt) {
			return visitor.visitCreateopclassstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opclass_item_listContext extends ParserRuleContext {
	public opclass_item(): Opclass_itemContext[];
	public opclass_item(i: number): Opclass_itemContext;
	public opclass_item(i?: number): Opclass_itemContext | Opclass_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Opclass_itemContext);
		} else {
			return this.getRuleContext(i, Opclass_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opclass_item_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpclass_item_list) {
			listener.enterOpclass_item_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpclass_item_list) {
			listener.exitOpclass_item_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpclass_item_list) {
			return visitor.visitOpclass_item_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opclass_itemContext extends ParserRuleContext {
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public any_operator(): Any_operatorContext | undefined {
		return this.tryGetRuleContext(0, Any_operatorContext);
	}
	public opclass_purpose(): Opclass_purposeContext | undefined {
		return this.tryGetRuleContext(0, Opclass_purposeContext);
	}
	public opt_recheck(): Opt_recheckContext | undefined {
		return this.tryGetRuleContext(0, Opt_recheckContext);
	}
	public operator_with_argtypes(): Operator_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Operator_with_argtypesContext);
	}
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public function_with_argtypes(): Function_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Function_with_argtypesContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public type_list(): Type_listContext | undefined {
		return this.tryGetRuleContext(0, Type_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_STORAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STORAGE, 0); }
	public typename(): TypenameContext | undefined {
		return this.tryGetRuleContext(0, TypenameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opclass_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpclass_item) {
			listener.enterOpclass_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpclass_item) {
			listener.exitOpclass_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpclass_item) {
			return visitor.visitOpclass_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_defaultContext extends ParserRuleContext {
	public KW_DEFAULT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_default; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_default) {
			listener.enterOpt_default(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_default) {
			listener.exitOpt_default(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_default) {
			return visitor.visitOpt_default(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_opfamilyContext extends ParserRuleContext {
	public KW_FAMILY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FAMILY, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_opfamily; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_opfamily) {
			listener.enterOpt_opfamily(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_opfamily) {
			listener.exitOpt_opfamily(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_opfamily) {
			return visitor.visitOpt_opfamily(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opclass_purposeContext extends ParserRuleContext {
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_SEARCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEARCH, 0); }
	public KW_ORDER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ORDER, 0); }
	public KW_BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BY, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opclass_purpose; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpclass_purpose) {
			listener.enterOpclass_purpose(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpclass_purpose) {
			listener.exitOpclass_purpose(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpclass_purpose) {
			return visitor.visitOpclass_purpose(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_recheckContext extends ParserRuleContext {
	public KW_RECHECK(): TerminalNode { return this.getToken(PostgreSQLParser.KW_RECHECK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_recheck; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_recheck) {
			listener.enterOpt_recheck(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_recheck) {
			listener.exitOpt_recheck(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_recheck) {
			return visitor.visitOpt_recheck(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateopfamilystmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public KW_FAMILY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FAMILY, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createopfamilystmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateopfamilystmt) {
			listener.enterCreateopfamilystmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateopfamilystmt) {
			listener.exitCreateopfamilystmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateopfamilystmt) {
			return visitor.visitCreateopfamilystmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlteropfamilystmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public KW_FAMILY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FAMILY, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADD, 0); }
	public opclass_item_list(): Opclass_item_listContext | undefined {
		return this.tryGetRuleContext(0, Opclass_item_listContext);
	}
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DROP, 0); }
	public opclass_drop_list(): Opclass_drop_listContext | undefined {
		return this.tryGetRuleContext(0, Opclass_drop_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alteropfamilystmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlteropfamilystmt) {
			listener.enterAlteropfamilystmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlteropfamilystmt) {
			listener.exitAlteropfamilystmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlteropfamilystmt) {
			return visitor.visitAlteropfamilystmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opclass_drop_listContext extends ParserRuleContext {
	public opclass_drop(): Opclass_dropContext[];
	public opclass_drop(i: number): Opclass_dropContext;
	public opclass_drop(i?: number): Opclass_dropContext | Opclass_dropContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Opclass_dropContext);
		} else {
			return this.getRuleContext(i, Opclass_dropContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opclass_drop_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpclass_drop_list) {
			listener.enterOpclass_drop_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpclass_drop_list) {
			listener.exitOpclass_drop_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpclass_drop_list) {
			return visitor.visitOpclass_drop_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opclass_dropContext extends ParserRuleContext {
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public iconst(): IconstContext {
		return this.getRuleContext(0, IconstContext);
	}
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public type_list(): Type_listContext {
		return this.getRuleContext(0, Type_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opclass_drop; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpclass_drop) {
			listener.enterOpclass_drop(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpclass_drop) {
			listener.exitOpclass_drop(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpclass_drop) {
			return visitor.visitOpclass_drop(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropopclassstmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public KW_CLASS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CLASS, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_dropopclassstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDropopclassstmt) {
			listener.enterDropopclassstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDropopclassstmt) {
			listener.exitDropopclassstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDropopclassstmt) {
			return visitor.visitDropopclassstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropopfamilystmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public KW_FAMILY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FAMILY, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_dropopfamilystmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDropopfamilystmt) {
			listener.enterDropopfamilystmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDropopfamilystmt) {
			listener.exitDropopfamilystmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDropopfamilystmt) {
			return visitor.visitDropopfamilystmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropownedstmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_OWNED(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OWNED, 0); }
	public KW_BY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BY, 0); }
	public role_list(): Role_listContext {
		return this.getRuleContext(0, Role_listContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_dropownedstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDropownedstmt) {
			listener.enterDropownedstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDropownedstmt) {
			listener.exitDropownedstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDropownedstmt) {
			return visitor.visitDropownedstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReassignownedstmtContext extends ParserRuleContext {
	public KW_REASSIGN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_REASSIGN, 0); }
	public KW_OWNED(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OWNED, 0); }
	public KW_BY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BY, 0); }
	public role_list(): Role_listContext {
		return this.getRuleContext(0, Role_listContext);
	}
	public KW_TO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TO, 0); }
	public rolespec(): RolespecContext {
		return this.getRuleContext(0, RolespecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_reassignownedstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReassignownedstmt) {
			listener.enterReassignownedstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReassignownedstmt) {
			listener.exitReassignownedstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReassignownedstmt) {
			return visitor.visitReassignownedstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropstmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public object_type_any_name(): Object_type_any_nameContext | undefined {
		return this.tryGetRuleContext(0, Object_type_any_nameContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public any_name_list(): Any_name_listContext | undefined {
		return this.tryGetRuleContext(0, Any_name_listContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public drop_type_name(): Drop_type_nameContext | undefined {
		return this.tryGetRuleContext(0, Drop_type_nameContext);
	}
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public object_type_name_on_any_name(): Object_type_name_on_any_nameContext | undefined {
		return this.tryGetRuleContext(0, Object_type_name_on_any_nameContext);
	}
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ON, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public type_name_list(): Type_name_listContext | undefined {
		return this.tryGetRuleContext(0, Type_name_listContext);
	}
	public KW_DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOMAIN, 0); }
	public KW_INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INDEX, 0); }
	public KW_CONCURRENTLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONCURRENTLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_dropstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDropstmt) {
			listener.enterDropstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDropstmt) {
			listener.exitDropstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDropstmt) {
			return visitor.visitDropstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Object_type_any_nameContext extends ParserRuleContext {
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public KW_SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEQUENCE, 0); }
	public KW_VIEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VIEW, 0); }
	public KW_MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MATERIALIZED, 0); }
	public KW_INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INDEX, 0); }
	public KW_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_COLLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATION, 0); }
	public KW_CONVERSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONVERSION, 0); }
	public KW_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STATISTICS, 0); }
	public KW_TEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEXT, 0); }
	public KW_SEARCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEARCH, 0); }
	public KW_PARSER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARSER, 0); }
	public KW_DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DICTIONARY, 0); }
	public KW_TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMPLATE, 0); }
	public KW_CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONFIGURATION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_object_type_any_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterObject_type_any_name) {
			listener.enterObject_type_any_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitObject_type_any_name) {
			listener.exitObject_type_any_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitObject_type_any_name) {
			return visitor.visitObject_type_any_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Object_type_nameContext extends ParserRuleContext {
	public drop_type_name(): Drop_type_nameContext | undefined {
		return this.tryGetRuleContext(0, Drop_type_nameContext);
	}
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATABASE, 0); }
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLE, 0); }
	public KW_SUBSCRIPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SUBSCRIPTION, 0); }
	public KW_TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_object_type_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterObject_type_name) {
			listener.enterObject_type_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitObject_type_name) {
			listener.exitObject_type_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitObject_type_name) {
			return visitor.visitObject_type_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_type_nameContext extends ParserRuleContext {
	public KW_ACCESS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ACCESS, 0); }
	public KW_METHOD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_METHOD, 0); }
	public KW_EVENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EVENT, 0); }
	public KW_TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRIGGER, 0); }
	public KW_EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXTENSION, 0); }
	public KW_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_DATA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATA, 0); }
	public KW_WRAPPER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WRAPPER, 0); }
	public KW_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public opt_procedural(): Opt_proceduralContext | undefined {
		return this.tryGetRuleContext(0, Opt_proceduralContext);
	}
	public KW_PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PUBLICATION, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public KW_SERVER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SERVER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_drop_type_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_type_name) {
			listener.enterDrop_type_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_type_name) {
			listener.exitDrop_type_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_type_name) {
			return visitor.visitDrop_type_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Object_type_name_on_any_nameContext extends ParserRuleContext {
	public KW_POLICY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_POLICY, 0); }
	public KW_RULE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RULE, 0); }
	public KW_TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRIGGER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_object_type_name_on_any_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterObject_type_name_on_any_name) {
			listener.enterObject_type_name_on_any_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitObject_type_name_on_any_name) {
			listener.exitObject_type_name_on_any_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitObject_type_name_on_any_name) {
			return visitor.visitObject_type_name_on_any_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Any_name_listContext extends ParserRuleContext {
	public any_name(): Any_nameContext[];
	public any_name(i: number): Any_nameContext;
	public any_name(i?: number): Any_nameContext | Any_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Any_nameContext);
		} else {
			return this.getRuleContext(i, Any_nameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_any_name_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAny_name_list) {
			listener.enterAny_name_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAny_name_list) {
			listener.exitAny_name_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAny_name_list) {
			return visitor.visitAny_name_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Any_nameContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public attrs(): AttrsContext | undefined {
		return this.tryGetRuleContext(0, AttrsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_any_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAny_name) {
			listener.enterAny_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAny_name) {
			listener.exitAny_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAny_name) {
			return visitor.visitAny_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AttrsContext extends ParserRuleContext {
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.DOT);
		} else {
			return this.getToken(PostgreSQLParser.DOT, i);
		}
	}
	public attr_name(): Attr_nameContext[];
	public attr_name(i: number): Attr_nameContext;
	public attr_name(i?: number): Attr_nameContext | Attr_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Attr_nameContext);
		} else {
			return this.getRuleContext(i, Attr_nameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_attrs; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAttrs) {
			listener.enterAttrs(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAttrs) {
			listener.exitAttrs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAttrs) {
			return visitor.visitAttrs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_name_listContext extends ParserRuleContext {
	public typename(): TypenameContext[];
	public typename(i: number): TypenameContext;
	public typename(i?: number): TypenameContext | TypenameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypenameContext);
		} else {
			return this.getRuleContext(i, TypenameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_type_name_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterType_name_list) {
			listener.enterType_name_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitType_name_list) {
			listener.exitType_name_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitType_name_list) {
			return visitor.visitType_name_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TruncatestmtContext extends ParserRuleContext {
	public KW_TRUNCATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TRUNCATE, 0); }
	public relation_expr_list(): Relation_expr_listContext {
		return this.getRuleContext(0, Relation_expr_listContext);
	}
	public opt_table(): Opt_tableContext | undefined {
		return this.tryGetRuleContext(0, Opt_tableContext);
	}
	public opt_restart_seqs(): Opt_restart_seqsContext | undefined {
		return this.tryGetRuleContext(0, Opt_restart_seqsContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_truncatestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTruncatestmt) {
			listener.enterTruncatestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTruncatestmt) {
			listener.exitTruncatestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTruncatestmt) {
			return visitor.visitTruncatestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_restart_seqsContext extends ParserRuleContext {
	public KW_CONTINUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONTINUE, 0); }
	public KW_IDENTITY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_IDENTITY, 0); }
	public KW_RESTART(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESTART, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_restart_seqs; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_restart_seqs) {
			listener.enterOpt_restart_seqs(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_restart_seqs) {
			listener.exitOpt_restart_seqs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_restart_seqs) {
			return visitor.visitOpt_restart_seqs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommentstmtContext extends ParserRuleContext {
	public KW_COMMENT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_COMMENT, 0); }
	public KW_ON(): TerminalNode[];
	public KW_ON(i: number): TerminalNode;
	public KW_ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_ON);
		} else {
			return this.getToken(PostgreSQLParser.KW_ON, i);
		}
	}
	public object_type_any_name(): Object_type_any_nameContext | undefined {
		return this.tryGetRuleContext(0, Object_type_any_nameContext);
	}
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public KW_IS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_IS, 0); }
	public comment_text(): Comment_textContext {
		return this.getRuleContext(0, Comment_textContext);
	}
	public KW_COLUMN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLUMN, 0); }
	public object_type_name(): Object_type_nameContext | undefined {
		return this.tryGetRuleContext(0, Object_type_nameContext);
	}
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public typename(): TypenameContext[];
	public typename(i: number): TypenameContext;
	public typename(i?: number): TypenameContext | TypenameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypenameContext);
		} else {
			return this.getRuleContext(i, TypenameContext);
		}
	}
	public KW_DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOMAIN, 0); }
	public KW_AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AGGREGATE, 0); }
	public aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Aggregate_with_argtypesContext);
	}
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public function_with_argtypes(): Function_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Function_with_argtypesContext);
	}
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public operator_with_argtypes(): Operator_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Operator_with_argtypesContext);
	}
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINT, 0); }
	public object_type_name_on_any_name(): Object_type_name_on_any_nameContext | undefined {
		return this.tryGetRuleContext(0, Object_type_name_on_any_nameContext);
	}
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public KW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINE, 0); }
	public KW_TRANSFORM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRANSFORM, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public KW_CLASS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CLASS, 0); }
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public KW_FAMILY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FAMILY, 0); }
	public KW_LARGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LARGE, 0); }
	public KW_OBJECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OBJECT, 0); }
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	public KW_CAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CAST, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_commentstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCommentstmt) {
			listener.enterCommentstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCommentstmt) {
			listener.exitCommentstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCommentstmt) {
			return visitor.visitCommentstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Comment_textContext extends ParserRuleContext {
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_comment_text; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterComment_text) {
			listener.enterComment_text(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitComment_text) {
			listener.exitComment_text(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitComment_text) {
			return visitor.visitComment_text(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SeclabelstmtContext extends ParserRuleContext {
	public KW_SECURITY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SECURITY, 0); }
	public KW_LABEL(): TerminalNode { return this.getToken(PostgreSQLParser.KW_LABEL, 0); }
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public object_type_any_name(): Object_type_any_nameContext | undefined {
		return this.tryGetRuleContext(0, Object_type_any_nameContext);
	}
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public KW_IS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_IS, 0); }
	public security_label(): Security_labelContext {
		return this.getRuleContext(0, Security_labelContext);
	}
	public opt_provider(): Opt_providerContext | undefined {
		return this.tryGetRuleContext(0, Opt_providerContext);
	}
	public KW_COLUMN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLUMN, 0); }
	public object_type_name(): Object_type_nameContext | undefined {
		return this.tryGetRuleContext(0, Object_type_nameContext);
	}
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public typename(): TypenameContext | undefined {
		return this.tryGetRuleContext(0, TypenameContext);
	}
	public KW_DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOMAIN, 0); }
	public KW_AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AGGREGATE, 0); }
	public aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Aggregate_with_argtypesContext);
	}
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public function_with_argtypes(): Function_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Function_with_argtypesContext);
	}
	public KW_LARGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LARGE, 0); }
	public KW_OBJECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OBJECT, 0); }
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public KW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_seclabelstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSeclabelstmt) {
			listener.enterSeclabelstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSeclabelstmt) {
			listener.exitSeclabelstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSeclabelstmt) {
			return visitor.visitSeclabelstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_providerContext extends ParserRuleContext {
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext {
		return this.getRuleContext(0, Nonreservedword_or_sconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_provider; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_provider) {
			listener.enterOpt_provider(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_provider) {
			listener.exitOpt_provider(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_provider) {
			return visitor.visitOpt_provider(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Security_labelContext extends ParserRuleContext {
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_security_label; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSecurity_label) {
			listener.enterSecurity_label(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSecurity_label) {
			listener.exitSecurity_label(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSecurity_label) {
			return visitor.visitSecurity_label(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FetchstmtContext extends ParserRuleContext {
	public KW_FETCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FETCH, 0); }
	public fetch_args(): Fetch_argsContext {
		return this.getRuleContext(0, Fetch_argsContext);
	}
	public KW_MOVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MOVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_fetchstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFetchstmt) {
			listener.enterFetchstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFetchstmt) {
			listener.exitFetchstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFetchstmt) {
			return visitor.visitFetchstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Fetch_argsContext extends ParserRuleContext {
	public cursor_name(): Cursor_nameContext {
		return this.getRuleContext(0, Cursor_nameContext);
	}
	public from_in(): From_inContext | undefined {
		return this.tryGetRuleContext(0, From_inContext);
	}
	public KW_NEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NEXT, 0); }
	public opt_from_in(): Opt_from_inContext | undefined {
		return this.tryGetRuleContext(0, Opt_from_inContext);
	}
	public KW_PRIOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRIOR, 0); }
	public KW_FIRST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FIRST, 0); }
	public KW_LAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LAST, 0); }
	public KW_ABSOLUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ABSOLUTE, 0); }
	public signediconst(): SignediconstContext | undefined {
		return this.tryGetRuleContext(0, SignediconstContext);
	}
	public KW_RELATIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RELATIVE, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_FORWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FORWARD, 0); }
	public KW_BACKWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BACKWARD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_fetch_args; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFetch_args) {
			listener.enterFetch_args(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFetch_args) {
			listener.exitFetch_args(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFetch_args) {
			return visitor.visitFetch_args(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_inContext extends ParserRuleContext {
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_from_in; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFrom_in) {
			listener.enterFrom_in(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFrom_in) {
			listener.exitFrom_in(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFrom_in) {
			return visitor.visitFrom_in(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_from_inContext extends ParserRuleContext {
	public from_in(): From_inContext {
		return this.getRuleContext(0, From_inContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_from_in; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_from_in) {
			listener.enterOpt_from_in(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_from_in) {
			listener.exitOpt_from_in(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_from_in) {
			return visitor.visitOpt_from_in(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantstmtContext extends ParserRuleContext {
	public KW_GRANT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_GRANT, 0); }
	public privileges(): PrivilegesContext {
		return this.getRuleContext(0, PrivilegesContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public privilege_target(): Privilege_targetContext {
		return this.getRuleContext(0, Privilege_targetContext);
	}
	public KW_TO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TO, 0); }
	public grantee_list(): Grantee_listContext {
		return this.getRuleContext(0, Grantee_listContext);
	}
	public opt_grant_grant_option(): Opt_grant_grant_optionContext | undefined {
		return this.tryGetRuleContext(0, Opt_grant_grant_optionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_grantstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGrantstmt) {
			listener.enterGrantstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGrantstmt) {
			listener.exitGrantstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGrantstmt) {
			return visitor.visitGrantstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokestmtContext extends ParserRuleContext {
	public KW_REVOKE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_REVOKE, 0); }
	public privileges(): PrivilegesContext {
		return this.getRuleContext(0, PrivilegesContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public privilege_target(): Privilege_targetContext {
		return this.getRuleContext(0, Privilege_targetContext);
	}
	public KW_FROM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FROM, 0); }
	public grantee_list(): Grantee_listContext {
		return this.getRuleContext(0, Grantee_listContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public KW_GRANT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GRANT, 0); }
	public KW_OPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPTION, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_revokestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRevokestmt) {
			listener.enterRevokestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRevokestmt) {
			listener.exitRevokestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRevokestmt) {
			return visitor.visitRevokestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegesContext extends ParserRuleContext {
	public privilege_list(): Privilege_listContext | undefined {
		return this.tryGetRuleContext(0, Privilege_listContext);
	}
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRIVILEGES, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public columnlist(): ColumnlistContext | undefined {
		return this.tryGetRuleContext(0, ColumnlistContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public beforeprivilegeselectlist(): BeforeprivilegeselectlistContext | undefined {
		return this.tryGetRuleContext(0, BeforeprivilegeselectlistContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_privileges; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPrivileges) {
			listener.enterPrivileges(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPrivileges) {
			listener.exitPrivileges(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPrivileges) {
			return visitor.visitPrivileges(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BeforeprivilegeselectlistContext extends ParserRuleContext {
	public beforeprivilegeselect(): BeforeprivilegeselectContext[];
	public beforeprivilegeselect(i: number): BeforeprivilegeselectContext;
	public beforeprivilegeselect(i?: number): BeforeprivilegeselectContext | BeforeprivilegeselectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(BeforeprivilegeselectContext);
		} else {
			return this.getRuleContext(i, BeforeprivilegeselectContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_beforeprivilegeselectlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterBeforeprivilegeselectlist) {
			listener.enterBeforeprivilegeselectlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitBeforeprivilegeselectlist) {
			listener.exitBeforeprivilegeselectlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitBeforeprivilegeselectlist) {
			return visitor.visitBeforeprivilegeselectlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BeforeprivilegeselectContext extends ParserRuleContext {
	public KW_SELECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SELECT, 0); }
	public KW_INSERT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INSERT, 0); }
	public KW_UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UPDATE, 0); }
	public KW_DELETE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DELETE, 0); }
	public KW_TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRUNCATE, 0); }
	public KW_PEFERENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PEFERENCES, 0); }
	public KW_TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRIGGER, 0); }
	public KW_USAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USAGE, 0); }
	public KW_CREATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_CONNECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONNECT, 0); }
	public KW_TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMPORARY, 0); }
	public KW_TEMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMP, 0); }
	public KW_EXECUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXECUTE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_beforeprivilegeselect; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterBeforeprivilegeselect) {
			listener.enterBeforeprivilegeselect(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitBeforeprivilegeselect) {
			listener.exitBeforeprivilegeselect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitBeforeprivilegeselect) {
			return visitor.visitBeforeprivilegeselect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Privilege_listContext extends ParserRuleContext {
	public privilege(): PrivilegeContext[];
	public privilege(i: number): PrivilegeContext;
	public privilege(i?: number): PrivilegeContext | PrivilegeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PrivilegeContext);
		} else {
			return this.getRuleContext(i, PrivilegeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_privilege_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPrivilege_list) {
			listener.enterPrivilege_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPrivilege_list) {
			listener.exitPrivilege_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPrivilege_list) {
			return visitor.visitPrivilege_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeContext extends ParserRuleContext {
	public KW_SELECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SELECT, 0); }
	public opt_column_list(): Opt_column_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_column_listContext);
	}
	public KW_REFERENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REFERENCES, 0); }
	public KW_CREATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CREATE, 0); }
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_privilege; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPrivilege) {
			listener.enterPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPrivilege) {
			listener.exitPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPrivilege) {
			return visitor.visitPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Privilege_targetContext extends ParserRuleContext {
	public qualified_name_list(): Qualified_name_listContext | undefined {
		return this.tryGetRuleContext(0, Qualified_name_listContext);
	}
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public KW_SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEQUENCE, 0); }
	public KW_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_DATA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATA, 0); }
	public KW_WRAPPER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WRAPPER, 0); }
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public KW_SERVER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SERVER, 0); }
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public function_with_argtypes_list(): Function_with_argtypes_listContext | undefined {
		return this.tryGetRuleContext(0, Function_with_argtypes_listContext);
	}
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public KW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINE, 0); }
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATABASE, 0); }
	public KW_DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOMAIN, 0); }
	public any_name_list(): Any_name_listContext | undefined {
		return this.tryGetRuleContext(0, Any_name_listContext);
	}
	public KW_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public KW_LARGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LARGE, 0); }
	public KW_OBJECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OBJECT, 0); }
	public numericonly_list(): Numericonly_listContext | undefined {
		return this.tryGetRuleContext(0, Numericonly_listContext);
	}
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public KW_TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_TABLES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLES, 0); }
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IN, 0); }
	public KW_SEQUENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEQUENCES, 0); }
	public KW_FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTIONS, 0); }
	public KW_PROCEDURES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURES, 0); }
	public KW_ROUTINES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_privilege_target; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPrivilege_target) {
			listener.enterPrivilege_target(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPrivilege_target) {
			listener.exitPrivilege_target(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPrivilege_target) {
			return visitor.visitPrivilege_target(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Grantee_listContext extends ParserRuleContext {
	public grantee(): GranteeContext[];
	public grantee(i: number): GranteeContext;
	public grantee(i?: number): GranteeContext | GranteeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GranteeContext);
		} else {
			return this.getRuleContext(i, GranteeContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_grantee_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGrantee_list) {
			listener.enterGrantee_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGrantee_list) {
			listener.exitGrantee_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGrantee_list) {
			return visitor.visitGrantee_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GranteeContext extends ParserRuleContext {
	public rolespec(): RolespecContext {
		return this.getRuleContext(0, RolespecContext);
	}
	public KW_GROUP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GROUP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_grantee; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGrantee) {
			listener.enterGrantee(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGrantee) {
			listener.exitGrantee(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGrantee) {
			return visitor.visitGrantee(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_grant_grant_optionContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_GRANT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_GRANT, 0); }
	public KW_OPTION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_grant_grant_option; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_grant_grant_option) {
			listener.enterOpt_grant_grant_option(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_grant_grant_option) {
			listener.exitOpt_grant_grant_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_grant_grant_option) {
			return visitor.visitOpt_grant_grant_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantrolestmtContext extends ParserRuleContext {
	public KW_GRANT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_GRANT, 0); }
	public privilege_list(): Privilege_listContext {
		return this.getRuleContext(0, Privilege_listContext);
	}
	public KW_TO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TO, 0); }
	public role_list(): Role_listContext {
		return this.getRuleContext(0, Role_listContext);
	}
	public opt_grant_admin_option(): Opt_grant_admin_optionContext | undefined {
		return this.tryGetRuleContext(0, Opt_grant_admin_optionContext);
	}
	public opt_granted_by(): Opt_granted_byContext | undefined {
		return this.tryGetRuleContext(0, Opt_granted_byContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_grantrolestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGrantrolestmt) {
			listener.enterGrantrolestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGrantrolestmt) {
			listener.exitGrantrolestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGrantrolestmt) {
			return visitor.visitGrantrolestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokerolestmtContext extends ParserRuleContext {
	public KW_REVOKE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_REVOKE, 0); }
	public privilege_list(): Privilege_listContext {
		return this.getRuleContext(0, Privilege_listContext);
	}
	public KW_FROM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FROM, 0); }
	public role_list(): Role_listContext {
		return this.getRuleContext(0, Role_listContext);
	}
	public opt_granted_by(): Opt_granted_byContext | undefined {
		return this.tryGetRuleContext(0, Opt_granted_byContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public KW_ADMIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADMIN, 0); }
	public KW_OPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPTION, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_revokerolestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRevokerolestmt) {
			listener.enterRevokerolestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRevokerolestmt) {
			listener.exitRevokerolestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRevokerolestmt) {
			return visitor.visitRevokerolestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_grant_admin_optionContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_ADMIN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ADMIN, 0); }
	public KW_OPTION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_grant_admin_option; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_grant_admin_option) {
			listener.enterOpt_grant_admin_option(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_grant_admin_option) {
			listener.exitOpt_grant_admin_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_grant_admin_option) {
			return visitor.visitOpt_grant_admin_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_granted_byContext extends ParserRuleContext {
	public KW_GRANTED(): TerminalNode { return this.getToken(PostgreSQLParser.KW_GRANTED, 0); }
	public KW_BY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BY, 0); }
	public rolespec(): RolespecContext {
		return this.getRuleContext(0, RolespecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_granted_by; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_granted_by) {
			listener.enterOpt_granted_by(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_granted_by) {
			listener.exitOpt_granted_by(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_granted_by) {
			return visitor.visitOpt_granted_by(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterdefaultprivilegesstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_DEFAULT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DEFAULT, 0); }
	public KW_PRIVILEGES(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PRIVILEGES, 0); }
	public defacloptionlist(): DefacloptionlistContext {
		return this.getRuleContext(0, DefacloptionlistContext);
	}
	public defaclaction(): DefaclactionContext {
		return this.getRuleContext(0, DefaclactionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterdefaultprivilegesstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterdefaultprivilegesstmt) {
			listener.enterAlterdefaultprivilegesstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterdefaultprivilegesstmt) {
			listener.exitAlterdefaultprivilegesstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterdefaultprivilegesstmt) {
			return visitor.visitAlterdefaultprivilegesstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefacloptionlistContext extends ParserRuleContext {
	public defacloption(): DefacloptionContext[];
	public defacloption(i: number): DefacloptionContext;
	public defacloption(i?: number): DefacloptionContext | DefacloptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(DefacloptionContext);
		} else {
			return this.getRuleContext(i, DefacloptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_defacloptionlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDefacloptionlist) {
			listener.enterDefacloptionlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDefacloptionlist) {
			listener.exitDefacloptionlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDefacloptionlist) {
			return visitor.visitDefacloptionlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefacloptionContext extends ParserRuleContext {
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IN, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLE, 0); }
	public role_list(): Role_listContext | undefined {
		return this.tryGetRuleContext(0, Role_listContext);
	}
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_defacloption; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDefacloption) {
			listener.enterDefacloption(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDefacloption) {
			listener.exitDefacloption(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDefacloption) {
			return visitor.visitDefacloption(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DefaclactionContext extends ParserRuleContext {
	public KW_GRANT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GRANT, 0); }
	public privileges(): PrivilegesContext {
		return this.getRuleContext(0, PrivilegesContext);
	}
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public defacl_privilege_target(): Defacl_privilege_targetContext {
		return this.getRuleContext(0, Defacl_privilege_targetContext);
	}
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	public grantee_list(): Grantee_listContext {
		return this.getRuleContext(0, Grantee_listContext);
	}
	public opt_grant_grant_option(): Opt_grant_grant_optionContext | undefined {
		return this.tryGetRuleContext(0, Opt_grant_grant_optionContext);
	}
	public KW_REVOKE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REVOKE, 0); }
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public KW_OPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPTION, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_defaclaction; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDefaclaction) {
			listener.enterDefaclaction(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDefaclaction) {
			listener.exitDefaclaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDefaclaction) {
			return visitor.visitDefaclaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Defacl_privilege_targetContext extends ParserRuleContext {
	public KW_TABLES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLES, 0); }
	public KW_FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTIONS, 0); }
	public KW_ROUTINES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINES, 0); }
	public KW_SEQUENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEQUENCES, 0); }
	public KW_TYPES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPES, 0); }
	public KW_SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMAS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_defacl_privilege_target; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDefacl_privilege_target) {
			listener.enterDefacl_privilege_target(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDefacl_privilege_target) {
			listener.exitDefacl_privilege_target(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDefacl_privilege_target) {
			return visitor.visitDefacl_privilege_target(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_INDEX(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INDEX, 0); }
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public relation_expr(): Relation_exprContext {
		return this.getRuleContext(0, Relation_exprContext);
	}
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public index_params(): Index_paramsContext {
		return this.getRuleContext(0, Index_paramsContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_unique(): Opt_uniqueContext | undefined {
		return this.tryGetRuleContext(0, Opt_uniqueContext);
	}
	public opt_concurrently(): Opt_concurrentlyContext | undefined {
		return this.tryGetRuleContext(0, Opt_concurrentlyContext);
	}
	public opt_index_name(): Opt_index_nameContext | undefined {
		return this.tryGetRuleContext(0, Opt_index_nameContext);
	}
	public access_method_clause(): Access_method_clauseContext | undefined {
		return this.tryGetRuleContext(0, Access_method_clauseContext);
	}
	public opt_include(): Opt_includeContext | undefined {
		return this.tryGetRuleContext(0, Opt_includeContext);
	}
	public opt_reloptions(): Opt_reloptionsContext | undefined {
		return this.tryGetRuleContext(0, Opt_reloptionsContext);
	}
	public opttablespace(): OpttablespaceContext | undefined {
		return this.tryGetRuleContext(0, OpttablespaceContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_indexstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndexstmt) {
			listener.enterIndexstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndexstmt) {
			listener.exitIndexstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndexstmt) {
			return visitor.visitIndexstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_uniqueContext extends ParserRuleContext {
	public KW_UNIQUE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_UNIQUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_unique; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_unique) {
			listener.enterOpt_unique(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_unique) {
			listener.exitOpt_unique(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_unique) {
			return visitor.visitOpt_unique(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_concurrentlyContext extends ParserRuleContext {
	public KW_CONCURRENTLY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CONCURRENTLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_concurrently; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_concurrently) {
			listener.enterOpt_concurrently(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_concurrently) {
			listener.exitOpt_concurrently(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_concurrently) {
			return visitor.visitOpt_concurrently(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_index_nameContext extends ParserRuleContext {
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_index_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_index_name) {
			listener.enterOpt_index_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_index_name) {
			listener.exitOpt_index_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_index_name) {
			return visitor.visitOpt_index_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Access_method_clauseContext extends ParserRuleContext {
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_access_method_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAccess_method_clause) {
			listener.enterAccess_method_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAccess_method_clause) {
			listener.exitAccess_method_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAccess_method_clause) {
			return visitor.visitAccess_method_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_paramsContext extends ParserRuleContext {
	public index_elem(): Index_elemContext[];
	public index_elem(i: number): Index_elemContext;
	public index_elem(i?: number): Index_elemContext | Index_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Index_elemContext);
		} else {
			return this.getRuleContext(i, Index_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_index_params; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndex_params) {
			listener.enterIndex_params(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndex_params) {
			listener.exitIndex_params(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndex_params) {
			return visitor.visitIndex_params(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_elem_optionsContext extends ParserRuleContext {
	public opt_collate(): Opt_collateContext | undefined {
		return this.tryGetRuleContext(0, Opt_collateContext);
	}
	public opt_class(): Opt_classContext | undefined {
		return this.tryGetRuleContext(0, Opt_classContext);
	}
	public opt_asc_desc(): Opt_asc_descContext | undefined {
		return this.tryGetRuleContext(0, Opt_asc_descContext);
	}
	public opt_nulls_order(): Opt_nulls_orderContext | undefined {
		return this.tryGetRuleContext(0, Opt_nulls_orderContext);
	}
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public reloptions(): ReloptionsContext | undefined {
		return this.tryGetRuleContext(0, ReloptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_index_elem_options; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndex_elem_options) {
			listener.enterIndex_elem_options(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndex_elem_options) {
			listener.exitIndex_elem_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndex_elem_options) {
			return visitor.visitIndex_elem_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_elemContext extends ParserRuleContext {
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public index_elem_options(): Index_elem_optionsContext {
		return this.getRuleContext(0, Index_elem_optionsContext);
	}
	public func_expr_windowless(): Func_expr_windowlessContext | undefined {
		return this.tryGetRuleContext(0, Func_expr_windowlessContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_index_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndex_elem) {
			listener.enterIndex_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndex_elem) {
			listener.exitIndex_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndex_elem) {
			return visitor.visitIndex_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_includeContext extends ParserRuleContext {
	public KW_INCLUDE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INCLUDE, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public index_including_params(): Index_including_paramsContext {
		return this.getRuleContext(0, Index_including_paramsContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_include; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_include) {
			listener.enterOpt_include(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_include) {
			listener.exitOpt_include(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_include) {
			return visitor.visitOpt_include(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_including_paramsContext extends ParserRuleContext {
	public index_elem(): Index_elemContext[];
	public index_elem(i: number): Index_elemContext;
	public index_elem(i?: number): Index_elemContext | Index_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Index_elemContext);
		} else {
			return this.getRuleContext(i, Index_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_index_including_params; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndex_including_params) {
			listener.enterIndex_including_params(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndex_including_params) {
			listener.exitIndex_including_params(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndex_including_params) {
			return visitor.visitIndex_including_params(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_collateContext extends ParserRuleContext {
	public KW_COLLATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_COLLATE, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_collate; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_collate) {
			listener.enterOpt_collate(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_collate) {
			listener.exitOpt_collate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_collate) {
			return visitor.visitOpt_collate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_classContext extends ParserRuleContext {
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_class; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_class) {
			listener.enterOpt_class(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_class) {
			listener.exitOpt_class(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_class) {
			return visitor.visitOpt_class(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_asc_descContext extends ParserRuleContext {
	public KW_ASC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ASC, 0); }
	public KW_DESC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DESC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_asc_desc; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_asc_desc) {
			listener.enterOpt_asc_desc(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_asc_desc) {
			listener.exitOpt_asc_desc(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_asc_desc) {
			return visitor.visitOpt_asc_desc(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_nulls_orderContext extends ParserRuleContext {
	public KW_NULLS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_NULLS, 0); }
	public KW_FIRST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FIRST, 0); }
	public KW_LAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LAST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_nulls_order; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_nulls_order) {
			listener.enterOpt_nulls_order(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_nulls_order) {
			listener.exitOpt_nulls_order(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_nulls_order) {
			return visitor.visitOpt_nulls_order(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatefunctionstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public func_name(): Func_nameContext {
		return this.getRuleContext(0, Func_nameContext);
	}
	public func_args_with_defaults(): Func_args_with_defaultsContext {
		return this.getRuleContext(0, Func_args_with_defaultsContext);
	}
	public createfunc_opt_list(): Createfunc_opt_listContext {
		return this.getRuleContext(0, Createfunc_opt_listContext);
	}
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public opt_or_replace(): Opt_or_replaceContext | undefined {
		return this.tryGetRuleContext(0, Opt_or_replaceContext);
	}
	public KW_RETURNS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RETURNS, 0); }
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITH, 0); }
	public attrilist(): AttrilistContext | undefined {
		return this.tryGetRuleContext(0, AttrilistContext);
	}
	public func_return(): Func_returnContext | undefined {
		return this.tryGetRuleContext(0, Func_returnContext);
	}
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public table_func_column_list(): Table_func_column_listContext | undefined {
		return this.tryGetRuleContext(0, Table_func_column_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createfunctionstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatefunctionstmt) {
			listener.enterCreatefunctionstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatefunctionstmt) {
			listener.exitCreatefunctionstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatefunctionstmt) {
			return visitor.visitCreatefunctionstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AttrilistContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public colid(): ColidContext[];
	public colid(i: number): ColidContext;
	public colid(i?: number): ColidContext | ColidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColidContext);
		} else {
			return this.getRuleContext(i, ColidContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_attrilist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAttrilist) {
			listener.enterAttrilist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAttrilist) {
			listener.exitAttrilist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAttrilist) {
			return visitor.visitAttrilist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_or_replaceContext extends ParserRuleContext {
	public KW_OR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OR, 0); }
	public KW_REPLACE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_REPLACE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_or_replace; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_or_replace) {
			listener.enterOpt_or_replace(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_or_replace) {
			listener.exitOpt_or_replace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_or_replace) {
			return visitor.visitOpt_or_replace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_argsContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public func_args_list(): Func_args_listContext | undefined {
		return this.tryGetRuleContext(0, Func_args_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_args; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_args) {
			listener.enterFunc_args(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_args) {
			listener.exitFunc_args(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_args) {
			return visitor.visitFunc_args(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_args_listContext extends ParserRuleContext {
	public func_arg(): Func_argContext[];
	public func_arg(i: number): Func_argContext;
	public func_arg(i?: number): Func_argContext | Func_argContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Func_argContext);
		} else {
			return this.getRuleContext(i, Func_argContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_args_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_args_list) {
			listener.enterFunc_args_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_args_list) {
			listener.exitFunc_args_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_args_list) {
			return visitor.visitFunc_args_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_with_argtypes_listContext extends ParserRuleContext {
	public function_with_argtypes(): Function_with_argtypesContext[];
	public function_with_argtypes(i: number): Function_with_argtypesContext;
	public function_with_argtypes(i?: number): Function_with_argtypesContext | Function_with_argtypesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_with_argtypesContext);
		} else {
			return this.getRuleContext(i, Function_with_argtypesContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_function_with_argtypes_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunction_with_argtypes_list) {
			listener.enterFunction_with_argtypes_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunction_with_argtypes_list) {
			listener.exitFunction_with_argtypes_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunction_with_argtypes_list) {
			return visitor.visitFunction_with_argtypes_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Function_with_argtypesContext extends ParserRuleContext {
	public func_name(): Func_nameContext | undefined {
		return this.tryGetRuleContext(0, Func_nameContext);
	}
	public func_args(): Func_argsContext | undefined {
		return this.tryGetRuleContext(0, Func_argsContext);
	}
	public type_func_name_keyword(): Type_func_name_keywordContext | undefined {
		return this.tryGetRuleContext(0, Type_func_name_keywordContext);
	}
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public indirection(): IndirectionContext | undefined {
		return this.tryGetRuleContext(0, IndirectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_function_with_argtypes; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunction_with_argtypes) {
			listener.enterFunction_with_argtypes(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunction_with_argtypes) {
			listener.exitFunction_with_argtypes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunction_with_argtypes) {
			return visitor.visitFunction_with_argtypes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_args_with_defaultsContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public func_args_with_defaults_list(): Func_args_with_defaults_listContext | undefined {
		return this.tryGetRuleContext(0, Func_args_with_defaults_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_args_with_defaults; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_args_with_defaults) {
			listener.enterFunc_args_with_defaults(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_args_with_defaults) {
			listener.exitFunc_args_with_defaults(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_args_with_defaults) {
			return visitor.visitFunc_args_with_defaults(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_args_with_defaults_listContext extends ParserRuleContext {
	public func_arg_with_default(): Func_arg_with_defaultContext[];
	public func_arg_with_default(i: number): Func_arg_with_defaultContext;
	public func_arg_with_default(i?: number): Func_arg_with_defaultContext | Func_arg_with_defaultContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Func_arg_with_defaultContext);
		} else {
			return this.getRuleContext(i, Func_arg_with_defaultContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_args_with_defaults_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_args_with_defaults_list) {
			listener.enterFunc_args_with_defaults_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_args_with_defaults_list) {
			listener.exitFunc_args_with_defaults_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_args_with_defaults_list) {
			return visitor.visitFunc_args_with_defaults_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_argContext extends ParserRuleContext {
	public arg_class(): Arg_classContext | undefined {
		return this.tryGetRuleContext(0, Arg_classContext);
	}
	public func_type(): Func_typeContext {
		return this.getRuleContext(0, Func_typeContext);
	}
	public param_name(): Param_nameContext | undefined {
		return this.tryGetRuleContext(0, Param_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_arg) {
			listener.enterFunc_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_arg) {
			listener.exitFunc_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_arg) {
			return visitor.visitFunc_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Arg_classContext extends ParserRuleContext {
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IN, 0); }
	public KW_OUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OUT, 0); }
	public KW_INOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INOUT, 0); }
	public KW_VARIADIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VARIADIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_arg_class; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterArg_class) {
			listener.enterArg_class(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitArg_class) {
			listener.exitArg_class(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitArg_class) {
			return visitor.visitArg_class(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Param_nameContext extends ParserRuleContext {
	public type_function_name(): Type_function_nameContext {
		return this.getRuleContext(0, Type_function_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_param_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterParam_name) {
			listener.enterParam_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitParam_name) {
			listener.exitParam_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitParam_name) {
			return visitor.visitParam_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_returnContext extends ParserRuleContext {
	public func_type(): Func_typeContext {
		return this.getRuleContext(0, Func_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_return; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_return) {
			listener.enterFunc_return(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_return) {
			listener.exitFunc_return(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_return) {
			return visitor.visitFunc_return(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_typeContext extends ParserRuleContext {
	public typename(): TypenameContext | undefined {
		return this.tryGetRuleContext(0, TypenameContext);
	}
	public type_function_name(): Type_function_nameContext | undefined {
		return this.tryGetRuleContext(0, Type_function_nameContext);
	}
	public attrs(): AttrsContext | undefined {
		return this.tryGetRuleContext(0, AttrsContext);
	}
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PERCENT, 0); }
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public KW_SETOF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SETOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_type; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_type) {
			listener.enterFunc_type(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_type) {
			listener.exitFunc_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_type) {
			return visitor.visitFunc_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_arg_with_defaultContext extends ParserRuleContext {
	public func_arg(): Func_argContext {
		return this.getRuleContext(0, Func_argContext);
	}
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_arg_with_default; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_arg_with_default) {
			listener.enterFunc_arg_with_default(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_arg_with_default) {
			listener.exitFunc_arg_with_default(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_arg_with_default) {
			return visitor.visitFunc_arg_with_default(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Aggr_argContext extends ParserRuleContext {
	public func_arg(): Func_argContext {
		return this.getRuleContext(0, Func_argContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_aggr_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAggr_arg) {
			listener.enterAggr_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAggr_arg) {
			listener.exitAggr_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAggr_arg) {
			return visitor.visitAggr_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Aggr_argsContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.STAR, 0); }
	public aggr_args_list(): Aggr_args_listContext[];
	public aggr_args_list(i: number): Aggr_args_listContext;
	public aggr_args_list(i?: number): Aggr_args_listContext | Aggr_args_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Aggr_args_listContext);
		} else {
			return this.getRuleContext(i, Aggr_args_listContext);
		}
	}
	public KW_ORDER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ORDER, 0); }
	public KW_BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_aggr_args; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAggr_args) {
			listener.enterAggr_args(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAggr_args) {
			listener.exitAggr_args(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAggr_args) {
			return visitor.visitAggr_args(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Aggr_args_listContext extends ParserRuleContext {
	public aggr_arg(): Aggr_argContext[];
	public aggr_arg(i: number): Aggr_argContext;
	public aggr_arg(i?: number): Aggr_argContext | Aggr_argContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Aggr_argContext);
		} else {
			return this.getRuleContext(i, Aggr_argContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_aggr_args_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAggr_args_list) {
			listener.enterAggr_args_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAggr_args_list) {
			listener.exitAggr_args_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAggr_args_list) {
			return visitor.visitAggr_args_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Aggregate_with_argtypesContext extends ParserRuleContext {
	public func_name(): Func_nameContext {
		return this.getRuleContext(0, Func_nameContext);
	}
	public aggr_args(): Aggr_argsContext {
		return this.getRuleContext(0, Aggr_argsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_aggregate_with_argtypes; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAggregate_with_argtypes) {
			listener.enterAggregate_with_argtypes(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAggregate_with_argtypes) {
			listener.exitAggregate_with_argtypes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAggregate_with_argtypes) {
			return visitor.visitAggregate_with_argtypes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Aggregate_with_argtypes_listContext extends ParserRuleContext {
	public aggregate_with_argtypes(): Aggregate_with_argtypesContext[];
	public aggregate_with_argtypes(i: number): Aggregate_with_argtypesContext;
	public aggregate_with_argtypes(i?: number): Aggregate_with_argtypesContext | Aggregate_with_argtypesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Aggregate_with_argtypesContext);
		} else {
			return this.getRuleContext(i, Aggregate_with_argtypesContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_aggregate_with_argtypes_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAggregate_with_argtypes_list) {
			listener.enterAggregate_with_argtypes_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAggregate_with_argtypes_list) {
			listener.exitAggregate_with_argtypes_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAggregate_with_argtypes_list) {
			return visitor.visitAggregate_with_argtypes_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Createfunc_opt_listContext extends ParserRuleContext {
	public createfunc_opt_item(): Createfunc_opt_itemContext[];
	public createfunc_opt_item(i: number): Createfunc_opt_itemContext;
	public createfunc_opt_item(i?: number): Createfunc_opt_itemContext | Createfunc_opt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Createfunc_opt_itemContext);
		} else {
			return this.getRuleContext(i, Createfunc_opt_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createfunc_opt_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatefunc_opt_list) {
			listener.enterCreatefunc_opt_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatefunc_opt_list) {
			listener.exitCreatefunc_opt_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatefunc_opt_list) {
			return visitor.visitCreatefunc_opt_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Common_func_opt_itemContext extends ParserRuleContext {
	public KW_CALLED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CALLED, 0); }
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ON, 0); }
	public KW_NULL(): TerminalNode[];
	public KW_NULL(i: number): TerminalNode;
	public KW_NULL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_NULL);
		} else {
			return this.getToken(PostgreSQLParser.KW_NULL, i);
		}
	}
	public KW_INPUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INPUT, 0); }
	public KW_RETURNS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RETURNS, 0); }
	public KW_STRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STRICT, 0); }
	public KW_IMMUTABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IMMUTABLE, 0); }
	public KW_STABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STABLE, 0); }
	public KW_VOLATILE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VOLATILE, 0); }
	public KW_EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXTERNAL, 0); }
	public KW_SECURITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SECURITY, 0); }
	public KW_DEFINER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFINER, 0); }
	public KW_INVOKER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INVOKER, 0); }
	public KW_LEAKPROOF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEAKPROOF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_COST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COST, 0); }
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	public KW_ROWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROWS, 0); }
	public KW_SUPPORT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SUPPORT, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public functionsetresetclause(): FunctionsetresetclauseContext | undefined {
		return this.tryGetRuleContext(0, FunctionsetresetclauseContext);
	}
	public KW_PARALLEL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARALLEL, 0); }
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_common_func_opt_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCommon_func_opt_item) {
			listener.enterCommon_func_opt_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCommon_func_opt_item) {
			listener.exitCommon_func_opt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCommon_func_opt_item) {
			return visitor.visitCommon_func_opt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Createfunc_opt_itemContext extends ParserRuleContext {
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public func_as(): Func_asContext | undefined {
		return this.tryGetRuleContext(0, Func_asContext);
	}
	public KW_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | undefined {
		return this.tryGetRuleContext(0, Nonreservedword_or_sconstContext);
	}
	public KW_TRANSFORM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRANSFORM, 0); }
	public transform_type_list(): Transform_type_listContext | undefined {
		return this.tryGetRuleContext(0, Transform_type_listContext);
	}
	public KW_WINDOW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WINDOW, 0); }
	public common_func_opt_item(): Common_func_opt_itemContext | undefined {
		return this.tryGetRuleContext(0, Common_func_opt_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createfunc_opt_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatefunc_opt_item) {
			listener.enterCreatefunc_opt_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatefunc_opt_item) {
			listener.exitCreatefunc_opt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatefunc_opt_item) {
			return visitor.visitCreatefunc_opt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_asContext extends ParserRuleContext {
	public Definition: ParserRuleContext;
	public _def!: SconstContext;
	public sconst(): SconstContext[];
	public sconst(i: number): SconstContext;
	public sconst(i?: number): SconstContext | SconstContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SconstContext);
		} else {
			return this.getRuleContext(i, SconstContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_as; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_as) {
			listener.enterFunc_as(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_as) {
			listener.exitFunc_as(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_as) {
			return visitor.visitFunc_as(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Transform_type_listContext extends ParserRuleContext {
	public KW_FOR(): TerminalNode[];
	public KW_FOR(i: number): TerminalNode;
	public KW_FOR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_FOR);
		} else {
			return this.getToken(PostgreSQLParser.KW_FOR, i);
		}
	}
	public KW_TYPE(): TerminalNode[];
	public KW_TYPE(i: number): TerminalNode;
	public KW_TYPE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_TYPE);
		} else {
			return this.getToken(PostgreSQLParser.KW_TYPE, i);
		}
	}
	public typename(): TypenameContext[];
	public typename(i: number): TypenameContext;
	public typename(i?: number): TypenameContext | TypenameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypenameContext);
		} else {
			return this.getRuleContext(i, TypenameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_transform_type_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTransform_type_list) {
			listener.enterTransform_type_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTransform_type_list) {
			listener.exitTransform_type_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTransform_type_list) {
			return visitor.visitTransform_type_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_definitionContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	public definition(): DefinitionContext {
		return this.getRuleContext(0, DefinitionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_definition; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_definition) {
			listener.enterOpt_definition(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_definition) {
			listener.exitOpt_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_definition) {
			return visitor.visitOpt_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_func_columnContext extends ParserRuleContext {
	public param_name(): Param_nameContext {
		return this.getRuleContext(0, Param_nameContext);
	}
	public func_type(): Func_typeContext {
		return this.getRuleContext(0, Func_typeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_table_func_column; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTable_func_column) {
			listener.enterTable_func_column(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTable_func_column) {
			listener.exitTable_func_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTable_func_column) {
			return visitor.visitTable_func_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_func_column_listContext extends ParserRuleContext {
	public table_func_column(): Table_func_columnContext[];
	public table_func_column(i: number): Table_func_columnContext;
	public table_func_column(i?: number): Table_func_columnContext | Table_func_columnContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_func_columnContext);
		} else {
			return this.getRuleContext(i, Table_func_columnContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_table_func_column_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTable_func_column_list) {
			listener.enterTable_func_column_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTable_func_column_list) {
			listener.exitTable_func_column_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTable_func_column_list) {
			return visitor.visitTable_func_column_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterfunctionstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public function_with_argtypes(): Function_with_argtypesContext {
		return this.getRuleContext(0, Function_with_argtypesContext);
	}
	public alterfunc_opt_list(): Alterfunc_opt_listContext {
		return this.getRuleContext(0, Alterfunc_opt_listContext);
	}
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public KW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINE, 0); }
	public opt_restrict(): Opt_restrictContext | undefined {
		return this.tryGetRuleContext(0, Opt_restrictContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterfunctionstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterfunctionstmt) {
			listener.enterAlterfunctionstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterfunctionstmt) {
			listener.exitAlterfunctionstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterfunctionstmt) {
			return visitor.visitAlterfunctionstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alterfunc_opt_listContext extends ParserRuleContext {
	public common_func_opt_item(): Common_func_opt_itemContext[];
	public common_func_opt_item(i: number): Common_func_opt_itemContext;
	public common_func_opt_item(i?: number): Common_func_opt_itemContext | Common_func_opt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Common_func_opt_itemContext);
		} else {
			return this.getRuleContext(i, Common_func_opt_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterfunc_opt_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterfunc_opt_list) {
			listener.enterAlterfunc_opt_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterfunc_opt_list) {
			listener.exitAlterfunc_opt_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterfunc_opt_list) {
			return visitor.visitAlterfunc_opt_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_restrictContext extends ParserRuleContext {
	public KW_RESTRICT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_RESTRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_restrict; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_restrict) {
			listener.enterOpt_restrict(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_restrict) {
			listener.exitOpt_restrict(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_restrict) {
			return visitor.visitOpt_restrict(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RemovefuncstmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public function_with_argtypes_list(): Function_with_argtypes_listContext {
		return this.getRuleContext(0, Function_with_argtypes_listContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public KW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_removefuncstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRemovefuncstmt) {
			listener.enterRemovefuncstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRemovefuncstmt) {
			listener.exitRemovefuncstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRemovefuncstmt) {
			return visitor.visitRemovefuncstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RemoveaggrstmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_AGGREGATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AGGREGATE, 0); }
	public aggregate_with_argtypes_list(): Aggregate_with_argtypes_listContext {
		return this.getRuleContext(0, Aggregate_with_argtypes_listContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_removeaggrstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRemoveaggrstmt) {
			listener.enterRemoveaggrstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRemoveaggrstmt) {
			listener.exitRemoveaggrstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRemoveaggrstmt) {
			return visitor.visitRemoveaggrstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RemoveoperstmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public operator_with_argtypes_list(): Operator_with_argtypes_listContext {
		return this.getRuleContext(0, Operator_with_argtypes_listContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_removeoperstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRemoveoperstmt) {
			listener.enterRemoveoperstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRemoveoperstmt) {
			listener.exitRemoveoperstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRemoveoperstmt) {
			return visitor.visitRemoveoperstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Oper_argtypesContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public typename(): TypenameContext[];
	public typename(i: number): TypenameContext;
	public typename(i?: number): TypenameContext | TypenameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypenameContext);
		} else {
			return this.getRuleContext(i, TypenameContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COMMA, 0); }
	public KW_NONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NONE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_oper_argtypes; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOper_argtypes) {
			listener.enterOper_argtypes(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOper_argtypes) {
			listener.exitOper_argtypes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOper_argtypes) {
			return visitor.visitOper_argtypes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Any_operatorContext extends ParserRuleContext {
	public all_op(): All_opContext {
		return this.getRuleContext(0, All_opContext);
	}
	public colid(): ColidContext[];
	public colid(i: number): ColidContext;
	public colid(i?: number): ColidContext | ColidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ColidContext);
		} else {
			return this.getRuleContext(i, ColidContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.DOT);
		} else {
			return this.getToken(PostgreSQLParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_any_operator; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAny_operator) {
			listener.enterAny_operator(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAny_operator) {
			listener.exitAny_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAny_operator) {
			return visitor.visitAny_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Operator_with_argtypes_listContext extends ParserRuleContext {
	public operator_with_argtypes(): Operator_with_argtypesContext[];
	public operator_with_argtypes(i: number): Operator_with_argtypesContext;
	public operator_with_argtypes(i?: number): Operator_with_argtypesContext | Operator_with_argtypesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Operator_with_argtypesContext);
		} else {
			return this.getRuleContext(i, Operator_with_argtypesContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_operator_with_argtypes_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOperator_with_argtypes_list) {
			listener.enterOperator_with_argtypes_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOperator_with_argtypes_list) {
			listener.exitOperator_with_argtypes_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOperator_with_argtypes_list) {
			return visitor.visitOperator_with_argtypes_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Operator_with_argtypesContext extends ParserRuleContext {
	public any_operator(): Any_operatorContext {
		return this.getRuleContext(0, Any_operatorContext);
	}
	public oper_argtypes(): Oper_argtypesContext {
		return this.getRuleContext(0, Oper_argtypesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_operator_with_argtypes; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOperator_with_argtypes) {
			listener.enterOperator_with_argtypes(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOperator_with_argtypes) {
			listener.exitOperator_with_argtypes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOperator_with_argtypes) {
			return visitor.visitOperator_with_argtypes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DostmtContext extends ParserRuleContext {
	public KW_DO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DO, 0); }
	public dostmt_opt_list(): Dostmt_opt_listContext {
		return this.getRuleContext(0, Dostmt_opt_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_dostmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDostmt) {
			listener.enterDostmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDostmt) {
			listener.exitDostmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDostmt) {
			return visitor.visitDostmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dostmt_opt_listContext extends ParserRuleContext {
	public dostmt_opt_item(): Dostmt_opt_itemContext[];
	public dostmt_opt_item(i: number): Dostmt_opt_itemContext;
	public dostmt_opt_item(i?: number): Dostmt_opt_itemContext | Dostmt_opt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Dostmt_opt_itemContext);
		} else {
			return this.getRuleContext(i, Dostmt_opt_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_dostmt_opt_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDostmt_opt_list) {
			listener.enterDostmt_opt_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDostmt_opt_list) {
			listener.exitDostmt_opt_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDostmt_opt_list) {
			return visitor.visitDostmt_opt_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Dostmt_opt_itemContext extends ParserRuleContext {
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public KW_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public nonreservedword_or_sconst(): Nonreservedword_or_sconstContext | undefined {
		return this.tryGetRuleContext(0, Nonreservedword_or_sconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_dostmt_opt_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDostmt_opt_item) {
			listener.enterDostmt_opt_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDostmt_opt_item) {
			listener.exitDostmt_opt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDostmt_opt_item) {
			return visitor.visitDostmt_opt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatecaststmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_CAST(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CAST, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public typename(): TypenameContext[];
	public typename(i: number): TypenameContext;
	public typename(i?: number): TypenameContext | TypenameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypenameContext);
		} else {
			return this.getRuleContext(i, TypenameContext);
		}
	}
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public function_with_argtypes(): Function_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Function_with_argtypesContext);
	}
	public cast_context(): Cast_contextContext | undefined {
		return this.tryGetRuleContext(0, Cast_contextContext);
	}
	public KW_WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITHOUT, 0); }
	public KW_INOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INOUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createcaststmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatecaststmt) {
			listener.enterCreatecaststmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatecaststmt) {
			listener.exitCreatecaststmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatecaststmt) {
			return visitor.visitCreatecaststmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cast_contextContext extends ParserRuleContext {
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public KW_IMPLICIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IMPLICIT, 0); }
	public KW_ASSIGNMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ASSIGNMENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_cast_context; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCast_context) {
			listener.enterCast_context(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCast_context) {
			listener.exitCast_context(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCast_context) {
			return visitor.visitCast_context(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropcaststmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_CAST(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CAST, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public typename(): TypenameContext[];
	public typename(i: number): TypenameContext;
	public typename(i?: number): TypenameContext | TypenameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypenameContext);
		} else {
			return this.getRuleContext(i, TypenameContext);
		}
	}
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_if_exists(): Opt_if_existsContext | undefined {
		return this.tryGetRuleContext(0, Opt_if_existsContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_dropcaststmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDropcaststmt) {
			listener.enterDropcaststmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDropcaststmt) {
			listener.exitDropcaststmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDropcaststmt) {
			return visitor.visitDropcaststmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_if_existsContext extends ParserRuleContext {
	public KW_IF(): TerminalNode { return this.getToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_if_exists; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_if_exists) {
			listener.enterOpt_if_exists(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_if_exists) {
			listener.exitOpt_if_exists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_if_exists) {
			return visitor.visitOpt_if_exists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatetransformstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_TRANSFORM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TRANSFORM, 0); }
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public typename(): TypenameContext {
		return this.getRuleContext(0, TypenameContext);
	}
	public KW_LANGUAGE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public transform_element_list(): Transform_element_listContext {
		return this.getRuleContext(0, Transform_element_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_or_replace(): Opt_or_replaceContext | undefined {
		return this.tryGetRuleContext(0, Opt_or_replaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createtransformstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatetransformstmt) {
			listener.enterCreatetransformstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatetransformstmt) {
			listener.exitCreatetransformstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatetransformstmt) {
			return visitor.visitCreatetransformstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Transform_element_listContext extends ParserRuleContext {
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_SQL(): TerminalNode[];
	public KW_SQL(i: number): TerminalNode;
	public KW_SQL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_SQL);
		} else {
			return this.getToken(PostgreSQLParser.KW_SQL, i);
		}
	}
	public KW_WITH(): TerminalNode[];
	public KW_WITH(i: number): TerminalNode;
	public KW_WITH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_WITH);
		} else {
			return this.getToken(PostgreSQLParser.KW_WITH, i);
		}
	}
	public KW_FUNCTION(): TerminalNode[];
	public KW_FUNCTION(i: number): TerminalNode;
	public KW_FUNCTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_FUNCTION);
		} else {
			return this.getToken(PostgreSQLParser.KW_FUNCTION, i);
		}
	}
	public function_with_argtypes(): Function_with_argtypesContext[];
	public function_with_argtypes(i: number): Function_with_argtypesContext;
	public function_with_argtypes(i?: number): Function_with_argtypesContext | Function_with_argtypesContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Function_with_argtypesContext);
		} else {
			return this.getRuleContext(i, Function_with_argtypesContext);
		}
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COMMA, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_transform_element_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTransform_element_list) {
			listener.enterTransform_element_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTransform_element_list) {
			listener.exitTransform_element_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTransform_element_list) {
			return visitor.visitTransform_element_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DroptransformstmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_TRANSFORM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TRANSFORM, 0); }
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public typename(): TypenameContext {
		return this.getRuleContext(0, TypenameContext);
	}
	public KW_LANGUAGE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public opt_if_exists(): Opt_if_existsContext | undefined {
		return this.tryGetRuleContext(0, Opt_if_existsContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_droptransformstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDroptransformstmt) {
			listener.enterDroptransformstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDroptransformstmt) {
			listener.exitDroptransformstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDroptransformstmt) {
			return visitor.visitDroptransformstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReindexstmtContext extends ParserRuleContext {
	public KW_REINDEX(): TerminalNode { return this.getToken(PostgreSQLParser.KW_REINDEX, 0); }
	public reindex_target_type(): Reindex_target_typeContext | undefined {
		return this.tryGetRuleContext(0, Reindex_target_typeContext);
	}
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public opt_concurrently(): Opt_concurrentlyContext | undefined {
		return this.tryGetRuleContext(0, Opt_concurrentlyContext);
	}
	public reindex_target_multitable(): Reindex_target_multitableContext | undefined {
		return this.tryGetRuleContext(0, Reindex_target_multitableContext);
	}
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public reindex_option_list(): Reindex_option_listContext | undefined {
		return this.tryGetRuleContext(0, Reindex_option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_reindexstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReindexstmt) {
			listener.enterReindexstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReindexstmt) {
			listener.exitReindexstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReindexstmt) {
			return visitor.visitReindexstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reindex_target_typeContext extends ParserRuleContext {
	public KW_INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INDEX, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_reindex_target_type; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReindex_target_type) {
			listener.enterReindex_target_type(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReindex_target_type) {
			listener.exitReindex_target_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReindex_target_type) {
			return visitor.visitReindex_target_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reindex_target_multitableContext extends ParserRuleContext {
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public KW_SYSTEM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SYSTEM, 0); }
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATABASE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_reindex_target_multitable; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReindex_target_multitable) {
			listener.enterReindex_target_multitable(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReindex_target_multitable) {
			listener.exitReindex_target_multitable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReindex_target_multitable) {
			return visitor.visitReindex_target_multitable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reindex_option_listContext extends ParserRuleContext {
	public reindex_option_elem(): Reindex_option_elemContext[];
	public reindex_option_elem(i: number): Reindex_option_elemContext;
	public reindex_option_elem(i?: number): Reindex_option_elemContext | Reindex_option_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Reindex_option_elemContext);
		} else {
			return this.getRuleContext(i, Reindex_option_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_reindex_option_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReindex_option_list) {
			listener.enterReindex_option_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReindex_option_list) {
			listener.exitReindex_option_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReindex_option_list) {
			return visitor.visitReindex_option_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reindex_option_elemContext extends ParserRuleContext {
	public KW_VERBOSE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VERBOSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_reindex_option_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReindex_option_elem) {
			listener.enterReindex_option_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReindex_option_elem) {
			listener.exitReindex_option_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReindex_option_elem) {
			return visitor.visitReindex_option_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AltertblspcstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_TABLESPACE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public reloptions(): ReloptionsContext {
		return this.getRuleContext(0, ReloptionsContext);
	}
	public KW_RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_altertblspcstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAltertblspcstmt) {
			listener.enterAltertblspcstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAltertblspcstmt) {
			listener.exitAltertblspcstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAltertblspcstmt) {
			return visitor.visitAltertblspcstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenamestmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AGGREGATE, 0); }
	public aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Aggregate_with_argtypesContext);
	}
	public KW_RENAME(): TerminalNode { return this.getToken(PostgreSQLParser.KW_RENAME, 0); }
	public KW_TO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TO, 0); }
	public name(): NameContext[];
	public name(i: number): NameContext;
	public name(i?: number): NameContext | NameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameContext);
		} else {
			return this.getRuleContext(i, NameContext);
		}
	}
	public KW_COLLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATION, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public KW_CONVERSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONVERSION, 0); }
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATABASE, 0); }
	public KW_DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOMAIN, 0); }
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINT, 0); }
	public KW_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_DATA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATA, 0); }
	public KW_WRAPPER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WRAPPER, 0); }
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public function_with_argtypes(): Function_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Function_with_argtypesContext);
	}
	public KW_GROUP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GROUP, 0); }
	public roleid(): RoleidContext[];
	public roleid(i: number): RoleidContext;
	public roleid(i?: number): RoleidContext | RoleidContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RoleidContext);
		} else {
			return this.getRuleContext(i, RoleidContext);
		}
	}
	public KW_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public opt_procedural(): Opt_proceduralContext | undefined {
		return this.tryGetRuleContext(0, Opt_proceduralContext);
	}
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public KW_CLASS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CLASS, 0); }
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public KW_FAMILY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FAMILY, 0); }
	public KW_POLICY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_POLICY, 0); }
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ON, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public KW_PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PUBLICATION, 0); }
	public KW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public KW_SERVER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SERVER, 0); }
	public KW_SUBSCRIPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SUBSCRIPTION, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public relation_expr(): Relation_exprContext | undefined {
		return this.tryGetRuleContext(0, Relation_exprContext);
	}
	public KW_SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEQUENCE, 0); }
	public KW_VIEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VIEW, 0); }
	public KW_MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MATERIALIZED, 0); }
	public KW_INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INDEX, 0); }
	public opt_column(): Opt_columnContext | undefined {
		return this.tryGetRuleContext(0, Opt_columnContext);
	}
	public KW_RULE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RULE, 0); }
	public KW_TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRIGGER, 0); }
	public KW_EVENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EVENT, 0); }
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLE, 0); }
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USER, 0); }
	public KW_TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public KW_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STATISTICS, 0); }
	public KW_TEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEXT, 0); }
	public KW_SEARCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEARCH, 0); }
	public KW_PARSER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARSER, 0); }
	public KW_DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DICTIONARY, 0); }
	public KW_TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMPLATE, 0); }
	public KW_CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONFIGURATION, 0); }
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public KW_ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ATTRIBUTE, 0); }
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_renamestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRenamestmt) {
			listener.enterRenamestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRenamestmt) {
			listener.exitRenamestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRenamestmt) {
			return visitor.visitRenamestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_columnContext extends ParserRuleContext {
	public KW_COLUMN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_COLUMN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_column; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_column) {
			listener.enterOpt_column(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_column) {
			listener.exitOpt_column(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_column) {
			return visitor.visitOpt_column(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_set_dataContext extends ParserRuleContext {
	public KW_SET(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SET, 0); }
	public KW_DATA(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DATA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_set_data; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_set_data) {
			listener.enterOpt_set_data(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_set_data) {
			listener.exitOpt_set_data(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_set_data) {
			return visitor.visitOpt_set_data(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterobjectdependsstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public function_with_argtypes(): Function_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Function_with_argtypesContext);
	}
	public KW_DEPENDS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DEPENDS, 0); }
	public KW_ON(): TerminalNode[];
	public KW_ON(i: number): TerminalNode;
	public KW_ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_ON);
		} else {
			return this.getToken(PostgreSQLParser.KW_ON, i);
		}
	}
	public KW_EXTENSION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXTENSION, 0); }
	public name(): NameContext[];
	public name(i: number): NameContext;
	public name(i?: number): NameContext | NameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameContext);
		} else {
			return this.getRuleContext(i, NameContext);
		}
	}
	public opt_no(): Opt_noContext | undefined {
		return this.tryGetRuleContext(0, Opt_noContext);
	}
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public KW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINE, 0); }
	public KW_TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRIGGER, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public KW_MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MATERIALIZED, 0); }
	public KW_VIEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VIEW, 0); }
	public KW_INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INDEX, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterobjectdependsstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterobjectdependsstmt) {
			listener.enterAlterobjectdependsstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterobjectdependsstmt) {
			listener.exitAlterobjectdependsstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterobjectdependsstmt) {
			return visitor.visitAlterobjectdependsstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_noContext extends ParserRuleContext {
	public KW_NO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_no; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_no) {
			listener.enterOpt_no(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_no) {
			listener.exitOpt_no(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_no) {
			return visitor.visitOpt_no(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterobjectschemastmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AGGREGATE, 0); }
	public aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Aggregate_with_argtypesContext);
	}
	public KW_SET(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SET, 0); }
	public KW_SCHEMA(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public name(): NameContext[];
	public name(i: number): NameContext;
	public name(i?: number): NameContext | NameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameContext);
		} else {
			return this.getRuleContext(i, NameContext);
		}
	}
	public KW_COLLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATION, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public KW_CONVERSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONVERSION, 0); }
	public KW_DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOMAIN, 0); }
	public KW_EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXTENSION, 0); }
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public function_with_argtypes(): Function_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Function_with_argtypesContext);
	}
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public operator_with_argtypes(): Operator_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Operator_with_argtypesContext);
	}
	public KW_CLASS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CLASS, 0); }
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public KW_FAMILY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FAMILY, 0); }
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public KW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINE, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public relation_expr(): Relation_exprContext | undefined {
		return this.tryGetRuleContext(0, Relation_exprContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public KW_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STATISTICS, 0); }
	public KW_TEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEXT, 0); }
	public KW_SEARCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEARCH, 0); }
	public KW_PARSER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARSER, 0); }
	public KW_DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DICTIONARY, 0); }
	public KW_TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMPLATE, 0); }
	public KW_CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONFIGURATION, 0); }
	public KW_SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEQUENCE, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public KW_VIEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VIEW, 0); }
	public KW_MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MATERIALIZED, 0); }
	public KW_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterobjectschemastmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterobjectschemastmt) {
			listener.enterAlterobjectschemastmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterobjectschemastmt) {
			listener.exitAlterobjectschemastmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterobjectschemastmt) {
			return visitor.visitAlterobjectschemastmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlteroperatorstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_OPERATOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public operator_with_argtypes(): Operator_with_argtypesContext {
		return this.getRuleContext(0, Operator_with_argtypesContext);
	}
	public KW_SET(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SET, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public operator_def_list(): Operator_def_listContext {
		return this.getRuleContext(0, Operator_def_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alteroperatorstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlteroperatorstmt) {
			listener.enterAlteroperatorstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlteroperatorstmt) {
			listener.exitAlteroperatorstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlteroperatorstmt) {
			return visitor.visitAlteroperatorstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Operator_def_listContext extends ParserRuleContext {
	public operator_def_elem(): Operator_def_elemContext[];
	public operator_def_elem(i: number): Operator_def_elemContext;
	public operator_def_elem(i?: number): Operator_def_elemContext | Operator_def_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Operator_def_elemContext);
		} else {
			return this.getRuleContext(i, Operator_def_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_operator_def_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOperator_def_list) {
			listener.enterOperator_def_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOperator_def_list) {
			listener.exitOperator_def_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOperator_def_list) {
			return visitor.visitOperator_def_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Operator_def_elemContext extends ParserRuleContext {
	public collabel(): CollabelContext {
		return this.getRuleContext(0, CollabelContext);
	}
	public EQUAL(): TerminalNode { return this.getToken(PostgreSQLParser.EQUAL, 0); }
	public KW_NONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NONE, 0); }
	public operator_def_arg(): Operator_def_argContext | undefined {
		return this.tryGetRuleContext(0, Operator_def_argContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_operator_def_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOperator_def_elem) {
			listener.enterOperator_def_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOperator_def_elem) {
			listener.exitOperator_def_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOperator_def_elem) {
			return visitor.visitOperator_def_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Operator_def_argContext extends ParserRuleContext {
	public func_type(): Func_typeContext | undefined {
		return this.tryGetRuleContext(0, Func_typeContext);
	}
	public reserved_keyword(): Reserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Reserved_keywordContext);
	}
	public qual_all_op(): Qual_all_opContext | undefined {
		return this.tryGetRuleContext(0, Qual_all_opContext);
	}
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_operator_def_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOperator_def_arg) {
			listener.enterOperator_def_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOperator_def_arg) {
			listener.exitOperator_def_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOperator_def_arg) {
			return visitor.visitOperator_def_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AltertypestmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_TYPE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TYPE, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public KW_SET(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SET, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public operator_def_list(): Operator_def_listContext {
		return this.getRuleContext(0, Operator_def_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_altertypestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAltertypestmt) {
			listener.enterAltertypestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAltertypestmt) {
			listener.exitAltertypestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAltertypestmt) {
			return visitor.visitAltertypestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterownerstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AGGREGATE, 0); }
	public aggregate_with_argtypes(): Aggregate_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Aggregate_with_argtypesContext);
	}
	public KW_OWNER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OWNER, 0); }
	public KW_TO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TO, 0); }
	public rolespec(): RolespecContext {
		return this.getRuleContext(0, RolespecContext);
	}
	public KW_COLLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATION, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public KW_CONVERSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONVERSION, 0); }
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATABASE, 0); }
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public KW_DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOMAIN, 0); }
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public function_with_argtypes(): Function_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Function_with_argtypesContext);
	}
	public KW_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public opt_procedural(): Opt_proceduralContext | undefined {
		return this.tryGetRuleContext(0, Opt_proceduralContext);
	}
	public KW_LARGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LARGE, 0); }
	public KW_OBJECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OBJECT, 0); }
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public operator_with_argtypes(): Operator_with_argtypesContext | undefined {
		return this.tryGetRuleContext(0, Operator_with_argtypesContext);
	}
	public KW_CLASS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CLASS, 0); }
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public KW_FAMILY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FAMILY, 0); }
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public KW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public KW_TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public KW_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STATISTICS, 0); }
	public KW_TEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEXT, 0); }
	public KW_SEARCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEARCH, 0); }
	public KW_DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DICTIONARY, 0); }
	public KW_CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONFIGURATION, 0); }
	public KW_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_DATA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATA, 0); }
	public KW_WRAPPER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WRAPPER, 0); }
	public KW_SERVER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SERVER, 0); }
	public KW_EVENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EVENT, 0); }
	public KW_TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRIGGER, 0); }
	public KW_PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PUBLICATION, 0); }
	public KW_SUBSCRIPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SUBSCRIPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterownerstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterownerstmt) {
			listener.enterAlterownerstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterownerstmt) {
			listener.exitAlterownerstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterownerstmt) {
			return visitor.visitAlterownerstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatepublicationstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_PUBLICATION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PUBLICATION, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public opt_publication_for_tables(): Opt_publication_for_tablesContext | undefined {
		return this.tryGetRuleContext(0, Opt_publication_for_tablesContext);
	}
	public opt_definition(): Opt_definitionContext | undefined {
		return this.tryGetRuleContext(0, Opt_definitionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createpublicationstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatepublicationstmt) {
			listener.enterCreatepublicationstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatepublicationstmt) {
			listener.exitCreatepublicationstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatepublicationstmt) {
			return visitor.visitCreatepublicationstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_publication_for_tablesContext extends ParserRuleContext {
	public publication_for_tables(): Publication_for_tablesContext {
		return this.getRuleContext(0, Publication_for_tablesContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_publication_for_tables; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_publication_for_tables) {
			listener.enterOpt_publication_for_tables(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_publication_for_tables) {
			listener.exitOpt_publication_for_tables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_publication_for_tables) {
			return visitor.visitOpt_publication_for_tables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Publication_for_tablesContext extends ParserRuleContext {
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public relation_expr_list(): Relation_expr_listContext | undefined {
		return this.tryGetRuleContext(0, Relation_expr_listContext);
	}
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_TABLES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_publication_for_tables; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPublication_for_tables) {
			listener.enterPublication_for_tables(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPublication_for_tables) {
			listener.exitPublication_for_tables(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPublication_for_tables) {
			return visitor.visitPublication_for_tables(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterpublicationstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_PUBLICATION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PUBLICATION, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public definition(): DefinitionContext | undefined {
		return this.tryGetRuleContext(0, DefinitionContext);
	}
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADD, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public relation_expr_list(): Relation_expr_listContext | undefined {
		return this.tryGetRuleContext(0, Relation_expr_listContext);
	}
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DROP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterpublicationstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterpublicationstmt) {
			listener.enterAlterpublicationstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterpublicationstmt) {
			listener.exitAlterpublicationstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterpublicationstmt) {
			return visitor.visitAlterpublicationstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatesubscriptionstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_SUBSCRIPTION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SUBSCRIPTION, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_CONNECTION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CONNECTION, 0); }
	public sconst(): SconstContext {
		return this.getRuleContext(0, SconstContext);
	}
	public KW_PUBLICATION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PUBLICATION, 0); }
	public publication_name_list(): Publication_name_listContext {
		return this.getRuleContext(0, Publication_name_listContext);
	}
	public opt_definition(): Opt_definitionContext | undefined {
		return this.tryGetRuleContext(0, Opt_definitionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createsubscriptionstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatesubscriptionstmt) {
			listener.enterCreatesubscriptionstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatesubscriptionstmt) {
			listener.exitCreatesubscriptionstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatesubscriptionstmt) {
			return visitor.visitCreatesubscriptionstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Publication_name_listContext extends ParserRuleContext {
	public publication_name_item(): Publication_name_itemContext[];
	public publication_name_item(i: number): Publication_name_itemContext;
	public publication_name_item(i?: number): Publication_name_itemContext | Publication_name_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Publication_name_itemContext);
		} else {
			return this.getRuleContext(i, Publication_name_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_publication_name_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPublication_name_list) {
			listener.enterPublication_name_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPublication_name_list) {
			listener.exitPublication_name_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPublication_name_list) {
			return visitor.visitPublication_name_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Publication_name_itemContext extends ParserRuleContext {
	public collabel(): CollabelContext {
		return this.getRuleContext(0, CollabelContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_publication_name_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPublication_name_item) {
			listener.enterPublication_name_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPublication_name_item) {
			listener.exitPublication_name_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPublication_name_item) {
			return visitor.visitPublication_name_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AltersubscriptionstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_SUBSCRIPTION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SUBSCRIPTION, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public definition(): DefinitionContext | undefined {
		return this.tryGetRuleContext(0, DefinitionContext);
	}
	public KW_CONNECTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONNECTION, 0); }
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public KW_REFRESH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REFRESH, 0); }
	public KW_PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PUBLICATION, 0); }
	public opt_definition(): Opt_definitionContext | undefined {
		return this.tryGetRuleContext(0, Opt_definitionContext);
	}
	public publication_name_list(): Publication_name_listContext | undefined {
		return this.tryGetRuleContext(0, Publication_name_listContext);
	}
	public KW_ENABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ENABLE, 0); }
	public KW_DISABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DISABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_altersubscriptionstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAltersubscriptionstmt) {
			listener.enterAltersubscriptionstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAltersubscriptionstmt) {
			listener.exitAltersubscriptionstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAltersubscriptionstmt) {
			return visitor.visitAltersubscriptionstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropsubscriptionstmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_SUBSCRIPTION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SUBSCRIPTION, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_dropsubscriptionstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDropsubscriptionstmt) {
			listener.enterDropsubscriptionstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDropsubscriptionstmt) {
			listener.exitDropsubscriptionstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDropsubscriptionstmt) {
			return visitor.visitDropsubscriptionstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RulestmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_RULE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_RULE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public event(): EventContext {
		return this.getRuleContext(0, EventContext);
	}
	public KW_TO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TO, 0); }
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public KW_DO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DO, 0); }
	public ruleactionlist(): RuleactionlistContext {
		return this.getRuleContext(0, RuleactionlistContext);
	}
	public opt_or_replace(): Opt_or_replaceContext | undefined {
		return this.tryGetRuleContext(0, Opt_or_replaceContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public opt_instead(): Opt_insteadContext | undefined {
		return this.tryGetRuleContext(0, Opt_insteadContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_rulestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRulestmt) {
			listener.enterRulestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRulestmt) {
			listener.exitRulestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRulestmt) {
			return visitor.visitRulestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RuleactionlistContext extends ParserRuleContext {
	public KW_NOTHING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOTHING, 0); }
	public ruleactionstmt(): RuleactionstmtContext | undefined {
		return this.tryGetRuleContext(0, RuleactionstmtContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public ruleactionmulti(): RuleactionmultiContext | undefined {
		return this.tryGetRuleContext(0, RuleactionmultiContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_ruleactionlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRuleactionlist) {
			listener.enterRuleactionlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRuleactionlist) {
			listener.exitRuleactionlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRuleactionlist) {
			return visitor.visitRuleactionlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RuleactionmultiContext extends ParserRuleContext {
	public ruleactionstmtOrEmpty(): RuleactionstmtOrEmptyContext[];
	public ruleactionstmtOrEmpty(i: number): RuleactionstmtOrEmptyContext;
	public ruleactionstmtOrEmpty(i?: number): RuleactionstmtOrEmptyContext | RuleactionstmtOrEmptyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RuleactionstmtOrEmptyContext);
		} else {
			return this.getRuleContext(i, RuleactionstmtOrEmptyContext);
		}
	}
	public SEMI(): TerminalNode[];
	public SEMI(i: number): TerminalNode;
	public SEMI(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.SEMI);
		} else {
			return this.getToken(PostgreSQLParser.SEMI, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_ruleactionmulti; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRuleactionmulti) {
			listener.enterRuleactionmulti(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRuleactionmulti) {
			listener.exitRuleactionmulti(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRuleactionmulti) {
			return visitor.visitRuleactionmulti(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RuleactionstmtContext extends ParserRuleContext {
	public selectstmt(): SelectstmtContext | undefined {
		return this.tryGetRuleContext(0, SelectstmtContext);
	}
	public insertstmt(): InsertstmtContext | undefined {
		return this.tryGetRuleContext(0, InsertstmtContext);
	}
	public updatestmt(): UpdatestmtContext | undefined {
		return this.tryGetRuleContext(0, UpdatestmtContext);
	}
	public deletestmt(): DeletestmtContext | undefined {
		return this.tryGetRuleContext(0, DeletestmtContext);
	}
	public notifystmt(): NotifystmtContext | undefined {
		return this.tryGetRuleContext(0, NotifystmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_ruleactionstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRuleactionstmt) {
			listener.enterRuleactionstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRuleactionstmt) {
			listener.exitRuleactionstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRuleactionstmt) {
			return visitor.visitRuleactionstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RuleactionstmtOrEmptyContext extends ParserRuleContext {
	public ruleactionstmt(): RuleactionstmtContext {
		return this.getRuleContext(0, RuleactionstmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_ruleactionstmtOrEmpty; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRuleactionstmtOrEmpty) {
			listener.enterRuleactionstmtOrEmpty(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRuleactionstmtOrEmpty) {
			listener.exitRuleactionstmtOrEmpty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRuleactionstmtOrEmpty) {
			return visitor.visitRuleactionstmtOrEmpty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EventContext extends ParserRuleContext {
	public KW_SELECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SELECT, 0); }
	public KW_UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UPDATE, 0); }
	public KW_DELETE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DELETE, 0); }
	public KW_INSERT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INSERT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_event; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterEvent) {
			listener.enterEvent(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitEvent) {
			listener.exitEvent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitEvent) {
			return visitor.visitEvent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_insteadContext extends ParserRuleContext {
	public KW_INSTEAD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INSTEAD, 0); }
	public KW_ALSO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALSO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_instead; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_instead) {
			listener.enterOpt_instead(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_instead) {
			listener.exitOpt_instead(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_instead) {
			return visitor.visitOpt_instead(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NotifystmtContext extends ParserRuleContext {
	public KW_NOTIFY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_NOTIFY, 0); }
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public notify_payload(): Notify_payloadContext | undefined {
		return this.tryGetRuleContext(0, Notify_payloadContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_notifystmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterNotifystmt) {
			listener.enterNotifystmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitNotifystmt) {
			listener.exitNotifystmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitNotifystmt) {
			return visitor.visitNotifystmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Notify_payloadContext extends ParserRuleContext {
	public COMMA(): TerminalNode { return this.getToken(PostgreSQLParser.COMMA, 0); }
	public sconst(): SconstContext {
		return this.getRuleContext(0, SconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_notify_payload; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterNotify_payload) {
			listener.enterNotify_payload(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitNotify_payload) {
			listener.exitNotify_payload(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitNotify_payload) {
			return visitor.visitNotify_payload(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ListenstmtContext extends ParserRuleContext {
	public KW_LISTEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_LISTEN, 0); }
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_listenstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterListenstmt) {
			listener.enterListenstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitListenstmt) {
			listener.exitListenstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitListenstmt) {
			return visitor.visitListenstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnlistenstmtContext extends ParserRuleContext {
	public KW_UNLISTEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_UNLISTEN, 0); }
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.STAR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_unlistenstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterUnlistenstmt) {
			listener.enterUnlistenstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitUnlistenstmt) {
			listener.exitUnlistenstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitUnlistenstmt) {
			return visitor.visitUnlistenstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TransactionstmtContext extends ParserRuleContext {
	public KW_ABORT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ABORT, 0); }
	public opt_transaction(): Opt_transactionContext | undefined {
		return this.tryGetRuleContext(0, Opt_transactionContext);
	}
	public opt_transaction_chain(): Opt_transaction_chainContext | undefined {
		return this.tryGetRuleContext(0, Opt_transaction_chainContext);
	}
	public KW_BEGIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BEGIN, 0); }
	public transaction_mode_list_or_empty(): Transaction_mode_list_or_emptyContext | undefined {
		return this.tryGetRuleContext(0, Transaction_mode_list_or_emptyContext);
	}
	public KW_START(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_START, 0); }
	public KW_TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRANSACTION, 0); }
	public KW_COMMIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COMMIT, 0); }
	public KW_END(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_END, 0); }
	public KW_ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLLBACK, 0); }
	public KW_SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SAVEPOINT, 0); }
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public KW_RELEASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RELEASE, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	public KW_PREPARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PREPARE, 0); }
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public KW_PREPARED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PREPARED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_transactionstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTransactionstmt) {
			listener.enterTransactionstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTransactionstmt) {
			listener.exitTransactionstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTransactionstmt) {
			return visitor.visitTransactionstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_transactionContext extends ParserRuleContext {
	public KW_WORK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WORK, 0); }
	public KW_TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRANSACTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_transaction; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_transaction) {
			listener.enterOpt_transaction(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_transaction) {
			listener.exitOpt_transaction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_transaction) {
			return visitor.visitOpt_transaction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Transaction_mode_itemContext extends ParserRuleContext {
	public KW_ISOLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ISOLATION, 0); }
	public KW_LEVEL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEVEL, 0); }
	public iso_level(): Iso_levelContext | undefined {
		return this.tryGetRuleContext(0, Iso_levelContext);
	}
	public KW_READ(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_READ, 0); }
	public KW_ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ONLY, 0); }
	public KW_WRITE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WRITE, 0); }
	public KW_DEFERRABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFERRABLE, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_transaction_mode_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTransaction_mode_item) {
			listener.enterTransaction_mode_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTransaction_mode_item) {
			listener.exitTransaction_mode_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTransaction_mode_item) {
			return visitor.visitTransaction_mode_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Transaction_mode_listContext extends ParserRuleContext {
	public transaction_mode_item(): Transaction_mode_itemContext[];
	public transaction_mode_item(i: number): Transaction_mode_itemContext;
	public transaction_mode_item(i?: number): Transaction_mode_itemContext | Transaction_mode_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Transaction_mode_itemContext);
		} else {
			return this.getRuleContext(i, Transaction_mode_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_transaction_mode_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTransaction_mode_list) {
			listener.enterTransaction_mode_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTransaction_mode_list) {
			listener.exitTransaction_mode_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTransaction_mode_list) {
			return visitor.visitTransaction_mode_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Transaction_mode_list_or_emptyContext extends ParserRuleContext {
	public transaction_mode_list(): Transaction_mode_listContext {
		return this.getRuleContext(0, Transaction_mode_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_transaction_mode_list_or_empty; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTransaction_mode_list_or_empty) {
			listener.enterTransaction_mode_list_or_empty(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTransaction_mode_list_or_empty) {
			listener.exitTransaction_mode_list_or_empty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTransaction_mode_list_or_empty) {
			return visitor.visitTransaction_mode_list_or_empty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_transaction_chainContext extends ParserRuleContext {
	public KW_AND(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AND, 0); }
	public KW_CHAIN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CHAIN, 0); }
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_transaction_chain; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_transaction_chain) {
			listener.enterOpt_transaction_chain(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_transaction_chain) {
			listener.exitOpt_transaction_chain(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_transaction_chain) {
			return visitor.visitOpt_transaction_chain(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ViewstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public selectstmt(): SelectstmtContext {
		return this.getRuleContext(0, SelectstmtContext);
	}
	public KW_VIEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VIEW, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public KW_RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RECURSIVE, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public columnlist(): ColumnlistContext | undefined {
		return this.tryGetRuleContext(0, ColumnlistContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_OR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OR, 0); }
	public KW_REPLACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REPLACE, 0); }
	public opttemp(): OpttempContext | undefined {
		return this.tryGetRuleContext(0, OpttempContext);
	}
	public opt_check_option(): Opt_check_optionContext | undefined {
		return this.tryGetRuleContext(0, Opt_check_optionContext);
	}
	public opt_column_list(): Opt_column_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_column_listContext);
	}
	public opt_reloptions(): Opt_reloptionsContext | undefined {
		return this.tryGetRuleContext(0, Opt_reloptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_viewstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterViewstmt) {
			listener.enterViewstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitViewstmt) {
			listener.exitViewstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitViewstmt) {
			return visitor.visitViewstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_check_optionContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_CHECK(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CHECK, 0); }
	public KW_OPTION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPTION, 0); }
	public KW_CASCADED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CASCADED, 0); }
	public KW_LOCAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_check_option; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_check_option) {
			listener.enterOpt_check_option(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_check_option) {
			listener.exitOpt_check_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_check_option) {
			return visitor.visitOpt_check_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadstmtContext extends ParserRuleContext {
	public KW_LOAD(): TerminalNode { return this.getToken(PostgreSQLParser.KW_LOAD, 0); }
	public file_name(): File_nameContext {
		return this.getRuleContext(0, File_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_loadstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterLoadstmt) {
			listener.enterLoadstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitLoadstmt) {
			listener.exitLoadstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitLoadstmt) {
			return visitor.visitLoadstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatedbstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_DATABASE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DATABASE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public opt_with(): Opt_withContext | undefined {
		return this.tryGetRuleContext(0, Opt_withContext);
	}
	public createdb_opt_list(): Createdb_opt_listContext | undefined {
		return this.tryGetRuleContext(0, Createdb_opt_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createdbstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatedbstmt) {
			listener.enterCreatedbstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatedbstmt) {
			listener.exitCreatedbstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatedbstmt) {
			return visitor.visitCreatedbstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Createdb_opt_listContext extends ParserRuleContext {
	public createdb_opt_items(): Createdb_opt_itemsContext {
		return this.getRuleContext(0, Createdb_opt_itemsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createdb_opt_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatedb_opt_list) {
			listener.enterCreatedb_opt_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatedb_opt_list) {
			listener.exitCreatedb_opt_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatedb_opt_list) {
			return visitor.visitCreatedb_opt_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Createdb_opt_itemsContext extends ParserRuleContext {
	public createdb_opt_item(): Createdb_opt_itemContext[];
	public createdb_opt_item(i: number): Createdb_opt_itemContext;
	public createdb_opt_item(i?: number): Createdb_opt_itemContext | Createdb_opt_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Createdb_opt_itemContext);
		} else {
			return this.getRuleContext(i, Createdb_opt_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createdb_opt_items; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatedb_opt_items) {
			listener.enterCreatedb_opt_items(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatedb_opt_items) {
			listener.exitCreatedb_opt_items(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatedb_opt_items) {
			return visitor.visitCreatedb_opt_items(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Createdb_opt_itemContext extends ParserRuleContext {
	public createdb_opt_name(): Createdb_opt_nameContext {
		return this.getRuleContext(0, Createdb_opt_nameContext);
	}
	public signediconst(): SignediconstContext | undefined {
		return this.tryGetRuleContext(0, SignediconstContext);
	}
	public opt_boolean_or_string(): Opt_boolean_or_stringContext | undefined {
		return this.tryGetRuleContext(0, Opt_boolean_or_stringContext);
	}
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	public opt_equal(): Opt_equalContext | undefined {
		return this.tryGetRuleContext(0, Opt_equalContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createdb_opt_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatedb_opt_item) {
			listener.enterCreatedb_opt_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatedb_opt_item) {
			listener.exitCreatedb_opt_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatedb_opt_item) {
			return visitor.visitCreatedb_opt_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Createdb_opt_nameContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public KW_CONNECTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONNECTION, 0); }
	public KW_LIMIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LIMIT, 0); }
	public KW_ENCODING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ENCODING, 0); }
	public KW_LOCATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCATION, 0); }
	public KW_OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OWNER, 0); }
	public KW_TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public KW_TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMPLATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createdb_opt_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatedb_opt_name) {
			listener.enterCreatedb_opt_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatedb_opt_name) {
			listener.exitCreatedb_opt_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatedb_opt_name) {
			return visitor.visitCreatedb_opt_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_equalContext extends ParserRuleContext {
	public EQUAL(): TerminalNode { return this.getToken(PostgreSQLParser.EQUAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_equal; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_equal) {
			listener.enterOpt_equal(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_equal) {
			listener.exitOpt_equal(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_equal) {
			return visitor.visitOpt_equal(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterdatabasestmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_DATABASE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DATABASE, 0); }
	public name(): NameContext[];
	public name(i: number): NameContext;
	public name(i?: number): NameContext | NameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameContext);
		} else {
			return this.getRuleContext(i, NameContext);
		}
	}
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public KW_TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public createdb_opt_list(): Createdb_opt_listContext | undefined {
		return this.tryGetRuleContext(0, Createdb_opt_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterdatabasestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterdatabasestmt) {
			listener.enterAlterdatabasestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterdatabasestmt) {
			listener.exitAlterdatabasestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterdatabasestmt) {
			return visitor.visitAlterdatabasestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterdatabasesetstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_DATABASE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DATABASE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public setresetclause(): SetresetclauseContext {
		return this.getRuleContext(0, SetresetclauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterdatabasesetstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterdatabasesetstmt) {
			listener.enterAlterdatabasesetstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterdatabasesetstmt) {
			listener.exitAlterdatabasesetstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterdatabasesetstmt) {
			return visitor.visitAlterdatabasesetstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropdbstmtContext extends ParserRuleContext {
	public KW_DROP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_DATABASE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DATABASE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public drop_option_list(): Drop_option_listContext | undefined {
		return this.tryGetRuleContext(0, Drop_option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_with(): Opt_withContext | undefined {
		return this.tryGetRuleContext(0, Opt_withContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_dropdbstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDropdbstmt) {
			listener.enterDropdbstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDropdbstmt) {
			listener.exitDropdbstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDropdbstmt) {
			return visitor.visitDropdbstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_option_listContext extends ParserRuleContext {
	public drop_option(): Drop_optionContext[];
	public drop_option(i: number): Drop_optionContext;
	public drop_option(i?: number): Drop_optionContext | Drop_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Drop_optionContext);
		} else {
			return this.getRuleContext(i, Drop_optionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_drop_option_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_option_list) {
			listener.enterDrop_option_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_option_list) {
			listener.exitDrop_option_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_option_list) {
			return visitor.visitDrop_option_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Drop_optionContext extends ParserRuleContext {
	public KW_FORCE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FORCE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_drop_option; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDrop_option) {
			listener.enterDrop_option(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDrop_option) {
			listener.exitDrop_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDrop_option) {
			return visitor.visitDrop_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AltercollationstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_COLLATION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_COLLATION, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public KW_REFRESH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_REFRESH, 0); }
	public KW_VERSION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VERSION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_altercollationstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAltercollationstmt) {
			listener.enterAltercollationstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAltercollationstmt) {
			listener.exitAltercollationstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAltercollationstmt) {
			return visitor.visitAltercollationstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AltersystemstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_SYSTEM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SYSTEM, 0); }
	public generic_set(): Generic_setContext {
		return this.getRuleContext(0, Generic_setContext);
	}
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public KW_RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESET, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_altersystemstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAltersystemstmt) {
			listener.enterAltersystemstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAltersystemstmt) {
			listener.exitAltersystemstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAltersystemstmt) {
			return visitor.visitAltersystemstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatedomainstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_DOMAIN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DOMAIN, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public typename(): TypenameContext {
		return this.getRuleContext(0, TypenameContext);
	}
	public colquallist(): ColquallistContext {
		return this.getRuleContext(0, ColquallistContext);
	}
	public opt_as(): Opt_asContext | undefined {
		return this.tryGetRuleContext(0, Opt_asContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createdomainstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreatedomainstmt) {
			listener.enterCreatedomainstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreatedomainstmt) {
			listener.exitCreatedomainstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreatedomainstmt) {
			return visitor.visitCreatedomainstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterdomainstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_DOMAIN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DOMAIN, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public alter_column_default(): Alter_column_defaultContext | undefined {
		return this.tryGetRuleContext(0, Alter_column_defaultContext);
	}
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADD, 0); }
	public tableconstraint(): TableconstraintContext | undefined {
		return this.tryGetRuleContext(0, TableconstraintContext);
	}
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINT, 0); }
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public KW_VALIDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALIDATE, 0); }
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public opt_drop_behavior(): Opt_drop_behaviorContext | undefined {
		return this.tryGetRuleContext(0, Opt_drop_behaviorContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alterdomainstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlterdomainstmt) {
			listener.enterAlterdomainstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlterdomainstmt) {
			listener.exitAlterdomainstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlterdomainstmt) {
			return visitor.visitAlterdomainstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_asContext extends ParserRuleContext {
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_as; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_as) {
			listener.enterOpt_as(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_as) {
			listener.exitOpt_as(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_as) {
			return visitor.visitOpt_as(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AltertsdictionarystmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_TEXT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TEXT, 0); }
	public KW_SEARCH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SEARCH, 0); }
	public KW_DICTIONARY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DICTIONARY, 0); }
	public any_name(): Any_nameContext {
		return this.getRuleContext(0, Any_nameContext);
	}
	public definition(): DefinitionContext {
		return this.getRuleContext(0, DefinitionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_altertsdictionarystmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAltertsdictionarystmt) {
			listener.enterAltertsdictionarystmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAltertsdictionarystmt) {
			listener.exitAltertsdictionarystmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAltertsdictionarystmt) {
			return visitor.visitAltertsdictionarystmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AltertsconfigurationstmtContext extends ParserRuleContext {
	public KW_ALTER(): TerminalNode[];
	public KW_ALTER(i: number): TerminalNode;
	public KW_ALTER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_ALTER);
		} else {
			return this.getToken(PostgreSQLParser.KW_ALTER, i);
		}
	}
	public KW_TEXT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TEXT, 0); }
	public KW_SEARCH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SEARCH, 0); }
	public KW_CONFIGURATION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CONFIGURATION, 0); }
	public any_name(): Any_nameContext[];
	public any_name(i: number): Any_nameContext;
	public any_name(i?: number): Any_nameContext | Any_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Any_nameContext);
		} else {
			return this.getRuleContext(i, Any_nameContext);
		}
	}
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADD, 0); }
	public KW_MAPPING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_MAPPING, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public any_with(): Any_withContext | undefined {
		return this.tryGetRuleContext(0, Any_withContext);
	}
	public any_name_list(): Any_name_listContext | undefined {
		return this.tryGetRuleContext(0, Any_name_listContext);
	}
	public KW_REPLACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REPLACE, 0); }
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_altertsconfigurationstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAltertsconfigurationstmt) {
			listener.enterAltertsconfigurationstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAltertsconfigurationstmt) {
			listener.exitAltertsconfigurationstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAltertsconfigurationstmt) {
			return visitor.visitAltertsconfigurationstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Any_withContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_any_with; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAny_with) {
			listener.enterAny_with(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAny_with) {
			listener.exitAny_with(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAny_with) {
			return visitor.visitAny_with(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateconversionstmtContext extends ParserRuleContext {
	public KW_CREATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_CONVERSION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CONVERSION, 0); }
	public any_name(): Any_nameContext[];
	public any_name(i: number): Any_nameContext;
	public any_name(i?: number): Any_nameContext | Any_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Any_nameContext);
		} else {
			return this.getRuleContext(i, Any_nameContext);
		}
	}
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public sconst(): SconstContext[];
	public sconst(i: number): SconstContext;
	public sconst(i?: number): SconstContext | SconstContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SconstContext);
		} else {
			return this.getRuleContext(i, SconstContext);
		}
	}
	public KW_TO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TO, 0); }
	public KW_FROM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FROM, 0); }
	public opt_default(): Opt_defaultContext | undefined {
		return this.tryGetRuleContext(0, Opt_defaultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_createconversionstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCreateconversionstmt) {
			listener.enterCreateconversionstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCreateconversionstmt) {
			listener.exitCreateconversionstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCreateconversionstmt) {
			return visitor.visitCreateconversionstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClusterstmtContext extends ParserRuleContext {
	public KW_CLUSTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CLUSTER, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public opt_verbose(): Opt_verboseContext | undefined {
		return this.tryGetRuleContext(0, Opt_verboseContext);
	}
	public cluster_index_specification(): Cluster_index_specificationContext | undefined {
		return this.tryGetRuleContext(0, Cluster_index_specificationContext);
	}
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_clusterstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterClusterstmt) {
			listener.enterClusterstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitClusterstmt) {
			listener.exitClusterstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitClusterstmt) {
			return visitor.visitClusterstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cluster_index_specificationContext extends ParserRuleContext {
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_cluster_index_specification; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCluster_index_specification) {
			listener.enterCluster_index_specification(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCluster_index_specification) {
			listener.exitCluster_index_specification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCluster_index_specification) {
			return visitor.visitCluster_index_specification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VacuumstmtContext extends ParserRuleContext {
	public KW_VACUUM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VACUUM, 0); }
	public opt_full(): Opt_fullContext | undefined {
		return this.tryGetRuleContext(0, Opt_fullContext);
	}
	public opt_freeze(): Opt_freezeContext | undefined {
		return this.tryGetRuleContext(0, Opt_freezeContext);
	}
	public opt_verbose(): Opt_verboseContext | undefined {
		return this.tryGetRuleContext(0, Opt_verboseContext);
	}
	public opt_analyze(): Opt_analyzeContext | undefined {
		return this.tryGetRuleContext(0, Opt_analyzeContext);
	}
	public opt_vacuum_relation_list(): Opt_vacuum_relation_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_vacuum_relation_listContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public vac_analyze_option_list(): Vac_analyze_option_listContext | undefined {
		return this.tryGetRuleContext(0, Vac_analyze_option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_vacuumstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVacuumstmt) {
			listener.enterVacuumstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVacuumstmt) {
			listener.exitVacuumstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVacuumstmt) {
			return visitor.visitVacuumstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AnalyzestmtContext extends ParserRuleContext {
	public analyze_keyword(): Analyze_keywordContext {
		return this.getRuleContext(0, Analyze_keywordContext);
	}
	public opt_verbose(): Opt_verboseContext | undefined {
		return this.tryGetRuleContext(0, Opt_verboseContext);
	}
	public opt_vacuum_relation_list(): Opt_vacuum_relation_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_vacuum_relation_listContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public vac_analyze_option_list(): Vac_analyze_option_listContext | undefined {
		return this.tryGetRuleContext(0, Vac_analyze_option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_analyzestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAnalyzestmt) {
			listener.enterAnalyzestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAnalyzestmt) {
			listener.exitAnalyzestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAnalyzestmt) {
			return visitor.visitAnalyzestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Vac_analyze_option_listContext extends ParserRuleContext {
	public vac_analyze_option_elem(): Vac_analyze_option_elemContext[];
	public vac_analyze_option_elem(i: number): Vac_analyze_option_elemContext;
	public vac_analyze_option_elem(i?: number): Vac_analyze_option_elemContext | Vac_analyze_option_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Vac_analyze_option_elemContext);
		} else {
			return this.getRuleContext(i, Vac_analyze_option_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_vac_analyze_option_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVac_analyze_option_list) {
			listener.enterVac_analyze_option_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVac_analyze_option_list) {
			listener.exitVac_analyze_option_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVac_analyze_option_list) {
			return visitor.visitVac_analyze_option_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Analyze_keywordContext extends ParserRuleContext {
	public KW_ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ANALYZE, 0); }
	public KW_ANALYSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ANALYSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_analyze_keyword; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAnalyze_keyword) {
			listener.enterAnalyze_keyword(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAnalyze_keyword) {
			listener.exitAnalyze_keyword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAnalyze_keyword) {
			return visitor.visitAnalyze_keyword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Vac_analyze_option_elemContext extends ParserRuleContext {
	public vac_analyze_option_name(): Vac_analyze_option_nameContext {
		return this.getRuleContext(0, Vac_analyze_option_nameContext);
	}
	public vac_analyze_option_arg(): Vac_analyze_option_argContext | undefined {
		return this.tryGetRuleContext(0, Vac_analyze_option_argContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_vac_analyze_option_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVac_analyze_option_elem) {
			listener.enterVac_analyze_option_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVac_analyze_option_elem) {
			listener.exitVac_analyze_option_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVac_analyze_option_elem) {
			return visitor.visitVac_analyze_option_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Vac_analyze_option_nameContext extends ParserRuleContext {
	public nonreservedword(): NonreservedwordContext | undefined {
		return this.tryGetRuleContext(0, NonreservedwordContext);
	}
	public analyze_keyword(): Analyze_keywordContext | undefined {
		return this.tryGetRuleContext(0, Analyze_keywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_vac_analyze_option_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVac_analyze_option_name) {
			listener.enterVac_analyze_option_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVac_analyze_option_name) {
			listener.exitVac_analyze_option_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVac_analyze_option_name) {
			return visitor.visitVac_analyze_option_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Vac_analyze_option_argContext extends ParserRuleContext {
	public opt_boolean_or_string(): Opt_boolean_or_stringContext | undefined {
		return this.tryGetRuleContext(0, Opt_boolean_or_stringContext);
	}
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_vac_analyze_option_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVac_analyze_option_arg) {
			listener.enterVac_analyze_option_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVac_analyze_option_arg) {
			listener.exitVac_analyze_option_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVac_analyze_option_arg) {
			return visitor.visitVac_analyze_option_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_analyzeContext extends ParserRuleContext {
	public analyze_keyword(): Analyze_keywordContext {
		return this.getRuleContext(0, Analyze_keywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_analyze; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_analyze) {
			listener.enterOpt_analyze(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_analyze) {
			listener.exitOpt_analyze(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_analyze) {
			return visitor.visitOpt_analyze(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_verboseContext extends ParserRuleContext {
	public KW_VERBOSE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VERBOSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_verbose; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_verbose) {
			listener.enterOpt_verbose(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_verbose) {
			listener.exitOpt_verbose(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_verbose) {
			return visitor.visitOpt_verbose(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_fullContext extends ParserRuleContext {
	public KW_FULL(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_full; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_full) {
			listener.enterOpt_full(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_full) {
			listener.exitOpt_full(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_full) {
			return visitor.visitOpt_full(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_freezeContext extends ParserRuleContext {
	public KW_FREEZE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FREEZE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_freeze; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_freeze) {
			listener.enterOpt_freeze(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_freeze) {
			listener.exitOpt_freeze(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_freeze) {
			return visitor.visitOpt_freeze(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_name_listContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public name_list(): Name_listContext {
		return this.getRuleContext(0, Name_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_name_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_name_list) {
			listener.enterOpt_name_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_name_list) {
			listener.exitOpt_name_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_name_list) {
			return visitor.visitOpt_name_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Vacuum_relationContext extends ParserRuleContext {
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public opt_name_list(): Opt_name_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_vacuum_relation; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVacuum_relation) {
			listener.enterVacuum_relation(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVacuum_relation) {
			listener.exitVacuum_relation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVacuum_relation) {
			return visitor.visitVacuum_relation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Vacuum_relation_listContext extends ParserRuleContext {
	public vacuum_relation(): Vacuum_relationContext[];
	public vacuum_relation(i: number): Vacuum_relationContext;
	public vacuum_relation(i?: number): Vacuum_relationContext | Vacuum_relationContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Vacuum_relationContext);
		} else {
			return this.getRuleContext(i, Vacuum_relationContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_vacuum_relation_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterVacuum_relation_list) {
			listener.enterVacuum_relation_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitVacuum_relation_list) {
			listener.exitVacuum_relation_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitVacuum_relation_list) {
			return visitor.visitVacuum_relation_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_vacuum_relation_listContext extends ParserRuleContext {
	public vacuum_relation_list(): Vacuum_relation_listContext {
		return this.getRuleContext(0, Vacuum_relation_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_vacuum_relation_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_vacuum_relation_list) {
			listener.enterOpt_vacuum_relation_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_vacuum_relation_list) {
			listener.exitOpt_vacuum_relation_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_vacuum_relation_list) {
			return visitor.visitOpt_vacuum_relation_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExplainstmtContext extends ParserRuleContext {
	public KW_EXPLAIN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXPLAIN, 0); }
	public explainablestmt(): ExplainablestmtContext {
		return this.getRuleContext(0, ExplainablestmtContext);
	}
	public analyze_keyword(): Analyze_keywordContext | undefined {
		return this.tryGetRuleContext(0, Analyze_keywordContext);
	}
	public opt_verbose(): Opt_verboseContext | undefined {
		return this.tryGetRuleContext(0, Opt_verboseContext);
	}
	public KW_VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VERBOSE, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public explain_option_list(): Explain_option_listContext | undefined {
		return this.tryGetRuleContext(0, Explain_option_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_explainstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExplainstmt) {
			listener.enterExplainstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExplainstmt) {
			listener.exitExplainstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExplainstmt) {
			return visitor.visitExplainstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExplainablestmtContext extends ParserRuleContext {
	public selectstmt(): SelectstmtContext | undefined {
		return this.tryGetRuleContext(0, SelectstmtContext);
	}
	public insertstmt(): InsertstmtContext | undefined {
		return this.tryGetRuleContext(0, InsertstmtContext);
	}
	public updatestmt(): UpdatestmtContext | undefined {
		return this.tryGetRuleContext(0, UpdatestmtContext);
	}
	public deletestmt(): DeletestmtContext | undefined {
		return this.tryGetRuleContext(0, DeletestmtContext);
	}
	public declarecursorstmt(): DeclarecursorstmtContext | undefined {
		return this.tryGetRuleContext(0, DeclarecursorstmtContext);
	}
	public createasstmt(): CreateasstmtContext | undefined {
		return this.tryGetRuleContext(0, CreateasstmtContext);
	}
	public creatematviewstmt(): CreatematviewstmtContext | undefined {
		return this.tryGetRuleContext(0, CreatematviewstmtContext);
	}
	public refreshmatviewstmt(): RefreshmatviewstmtContext | undefined {
		return this.tryGetRuleContext(0, RefreshmatviewstmtContext);
	}
	public executestmt(): ExecutestmtContext | undefined {
		return this.tryGetRuleContext(0, ExecutestmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_explainablestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExplainablestmt) {
			listener.enterExplainablestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExplainablestmt) {
			listener.exitExplainablestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExplainablestmt) {
			return visitor.visitExplainablestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Explain_option_listContext extends ParserRuleContext {
	public explain_option_elem(): Explain_option_elemContext[];
	public explain_option_elem(i: number): Explain_option_elemContext;
	public explain_option_elem(i?: number): Explain_option_elemContext | Explain_option_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Explain_option_elemContext);
		} else {
			return this.getRuleContext(i, Explain_option_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_explain_option_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExplain_option_list) {
			listener.enterExplain_option_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExplain_option_list) {
			listener.exitExplain_option_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExplain_option_list) {
			return visitor.visitExplain_option_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Explain_option_elemContext extends ParserRuleContext {
	public explain_option_name(): Explain_option_nameContext {
		return this.getRuleContext(0, Explain_option_nameContext);
	}
	public explain_option_arg(): Explain_option_argContext | undefined {
		return this.tryGetRuleContext(0, Explain_option_argContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_explain_option_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExplain_option_elem) {
			listener.enterExplain_option_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExplain_option_elem) {
			listener.exitExplain_option_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExplain_option_elem) {
			return visitor.visitExplain_option_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Explain_option_nameContext extends ParserRuleContext {
	public nonreservedword(): NonreservedwordContext | undefined {
		return this.tryGetRuleContext(0, NonreservedwordContext);
	}
	public analyze_keyword(): Analyze_keywordContext | undefined {
		return this.tryGetRuleContext(0, Analyze_keywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_explain_option_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExplain_option_name) {
			listener.enterExplain_option_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExplain_option_name) {
			listener.exitExplain_option_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExplain_option_name) {
			return visitor.visitExplain_option_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Explain_option_argContext extends ParserRuleContext {
	public opt_boolean_or_string(): Opt_boolean_or_stringContext | undefined {
		return this.tryGetRuleContext(0, Opt_boolean_or_stringContext);
	}
	public numericonly(): NumericonlyContext | undefined {
		return this.tryGetRuleContext(0, NumericonlyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_explain_option_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExplain_option_arg) {
			listener.enterExplain_option_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExplain_option_arg) {
			listener.exitExplain_option_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExplain_option_arg) {
			return visitor.visitExplain_option_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PreparestmtContext extends ParserRuleContext {
	public KW_PREPARE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PREPARE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public preparablestmt(): PreparablestmtContext {
		return this.getRuleContext(0, PreparablestmtContext);
	}
	public prep_type_clause(): Prep_type_clauseContext | undefined {
		return this.tryGetRuleContext(0, Prep_type_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_preparestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPreparestmt) {
			listener.enterPreparestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPreparestmt) {
			listener.exitPreparestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPreparestmt) {
			return visitor.visitPreparestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Prep_type_clauseContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public type_list(): Type_listContext {
		return this.getRuleContext(0, Type_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_prep_type_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPrep_type_clause) {
			listener.enterPrep_type_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPrep_type_clause) {
			listener.exitPrep_type_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPrep_type_clause) {
			return visitor.visitPrep_type_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PreparablestmtContext extends ParserRuleContext {
	public selectstmt(): SelectstmtContext | undefined {
		return this.tryGetRuleContext(0, SelectstmtContext);
	}
	public insertstmt(): InsertstmtContext | undefined {
		return this.tryGetRuleContext(0, InsertstmtContext);
	}
	public updatestmt(): UpdatestmtContext | undefined {
		return this.tryGetRuleContext(0, UpdatestmtContext);
	}
	public deletestmt(): DeletestmtContext | undefined {
		return this.tryGetRuleContext(0, DeletestmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_preparablestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPreparablestmt) {
			listener.enterPreparablestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPreparablestmt) {
			listener.exitPreparablestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPreparablestmt) {
			return visitor.visitPreparablestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecutestmtContext extends ParserRuleContext {
	public KW_EXECUTE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXECUTE, 0); }
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public execute_param_clause(): Execute_param_clauseContext | undefined {
		return this.tryGetRuleContext(0, Execute_param_clauseContext);
	}
	public KW_CREATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public create_as_target(): Create_as_targetContext | undefined {
		return this.tryGetRuleContext(0, Create_as_targetContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public opttemp(): OpttempContext | undefined {
		return this.tryGetRuleContext(0, OpttempContext);
	}
	public opt_with_data(): Opt_with_dataContext | undefined {
		return this.tryGetRuleContext(0, Opt_with_dataContext);
	}
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_executestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExecutestmt) {
			listener.enterExecutestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExecutestmt) {
			listener.exitExecutestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExecutestmt) {
			return visitor.visitExecutestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Execute_param_clauseContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_execute_param_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExecute_param_clause) {
			listener.enterExecute_param_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExecute_param_clause) {
			listener.exitExecute_param_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExecute_param_clause) {
			return visitor.visitExecute_param_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeallocatestmtContext extends ParserRuleContext {
	public KW_DEALLOCATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DEALLOCATE, 0); }
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	public KW_PREPARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PREPARE, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_deallocatestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDeallocatestmt) {
			listener.enterDeallocatestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDeallocatestmt) {
			listener.exitDeallocatestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDeallocatestmt) {
			return visitor.visitDeallocatestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class InsertstmtContext extends ParserRuleContext {
	public KW_INSERT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INSERT, 0); }
	public KW_INTO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INTO, 0); }
	public insert_target(): Insert_targetContext {
		return this.getRuleContext(0, Insert_targetContext);
	}
	public insert_rest(): Insert_restContext {
		return this.getRuleContext(0, Insert_restContext);
	}
	public opt_with_clause(): Opt_with_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_with_clauseContext);
	}
	public opt_on_conflict(): Opt_on_conflictContext | undefined {
		return this.tryGetRuleContext(0, Opt_on_conflictContext);
	}
	public returning_clause(): Returning_clauseContext | undefined {
		return this.tryGetRuleContext(0, Returning_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_insertstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterInsertstmt) {
			listener.enterInsertstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitInsertstmt) {
			listener.exitInsertstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitInsertstmt) {
			return visitor.visitInsertstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_targetContext extends ParserRuleContext {
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_insert_target; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterInsert_target) {
			listener.enterInsert_target(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitInsert_target) {
			listener.exitInsert_target(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitInsert_target) {
			return visitor.visitInsert_target(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_restContext extends ParserRuleContext {
	public selectstmt(): SelectstmtContext | undefined {
		return this.tryGetRuleContext(0, SelectstmtContext);
	}
	public KW_OVERRIDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OVERRIDING, 0); }
	public override_kind(): Override_kindContext | undefined {
		return this.tryGetRuleContext(0, Override_kindContext);
	}
	public KW_VALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALUE, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public insert_column_list(): Insert_column_listContext | undefined {
		return this.tryGetRuleContext(0, Insert_column_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	public KW_VALUES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALUES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_insert_rest; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterInsert_rest) {
			listener.enterInsert_rest(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitInsert_rest) {
			listener.exitInsert_rest(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitInsert_rest) {
			return visitor.visitInsert_rest(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Override_kindContext extends ParserRuleContext {
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USER, 0); }
	public KW_SYSTEM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SYSTEM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_override_kind; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOverride_kind) {
			listener.enterOverride_kind(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOverride_kind) {
			listener.exitOverride_kind(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOverride_kind) {
			return visitor.visitOverride_kind(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_column_listContext extends ParserRuleContext {
	public insert_column_item(): Insert_column_itemContext[];
	public insert_column_item(i: number): Insert_column_itemContext;
	public insert_column_item(i?: number): Insert_column_itemContext | Insert_column_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Insert_column_itemContext);
		} else {
			return this.getRuleContext(i, Insert_column_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_insert_column_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterInsert_column_list) {
			listener.enterInsert_column_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitInsert_column_list) {
			listener.exitInsert_column_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitInsert_column_list) {
			return visitor.visitInsert_column_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Insert_column_itemContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public opt_indirection(): Opt_indirectionContext {
		return this.getRuleContext(0, Opt_indirectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_insert_column_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterInsert_column_item) {
			listener.enterInsert_column_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitInsert_column_item) {
			listener.exitInsert_column_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitInsert_column_item) {
			return visitor.visitInsert_column_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_on_conflictContext extends ParserRuleContext {
	public KW_ON(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ON, 0); }
	public KW_CONFLICT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CONFLICT, 0); }
	public KW_DO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DO, 0); }
	public KW_UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UPDATE, 0); }
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public set_clause_list(): Set_clause_listContext | undefined {
		return this.tryGetRuleContext(0, Set_clause_listContext);
	}
	public KW_NOTHING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOTHING, 0); }
	public opt_conf_expr(): Opt_conf_exprContext | undefined {
		return this.tryGetRuleContext(0, Opt_conf_exprContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_on_conflict; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_on_conflict) {
			listener.enterOpt_on_conflict(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_on_conflict) {
			listener.exitOpt_on_conflict(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_on_conflict) {
			return visitor.visitOpt_on_conflict(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_conf_exprContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public index_params(): Index_paramsContext | undefined {
		return this.tryGetRuleContext(0, Index_paramsContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ON, 0); }
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINT, 0); }
	public name(): NameContext | undefined {
		return this.tryGetRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_conf_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_conf_expr) {
			listener.enterOpt_conf_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_conf_expr) {
			listener.exitOpt_conf_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_conf_expr) {
			return visitor.visitOpt_conf_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Returning_clauseContext extends ParserRuleContext {
	public KW_RETURNING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_RETURNING, 0); }
	public target_list(): Target_listContext {
		return this.getRuleContext(0, Target_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_returning_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReturning_clause) {
			listener.enterReturning_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReturning_clause) {
			listener.exitReturning_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReturning_clause) {
			return visitor.visitReturning_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeletestmtContext extends ParserRuleContext {
	public KW_DELETE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DELETE, 0); }
	public KW_FROM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FROM, 0); }
	public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
		return this.getRuleContext(0, Relation_expr_opt_aliasContext);
	}
	public opt_with_clause(): Opt_with_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_with_clauseContext);
	}
	public using_clause(): Using_clauseContext | undefined {
		return this.tryGetRuleContext(0, Using_clauseContext);
	}
	public where_or_current_clause(): Where_or_current_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_or_current_clauseContext);
	}
	public returning_clause(): Returning_clauseContext | undefined {
		return this.tryGetRuleContext(0, Returning_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_deletestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDeletestmt) {
			listener.enterDeletestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDeletestmt) {
			listener.exitDeletestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDeletestmt) {
			return visitor.visitDeletestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Using_clauseContext extends ParserRuleContext {
	public KW_USING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_USING, 0); }
	public from_list(): From_listContext {
		return this.getRuleContext(0, From_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_using_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterUsing_clause) {
			listener.enterUsing_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitUsing_clause) {
			listener.exitUsing_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitUsing_clause) {
			return visitor.visitUsing_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LockstmtContext extends ParserRuleContext {
	public KW_LOCK(): TerminalNode { return this.getToken(PostgreSQLParser.KW_LOCK, 0); }
	public relation_expr_list(): Relation_expr_listContext {
		return this.getRuleContext(0, Relation_expr_listContext);
	}
	public opt_table(): Opt_tableContext | undefined {
		return this.tryGetRuleContext(0, Opt_tableContext);
	}
	public opt_lock(): Opt_lockContext | undefined {
		return this.tryGetRuleContext(0, Opt_lockContext);
	}
	public opt_nowait(): Opt_nowaitContext | undefined {
		return this.tryGetRuleContext(0, Opt_nowaitContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_lockstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterLockstmt) {
			listener.enterLockstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitLockstmt) {
			listener.exitLockstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitLockstmt) {
			return visitor.visitLockstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_lockContext extends ParserRuleContext {
	public KW_IN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_IN, 0); }
	public lock_type(): Lock_typeContext {
		return this.getRuleContext(0, Lock_typeContext);
	}
	public KW_MODE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_MODE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_lock; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_lock) {
			listener.enterOpt_lock(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_lock) {
			listener.exitOpt_lock(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_lock) {
			return visitor.visitOpt_lock(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Lock_typeContext extends ParserRuleContext {
	public KW_ACCESS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ACCESS, 0); }
	public KW_SHARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SHARE, 0); }
	public KW_EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXCLUSIVE, 0); }
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROW, 0); }
	public KW_UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UPDATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_lock_type; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterLock_type) {
			listener.enterLock_type(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitLock_type) {
			listener.exitLock_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitLock_type) {
			return visitor.visitLock_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_nowaitContext extends ParserRuleContext {
	public KW_NOWAIT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_NOWAIT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_nowait; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_nowait) {
			listener.enterOpt_nowait(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_nowait) {
			listener.exitOpt_nowait(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_nowait) {
			return visitor.visitOpt_nowait(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_nowait_or_skipContext extends ParserRuleContext {
	public KW_NOWAIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOWAIT, 0); }
	public KW_SKIP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SKIP, 0); }
	public KW_LOCKED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCKED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_nowait_or_skip; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_nowait_or_skip) {
			listener.enterOpt_nowait_or_skip(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_nowait_or_skip) {
			listener.exitOpt_nowait_or_skip(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_nowait_or_skip) {
			return visitor.visitOpt_nowait_or_skip(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UpdatestmtContext extends ParserRuleContext {
	public KW_UPDATE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_UPDATE, 0); }
	public relation_expr_opt_alias(): Relation_expr_opt_aliasContext {
		return this.getRuleContext(0, Relation_expr_opt_aliasContext);
	}
	public KW_SET(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SET, 0); }
	public set_clause_list(): Set_clause_listContext {
		return this.getRuleContext(0, Set_clause_listContext);
	}
	public opt_with_clause(): Opt_with_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_with_clauseContext);
	}
	public from_clause(): From_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_clauseContext);
	}
	public where_or_current_clause(): Where_or_current_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_or_current_clauseContext);
	}
	public returning_clause(): Returning_clauseContext | undefined {
		return this.tryGetRuleContext(0, Returning_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_updatestmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterUpdatestmt) {
			listener.enterUpdatestmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitUpdatestmt) {
			listener.exitUpdatestmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitUpdatestmt) {
			return visitor.visitUpdatestmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_clause_listContext extends ParserRuleContext {
	public set_clause(): Set_clauseContext[];
	public set_clause(i: number): Set_clauseContext;
	public set_clause(i?: number): Set_clauseContext | Set_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Set_clauseContext);
		} else {
			return this.getRuleContext(i, Set_clauseContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_set_clause_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_clause_list) {
			listener.enterSet_clause_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_clause_list) {
			listener.exitSet_clause_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_clause_list) {
			return visitor.visitSet_clause_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_clauseContext extends ParserRuleContext {
	public set_target(): Set_targetContext | undefined {
		return this.tryGetRuleContext(0, Set_targetContext);
	}
	public EQUAL(): TerminalNode { return this.getToken(PostgreSQLParser.EQUAL, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public set_target_list(): Set_target_listContext | undefined {
		return this.tryGetRuleContext(0, Set_target_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_set_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_clause) {
			listener.enterSet_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_clause) {
			listener.exitSet_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_clause) {
			return visitor.visitSet_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_targetContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public opt_indirection(): Opt_indirectionContext {
		return this.getRuleContext(0, Opt_indirectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_set_target; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_target) {
			listener.enterSet_target(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_target) {
			listener.exitSet_target(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_target) {
			return visitor.visitSet_target(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_target_listContext extends ParserRuleContext {
	public set_target(): Set_targetContext[];
	public set_target(i: number): Set_targetContext;
	public set_target(i?: number): Set_targetContext | Set_targetContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Set_targetContext);
		} else {
			return this.getRuleContext(i, Set_targetContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_set_target_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_target_list) {
			listener.enterSet_target_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_target_list) {
			listener.exitSet_target_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_target_list) {
			return visitor.visitSet_target_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeclarecursorstmtContext extends ParserRuleContext {
	public KW_DECLARE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DECLARE, 0); }
	public cursor_name(): Cursor_nameContext {
		return this.getRuleContext(0, Cursor_nameContext);
	}
	public cursor_options(): Cursor_optionsContext {
		return this.getRuleContext(0, Cursor_optionsContext);
	}
	public KW_CURSOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CURSOR, 0); }
	public opt_hold(): Opt_holdContext {
		return this.getRuleContext(0, Opt_holdContext);
	}
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public selectstmt(): SelectstmtContext {
		return this.getRuleContext(0, SelectstmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_declarecursorstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDeclarecursorstmt) {
			listener.enterDeclarecursorstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDeclarecursorstmt) {
			listener.exitDeclarecursorstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDeclarecursorstmt) {
			return visitor.visitDeclarecursorstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cursor_nameContext extends ParserRuleContext {
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_cursor_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCursor_name) {
			listener.enterCursor_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCursor_name) {
			listener.exitCursor_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCursor_name) {
			return visitor.visitCursor_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cursor_optionsContext extends ParserRuleContext {
	public KW_NO(): TerminalNode[];
	public KW_NO(i: number): TerminalNode;
	public KW_NO(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_NO);
		} else {
			return this.getToken(PostgreSQLParser.KW_NO, i);
		}
	}
	public KW_SCROLL(): TerminalNode[];
	public KW_SCROLL(i: number): TerminalNode;
	public KW_SCROLL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_SCROLL);
		} else {
			return this.getToken(PostgreSQLParser.KW_SCROLL, i);
		}
	}
	public KW_BINARY(): TerminalNode[];
	public KW_BINARY(i: number): TerminalNode;
	public KW_BINARY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_BINARY);
		} else {
			return this.getToken(PostgreSQLParser.KW_BINARY, i);
		}
	}
	public KW_INSENSITIVE(): TerminalNode[];
	public KW_INSENSITIVE(i: number): TerminalNode;
	public KW_INSENSITIVE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_INSENSITIVE);
		} else {
			return this.getToken(PostgreSQLParser.KW_INSENSITIVE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_cursor_options; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCursor_options) {
			listener.enterCursor_options(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCursor_options) {
			listener.exitCursor_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCursor_options) {
			return visitor.visitCursor_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_holdContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_HOLD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_HOLD, 0); }
	public KW_WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITHOUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_hold; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_hold) {
			listener.enterOpt_hold(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_hold) {
			listener.exitOpt_hold(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_hold) {
			return visitor.visitOpt_hold(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SelectstmtContext extends ParserRuleContext {
	public select_no_parens(): Select_no_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_no_parensContext);
	}
	public select_with_parens(): Select_with_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_with_parensContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_selectstmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSelectstmt) {
			listener.enterSelectstmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSelectstmt) {
			listener.exitSelectstmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSelectstmt) {
			return visitor.visitSelectstmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_with_parensContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public select_no_parens(): Select_no_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_no_parensContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public select_with_parens(): Select_with_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_with_parensContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_select_with_parens; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSelect_with_parens) {
			listener.enterSelect_with_parens(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSelect_with_parens) {
			listener.exitSelect_with_parens(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSelect_with_parens) {
			return visitor.visitSelect_with_parens(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_no_parensContext extends ParserRuleContext {
	public select_clause(): Select_clauseContext {
		return this.getRuleContext(0, Select_clauseContext);
	}
	public opt_sort_clause(): Opt_sort_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_sort_clauseContext);
	}
	public for_locking_clause(): For_locking_clauseContext | undefined {
		return this.tryGetRuleContext(0, For_locking_clauseContext);
	}
	public select_limit(): Select_limitContext | undefined {
		return this.tryGetRuleContext(0, Select_limitContext);
	}
	public opt_select_limit(): Opt_select_limitContext | undefined {
		return this.tryGetRuleContext(0, Opt_select_limitContext);
	}
	public opt_for_locking_clause(): Opt_for_locking_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_for_locking_clauseContext);
	}
	public with_clause(): With_clauseContext | undefined {
		return this.tryGetRuleContext(0, With_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_select_no_parens; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSelect_no_parens) {
			listener.enterSelect_no_parens(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSelect_no_parens) {
			listener.exitSelect_no_parens(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSelect_no_parens) {
			return visitor.visitSelect_no_parens(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_clauseContext extends ParserRuleContext {
	public simple_select(): Simple_selectContext | undefined {
		return this.tryGetRuleContext(0, Simple_selectContext);
	}
	public select_with_parens(): Select_with_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_with_parensContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_select_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSelect_clause) {
			listener.enterSelect_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSelect_clause) {
			listener.exitSelect_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSelect_clause) {
			return visitor.visitSelect_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Simple_selectContext extends ParserRuleContext {
	public KW_SELECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SELECT, 0); }
	public values_clause(): Values_clauseContext | undefined {
		return this.tryGetRuleContext(0, Values_clauseContext);
	}
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public relation_expr(): Relation_exprContext | undefined {
		return this.tryGetRuleContext(0, Relation_exprContext);
	}
	public select_with_parens(): Select_with_parensContext[];
	public select_with_parens(i: number): Select_with_parensContext;
	public select_with_parens(i?: number): Select_with_parensContext | Select_with_parensContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Select_with_parensContext);
		} else {
			return this.getRuleContext(i, Select_with_parensContext);
		}
	}
	public set_operator_with_all_or_distinct(): Set_operator_with_all_or_distinctContext[];
	public set_operator_with_all_or_distinct(i: number): Set_operator_with_all_or_distinctContext;
	public set_operator_with_all_or_distinct(i?: number): Set_operator_with_all_or_distinctContext | Set_operator_with_all_or_distinctContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Set_operator_with_all_or_distinctContext);
		} else {
			return this.getRuleContext(i, Set_operator_with_all_or_distinctContext);
		}
	}
	public simple_select(): Simple_selectContext[];
	public simple_select(i: number): Simple_selectContext;
	public simple_select(i?: number): Simple_selectContext | Simple_selectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Simple_selectContext);
		} else {
			return this.getRuleContext(i, Simple_selectContext);
		}
	}
	public into_clause(): Into_clauseContext[];
	public into_clause(i: number): Into_clauseContext;
	public into_clause(i?: number): Into_clauseContext | Into_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Into_clauseContext);
		} else {
			return this.getRuleContext(i, Into_clauseContext);
		}
	}
	public from_clause(): From_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_clauseContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public group_clause(): Group_clauseContext | undefined {
		return this.tryGetRuleContext(0, Group_clauseContext);
	}
	public having_clause(): Having_clauseContext | undefined {
		return this.tryGetRuleContext(0, Having_clauseContext);
	}
	public window_clause(): Window_clauseContext | undefined {
		return this.tryGetRuleContext(0, Window_clauseContext);
	}
	public opt_all_clause(): Opt_all_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_all_clauseContext);
	}
	public opt_target_list(): Opt_target_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_target_listContext);
	}
	public distinct_clause(): Distinct_clauseContext | undefined {
		return this.tryGetRuleContext(0, Distinct_clauseContext);
	}
	public target_list(): Target_listContext | undefined {
		return this.tryGetRuleContext(0, Target_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_simple_select; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSimple_select) {
			listener.enterSimple_select(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSimple_select) {
			listener.exitSimple_select(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSimple_select) {
			return visitor.visitSimple_select(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_operatorContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_set_operator; }
	public copyFrom(ctx: Set_operatorContext): void {
		super.copyFrom(ctx);
	}
}
export class UnionContext extends Set_operatorContext {
	public KW_UNION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_UNION, 0); }
	constructor(ctx: Set_operatorContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterUnion) {
			listener.enterUnion(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitUnion) {
			listener.exitUnion(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitUnion) {
			return visitor.visitUnion(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class IntersectContext extends Set_operatorContext {
	public KW_INTERSECT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INTERSECT, 0); }
	constructor(ctx: Set_operatorContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIntersect) {
			listener.enterIntersect(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIntersect) {
			listener.exitIntersect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIntersect) {
			return visitor.visitIntersect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class ExceptContext extends Set_operatorContext {
	public KW_EXCEPT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXCEPT, 0); }
	constructor(ctx: Set_operatorContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExcept) {
			listener.enterExcept(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExcept) {
			listener.exitExcept(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExcept) {
			return visitor.visitExcept(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Set_operator_with_all_or_distinctContext extends ParserRuleContext {
	public set_operator(): Set_operatorContext {
		return this.getRuleContext(0, Set_operatorContext);
	}
	public all_or_distinct(): All_or_distinctContext | undefined {
		return this.tryGetRuleContext(0, All_or_distinctContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_set_operator_with_all_or_distinct; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSet_operator_with_all_or_distinct) {
			listener.enterSet_operator_with_all_or_distinct(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSet_operator_with_all_or_distinct) {
			listener.exitSet_operator_with_all_or_distinct(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSet_operator_with_all_or_distinct) {
			return visitor.visitSet_operator_with_all_or_distinct(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class With_clauseContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	public cte_list(): Cte_listContext {
		return this.getRuleContext(0, Cte_listContext);
	}
	public KW_RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RECURSIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_with_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWith_clause) {
			listener.enterWith_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWith_clause) {
			listener.exitWith_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWith_clause) {
			return visitor.visitWith_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cte_listContext extends ParserRuleContext {
	public common_table_expr(): Common_table_exprContext[];
	public common_table_expr(i: number): Common_table_exprContext;
	public common_table_expr(i?: number): Common_table_exprContext | Common_table_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Common_table_exprContext);
		} else {
			return this.getRuleContext(i, Common_table_exprContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_cte_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCte_list) {
			listener.enterCte_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCte_list) {
			listener.exitCte_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCte_list) {
			return visitor.visitCte_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Common_table_exprContext extends ParserRuleContext {
	public name(): NameContext {
		return this.getRuleContext(0, NameContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public preparablestmt(): PreparablestmtContext {
		return this.getRuleContext(0, PreparablestmtContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_name_list(): Opt_name_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_name_listContext);
	}
	public opt_materialized(): Opt_materializedContext | undefined {
		return this.tryGetRuleContext(0, Opt_materializedContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_common_table_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCommon_table_expr) {
			listener.enterCommon_table_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCommon_table_expr) {
			listener.exitCommon_table_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCommon_table_expr) {
			return visitor.visitCommon_table_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_materializedContext extends ParserRuleContext {
	public KW_MATERIALIZED(): TerminalNode { return this.getToken(PostgreSQLParser.KW_MATERIALIZED, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_materialized; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_materialized) {
			listener.enterOpt_materialized(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_materialized) {
			listener.exitOpt_materialized(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_materialized) {
			return visitor.visitOpt_materialized(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_with_clauseContext extends ParserRuleContext {
	public with_clause(): With_clauseContext {
		return this.getRuleContext(0, With_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_with_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_with_clause) {
			listener.enterOpt_with_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_with_clause) {
			listener.exitOpt_with_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_with_clause) {
			return visitor.visitOpt_with_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Into_clauseContext extends ParserRuleContext {
	public KW_INTO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INTO, 0); }
	public opt_strict(): Opt_strictContext | undefined {
		return this.tryGetRuleContext(0, Opt_strictContext);
	}
	public opttempTableName(): OpttempTableNameContext | undefined {
		return this.tryGetRuleContext(0, OpttempTableNameContext);
	}
	public into_target(): Into_targetContext | undefined {
		return this.tryGetRuleContext(0, Into_targetContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_into_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterInto_clause) {
			listener.enterInto_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitInto_clause) {
			listener.exitInto_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitInto_clause) {
			return visitor.visitInto_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_strictContext extends ParserRuleContext {
	public KW_STRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_strict; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_strict) {
			listener.enterOpt_strict(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_strict) {
			listener.exitOpt_strict(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_strict) {
			return visitor.visitOpt_strict(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpttempTableNameContext extends ParserRuleContext {
	public qualified_name(): Qualified_nameContext {
		return this.getRuleContext(0, Qualified_nameContext);
	}
	public KW_TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMPORARY, 0); }
	public KW_TEMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMP, 0); }
	public opt_table(): Opt_tableContext | undefined {
		return this.tryGetRuleContext(0, Opt_tableContext);
	}
	public KW_LOCAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCAL, 0); }
	public KW_GLOBAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GLOBAL, 0); }
	public KW_UNLOGGED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNLOGGED, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opttempTableName; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpttempTableName) {
			listener.enterOpttempTableName(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpttempTableName) {
			listener.exitOpttempTableName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpttempTableName) {
			return visitor.visitOpttempTableName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_tableContext extends ParserRuleContext {
	public KW_TABLE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_table; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_table) {
			listener.enterOpt_table(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_table) {
			listener.exitOpt_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_table) {
			return visitor.visitOpt_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class All_or_distinctContext extends ParserRuleContext {
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DISTINCT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_all_or_distinct; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAll_or_distinct) {
			listener.enterAll_or_distinct(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAll_or_distinct) {
			listener.exitAll_or_distinct(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAll_or_distinct) {
			return visitor.visitAll_or_distinct(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Distinct_clauseContext extends ParserRuleContext {
	public KW_DISTINCT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DISTINCT, 0); }
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ON, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_distinct_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDistinct_clause) {
			listener.enterDistinct_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDistinct_clause) {
			listener.exitDistinct_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDistinct_clause) {
			return visitor.visitDistinct_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_all_clauseContext extends ParserRuleContext {
	public KW_ALL(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_all_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_all_clause) {
			listener.enterOpt_all_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_all_clause) {
			listener.exitOpt_all_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_all_clause) {
			return visitor.visitOpt_all_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_sort_clauseContext extends ParserRuleContext {
	public sort_clause(): Sort_clauseContext {
		return this.getRuleContext(0, Sort_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_sort_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_sort_clause) {
			listener.enterOpt_sort_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_sort_clause) {
			listener.exitOpt_sort_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_sort_clause) {
			return visitor.visitOpt_sort_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sort_clauseContext extends ParserRuleContext {
	public KW_ORDER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ORDER, 0); }
	public KW_BY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BY, 0); }
	public sortby_list(): Sortby_listContext {
		return this.getRuleContext(0, Sortby_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_sort_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSort_clause) {
			listener.enterSort_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSort_clause) {
			listener.exitSort_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSort_clause) {
			return visitor.visitSort_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sortby_listContext extends ParserRuleContext {
	public sortby(): SortbyContext[];
	public sortby(i: number): SortbyContext;
	public sortby(i?: number): SortbyContext | SortbyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SortbyContext);
		} else {
			return this.getRuleContext(i, SortbyContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_sortby_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSortby_list) {
			listener.enterSortby_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSortby_list) {
			listener.exitSortby_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSortby_list) {
			return visitor.visitSortby_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SortbyContext extends ParserRuleContext {
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public qual_all_op(): Qual_all_opContext | undefined {
		return this.tryGetRuleContext(0, Qual_all_opContext);
	}
	public opt_asc_desc(): Opt_asc_descContext | undefined {
		return this.tryGetRuleContext(0, Opt_asc_descContext);
	}
	public opt_nulls_order(): Opt_nulls_orderContext | undefined {
		return this.tryGetRuleContext(0, Opt_nulls_orderContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_sortby; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSortby) {
			listener.enterSortby(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSortby) {
			listener.exitSortby(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSortby) {
			return visitor.visitSortby(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_limitContext extends ParserRuleContext {
	public limit_clause(): Limit_clauseContext | undefined {
		return this.tryGetRuleContext(0, Limit_clauseContext);
	}
	public offset_clause(): Offset_clauseContext | undefined {
		return this.tryGetRuleContext(0, Offset_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_select_limit; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSelect_limit) {
			listener.enterSelect_limit(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSelect_limit) {
			listener.exitSelect_limit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSelect_limit) {
			return visitor.visitSelect_limit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_select_limitContext extends ParserRuleContext {
	public select_limit(): Select_limitContext {
		return this.getRuleContext(0, Select_limitContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_select_limit; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_select_limit) {
			listener.enterOpt_select_limit(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_select_limit) {
			listener.exitOpt_select_limit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_select_limit) {
			return visitor.visitOpt_select_limit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Limit_clauseContext extends ParserRuleContext {
	public KW_LIMIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LIMIT, 0); }
	public select_limit_value(): Select_limit_valueContext | undefined {
		return this.tryGetRuleContext(0, Select_limit_valueContext);
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COMMA, 0); }
	public select_offset_value(): Select_offset_valueContext | undefined {
		return this.tryGetRuleContext(0, Select_offset_valueContext);
	}
	public KW_FETCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FETCH, 0); }
	public first_or_next(): First_or_nextContext | undefined {
		return this.tryGetRuleContext(0, First_or_nextContext);
	}
	public select_fetch_first_value(): Select_fetch_first_valueContext | undefined {
		return this.tryGetRuleContext(0, Select_fetch_first_valueContext);
	}
	public row_or_rows(): Row_or_rowsContext | undefined {
		return this.tryGetRuleContext(0, Row_or_rowsContext);
	}
	public KW_ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ONLY, 0); }
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_TIES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TIES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_limit_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterLimit_clause) {
			listener.enterLimit_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitLimit_clause) {
			listener.exitLimit_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitLimit_clause) {
			return visitor.visitLimit_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Offset_clauseContext extends ParserRuleContext {
	public KW_OFFSET(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OFFSET, 0); }
	public select_offset_value(): Select_offset_valueContext | undefined {
		return this.tryGetRuleContext(0, Select_offset_valueContext);
	}
	public select_fetch_first_value(): Select_fetch_first_valueContext | undefined {
		return this.tryGetRuleContext(0, Select_fetch_first_valueContext);
	}
	public row_or_rows(): Row_or_rowsContext | undefined {
		return this.tryGetRuleContext(0, Row_or_rowsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_offset_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOffset_clause) {
			listener.enterOffset_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOffset_clause) {
			listener.exitOffset_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOffset_clause) {
			return visitor.visitOffset_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_limit_valueContext extends ParserRuleContext {
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_select_limit_value; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSelect_limit_value) {
			listener.enterSelect_limit_value(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSelect_limit_value) {
			listener.exitSelect_limit_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSelect_limit_value) {
			return visitor.visitSelect_limit_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_offset_valueContext extends ParserRuleContext {
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_select_offset_value; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSelect_offset_value) {
			listener.enterSelect_offset_value(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSelect_offset_value) {
			listener.exitSelect_offset_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSelect_offset_value) {
			return visitor.visitSelect_offset_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Select_fetch_first_valueContext extends ParserRuleContext {
	public c_expr(): C_exprContext | undefined {
		return this.tryGetRuleContext(0, C_exprContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PLUS, 0); }
	public i_or_f_const(): I_or_f_constContext | undefined {
		return this.tryGetRuleContext(0, I_or_f_constContext);
	}
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_select_fetch_first_value; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSelect_fetch_first_value) {
			listener.enterSelect_fetch_first_value(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSelect_fetch_first_value) {
			listener.exitSelect_fetch_first_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSelect_fetch_first_value) {
			return visitor.visitSelect_fetch_first_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class I_or_f_constContext extends ParserRuleContext {
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public fconst(): FconstContext | undefined {
		return this.tryGetRuleContext(0, FconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_i_or_f_const; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterI_or_f_const) {
			listener.enterI_or_f_const(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitI_or_f_const) {
			listener.exitI_or_f_const(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitI_or_f_const) {
			return visitor.visitI_or_f_const(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Row_or_rowsContext extends ParserRuleContext {
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROW, 0); }
	public KW_ROWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROWS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_row_or_rows; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRow_or_rows) {
			listener.enterRow_or_rows(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRow_or_rows) {
			listener.exitRow_or_rows(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRow_or_rows) {
			return visitor.visitRow_or_rows(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class First_or_nextContext extends ParserRuleContext {
	public KW_FIRST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FIRST, 0); }
	public KW_NEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NEXT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_first_or_next; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFirst_or_next) {
			listener.enterFirst_or_next(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFirst_or_next) {
			listener.exitFirst_or_next(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFirst_or_next) {
			return visitor.visitFirst_or_next(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Group_clauseContext extends ParserRuleContext {
	public KW_GROUP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_GROUP, 0); }
	public KW_BY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BY, 0); }
	public group_by_list(): Group_by_listContext {
		return this.getRuleContext(0, Group_by_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_group_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGroup_clause) {
			listener.enterGroup_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGroup_clause) {
			listener.exitGroup_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGroup_clause) {
			return visitor.visitGroup_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Group_by_listContext extends ParserRuleContext {
	public group_by_item(): Group_by_itemContext[];
	public group_by_item(i: number): Group_by_itemContext;
	public group_by_item(i?: number): Group_by_itemContext | Group_by_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Group_by_itemContext);
		} else {
			return this.getRuleContext(i, Group_by_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_group_by_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGroup_by_list) {
			listener.enterGroup_by_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGroup_by_list) {
			listener.exitGroup_by_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGroup_by_list) {
			return visitor.visitGroup_by_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Group_by_itemContext extends ParserRuleContext {
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public empty_grouping_set(): Empty_grouping_setContext | undefined {
		return this.tryGetRuleContext(0, Empty_grouping_setContext);
	}
	public cube_clause(): Cube_clauseContext | undefined {
		return this.tryGetRuleContext(0, Cube_clauseContext);
	}
	public rollup_clause(): Rollup_clauseContext | undefined {
		return this.tryGetRuleContext(0, Rollup_clauseContext);
	}
	public grouping_sets_clause(): Grouping_sets_clauseContext | undefined {
		return this.tryGetRuleContext(0, Grouping_sets_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_group_by_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGroup_by_item) {
			listener.enterGroup_by_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGroup_by_item) {
			listener.exitGroup_by_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGroup_by_item) {
			return visitor.visitGroup_by_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Empty_grouping_setContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_empty_grouping_set; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterEmpty_grouping_set) {
			listener.enterEmpty_grouping_set(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitEmpty_grouping_set) {
			listener.exitEmpty_grouping_set(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitEmpty_grouping_set) {
			return visitor.visitEmpty_grouping_set(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rollup_clauseContext extends ParserRuleContext {
	public KW_ROLLUP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ROLLUP, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_rollup_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRollup_clause) {
			listener.enterRollup_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRollup_clause) {
			listener.exitRollup_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRollup_clause) {
			return visitor.visitRollup_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cube_clauseContext extends ParserRuleContext {
	public KW_CUBE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CUBE, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_cube_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCube_clause) {
			listener.enterCube_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCube_clause) {
			listener.exitCube_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCube_clause) {
			return visitor.visitCube_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Grouping_sets_clauseContext extends ParserRuleContext {
	public KW_GROUPING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_GROUPING, 0); }
	public KW_SETS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SETS, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public group_by_list(): Group_by_listContext {
		return this.getRuleContext(0, Group_by_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_grouping_sets_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGrouping_sets_clause) {
			listener.enterGrouping_sets_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGrouping_sets_clause) {
			listener.exitGrouping_sets_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGrouping_sets_clause) {
			return visitor.visitGrouping_sets_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Having_clauseContext extends ParserRuleContext {
	public KW_HAVING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_HAVING, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_having_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterHaving_clause) {
			listener.enterHaving_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitHaving_clause) {
			listener.exitHaving_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitHaving_clause) {
			return visitor.visitHaving_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class For_locking_clauseContext extends ParserRuleContext {
	public for_locking_items(): For_locking_itemsContext | undefined {
		return this.tryGetRuleContext(0, For_locking_itemsContext);
	}
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_READ(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_READ, 0); }
	public KW_ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ONLY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_for_locking_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFor_locking_clause) {
			listener.enterFor_locking_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFor_locking_clause) {
			listener.exitFor_locking_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFor_locking_clause) {
			return visitor.visitFor_locking_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_for_locking_clauseContext extends ParserRuleContext {
	public for_locking_clause(): For_locking_clauseContext {
		return this.getRuleContext(0, For_locking_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_for_locking_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_for_locking_clause) {
			listener.enterOpt_for_locking_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_for_locking_clause) {
			listener.exitOpt_for_locking_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_for_locking_clause) {
			return visitor.visitOpt_for_locking_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class For_locking_itemsContext extends ParserRuleContext {
	public for_locking_item(): For_locking_itemContext[];
	public for_locking_item(i: number): For_locking_itemContext;
	public for_locking_item(i?: number): For_locking_itemContext | For_locking_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(For_locking_itemContext);
		} else {
			return this.getRuleContext(i, For_locking_itemContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_for_locking_items; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFor_locking_items) {
			listener.enterFor_locking_items(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFor_locking_items) {
			listener.exitFor_locking_items(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFor_locking_items) {
			return visitor.visitFor_locking_items(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class For_locking_itemContext extends ParserRuleContext {
	public for_locking_strength(): For_locking_strengthContext {
		return this.getRuleContext(0, For_locking_strengthContext);
	}
	public locked_rels_list(): Locked_rels_listContext | undefined {
		return this.tryGetRuleContext(0, Locked_rels_listContext);
	}
	public opt_nowait_or_skip(): Opt_nowait_or_skipContext | undefined {
		return this.tryGetRuleContext(0, Opt_nowait_or_skipContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_for_locking_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFor_locking_item) {
			listener.enterFor_locking_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFor_locking_item) {
			listener.exitFor_locking_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFor_locking_item) {
			return visitor.visitFor_locking_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class For_locking_strengthContext extends ParserRuleContext {
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UPDATE, 0); }
	public KW_SHARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SHARE, 0); }
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_KEY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_KEY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_for_locking_strength; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFor_locking_strength) {
			listener.enterFor_locking_strength(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFor_locking_strength) {
			listener.exitFor_locking_strength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFor_locking_strength) {
			return visitor.visitFor_locking_strength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Locked_rels_listContext extends ParserRuleContext {
	public KW_OF(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OF, 0); }
	public qualified_name_list(): Qualified_name_listContext {
		return this.getRuleContext(0, Qualified_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_locked_rels_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterLocked_rels_list) {
			listener.enterLocked_rels_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitLocked_rels_list) {
			listener.exitLocked_rels_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitLocked_rels_list) {
			return visitor.visitLocked_rels_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Values_clauseContext extends ParserRuleContext {
	public KW_VALUES(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VALUES, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
	}
	public expr_list(): Expr_listContext[];
	public expr_list(i: number): Expr_listContext;
	public expr_list(i?: number): Expr_listContext | Expr_listContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Expr_listContext);
		} else {
			return this.getRuleContext(i, Expr_listContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_values_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterValues_clause) {
			listener.enterValues_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitValues_clause) {
			listener.exitValues_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitValues_clause) {
			return visitor.visitValues_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_clauseContext extends ParserRuleContext {
	public KW_FROM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FROM, 0); }
	public from_list(): From_listContext {
		return this.getRuleContext(0, From_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_from_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFrom_clause) {
			listener.enterFrom_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFrom_clause) {
			listener.exitFrom_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFrom_clause) {
			return visitor.visitFrom_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class From_listContext extends ParserRuleContext {
	public table_ref(): Table_refContext[];
	public table_ref(i: number): Table_refContext;
	public table_ref(i?: number): Table_refContext | Table_refContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_refContext);
		} else {
			return this.getRuleContext(i, Table_refContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_from_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFrom_list) {
			listener.enterFrom_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFrom_list) {
			listener.exitFrom_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFrom_list) {
			return visitor.visitFrom_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_refContext extends ParserRuleContext {
	public relation_expr(): Relation_exprContext | undefined {
		return this.tryGetRuleContext(0, Relation_exprContext);
	}
	public func_table(): Func_tableContext | undefined {
		return this.tryGetRuleContext(0, Func_tableContext);
	}
	public xmltable(): XmltableContext | undefined {
		return this.tryGetRuleContext(0, XmltableContext);
	}
	public select_with_parens(): Select_with_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_with_parensContext);
	}
	public KW_LATERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LATERAL, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public table_ref(): Table_refContext[];
	public table_ref(i: number): Table_refContext;
	public table_ref(i?: number): Table_refContext | Table_refContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Table_refContext);
		} else {
			return this.getRuleContext(i, Table_refContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_CROSS(): TerminalNode[];
	public KW_CROSS(i: number): TerminalNode;
	public KW_CROSS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_CROSS);
		} else {
			return this.getToken(PostgreSQLParser.KW_CROSS, i);
		}
	}
	public KW_JOIN(): TerminalNode[];
	public KW_JOIN(i: number): TerminalNode;
	public KW_JOIN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_JOIN);
		} else {
			return this.getToken(PostgreSQLParser.KW_JOIN, i);
		}
	}
	public KW_NATURAL(): TerminalNode[];
	public KW_NATURAL(i: number): TerminalNode;
	public KW_NATURAL(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_NATURAL);
		} else {
			return this.getToken(PostgreSQLParser.KW_NATURAL, i);
		}
	}
	public join_qual(): Join_qualContext[];
	public join_qual(i: number): Join_qualContext;
	public join_qual(i?: number): Join_qualContext | Join_qualContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Join_qualContext);
		} else {
			return this.getRuleContext(i, Join_qualContext);
		}
	}
	public opt_alias_clause(): Opt_alias_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_alias_clauseContext);
	}
	public tablesample_clause(): Tablesample_clauseContext | undefined {
		return this.tryGetRuleContext(0, Tablesample_clauseContext);
	}
	public func_alias_clause(): Func_alias_clauseContext | undefined {
		return this.tryGetRuleContext(0, Func_alias_clauseContext);
	}
	public join_type(): Join_typeContext[];
	public join_type(i: number): Join_typeContext;
	public join_type(i?: number): Join_typeContext | Join_typeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Join_typeContext);
		} else {
			return this.getRuleContext(i, Join_typeContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_table_ref; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTable_ref) {
			listener.enterTable_ref(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTable_ref) {
			listener.exitTable_ref(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTable_ref) {
			return visitor.visitTable_ref(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Alias_clauseContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_alias_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAlias_clause) {
			listener.enterAlias_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAlias_clause) {
			listener.exitAlias_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAlias_clause) {
			return visitor.visitAlias_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_alias_clauseContext extends ParserRuleContext {
	public alias_clause(): Alias_clauseContext {
		return this.getRuleContext(0, Alias_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_alias_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_alias_clause) {
			listener.enterOpt_alias_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_alias_clause) {
			listener.exitOpt_alias_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_alias_clause) {
			return visitor.visitOpt_alias_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_alias_clauseContext extends ParserRuleContext {
	public alias_clause(): Alias_clauseContext | undefined {
		return this.tryGetRuleContext(0, Alias_clauseContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public tablefuncelementlist(): TablefuncelementlistContext | undefined {
		return this.tryGetRuleContext(0, TablefuncelementlistContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_alias_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_alias_clause) {
			listener.enterFunc_alias_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_alias_clause) {
			listener.exitFunc_alias_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_alias_clause) {
			return visitor.visitFunc_alias_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Join_typeContext extends ParserRuleContext {
	public KW_FULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FULL, 0); }
	public KW_LEFT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEFT, 0); }
	public KW_RIGHT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RIGHT, 0); }
	public KW_INNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INNER, 0); }
	public KW_OUTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OUTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_join_type; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterJoin_type) {
			listener.enterJoin_type(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitJoin_type) {
			listener.exitJoin_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitJoin_type) {
			return visitor.visitJoin_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Join_qualContext extends ParserRuleContext {
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public name_list(): Name_listContext | undefined {
		return this.tryGetRuleContext(0, Name_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ON, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_join_qual; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterJoin_qual) {
			listener.enterJoin_qual(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitJoin_qual) {
			listener.exitJoin_qual(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitJoin_qual) {
			return visitor.visitJoin_qual(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Relation_exprContext extends ParserRuleContext {
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public KW_ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ONLY, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.STAR, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_relation_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRelation_expr) {
			listener.enterRelation_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRelation_expr) {
			listener.exitRelation_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRelation_expr) {
			return visitor.visitRelation_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Relation_expr_listContext extends ParserRuleContext {
	public relation_expr(): Relation_exprContext[];
	public relation_expr(i: number): Relation_exprContext;
	public relation_expr(i?: number): Relation_exprContext | Relation_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Relation_exprContext);
		} else {
			return this.getRuleContext(i, Relation_exprContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_relation_expr_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRelation_expr_list) {
			listener.enterRelation_expr_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRelation_expr_list) {
			listener.exitRelation_expr_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRelation_expr_list) {
			return visitor.visitRelation_expr_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Relation_expr_opt_aliasContext extends ParserRuleContext {
	public relation_expr(): Relation_exprContext {
		return this.getRuleContext(0, Relation_exprContext);
	}
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_relation_expr_opt_alias; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRelation_expr_opt_alias) {
			listener.enterRelation_expr_opt_alias(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRelation_expr_opt_alias) {
			listener.exitRelation_expr_opt_alias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRelation_expr_opt_alias) {
			return visitor.visitRelation_expr_opt_alias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Tablesample_clauseContext extends ParserRuleContext {
	public KW_TABLESAMPLE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TABLESAMPLE, 0); }
	public func_name(): Func_nameContext {
		return this.getRuleContext(0, Func_nameContext);
	}
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_repeatable_clause(): Opt_repeatable_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_repeatable_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_tablesample_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTablesample_clause) {
			listener.enterTablesample_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTablesample_clause) {
			listener.exitTablesample_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTablesample_clause) {
			return visitor.visitTablesample_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_repeatable_clauseContext extends ParserRuleContext {
	public KW_REPEATABLE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_REPEATABLE, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_repeatable_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_repeatable_clause) {
			listener.enterOpt_repeatable_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_repeatable_clause) {
			listener.exitOpt_repeatable_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_repeatable_clause) {
			return visitor.visitOpt_repeatable_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_tableContext extends ParserRuleContext {
	public func_expr_windowless(): Func_expr_windowlessContext | undefined {
		return this.tryGetRuleContext(0, Func_expr_windowlessContext);
	}
	public opt_ordinality(): Opt_ordinalityContext | undefined {
		return this.tryGetRuleContext(0, Opt_ordinalityContext);
	}
	public KW_ROWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROWS, 0); }
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public rowsfrom_list(): Rowsfrom_listContext | undefined {
		return this.tryGetRuleContext(0, Rowsfrom_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_table; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_table) {
			listener.enterFunc_table(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_table) {
			listener.exitFunc_table(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_table) {
			return visitor.visitFunc_table(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rowsfrom_itemContext extends ParserRuleContext {
	public func_expr_windowless(): Func_expr_windowlessContext {
		return this.getRuleContext(0, Func_expr_windowlessContext);
	}
	public opt_col_def_list(): Opt_col_def_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_col_def_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_rowsfrom_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRowsfrom_item) {
			listener.enterRowsfrom_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRowsfrom_item) {
			listener.exitRowsfrom_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRowsfrom_item) {
			return visitor.visitRowsfrom_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Rowsfrom_listContext extends ParserRuleContext {
	public rowsfrom_item(): Rowsfrom_itemContext[];
	public rowsfrom_item(i: number): Rowsfrom_itemContext;
	public rowsfrom_item(i?: number): Rowsfrom_itemContext | Rowsfrom_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Rowsfrom_itemContext);
		} else {
			return this.getRuleContext(i, Rowsfrom_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_rowsfrom_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRowsfrom_list) {
			listener.enterRowsfrom_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRowsfrom_list) {
			listener.exitRowsfrom_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRowsfrom_list) {
			return visitor.visitRowsfrom_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_col_def_listContext extends ParserRuleContext {
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public tablefuncelementlist(): TablefuncelementlistContext {
		return this.getRuleContext(0, TablefuncelementlistContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_col_def_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_col_def_list) {
			listener.enterOpt_col_def_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_col_def_list) {
			listener.exitOpt_col_def_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_col_def_list) {
			return visitor.visitOpt_col_def_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_ordinalityContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_ORDINALITY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ORDINALITY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_ordinality; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_ordinality) {
			listener.enterOpt_ordinality(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_ordinality) {
			listener.exitOpt_ordinality(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_ordinality) {
			return visitor.visitOpt_ordinality(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Where_clauseContext extends ParserRuleContext {
	public KW_WHERE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHERE, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_where_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWhere_clause) {
			listener.enterWhere_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWhere_clause) {
			listener.exitWhere_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWhere_clause) {
			return visitor.visitWhere_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Where_or_current_clauseContext extends ParserRuleContext {
	public KW_WHERE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHERE, 0); }
	public KW_CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT, 0); }
	public KW_OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OF, 0); }
	public cursor_name(): Cursor_nameContext | undefined {
		return this.tryGetRuleContext(0, Cursor_nameContext);
	}
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_where_or_current_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWhere_or_current_clause) {
			listener.enterWhere_or_current_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWhere_or_current_clause) {
			listener.exitWhere_or_current_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWhere_or_current_clause) {
			return visitor.visitWhere_or_current_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OpttablefuncelementlistContext extends ParserRuleContext {
	public tablefuncelementlist(): TablefuncelementlistContext {
		return this.getRuleContext(0, TablefuncelementlistContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opttablefuncelementlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpttablefuncelementlist) {
			listener.enterOpttablefuncelementlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpttablefuncelementlist) {
			listener.exitOpttablefuncelementlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpttablefuncelementlist) {
			return visitor.visitOpttablefuncelementlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablefuncelementlistContext extends ParserRuleContext {
	public tablefuncelement(): TablefuncelementContext[];
	public tablefuncelement(i: number): TablefuncelementContext;
	public tablefuncelement(i?: number): TablefuncelementContext | TablefuncelementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TablefuncelementContext);
		} else {
			return this.getRuleContext(i, TablefuncelementContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_tablefuncelementlist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTablefuncelementlist) {
			listener.enterTablefuncelementlist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTablefuncelementlist) {
			listener.exitTablefuncelementlist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTablefuncelementlist) {
			return visitor.visitTablefuncelementlist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TablefuncelementContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public typename(): TypenameContext {
		return this.getRuleContext(0, TypenameContext);
	}
	public opt_collate_clause(): Opt_collate_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_collate_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_tablefuncelement; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTablefuncelement) {
			listener.enterTablefuncelement(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTablefuncelement) {
			listener.exitTablefuncelement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTablefuncelement) {
			return visitor.visitTablefuncelement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XmltableContext extends ParserRuleContext {
	public KW_XMLTABLE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_XMLTABLE, 0); }
	public OPEN_PAREN(): TerminalNode[];
	public OPEN_PAREN(i: number): TerminalNode;
	public OPEN_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.OPEN_PAREN);
		} else {
			return this.getToken(PostgreSQLParser.OPEN_PAREN, i);
		}
	}
	public CLOSE_PAREN(): TerminalNode[];
	public CLOSE_PAREN(i: number): TerminalNode;
	public CLOSE_PAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.CLOSE_PAREN);
		} else {
			return this.getToken(PostgreSQLParser.CLOSE_PAREN, i);
		}
	}
	public c_expr(): C_exprContext | undefined {
		return this.tryGetRuleContext(0, C_exprContext);
	}
	public xmlexists_argument(): Xmlexists_argumentContext | undefined {
		return this.tryGetRuleContext(0, Xmlexists_argumentContext);
	}
	public KW_COLUMNS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLUMNS, 0); }
	public xmltable_column_list(): Xmltable_column_listContext | undefined {
		return this.tryGetRuleContext(0, Xmltable_column_listContext);
	}
	public KW_XMLNAMESPACES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLNAMESPACES, 0); }
	public xml_namespace_list(): Xml_namespace_listContext | undefined {
		return this.tryGetRuleContext(0, Xml_namespace_listContext);
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COMMA, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xmltable; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXmltable) {
			listener.enterXmltable(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXmltable) {
			listener.exitXmltable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXmltable) {
			return visitor.visitXmltable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xmltable_column_listContext extends ParserRuleContext {
	public xmltable_column_el(): Xmltable_column_elContext[];
	public xmltable_column_el(i: number): Xmltable_column_elContext;
	public xmltable_column_el(i?: number): Xmltable_column_elContext | Xmltable_column_elContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Xmltable_column_elContext);
		} else {
			return this.getRuleContext(i, Xmltable_column_elContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xmltable_column_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXmltable_column_list) {
			listener.enterXmltable_column_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXmltable_column_list) {
			listener.exitXmltable_column_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXmltable_column_list) {
			return visitor.visitXmltable_column_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xmltable_column_elContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public typename(): TypenameContext | undefined {
		return this.tryGetRuleContext(0, TypenameContext);
	}
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_ORDINALITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ORDINALITY, 0); }
	public xmltable_column_option_list(): Xmltable_column_option_listContext | undefined {
		return this.tryGetRuleContext(0, Xmltable_column_option_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xmltable_column_el; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXmltable_column_el) {
			listener.enterXmltable_column_el(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXmltable_column_el) {
			listener.exitXmltable_column_el(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXmltable_column_el) {
			return visitor.visitXmltable_column_el(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xmltable_column_option_listContext extends ParserRuleContext {
	public xmltable_column_option_el(): Xmltable_column_option_elContext[];
	public xmltable_column_option_el(i: number): Xmltable_column_option_elContext;
	public xmltable_column_option_el(i?: number): Xmltable_column_option_elContext | Xmltable_column_option_elContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Xmltable_column_option_elContext);
		} else {
			return this.getRuleContext(i, Xmltable_column_option_elContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xmltable_column_option_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXmltable_column_option_list) {
			listener.enterXmltable_column_option_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXmltable_column_option_list) {
			listener.exitXmltable_column_option_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXmltable_column_option_list) {
			return visitor.visitXmltable_column_option_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xmltable_column_option_elContext extends ParserRuleContext {
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xmltable_column_option_el; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXmltable_column_option_el) {
			listener.enterXmltable_column_option_el(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXmltable_column_option_el) {
			listener.exitXmltable_column_option_el(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXmltable_column_option_el) {
			return visitor.visitXmltable_column_option_el(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_namespace_listContext extends ParserRuleContext {
	public xml_namespace_el(): Xml_namespace_elContext[];
	public xml_namespace_el(i: number): Xml_namespace_elContext;
	public xml_namespace_el(i?: number): Xml_namespace_elContext | Xml_namespace_elContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Xml_namespace_elContext);
		} else {
			return this.getRuleContext(i, Xml_namespace_elContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xml_namespace_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXml_namespace_list) {
			listener.enterXml_namespace_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXml_namespace_list) {
			listener.exitXml_namespace_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXml_namespace_list) {
			return visitor.visitXml_namespace_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_namespace_elContext extends ParserRuleContext {
	public b_expr(): B_exprContext {
		return this.getRuleContext(0, B_exprContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public collabel(): CollabelContext | undefined {
		return this.tryGetRuleContext(0, CollabelContext);
	}
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xml_namespace_el; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXml_namespace_el) {
			listener.enterXml_namespace_el(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXml_namespace_el) {
			listener.exitXml_namespace_el(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXml_namespace_el) {
			return visitor.visitXml_namespace_el(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TypenameContext extends ParserRuleContext {
	public simpletypename(): SimpletypenameContext | undefined {
		return this.tryGetRuleContext(0, SimpletypenameContext);
	}
	public opt_array_bounds(): Opt_array_boundsContext | undefined {
		return this.tryGetRuleContext(0, Opt_array_boundsContext);
	}
	public KW_ARRAY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ARRAY, 0); }
	public KW_SETOF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SETOF, 0); }
	public OPEN_BRACKET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public CLOSE_BRACKET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
	public qualified_name(): Qualified_nameContext | undefined {
		return this.tryGetRuleContext(0, Qualified_nameContext);
	}
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PERCENT, 0); }
	public KW_ROWTYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROWTYPE, 0); }
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_typename; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTypename) {
			listener.enterTypename(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTypename) {
			listener.exitTypename(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTypename) {
			return visitor.visitTypename(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_array_boundsContext extends ParserRuleContext {
	public OPEN_BRACKET(): TerminalNode[];
	public OPEN_BRACKET(i: number): TerminalNode;
	public OPEN_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.OPEN_BRACKET);
		} else {
			return this.getToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
	}
	public CLOSE_BRACKET(): TerminalNode[];
	public CLOSE_BRACKET(i: number): TerminalNode;
	public CLOSE_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.CLOSE_BRACKET);
		} else {
			return this.getToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
	}
	public iconst(): IconstContext[];
	public iconst(i: number): IconstContext;
	public iconst(i?: number): IconstContext | IconstContext[] {
		if (i === undefined) {
			return this.getRuleContexts(IconstContext);
		} else {
			return this.getRuleContext(i, IconstContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_array_bounds; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_array_bounds) {
			listener.enterOpt_array_bounds(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_array_bounds) {
			listener.exitOpt_array_bounds(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_array_bounds) {
			return visitor.visitOpt_array_bounds(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SimpletypenameContext extends ParserRuleContext {
	public generictype(): GenerictypeContext | undefined {
		return this.tryGetRuleContext(0, GenerictypeContext);
	}
	public numeric(): NumericContext | undefined {
		return this.tryGetRuleContext(0, NumericContext);
	}
	public bit(): BitContext | undefined {
		return this.tryGetRuleContext(0, BitContext);
	}
	public character(): CharacterContext | undefined {
		return this.tryGetRuleContext(0, CharacterContext);
	}
	public constdatetime(): ConstdatetimeContext | undefined {
		return this.tryGetRuleContext(0, ConstdatetimeContext);
	}
	public constinterval(): ConstintervalContext | undefined {
		return this.tryGetRuleContext(0, ConstintervalContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_interval(): Opt_intervalContext | undefined {
		return this.tryGetRuleContext(0, Opt_intervalContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_simpletypename; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSimpletypename) {
			listener.enterSimpletypename(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSimpletypename) {
			listener.exitSimpletypename(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSimpletypename) {
			return visitor.visitSimpletypename(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConsttypenameContext extends ParserRuleContext {
	public numeric(): NumericContext | undefined {
		return this.tryGetRuleContext(0, NumericContext);
	}
	public constbit(): ConstbitContext | undefined {
		return this.tryGetRuleContext(0, ConstbitContext);
	}
	public constcharacter(): ConstcharacterContext | undefined {
		return this.tryGetRuleContext(0, ConstcharacterContext);
	}
	public constdatetime(): ConstdatetimeContext | undefined {
		return this.tryGetRuleContext(0, ConstdatetimeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_consttypename; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterConsttypename) {
			listener.enterConsttypename(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitConsttypename) {
			listener.exitConsttypename(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitConsttypename) {
			return visitor.visitConsttypename(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GenerictypeContext extends ParserRuleContext {
	public type_function_name(): Type_function_nameContext {
		return this.getRuleContext(0, Type_function_nameContext);
	}
	public attrs(): AttrsContext | undefined {
		return this.tryGetRuleContext(0, AttrsContext);
	}
	public opt_type_modifiers(): Opt_type_modifiersContext | undefined {
		return this.tryGetRuleContext(0, Opt_type_modifiersContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_generictype; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGenerictype) {
			listener.enterGenerictype(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGenerictype) {
			listener.exitGenerictype(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGenerictype) {
			return visitor.visitGenerictype(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_type_modifiersContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_type_modifiers; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_type_modifiers) {
			listener.enterOpt_type_modifiers(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_type_modifiers) {
			listener.exitOpt_type_modifiers(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_type_modifiers) {
			return visitor.visitOpt_type_modifiers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NumericContext extends ParserRuleContext {
	public KW_INT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INT, 0); }
	public KW_INTEGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INTEGER, 0); }
	public KW_SMALLINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SMALLINT, 0); }
	public KW_BIGINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BIGINT, 0); }
	public KW_REAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REAL, 0); }
	public KW_FLOAT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FLOAT, 0); }
	public opt_float(): Opt_floatContext | undefined {
		return this.tryGetRuleContext(0, Opt_floatContext);
	}
	public KW_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOUBLE, 0); }
	public KW_PRECISION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRECISION, 0); }
	public KW_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DECIMAL, 0); }
	public opt_type_modifiers(): Opt_type_modifiersContext | undefined {
		return this.tryGetRuleContext(0, Opt_type_modifiersContext);
	}
	public KW_DEC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEC, 0); }
	public KW_NUMERIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NUMERIC, 0); }
	public KW_BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BOOLEAN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_numeric; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterNumeric) {
			listener.enterNumeric(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitNumeric) {
			listener.exitNumeric(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitNumeric) {
			return visitor.visitNumeric(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_floatContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public iconst(): IconstContext {
		return this.getRuleContext(0, IconstContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_float; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_float) {
			listener.enterOpt_float(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_float) {
			listener.exitOpt_float(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_float) {
			return visitor.visitOpt_float(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BitContext extends ParserRuleContext {
	public bitwithlength(): BitwithlengthContext | undefined {
		return this.tryGetRuleContext(0, BitwithlengthContext);
	}
	public bitwithoutlength(): BitwithoutlengthContext | undefined {
		return this.tryGetRuleContext(0, BitwithoutlengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_bit; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterBit) {
			listener.enterBit(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitBit) {
			listener.exitBit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitBit) {
			return visitor.visitBit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstbitContext extends ParserRuleContext {
	public bitwithlength(): BitwithlengthContext | undefined {
		return this.tryGetRuleContext(0, BitwithlengthContext);
	}
	public bitwithoutlength(): BitwithoutlengthContext | undefined {
		return this.tryGetRuleContext(0, BitwithoutlengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_constbit; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterConstbit) {
			listener.enterConstbit(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitConstbit) {
			listener.exitConstbit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitConstbit) {
			return visitor.visitConstbit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BitwithlengthContext extends ParserRuleContext {
	public KW_BIT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BIT, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_varying(): Opt_varyingContext | undefined {
		return this.tryGetRuleContext(0, Opt_varyingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_bitwithlength; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterBitwithlength) {
			listener.enterBitwithlength(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitBitwithlength) {
			listener.exitBitwithlength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitBitwithlength) {
			return visitor.visitBitwithlength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BitwithoutlengthContext extends ParserRuleContext {
	public KW_BIT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BIT, 0); }
	public opt_varying(): Opt_varyingContext | undefined {
		return this.tryGetRuleContext(0, Opt_varyingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_bitwithoutlength; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterBitwithoutlength) {
			listener.enterBitwithoutlength(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitBitwithoutlength) {
			listener.exitBitwithoutlength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitBitwithoutlength) {
			return visitor.visitBitwithoutlength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CharacterContext extends ParserRuleContext {
	public character_c(): Character_cContext {
		return this.getRuleContext(0, Character_cContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_character; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCharacter) {
			listener.enterCharacter(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCharacter) {
			listener.exitCharacter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCharacter) {
			return visitor.visitCharacter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstcharacterContext extends ParserRuleContext {
	public character_c(): Character_cContext {
		return this.getRuleContext(0, Character_cContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_constcharacter; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterConstcharacter) {
			listener.enterConstcharacter(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitConstcharacter) {
			listener.exitConstcharacter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitConstcharacter) {
			return visitor.visitConstcharacter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Character_cContext extends ParserRuleContext {
	public KW_CHARACTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CHARACTER, 0); }
	public KW_CHAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CHAR, 0); }
	public KW_NCHAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NCHAR, 0); }
	public opt_varying(): Opt_varyingContext | undefined {
		return this.tryGetRuleContext(0, Opt_varyingContext);
	}
	public KW_VARCHAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VARCHAR, 0); }
	public KW_NATIONAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NATIONAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_character_c; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCharacter_c) {
			listener.enterCharacter_c(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCharacter_c) {
			listener.exitCharacter_c(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCharacter_c) {
			return visitor.visitCharacter_c(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_varyingContext extends ParserRuleContext {
	public KW_VARYING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VARYING, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_varying; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_varying) {
			listener.enterOpt_varying(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_varying) {
			listener.exitOpt_varying(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_varying) {
			return visitor.visitOpt_varying(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstdatetimeContext extends ParserRuleContext {
	public KW_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TIMESTAMP, 0); }
	public KW_TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TIME, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_timezone(): Opt_timezoneContext | undefined {
		return this.tryGetRuleContext(0, Opt_timezoneContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_constdatetime; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterConstdatetime) {
			listener.enterConstdatetime(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitConstdatetime) {
			listener.exitConstdatetime(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitConstdatetime) {
			return visitor.visitConstdatetime(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ConstintervalContext extends ParserRuleContext {
	public KW_INTERVAL(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INTERVAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_constinterval; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterConstinterval) {
			listener.enterConstinterval(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitConstinterval) {
			listener.exitConstinterval(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitConstinterval) {
			return visitor.visitConstinterval(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_timezoneContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITH, 0); }
	public KW_TIME(): TerminalNode { return this.getToken(PostgreSQLParser.KW_TIME, 0); }
	public KW_ZONE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ZONE, 0); }
	public KW_WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITHOUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_timezone; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_timezone) {
			listener.enterOpt_timezone(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_timezone) {
			listener.exitOpt_timezone(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_timezone) {
			return visitor.visitOpt_timezone(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_intervalContext extends ParserRuleContext {
	public KW_YEAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_YEAR, 0); }
	public KW_MONTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MONTH, 0); }
	public KW_DAY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DAY, 0); }
	public KW_HOUR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_HOUR, 0); }
	public KW_MINUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MINUTE, 0); }
	public interval_second(): Interval_secondContext | undefined {
		return this.tryGetRuleContext(0, Interval_secondContext);
	}
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_interval; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_interval) {
			listener.enterOpt_interval(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_interval) {
			listener.exitOpt_interval(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_interval) {
			return visitor.visitOpt_interval(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Interval_secondContext extends ParserRuleContext {
	public KW_SECOND(): TerminalNode { return this.getToken(PostgreSQLParser.KW_SECOND, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_interval_second; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterInterval_second) {
			listener.enterInterval_second(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitInterval_second) {
			listener.exitInterval_second(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitInterval_second) {
			return visitor.visitInterval_second(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_escapeContext extends ParserRuleContext {
	public KW_ESCAPE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ESCAPE, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_escape; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_escape) {
			listener.enterOpt_escape(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_escape) {
			listener.exitOpt_escape(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_escape) {
			return visitor.visitOpt_escape(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_exprContext extends ParserRuleContext {
	public a_expr_qual(): A_expr_qualContext {
		return this.getRuleContext(0, A_expr_qualContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr) {
			listener.enterA_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr) {
			listener.exitA_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr) {
			return visitor.visitA_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_qualContext extends ParserRuleContext {
	public a_expr_lessless(): A_expr_lesslessContext {
		return this.getRuleContext(0, A_expr_lesslessContext);
	}
	public qual_op(): Qual_opContext | undefined {
		return this.tryGetRuleContext(0, Qual_opContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_qual; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_qual) {
			listener.enterA_expr_qual(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_qual) {
			listener.exitA_expr_qual(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_qual) {
			return visitor.visitA_expr_qual(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_lesslessContext extends ParserRuleContext {
	public a_expr_or(): A_expr_orContext[];
	public a_expr_or(i: number): A_expr_orContext;
	public a_expr_or(i?: number): A_expr_orContext | A_expr_orContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_expr_orContext);
		} else {
			return this.getRuleContext(i, A_expr_orContext);
		}
	}
	public LESS_LESS(): TerminalNode[];
	public LESS_LESS(i: number): TerminalNode;
	public LESS_LESS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.LESS_LESS);
		} else {
			return this.getToken(PostgreSQLParser.LESS_LESS, i);
		}
	}
	public GREATER_GREATER(): TerminalNode[];
	public GREATER_GREATER(i: number): TerminalNode;
	public GREATER_GREATER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.GREATER_GREATER);
		} else {
			return this.getToken(PostgreSQLParser.GREATER_GREATER, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_lessless; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_lessless) {
			listener.enterA_expr_lessless(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_lessless) {
			listener.exitA_expr_lessless(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_lessless) {
			return visitor.visitA_expr_lessless(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_orContext extends ParserRuleContext {
	public a_expr_and(): A_expr_andContext[];
	public a_expr_and(i: number): A_expr_andContext;
	public a_expr_and(i?: number): A_expr_andContext | A_expr_andContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_expr_andContext);
		} else {
			return this.getRuleContext(i, A_expr_andContext);
		}
	}
	public KW_OR(): TerminalNode[];
	public KW_OR(i: number): TerminalNode;
	public KW_OR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_OR);
		} else {
			return this.getToken(PostgreSQLParser.KW_OR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_or; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_or) {
			listener.enterA_expr_or(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_or) {
			listener.exitA_expr_or(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_or) {
			return visitor.visitA_expr_or(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_andContext extends ParserRuleContext {
	public a_expr_in(): A_expr_inContext[];
	public a_expr_in(i: number): A_expr_inContext;
	public a_expr_in(i?: number): A_expr_inContext | A_expr_inContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_expr_inContext);
		} else {
			return this.getRuleContext(i, A_expr_inContext);
		}
	}
	public KW_AND(): TerminalNode[];
	public KW_AND(i: number): TerminalNode;
	public KW_AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_AND);
		} else {
			return this.getToken(PostgreSQLParser.KW_AND, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_and; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_and) {
			listener.enterA_expr_and(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_and) {
			listener.exitA_expr_and(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_and) {
			return visitor.visitA_expr_and(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_inContext extends ParserRuleContext {
	public a_expr_unary_not(): A_expr_unary_notContext {
		return this.getRuleContext(0, A_expr_unary_notContext);
	}
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IN, 0); }
	public in_expr(): In_exprContext | undefined {
		return this.tryGetRuleContext(0, In_exprContext);
	}
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_in; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_in) {
			listener.enterA_expr_in(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_in) {
			listener.exitA_expr_in(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_in) {
			return visitor.visitA_expr_in(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_unary_notContext extends ParserRuleContext {
	public a_expr_isnull(): A_expr_isnullContext {
		return this.getRuleContext(0, A_expr_isnullContext);
	}
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_unary_not; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_unary_not) {
			listener.enterA_expr_unary_not(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_unary_not) {
			listener.exitA_expr_unary_not(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_unary_not) {
			return visitor.visitA_expr_unary_not(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_isnullContext extends ParserRuleContext {
	public a_expr_is_not(): A_expr_is_notContext {
		return this.getRuleContext(0, A_expr_is_notContext);
	}
	public KW_ISNULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ISNULL, 0); }
	public KW_NOTNULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOTNULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_isnull; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_isnull) {
			listener.enterA_expr_isnull(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_isnull) {
			listener.exitA_expr_isnull(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_isnull) {
			return visitor.visitA_expr_isnull(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_is_notContext extends ParserRuleContext {
	public a_expr_compare(): A_expr_compareContext {
		return this.getRuleContext(0, A_expr_compareContext);
	}
	public KW_IS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IS, 0); }
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	public KW_TRUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRUE, 0); }
	public KW_FALSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FALSE, 0); }
	public KW_UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNKNOWN, 0); }
	public KW_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DISTINCT, 0); }
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public KW_OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OF, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public type_list(): Type_listContext | undefined {
		return this.tryGetRuleContext(0, Type_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_DOCUMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOCUMENT, 0); }
	public KW_NORMALIZED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NORMALIZED, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public unicode_normal_form(): Unicode_normal_formContext | undefined {
		return this.tryGetRuleContext(0, Unicode_normal_formContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_is_not; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_is_not) {
			listener.enterA_expr_is_not(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_is_not) {
			listener.exitA_expr_is_not(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_is_not) {
			return visitor.visitA_expr_is_not(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_compareContext extends ParserRuleContext {
	public a_expr_like(): A_expr_likeContext[];
	public a_expr_like(i: number): A_expr_likeContext;
	public a_expr_like(i?: number): A_expr_likeContext | A_expr_likeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_expr_likeContext);
		} else {
			return this.getRuleContext(i, A_expr_likeContext);
		}
	}
	public subquery_Op(): Subquery_OpContext | undefined {
		return this.tryGetRuleContext(0, Subquery_OpContext);
	}
	public sub_type(): Sub_typeContext | undefined {
		return this.tryGetRuleContext(0, Sub_typeContext);
	}
	public LT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.LT, 0); }
	public GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.GT, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EQUAL, 0); }
	public LESS_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.LESS_EQUALS, 0); }
	public GREATER_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
	public NOT_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.NOT_EQUALS, 0); }
	public select_with_parens(): Select_with_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_with_parensContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_compare; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_compare) {
			listener.enterA_expr_compare(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_compare) {
			listener.exitA_expr_compare(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_compare) {
			return visitor.visitA_expr_compare(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_likeContext extends ParserRuleContext {
	public a_expr_qual_op(): A_expr_qual_opContext[];
	public a_expr_qual_op(i: number): A_expr_qual_opContext;
	public a_expr_qual_op(i?: number): A_expr_qual_opContext | A_expr_qual_opContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_expr_qual_opContext);
		} else {
			return this.getRuleContext(i, A_expr_qual_opContext);
		}
	}
	public KW_LIKE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LIKE, 0); }
	public KW_ILIKE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ILIKE, 0); }
	public KW_SIMILAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SIMILAR, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	public KW_BETWEEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BETWEEN, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public opt_escape(): Opt_escapeContext | undefined {
		return this.tryGetRuleContext(0, Opt_escapeContext);
	}
	public KW_SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SYMMETRIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_like; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_like) {
			listener.enterA_expr_like(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_like) {
			listener.exitA_expr_like(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_like) {
			return visitor.visitA_expr_like(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_qual_opContext extends ParserRuleContext {
	public a_expr_unary_qualop(): A_expr_unary_qualopContext[];
	public a_expr_unary_qualop(i: number): A_expr_unary_qualopContext;
	public a_expr_unary_qualop(i?: number): A_expr_unary_qualopContext | A_expr_unary_qualopContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_expr_unary_qualopContext);
		} else {
			return this.getRuleContext(i, A_expr_unary_qualopContext);
		}
	}
	public qual_op(): Qual_opContext[];
	public qual_op(i: number): Qual_opContext;
	public qual_op(i?: number): Qual_opContext | Qual_opContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qual_opContext);
		} else {
			return this.getRuleContext(i, Qual_opContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_qual_op; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_qual_op) {
			listener.enterA_expr_qual_op(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_qual_op) {
			listener.exitA_expr_qual_op(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_qual_op) {
			return visitor.visitA_expr_qual_op(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_unary_qualopContext extends ParserRuleContext {
	public a_expr_add(): A_expr_addContext {
		return this.getRuleContext(0, A_expr_addContext);
	}
	public qual_op(): Qual_opContext | undefined {
		return this.tryGetRuleContext(0, Qual_opContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_unary_qualop; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_unary_qualop) {
			listener.enterA_expr_unary_qualop(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_unary_qualop) {
			listener.exitA_expr_unary_qualop(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_unary_qualop) {
			return visitor.visitA_expr_unary_qualop(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_addContext extends ParserRuleContext {
	public a_expr_mul(): A_expr_mulContext[];
	public a_expr_mul(i: number): A_expr_mulContext;
	public a_expr_mul(i?: number): A_expr_mulContext | A_expr_mulContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_expr_mulContext);
		} else {
			return this.getRuleContext(i, A_expr_mulContext);
		}
	}
	public MINUS(): TerminalNode[];
	public MINUS(i: number): TerminalNode;
	public MINUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.MINUS);
		} else {
			return this.getToken(PostgreSQLParser.MINUS, i);
		}
	}
	public PLUS(): TerminalNode[];
	public PLUS(i: number): TerminalNode;
	public PLUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.PLUS);
		} else {
			return this.getToken(PostgreSQLParser.PLUS, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_add; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_add) {
			listener.enterA_expr_add(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_add) {
			listener.exitA_expr_add(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_add) {
			return visitor.visitA_expr_add(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_mulContext extends ParserRuleContext {
	public a_expr_caret(): A_expr_caretContext[];
	public a_expr_caret(i: number): A_expr_caretContext;
	public a_expr_caret(i?: number): A_expr_caretContext | A_expr_caretContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_expr_caretContext);
		} else {
			return this.getRuleContext(i, A_expr_caretContext);
		}
	}
	public STAR(): TerminalNode[];
	public STAR(i: number): TerminalNode;
	public STAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.STAR);
		} else {
			return this.getToken(PostgreSQLParser.STAR, i);
		}
	}
	public SLASH(): TerminalNode[];
	public SLASH(i: number): TerminalNode;
	public SLASH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.SLASH);
		} else {
			return this.getToken(PostgreSQLParser.SLASH, i);
		}
	}
	public PERCENT(): TerminalNode[];
	public PERCENT(i: number): TerminalNode;
	public PERCENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.PERCENT);
		} else {
			return this.getToken(PostgreSQLParser.PERCENT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_mul; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_mul) {
			listener.enterA_expr_mul(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_mul) {
			listener.exitA_expr_mul(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_mul) {
			return visitor.visitA_expr_mul(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_caretContext extends ParserRuleContext {
	public a_expr_unary_sign(): A_expr_unary_signContext {
		return this.getRuleContext(0, A_expr_unary_signContext);
	}
	public CARET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CARET, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_caret; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_caret) {
			listener.enterA_expr_caret(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_caret) {
			listener.exitA_expr_caret(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_caret) {
			return visitor.visitA_expr_caret(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_unary_signContext extends ParserRuleContext {
	public a_expr_at_time_zone(): A_expr_at_time_zoneContext {
		return this.getRuleContext(0, A_expr_at_time_zoneContext);
	}
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.MINUS, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PLUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_unary_sign; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_unary_sign) {
			listener.enterA_expr_unary_sign(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_unary_sign) {
			listener.exitA_expr_unary_sign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_unary_sign) {
			return visitor.visitA_expr_unary_sign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_at_time_zoneContext extends ParserRuleContext {
	public a_expr_collate(): A_expr_collateContext {
		return this.getRuleContext(0, A_expr_collateContext);
	}
	public KW_AT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AT, 0); }
	public KW_TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TIME, 0); }
	public KW_ZONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ZONE, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_at_time_zone; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_at_time_zone) {
			listener.enterA_expr_at_time_zone(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_at_time_zone) {
			listener.exitA_expr_at_time_zone(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_at_time_zone) {
			return visitor.visitA_expr_at_time_zone(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_collateContext extends ParserRuleContext {
	public a_expr_typecast(): A_expr_typecastContext {
		return this.getRuleContext(0, A_expr_typecastContext);
	}
	public KW_COLLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATE, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_collate; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_collate) {
			listener.enterA_expr_collate(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_collate) {
			listener.exitA_expr_collate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_collate) {
			return visitor.visitA_expr_collate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class A_expr_typecastContext extends ParserRuleContext {
	public c_expr(): C_exprContext {
		return this.getRuleContext(0, C_exprContext);
	}
	public TYPECAST(): TerminalNode[];
	public TYPECAST(i: number): TerminalNode;
	public TYPECAST(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.TYPECAST);
		} else {
			return this.getToken(PostgreSQLParser.TYPECAST, i);
		}
	}
	public typename(): TypenameContext[];
	public typename(i: number): TypenameContext;
	public typename(i?: number): TypenameContext | TypenameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypenameContext);
		} else {
			return this.getRuleContext(i, TypenameContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_a_expr_typecast; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterA_expr_typecast) {
			listener.enterA_expr_typecast(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitA_expr_typecast) {
			listener.exitA_expr_typecast(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitA_expr_typecast) {
			return visitor.visitA_expr_typecast(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class B_exprContext extends ParserRuleContext {
	public c_expr(): C_exprContext | undefined {
		return this.tryGetRuleContext(0, C_exprContext);
	}
	public b_expr(): B_exprContext[];
	public b_expr(i: number): B_exprContext;
	public b_expr(i?: number): B_exprContext | B_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(B_exprContext);
		} else {
			return this.getRuleContext(i, B_exprContext);
		}
	}
	public TYPECAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.TYPECAST, 0); }
	public typename(): TypenameContext | undefined {
		return this.tryGetRuleContext(0, TypenameContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.MINUS, 0); }
	public CARET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CARET, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.STAR, 0); }
	public SLASH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.SLASH, 0); }
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PERCENT, 0); }
	public qual_op(): Qual_opContext | undefined {
		return this.tryGetRuleContext(0, Qual_opContext);
	}
	public LT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.LT, 0); }
	public GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.GT, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EQUAL, 0); }
	public LESS_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.LESS_EQUALS, 0); }
	public GREATER_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
	public NOT_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.NOT_EQUALS, 0); }
	public KW_IS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IS, 0); }
	public KW_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DISTINCT, 0); }
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OF, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public type_list(): Type_listContext | undefined {
		return this.tryGetRuleContext(0, Type_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_DOCUMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOCUMENT, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_b_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterB_expr) {
			listener.enterB_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitB_expr) {
			listener.exitB_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitB_expr) {
			return visitor.visitB_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class C_exprContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_c_expr; }
	public copyFrom(ctx: C_exprContext): void {
		super.copyFrom(ctx);
	}
}
export class C_expr_existsContext extends C_exprContext {
	public KW_EXISTS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXISTS, 0); }
	public select_with_parens(): Select_with_parensContext {
		return this.getRuleContext(0, Select_with_parensContext);
	}
	constructor(ctx: C_exprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterC_expr_exists) {
			listener.enterC_expr_exists(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitC_expr_exists) {
			listener.exitC_expr_exists(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitC_expr_exists) {
			return visitor.visitC_expr_exists(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class C_expr_exprContext extends C_exprContext {
	public _a_expr_in_parens!: A_exprContext;
	public KW_ARRAY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ARRAY, 0); }
	public select_with_parens(): Select_with_parensContext | undefined {
		return this.tryGetRuleContext(0, Select_with_parensContext);
	}
	public array_expr(): Array_exprContext | undefined {
		return this.tryGetRuleContext(0, Array_exprContext);
	}
	public PARAM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PARAM, 0); }
	public opt_indirection(): Opt_indirectionContext | undefined {
		return this.tryGetRuleContext(0, Opt_indirectionContext);
	}
	public KW_GROUPING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GROUPING, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_UNIQUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNIQUE, 0); }
	public columnref(): ColumnrefContext | undefined {
		return this.tryGetRuleContext(0, ColumnrefContext);
	}
	public aexprconst(): AexprconstContext | undefined {
		return this.tryGetRuleContext(0, AexprconstContext);
	}
	public plsqlvariablename(): PlsqlvariablenameContext | undefined {
		return this.tryGetRuleContext(0, PlsqlvariablenameContext);
	}
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public func_expr(): Func_exprContext | undefined {
		return this.tryGetRuleContext(0, Func_exprContext);
	}
	public indirection(): IndirectionContext | undefined {
		return this.tryGetRuleContext(0, IndirectionContext);
	}
	public explicit_row(): Explicit_rowContext | undefined {
		return this.tryGetRuleContext(0, Explicit_rowContext);
	}
	public implicit_row(): Implicit_rowContext | undefined {
		return this.tryGetRuleContext(0, Implicit_rowContext);
	}
	public row(): RowContext[];
	public row(i: number): RowContext;
	public row(i?: number): RowContext | RowContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RowContext);
		} else {
			return this.getRuleContext(i, RowContext);
		}
	}
	public KW_OVERLAPS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OVERLAPS, 0); }
	constructor(ctx: C_exprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterC_expr_expr) {
			listener.enterC_expr_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitC_expr_expr) {
			listener.exitC_expr_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitC_expr_expr) {
			return visitor.visitC_expr_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class C_expr_caseContext extends C_exprContext {
	public case_expr(): Case_exprContext {
		return this.getRuleContext(0, Case_exprContext);
	}
	constructor(ctx: C_exprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterC_expr_case) {
			listener.enterC_expr_case(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitC_expr_case) {
			listener.exitC_expr_case(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitC_expr_case) {
			return visitor.visitC_expr_case(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PlsqlvariablenameContext extends ParserRuleContext {
	public PLSQLVARIABLENAME(): TerminalNode { return this.getToken(PostgreSQLParser.PLSQLVARIABLENAME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_plsqlvariablename; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPlsqlvariablename) {
			listener.enterPlsqlvariablename(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPlsqlvariablename) {
			listener.exitPlsqlvariablename(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPlsqlvariablename) {
			return visitor.visitPlsqlvariablename(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_applicationContext extends ParserRuleContext {
	public func_name(): Func_nameContext {
		return this.getRuleContext(0, Func_nameContext);
	}
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public func_arg_list(): Func_arg_listContext | undefined {
		return this.tryGetRuleContext(0, Func_arg_listContext);
	}
	public KW_VARIADIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VARIADIC, 0); }
	public func_arg_expr(): Func_arg_exprContext | undefined {
		return this.tryGetRuleContext(0, Func_arg_exprContext);
	}
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.STAR, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DISTINCT, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COMMA, 0); }
	public opt_sort_clause(): Opt_sort_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_sort_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_application; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_application) {
			listener.enterFunc_application(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_application) {
			listener.exitFunc_application(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_application) {
			return visitor.visitFunc_application(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_exprContext extends ParserRuleContext {
	public func_application(): Func_applicationContext | undefined {
		return this.tryGetRuleContext(0, Func_applicationContext);
	}
	public within_group_clause(): Within_group_clauseContext | undefined {
		return this.tryGetRuleContext(0, Within_group_clauseContext);
	}
	public filter_clause(): Filter_clauseContext | undefined {
		return this.tryGetRuleContext(0, Filter_clauseContext);
	}
	public over_clause(): Over_clauseContext | undefined {
		return this.tryGetRuleContext(0, Over_clauseContext);
	}
	public func_expr_common_subexpr(): Func_expr_common_subexprContext | undefined {
		return this.tryGetRuleContext(0, Func_expr_common_subexprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_expr) {
			listener.enterFunc_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_expr) {
			listener.exitFunc_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_expr) {
			return visitor.visitFunc_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_expr_windowlessContext extends ParserRuleContext {
	public func_application(): Func_applicationContext | undefined {
		return this.tryGetRuleContext(0, Func_applicationContext);
	}
	public func_expr_common_subexpr(): Func_expr_common_subexprContext | undefined {
		return this.tryGetRuleContext(0, Func_expr_common_subexprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_expr_windowless; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_expr_windowless) {
			listener.enterFunc_expr_windowless(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_expr_windowless) {
			listener.exitFunc_expr_windowless(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_expr_windowless) {
			return visitor.visitFunc_expr_windowless(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_expr_common_subexprContext extends ParserRuleContext {
	public KW_COLLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATION, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext[];
	public a_expr(i: number): A_exprContext;
	public a_expr(i?: number): A_exprContext | A_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_exprContext);
		} else {
			return this.getRuleContext(i, A_exprContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_DATE, 0); }
	public KW_CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_TIME, 0); }
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public KW_CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_TIMESTAMP, 0); }
	public KW_LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCALTIME, 0); }
	public KW_LOCALTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCALTIMESTAMP, 0); }
	public KW_CURRENT_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_ROLE, 0); }
	public KW_CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_USER, 0); }
	public KW_SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SESSION_USER, 0); }
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USER, 0); }
	public KW_CURRENT_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_CATALOG, 0); }
	public KW_CURRENT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_SCHEMA, 0); }
	public KW_CAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CAST, 0); }
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public typename(): TypenameContext | undefined {
		return this.tryGetRuleContext(0, TypenameContext);
	}
	public KW_EXTRACT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXTRACT, 0); }
	public extract_list(): Extract_listContext | undefined {
		return this.tryGetRuleContext(0, Extract_listContext);
	}
	public KW_NORMALIZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NORMALIZE, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COMMA, 0); }
	public unicode_normal_form(): Unicode_normal_formContext | undefined {
		return this.tryGetRuleContext(0, Unicode_normal_formContext);
	}
	public KW_OVERLAY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OVERLAY, 0); }
	public overlay_list(): Overlay_listContext | undefined {
		return this.tryGetRuleContext(0, Overlay_listContext);
	}
	public KW_POSITION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_POSITION, 0); }
	public position_list(): Position_listContext | undefined {
		return this.tryGetRuleContext(0, Position_listContext);
	}
	public KW_SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SUBSTRING, 0); }
	public substr_list(): Substr_listContext | undefined {
		return this.tryGetRuleContext(0, Substr_listContext);
	}
	public KW_TREAT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TREAT, 0); }
	public KW_TRIM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRIM, 0); }
	public trim_list(): Trim_listContext | undefined {
		return this.tryGetRuleContext(0, Trim_listContext);
	}
	public KW_BOTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BOTH, 0); }
	public KW_LEADING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEADING, 0); }
	public KW_TRAILING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRAILING, 0); }
	public KW_NULLIF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULLIF, 0); }
	public KW_COALESCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COALESCE, 0); }
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	public KW_GREATEST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GREATEST, 0); }
	public KW_LEAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEAST, 0); }
	public KW_XMLCONCAT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLCONCAT, 0); }
	public KW_XMLELEMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLELEMENT, 0); }
	public KW_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NAME, 0); }
	public collabel(): CollabelContext | undefined {
		return this.tryGetRuleContext(0, CollabelContext);
	}
	public xml_attributes(): Xml_attributesContext | undefined {
		return this.tryGetRuleContext(0, Xml_attributesContext);
	}
	public KW_XMLEXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLEXISTS, 0); }
	public c_expr(): C_exprContext | undefined {
		return this.tryGetRuleContext(0, C_exprContext);
	}
	public xmlexists_argument(): Xmlexists_argumentContext | undefined {
		return this.tryGetRuleContext(0, Xmlexists_argumentContext);
	}
	public KW_XMLFOREST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLFOREST, 0); }
	public xml_attribute_list(): Xml_attribute_listContext | undefined {
		return this.tryGetRuleContext(0, Xml_attribute_listContext);
	}
	public KW_XMLPARSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLPARSE, 0); }
	public document_or_content(): Document_or_contentContext | undefined {
		return this.tryGetRuleContext(0, Document_or_contentContext);
	}
	public xml_whitespace_option(): Xml_whitespace_optionContext | undefined {
		return this.tryGetRuleContext(0, Xml_whitespace_optionContext);
	}
	public KW_XMLPI(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLPI, 0); }
	public KW_XMLROOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLROOT, 0); }
	public KW_XML(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XML, 0); }
	public xml_root_version(): Xml_root_versionContext | undefined {
		return this.tryGetRuleContext(0, Xml_root_versionContext);
	}
	public opt_xml_root_standalone(): Opt_xml_root_standaloneContext | undefined {
		return this.tryGetRuleContext(0, Opt_xml_root_standaloneContext);
	}
	public KW_XMLSERIALIZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLSERIALIZE, 0); }
	public simpletypename(): SimpletypenameContext | undefined {
		return this.tryGetRuleContext(0, SimpletypenameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_expr_common_subexpr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_expr_common_subexpr) {
			listener.enterFunc_expr_common_subexpr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_expr_common_subexpr) {
			listener.exitFunc_expr_common_subexpr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_expr_common_subexpr) {
			return visitor.visitFunc_expr_common_subexpr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_root_versionContext extends ParserRuleContext {
	public KW_VERSION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_VERSION, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_VALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xml_root_version; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXml_root_version) {
			listener.enterXml_root_version(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXml_root_version) {
			listener.exitXml_root_version(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXml_root_version) {
			return visitor.visitXml_root_version(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_xml_root_standaloneContext extends ParserRuleContext {
	public COMMA(): TerminalNode { return this.getToken(PostgreSQLParser.COMMA, 0); }
	public KW_STANDALONE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_STANDALONE, 0); }
	public KW_YES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_YES, 0); }
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_VALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_xml_root_standalone; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_xml_root_standalone) {
			listener.enterOpt_xml_root_standalone(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_xml_root_standalone) {
			listener.exitOpt_xml_root_standalone(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_xml_root_standalone) {
			return visitor.visitOpt_xml_root_standalone(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_attributesContext extends ParserRuleContext {
	public KW_XMLATTRIBUTES(): TerminalNode { return this.getToken(PostgreSQLParser.KW_XMLATTRIBUTES, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public xml_attribute_list(): Xml_attribute_listContext {
		return this.getRuleContext(0, Xml_attribute_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xml_attributes; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXml_attributes) {
			listener.enterXml_attributes(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXml_attributes) {
			listener.exitXml_attributes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXml_attributes) {
			return visitor.visitXml_attributes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_attribute_listContext extends ParserRuleContext {
	public xml_attribute_el(): Xml_attribute_elContext[];
	public xml_attribute_el(i: number): Xml_attribute_elContext;
	public xml_attribute_el(i?: number): Xml_attribute_elContext | Xml_attribute_elContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Xml_attribute_elContext);
		} else {
			return this.getRuleContext(i, Xml_attribute_elContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xml_attribute_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXml_attribute_list) {
			listener.enterXml_attribute_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXml_attribute_list) {
			listener.exitXml_attribute_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXml_attribute_list) {
			return visitor.visitXml_attribute_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_attribute_elContext extends ParserRuleContext {
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public collabel(): CollabelContext | undefined {
		return this.tryGetRuleContext(0, CollabelContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xml_attribute_el; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXml_attribute_el) {
			listener.enterXml_attribute_el(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXml_attribute_el) {
			listener.exitXml_attribute_el(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXml_attribute_el) {
			return visitor.visitXml_attribute_el(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Document_or_contentContext extends ParserRuleContext {
	public KW_DOCUMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOCUMENT, 0); }
	public KW_CONTENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONTENT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_document_or_content; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDocument_or_content) {
			listener.enterDocument_or_content(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDocument_or_content) {
			listener.exitDocument_or_content(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDocument_or_content) {
			return visitor.visitDocument_or_content(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_whitespace_optionContext extends ParserRuleContext {
	public KW_PRESERVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRESERVE, 0); }
	public KW_WHITESPACE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHITESPACE, 0); }
	public KW_STRIP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STRIP, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xml_whitespace_option; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXml_whitespace_option) {
			listener.enterXml_whitespace_option(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXml_whitespace_option) {
			listener.exitXml_whitespace_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXml_whitespace_option) {
			return visitor.visitXml_whitespace_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xmlexists_argumentContext extends ParserRuleContext {
	public KW_PASSING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PASSING, 0); }
	public c_expr(): C_exprContext {
		return this.getRuleContext(0, C_exprContext);
	}
	public xml_passing_mech(): Xml_passing_mechContext[];
	public xml_passing_mech(i: number): Xml_passing_mechContext;
	public xml_passing_mech(i?: number): Xml_passing_mechContext | Xml_passing_mechContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Xml_passing_mechContext);
		} else {
			return this.getRuleContext(i, Xml_passing_mechContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xmlexists_argument; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXmlexists_argument) {
			listener.enterXmlexists_argument(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXmlexists_argument) {
			listener.exitXmlexists_argument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXmlexists_argument) {
			return visitor.visitXmlexists_argument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Xml_passing_mechContext extends ParserRuleContext {
	public KW_BY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BY, 0); }
	public KW_REF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REF, 0); }
	public KW_VALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xml_passing_mech; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXml_passing_mech) {
			listener.enterXml_passing_mech(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXml_passing_mech) {
			listener.exitXml_passing_mech(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXml_passing_mech) {
			return visitor.visitXml_passing_mech(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Within_group_clauseContext extends ParserRuleContext {
	public KW_WITHIN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WITHIN, 0); }
	public KW_GROUP(): TerminalNode { return this.getToken(PostgreSQLParser.KW_GROUP, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public sort_clause(): Sort_clauseContext {
		return this.getRuleContext(0, Sort_clauseContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_within_group_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWithin_group_clause) {
			listener.enterWithin_group_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWithin_group_clause) {
			listener.exitWithin_group_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWithin_group_clause) {
			return visitor.visitWithin_group_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Filter_clauseContext extends ParserRuleContext {
	public KW_FILTER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FILTER, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public KW_WHERE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHERE, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_filter_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFilter_clause) {
			listener.enterFilter_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFilter_clause) {
			listener.exitFilter_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFilter_clause) {
			return visitor.visitFilter_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_clauseContext extends ParserRuleContext {
	public KW_WINDOW(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WINDOW, 0); }
	public window_definition_list(): Window_definition_listContext {
		return this.getRuleContext(0, Window_definition_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_window_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWindow_clause) {
			listener.enterWindow_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWindow_clause) {
			listener.exitWindow_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWindow_clause) {
			return visitor.visitWindow_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_definition_listContext extends ParserRuleContext {
	public window_definition(): Window_definitionContext[];
	public window_definition(i: number): Window_definitionContext;
	public window_definition(i?: number): Window_definitionContext | Window_definitionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Window_definitionContext);
		} else {
			return this.getRuleContext(i, Window_definitionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_window_definition_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWindow_definition_list) {
			listener.enterWindow_definition_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWindow_definition_list) {
			listener.exitWindow_definition_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWindow_definition_list) {
			return visitor.visitWindow_definition_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_definitionContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public KW_AS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AS, 0); }
	public window_specification(): Window_specificationContext {
		return this.getRuleContext(0, Window_specificationContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_window_definition; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWindow_definition) {
			listener.enterWindow_definition(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWindow_definition) {
			listener.exitWindow_definition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWindow_definition) {
			return visitor.visitWindow_definition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Over_clauseContext extends ParserRuleContext {
	public KW_OVER(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OVER, 0); }
	public window_specification(): Window_specificationContext | undefined {
		return this.tryGetRuleContext(0, Window_specificationContext);
	}
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_over_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOver_clause) {
			listener.enterOver_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOver_clause) {
			listener.exitOver_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOver_clause) {
			return visitor.visitOver_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Window_specificationContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_existing_window_name(): Opt_existing_window_nameContext | undefined {
		return this.tryGetRuleContext(0, Opt_existing_window_nameContext);
	}
	public opt_partition_clause(): Opt_partition_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_partition_clauseContext);
	}
	public opt_sort_clause(): Opt_sort_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_sort_clauseContext);
	}
	public opt_frame_clause(): Opt_frame_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_frame_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_window_specification; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWindow_specification) {
			listener.enterWindow_specification(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWindow_specification) {
			listener.exitWindow_specification(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWindow_specification) {
			return visitor.visitWindow_specification(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_existing_window_nameContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_existing_window_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_existing_window_name) {
			listener.enterOpt_existing_window_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_existing_window_name) {
			listener.exitOpt_existing_window_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_existing_window_name) {
			return visitor.visitOpt_existing_window_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_partition_clauseContext extends ParserRuleContext {
	public KW_PARTITION(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PARTITION, 0); }
	public KW_BY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BY, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_partition_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_partition_clause) {
			listener.enterOpt_partition_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_partition_clause) {
			listener.exitOpt_partition_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_partition_clause) {
			return visitor.visitOpt_partition_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_frame_clauseContext extends ParserRuleContext {
	public KW_RANGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RANGE, 0); }
	public frame_extent(): Frame_extentContext {
		return this.getRuleContext(0, Frame_extentContext);
	}
	public opt_window_exclusion_clause(): Opt_window_exclusion_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_window_exclusion_clauseContext);
	}
	public KW_ROWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROWS, 0); }
	public KW_GROUPS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GROUPS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_frame_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_frame_clause) {
			listener.enterOpt_frame_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_frame_clause) {
			listener.exitOpt_frame_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_frame_clause) {
			return visitor.visitOpt_frame_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Frame_extentContext extends ParserRuleContext {
	public frame_bound(): Frame_boundContext[];
	public frame_bound(i: number): Frame_boundContext;
	public frame_bound(i?: number): Frame_boundContext | Frame_boundContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Frame_boundContext);
		} else {
			return this.getRuleContext(i, Frame_boundContext);
		}
	}
	public KW_BETWEEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BETWEEN, 0); }
	public KW_AND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AND, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_frame_extent; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFrame_extent) {
			listener.enterFrame_extent(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFrame_extent) {
			listener.exitFrame_extent(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFrame_extent) {
			return visitor.visitFrame_extent(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Frame_boundContext extends ParserRuleContext {
	public KW_UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNBOUNDED, 0); }
	public KW_PRECEDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRECEDING, 0); }
	public KW_FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOLLOWING, 0); }
	public KW_CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT, 0); }
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROW, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_frame_bound; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFrame_bound) {
			listener.enterFrame_bound(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFrame_bound) {
			listener.exitFrame_bound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFrame_bound) {
			return visitor.visitFrame_bound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_window_exclusion_clauseContext extends ParserRuleContext {
	public KW_EXCLUDE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXCLUDE, 0); }
	public KW_CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT, 0); }
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROW, 0); }
	public KW_GROUP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GROUP, 0); }
	public KW_TIES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TIES, 0); }
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_OTHERS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OTHERS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_window_exclusion_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_window_exclusion_clause) {
			listener.enterOpt_window_exclusion_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_window_exclusion_clause) {
			listener.exitOpt_window_exclusion_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_window_exclusion_clause) {
			return visitor.visitOpt_window_exclusion_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RowContext extends ParserRuleContext {
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROW, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COMMA, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_row; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRow) {
			listener.enterRow(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRow) {
			listener.exitRow(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRow) {
			return visitor.visitRow(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Explicit_rowContext extends ParserRuleContext {
	public KW_ROW(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ROW, 0); }
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_explicit_row; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExplicit_row) {
			listener.enterExplicit_row(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExplicit_row) {
			listener.exitExplicit_row(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExplicit_row) {
			return visitor.visitExplicit_row(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Implicit_rowContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	public COMMA(): TerminalNode { return this.getToken(PostgreSQLParser.COMMA, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_implicit_row; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterImplicit_row) {
			listener.enterImplicit_row(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitImplicit_row) {
			listener.exitImplicit_row(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitImplicit_row) {
			return visitor.visitImplicit_row(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sub_typeContext extends ParserRuleContext {
	public KW_ANY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ANY, 0); }
	public KW_SOME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SOME, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_sub_type; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSub_type) {
			listener.enterSub_type(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSub_type) {
			listener.exitSub_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSub_type) {
			return visitor.visitSub_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class All_opContext extends ParserRuleContext {
	public Operator(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.Operator, 0); }
	public mathop(): MathopContext | undefined {
		return this.tryGetRuleContext(0, MathopContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_all_op; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAll_op) {
			listener.enterAll_op(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAll_op) {
			listener.exitAll_op(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAll_op) {
			return visitor.visitAll_op(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MathopContext extends ParserRuleContext {
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.MINUS, 0); }
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.STAR, 0); }
	public SLASH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.SLASH, 0); }
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PERCENT, 0); }
	public CARET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CARET, 0); }
	public LT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.LT, 0); }
	public GT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.GT, 0); }
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EQUAL, 0); }
	public LESS_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.LESS_EQUALS, 0); }
	public GREATER_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.GREATER_EQUALS, 0); }
	public NOT_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.NOT_EQUALS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_mathop; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterMathop) {
			listener.enterMathop(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitMathop) {
			listener.exitMathop(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitMathop) {
			return visitor.visitMathop(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qual_opContext extends ParserRuleContext {
	public Operator(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.Operator, 0); }
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public any_operator(): Any_operatorContext | undefined {
		return this.tryGetRuleContext(0, Any_operatorContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_qual_op; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterQual_op) {
			listener.enterQual_op(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitQual_op) {
			listener.exitQual_op(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitQual_op) {
			return visitor.visitQual_op(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qual_all_opContext extends ParserRuleContext {
	public all_op(): All_opContext | undefined {
		return this.tryGetRuleContext(0, All_opContext);
	}
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public any_operator(): Any_operatorContext | undefined {
		return this.tryGetRuleContext(0, Any_operatorContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_qual_all_op; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterQual_all_op) {
			listener.enterQual_all_op(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitQual_all_op) {
			listener.exitQual_all_op(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitQual_all_op) {
			return visitor.visitQual_all_op(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Subquery_OpContext extends ParserRuleContext {
	public all_op(): All_opContext | undefined {
		return this.tryGetRuleContext(0, All_opContext);
	}
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public any_operator(): Any_operatorContext | undefined {
		return this.tryGetRuleContext(0, Any_operatorContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public KW_LIKE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LIKE, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_ILIKE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ILIKE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_subquery_Op; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSubquery_Op) {
			listener.enterSubquery_Op(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSubquery_Op) {
			listener.exitSubquery_Op(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSubquery_Op) {
			return visitor.visitSubquery_Op(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_listContext extends ParserRuleContext {
	public a_expr(): A_exprContext[];
	public a_expr(i: number): A_exprContext;
	public a_expr(i?: number): A_exprContext | A_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_exprContext);
		} else {
			return this.getRuleContext(i, A_exprContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_expr_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExpr_list) {
			listener.enterExpr_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExpr_list) {
			listener.exitExpr_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExpr_list) {
			return visitor.visitExpr_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_arg_listContext extends ParserRuleContext {
	public func_arg_expr(): Func_arg_exprContext[];
	public func_arg_expr(i: number): Func_arg_exprContext;
	public func_arg_expr(i?: number): Func_arg_exprContext | Func_arg_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Func_arg_exprContext);
		} else {
			return this.getRuleContext(i, Func_arg_exprContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_arg_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_arg_list) {
			listener.enterFunc_arg_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_arg_list) {
			listener.exitFunc_arg_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_arg_list) {
			return visitor.visitFunc_arg_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_arg_exprContext extends ParserRuleContext {
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public param_name(): Param_nameContext | undefined {
		return this.tryGetRuleContext(0, Param_nameContext);
	}
	public COLON_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COLON_EQUALS, 0); }
	public EQUALS_GREATER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EQUALS_GREATER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_arg_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_arg_expr) {
			listener.enterFunc_arg_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_arg_expr) {
			listener.exitFunc_arg_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_arg_expr) {
			return visitor.visitFunc_arg_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_listContext extends ParserRuleContext {
	public typename(): TypenameContext[];
	public typename(i: number): TypenameContext;
	public typename(i?: number): TypenameContext | TypenameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(TypenameContext);
		} else {
			return this.getRuleContext(i, TypenameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_type_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterType_list) {
			listener.enterType_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitType_list) {
			listener.exitType_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitType_list) {
			return visitor.visitType_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Array_exprContext extends ParserRuleContext {
	public OPEN_BRACKET(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_BRACKET, 0); }
	public CLOSE_BRACKET(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	public array_expr_list(): Array_expr_listContext | undefined {
		return this.tryGetRuleContext(0, Array_expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_array_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterArray_expr) {
			listener.enterArray_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitArray_expr) {
			listener.exitArray_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitArray_expr) {
			return visitor.visitArray_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Array_expr_listContext extends ParserRuleContext {
	public array_expr(): Array_exprContext[];
	public array_expr(i: number): Array_exprContext;
	public array_expr(i?: number): Array_exprContext | Array_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Array_exprContext);
		} else {
			return this.getRuleContext(i, Array_exprContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_array_expr_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterArray_expr_list) {
			listener.enterArray_expr_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitArray_expr_list) {
			listener.exitArray_expr_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitArray_expr_list) {
			return visitor.visitArray_expr_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Extract_listContext extends ParserRuleContext {
	public extract_arg(): Extract_argContext {
		return this.getRuleContext(0, Extract_argContext);
	}
	public KW_FROM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FROM, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_extract_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExtract_list) {
			listener.enterExtract_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExtract_list) {
			listener.exitExtract_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExtract_list) {
			return visitor.visitExtract_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Extract_argContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public KW_YEAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_YEAR, 0); }
	public KW_MONTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MONTH, 0); }
	public KW_DAY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DAY, 0); }
	public KW_HOUR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_HOUR, 0); }
	public KW_MINUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MINUTE, 0); }
	public KW_SECOND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SECOND, 0); }
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_extract_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExtract_arg) {
			listener.enterExtract_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExtract_arg) {
			listener.exitExtract_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExtract_arg) {
			return visitor.visitExtract_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unicode_normal_formContext extends ParserRuleContext {
	public KW_NFC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NFC, 0); }
	public KW_NFD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NFD, 0); }
	public KW_NFKC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NFKC, 0); }
	public KW_NFKD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NFKD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_unicode_normal_form; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterUnicode_normal_form) {
			listener.enterUnicode_normal_form(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitUnicode_normal_form) {
			listener.exitUnicode_normal_form(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitUnicode_normal_form) {
			return visitor.visitUnicode_normal_form(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Overlay_listContext extends ParserRuleContext {
	public a_expr(): A_exprContext[];
	public a_expr(i: number): A_exprContext;
	public a_expr(i?: number): A_exprContext | A_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_exprContext);
		} else {
			return this.getRuleContext(i, A_exprContext);
		}
	}
	public KW_PLACING(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PLACING, 0); }
	public KW_FROM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_overlay_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOverlay_list) {
			listener.enterOverlay_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOverlay_list) {
			listener.exitOverlay_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOverlay_list) {
			return visitor.visitOverlay_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Position_listContext extends ParserRuleContext {
	public b_expr(): B_exprContext[];
	public b_expr(i: number): B_exprContext;
	public b_expr(i?: number): B_exprContext | B_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(B_exprContext);
		} else {
			return this.getRuleContext(i, B_exprContext);
		}
	}
	public KW_IN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_position_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPosition_list) {
			listener.enterPosition_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPosition_list) {
			listener.exitPosition_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPosition_list) {
			return visitor.visitPosition_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Substr_listContext extends ParserRuleContext {
	public a_expr(): A_exprContext[];
	public a_expr(i: number): A_exprContext;
	public a_expr(i?: number): A_exprContext | A_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_exprContext);
		} else {
			return this.getRuleContext(i, A_exprContext);
		}
	}
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_SIMILAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SIMILAR, 0); }
	public KW_ESCAPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ESCAPE, 0); }
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_substr_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSubstr_list) {
			listener.enterSubstr_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSubstr_list) {
			listener.exitSubstr_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSubstr_list) {
			return visitor.visitSubstr_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Trim_listContext extends ParserRuleContext {
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_trim_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTrim_list) {
			listener.enterTrim_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTrim_list) {
			listener.exitTrim_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTrim_list) {
			return visitor.visitTrim_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class In_exprContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_in_expr; }
	public copyFrom(ctx: In_exprContext): void {
		super.copyFrom(ctx);
	}
}
export class In_expr_selectContext extends In_exprContext {
	public select_with_parens(): Select_with_parensContext {
		return this.getRuleContext(0, Select_with_parensContext);
	}
	constructor(ctx: In_exprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIn_expr_select) {
			listener.enterIn_expr_select(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIn_expr_select) {
			listener.exitIn_expr_select(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIn_expr_select) {
			return visitor.visitIn_expr_select(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class In_expr_listContext extends In_exprContext {
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(ctx: In_exprContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIn_expr_list) {
			listener.enterIn_expr_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIn_expr_list) {
			listener.exitIn_expr_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIn_expr_list) {
			return visitor.visitIn_expr_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Case_exprContext extends ParserRuleContext {
	public KW_CASE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CASE, 0); }
	public when_clause_list(): When_clause_listContext {
		return this.getRuleContext(0, When_clause_listContext);
	}
	public KW_END(): TerminalNode { return this.getToken(PostgreSQLParser.KW_END, 0); }
	public case_arg(): Case_argContext | undefined {
		return this.tryGetRuleContext(0, Case_argContext);
	}
	public case_default(): Case_defaultContext | undefined {
		return this.tryGetRuleContext(0, Case_defaultContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_case_expr; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCase_expr) {
			listener.enterCase_expr(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCase_expr) {
			listener.exitCase_expr(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCase_expr) {
			return visitor.visitCase_expr(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class When_clause_listContext extends ParserRuleContext {
	public when_clause(): When_clauseContext[];
	public when_clause(i: number): When_clauseContext;
	public when_clause(i?: number): When_clauseContext | When_clauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(When_clauseContext);
		} else {
			return this.getRuleContext(i, When_clauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_when_clause_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWhen_clause_list) {
			listener.enterWhen_clause_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWhen_clause_list) {
			listener.exitWhen_clause_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWhen_clause_list) {
			return visitor.visitWhen_clause_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class When_clauseContext extends ParserRuleContext {
	public KW_WHEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHEN, 0); }
	public a_expr(): A_exprContext[];
	public a_expr(i: number): A_exprContext;
	public a_expr(i?: number): A_exprContext | A_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_exprContext);
		} else {
			return this.getRuleContext(i, A_exprContext);
		}
	}
	public KW_THEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_THEN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_when_clause; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWhen_clause) {
			listener.enterWhen_clause(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWhen_clause) {
			listener.exitWhen_clause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWhen_clause) {
			return visitor.visitWhen_clause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Case_defaultContext extends ParserRuleContext {
	public KW_ELSE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ELSE, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_case_default; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCase_default) {
			listener.enterCase_default(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCase_default) {
			listener.exitCase_default(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCase_default) {
			return visitor.visitCase_default(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Case_argContext extends ParserRuleContext {
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_case_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCase_arg) {
			listener.enterCase_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCase_arg) {
			listener.exitCase_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCase_arg) {
			return visitor.visitCase_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColumnrefContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public indirection(): IndirectionContext | undefined {
		return this.tryGetRuleContext(0, IndirectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_columnref; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColumnref) {
			listener.enterColumnref(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColumnref) {
			listener.exitColumnref(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColumnref) {
			return visitor.visitColumnref(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Indirection_elContext extends ParserRuleContext {
	public DOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.DOT, 0); }
	public attr_name(): Attr_nameContext | undefined {
		return this.tryGetRuleContext(0, Attr_nameContext);
	}
	public STAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.STAR, 0); }
	public OPEN_BRACKET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_BRACKET, 0); }
	public CLOSE_BRACKET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_BRACKET, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COLON, 0); }
	public opt_slice_bound(): Opt_slice_boundContext[];
	public opt_slice_bound(i: number): Opt_slice_boundContext;
	public opt_slice_bound(i?: number): Opt_slice_boundContext | Opt_slice_boundContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Opt_slice_boundContext);
		} else {
			return this.getRuleContext(i, Opt_slice_boundContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_indirection_el; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndirection_el) {
			listener.enterIndirection_el(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndirection_el) {
			listener.exitIndirection_el(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndirection_el) {
			return visitor.visitIndirection_el(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_slice_boundContext extends ParserRuleContext {
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_slice_bound; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_slice_bound) {
			listener.enterOpt_slice_bound(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_slice_bound) {
			listener.exitOpt_slice_bound(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_slice_bound) {
			return visitor.visitOpt_slice_bound(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndirectionContext extends ParserRuleContext {
	public indirection_el(): Indirection_elContext[];
	public indirection_el(i: number): Indirection_elContext;
	public indirection_el(i?: number): Indirection_elContext | Indirection_elContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Indirection_elContext);
		} else {
			return this.getRuleContext(i, Indirection_elContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_indirection; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndirection) {
			listener.enterIndirection(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndirection) {
			listener.exitIndirection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndirection) {
			return visitor.visitIndirection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_indirectionContext extends ParserRuleContext {
	public indirection_el(): Indirection_elContext[];
	public indirection_el(i: number): Indirection_elContext;
	public indirection_el(i?: number): Indirection_elContext | Indirection_elContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Indirection_elContext);
		} else {
			return this.getRuleContext(i, Indirection_elContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_indirection; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_indirection) {
			listener.enterOpt_indirection(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_indirection) {
			listener.exitOpt_indirection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_indirection) {
			return visitor.visitOpt_indirection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_target_listContext extends ParserRuleContext {
	public target_list(): Target_listContext {
		return this.getRuleContext(0, Target_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_target_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_target_list) {
			listener.enterOpt_target_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_target_list) {
			listener.exitOpt_target_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_target_list) {
			return visitor.visitOpt_target_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Target_listContext extends ParserRuleContext {
	public target_el(): Target_elContext[];
	public target_el(i: number): Target_elContext;
	public target_el(i?: number): Target_elContext | Target_elContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Target_elContext);
		} else {
			return this.getRuleContext(i, Target_elContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_target_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTarget_list) {
			listener.enterTarget_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTarget_list) {
			listener.exitTarget_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTarget_list) {
			return visitor.visitTarget_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Target_elContext extends ParserRuleContext {
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_target_el; }
	public copyFrom(ctx: Target_elContext): void {
		super.copyFrom(ctx);
	}
}
export class Target_labelContext extends Target_elContext {
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public collabel(): CollabelContext | undefined {
		return this.tryGetRuleContext(0, CollabelContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	constructor(ctx: Target_elContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTarget_label) {
			listener.enterTarget_label(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTarget_label) {
			listener.exitTarget_label(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTarget_label) {
			return visitor.visitTarget_label(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}
export class Target_starContext extends Target_elContext {
	public STAR(): TerminalNode { return this.getToken(PostgreSQLParser.STAR, 0); }
	constructor(ctx: Target_elContext) {
		super(ctx.parent, ctx.invokingState);
		this.copyFrom(ctx);
	}
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTarget_star) {
			listener.enterTarget_star(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTarget_star) {
			listener.exitTarget_star(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTarget_star) {
			return visitor.visitTarget_star(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qualified_name_listContext extends ParserRuleContext {
	public qualified_name(): Qualified_nameContext[];
	public qualified_name(i: number): Qualified_nameContext;
	public qualified_name(i?: number): Qualified_nameContext | Qualified_nameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Qualified_nameContext);
		} else {
			return this.getRuleContext(i, Qualified_nameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_qualified_name_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterQualified_name_list) {
			listener.enterQualified_name_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitQualified_name_list) {
			listener.exitQualified_name_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitQualified_name_list) {
			return visitor.visitQualified_name_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Table_qualified_nameContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public indirection(): IndirectionContext | undefined {
		return this.tryGetRuleContext(0, IndirectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_table_qualified_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterTable_qualified_name) {
			listener.enterTable_qualified_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitTable_qualified_name) {
			listener.exitTable_qualified_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitTable_qualified_name) {
			return visitor.visitTable_qualified_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Qualified_nameContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	public indirection(): IndirectionContext | undefined {
		return this.tryGetRuleContext(0, IndirectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_qualified_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterQualified_name) {
			listener.enterQualified_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitQualified_name) {
			listener.exitQualified_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitQualified_name) {
			return visitor.visitQualified_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Name_listContext extends ParserRuleContext {
	public name(): NameContext[];
	public name(i: number): NameContext;
	public name(i?: number): NameContext | NameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NameContext);
		} else {
			return this.getRuleContext(i, NameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_name_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterName_list) {
			listener.enterName_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitName_list) {
			listener.exitName_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitName_list) {
			return visitor.visitName_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NameContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterName) {
			listener.enterName(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitName) {
			listener.exitName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitName) {
			return visitor.visitName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Attr_nameContext extends ParserRuleContext {
	public collabel(): CollabelContext {
		return this.getRuleContext(0, CollabelContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_attr_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAttr_name) {
			listener.enterAttr_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAttr_name) {
			listener.exitAttr_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAttr_name) {
			return visitor.visitAttr_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class File_nameContext extends ParserRuleContext {
	public sconst(): SconstContext {
		return this.getRuleContext(0, SconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_file_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFile_name) {
			listener.enterFile_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFile_name) {
			listener.exitFile_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFile_name) {
			return visitor.visitFile_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Func_nameContext extends ParserRuleContext {
	public type_function_name(): Type_function_nameContext | undefined {
		return this.tryGetRuleContext(0, Type_function_nameContext);
	}
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public indirection(): IndirectionContext | undefined {
		return this.tryGetRuleContext(0, IndirectionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_func_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFunc_name) {
			listener.enterFunc_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFunc_name) {
			listener.exitFunc_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFunc_name) {
			return visitor.visitFunc_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AexprconstContext extends ParserRuleContext {
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	public fconst(): FconstContext | undefined {
		return this.tryGetRuleContext(0, FconstContext);
	}
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public bconst(): BconstContext | undefined {
		return this.tryGetRuleContext(0, BconstContext);
	}
	public xconst(): XconstContext | undefined {
		return this.tryGetRuleContext(0, XconstContext);
	}
	public func_name(): Func_nameContext | undefined {
		return this.tryGetRuleContext(0, Func_nameContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public func_arg_list(): Func_arg_listContext | undefined {
		return this.tryGetRuleContext(0, Func_arg_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_sort_clause(): Opt_sort_clauseContext | undefined {
		return this.tryGetRuleContext(0, Opt_sort_clauseContext);
	}
	public consttypename(): ConsttypenameContext | undefined {
		return this.tryGetRuleContext(0, ConsttypenameContext);
	}
	public constinterval(): ConstintervalContext | undefined {
		return this.tryGetRuleContext(0, ConstintervalContext);
	}
	public opt_interval(): Opt_intervalContext | undefined {
		return this.tryGetRuleContext(0, Opt_intervalContext);
	}
	public KW_TRUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRUE, 0); }
	public KW_FALSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FALSE, 0); }
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_aexprconst; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAexprconst) {
			listener.enterAexprconst(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAexprconst) {
			listener.exitAexprconst(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAexprconst) {
			return visitor.visitAexprconst(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class XconstContext extends ParserRuleContext {
	public HexadecimalStringConstant(): TerminalNode { return this.getToken(PostgreSQLParser.HexadecimalStringConstant, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_xconst; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterXconst) {
			listener.enterXconst(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitXconst) {
			listener.exitXconst(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitXconst) {
			return visitor.visitXconst(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class BconstContext extends ParserRuleContext {
	public BinaryStringConstant(): TerminalNode { return this.getToken(PostgreSQLParser.BinaryStringConstant, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_bconst; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterBconst) {
			listener.enterBconst(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitBconst) {
			listener.exitBconst(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitBconst) {
			return visitor.visitBconst(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FconstContext extends ParserRuleContext {
	public Numeric(): TerminalNode { return this.getToken(PostgreSQLParser.Numeric, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_fconst; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFconst) {
			listener.enterFconst(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFconst) {
			listener.exitFconst(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFconst) {
			return visitor.visitFconst(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IconstContext extends ParserRuleContext {
	public Integral(): TerminalNode { return this.getToken(PostgreSQLParser.Integral, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_iconst; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIconst) {
			listener.enterIconst(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIconst) {
			listener.exitIconst(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIconst) {
			return visitor.visitIconst(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SconstContext extends ParserRuleContext {
	public anysconst(): AnysconstContext {
		return this.getRuleContext(0, AnysconstContext);
	}
	public opt_uescape(): Opt_uescapeContext | undefined {
		return this.tryGetRuleContext(0, Opt_uescapeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_sconst; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSconst) {
			listener.enterSconst(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSconst) {
			listener.exitSconst(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSconst) {
			return visitor.visitSconst(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AnysconstContext extends ParserRuleContext {
	public StringConstant(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.StringConstant, 0); }
	public UnicodeEscapeStringConstant(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.UnicodeEscapeStringConstant, 0); }
	public BeginDollarStringConstant(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.BeginDollarStringConstant, 0); }
	public EndDollarStringConstant(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EndDollarStringConstant, 0); }
	public DollarText(): TerminalNode[];
	public DollarText(i: number): TerminalNode;
	public DollarText(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.DollarText);
		} else {
			return this.getToken(PostgreSQLParser.DollarText, i);
		}
	}
	public EscapeStringConstant(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EscapeStringConstant, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_anysconst; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAnysconst) {
			listener.enterAnysconst(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAnysconst) {
			listener.exitAnysconst(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAnysconst) {
			return visitor.visitAnysconst(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_uescapeContext extends ParserRuleContext {
	public KW_UESCAPE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_UESCAPE, 0); }
	public anysconst(): AnysconstContext {
		return this.getRuleContext(0, AnysconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_uescape; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_uescape) {
			listener.enterOpt_uescape(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_uescape) {
			listener.exitOpt_uescape(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_uescape) {
			return visitor.visitOpt_uescape(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SignediconstContext extends ParserRuleContext {
	public iconst(): IconstContext {
		return this.getRuleContext(0, IconstContext);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_signediconst; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSignediconst) {
			listener.enterSignediconst(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSignediconst) {
			listener.exitSignediconst(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSignediconst) {
			return visitor.visitSignediconst(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GroupnameContext extends ParserRuleContext {
	public rolespec(): RolespecContext {
		return this.getRuleContext(0, RolespecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_groupname; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGroupname) {
			listener.enterGroupname(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGroupname) {
			listener.exitGroupname(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGroupname) {
			return visitor.visitGroupname(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoleidContext extends ParserRuleContext {
	public rolespec(): RolespecContext {
		return this.getRuleContext(0, RolespecContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_roleid; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRoleid) {
			listener.enterRoleid(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRoleid) {
			listener.exitRoleid(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRoleid) {
			return visitor.visitRoleid(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RolespecContext extends ParserRuleContext {
	public nonreservedword(): NonreservedwordContext | undefined {
		return this.tryGetRuleContext(0, NonreservedwordContext);
	}
	public KW_CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_USER, 0); }
	public KW_SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SESSION_USER, 0); }
	public KW_PUBLIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PUBLIC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_rolespec; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRolespec) {
			listener.enterRolespec(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRolespec) {
			listener.exitRolespec(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRolespec) {
			return visitor.visitRolespec(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Role_listContext extends ParserRuleContext {
	public rolespec(): RolespecContext[];
	public rolespec(i: number): RolespecContext;
	public rolespec(i?: number): RolespecContext | RolespecContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RolespecContext);
		} else {
			return this.getRuleContext(i, RolespecContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_role_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterRole_list) {
			listener.enterRole_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitRole_list) {
			listener.exitRole_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitRole_list) {
			return visitor.visitRole_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ColidContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public unreserved_keyword(): Unreserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Unreserved_keywordContext);
	}
	public col_name_keyword(): Col_name_keywordContext | undefined {
		return this.tryGetRuleContext(0, Col_name_keywordContext);
	}
	public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Plsql_unreserved_keywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_colid; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterColid) {
			listener.enterColid(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitColid) {
			listener.exitColid(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitColid) {
			return visitor.visitColid(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_method_choicesContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_index_method_choices; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndex_method_choices) {
			listener.enterIndex_method_choices(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndex_method_choices) {
			listener.exitIndex_method_choices(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndex_method_choices) {
			return visitor.visitIndex_method_choices(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exclude_elementContext extends ParserRuleContext {
	public opt_definition(): Opt_definitionContext | undefined {
		return this.tryGetRuleContext(0, Opt_definitionContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public opt_asc_desc(): Opt_asc_descContext | undefined {
		return this.tryGetRuleContext(0, Opt_asc_descContext);
	}
	public opt_nulls_order(): Opt_nulls_orderContext | undefined {
		return this.tryGetRuleContext(0, Opt_nulls_orderContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_exclude_element; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExclude_element) {
			listener.enterExclude_element(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExclude_element) {
			listener.exitExclude_element(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExclude_element) {
			return visitor.visitExclude_element(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Index_paramentersContext extends ParserRuleContext {
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITH, 0); }
	public reloptions(): ReloptionsContext | undefined {
		return this.tryGetRuleContext(0, ReloptionsContext);
	}
	public optconstablespace(): OptconstablespaceContext | undefined {
		return this.tryGetRuleContext(0, OptconstablespaceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_index_paramenters; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIndex_paramenters) {
			listener.enterIndex_paramenters(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIndex_paramenters) {
			listener.exitIndex_paramenters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIndex_paramenters) {
			return visitor.visitIndex_paramenters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WherePredicateContext extends ParserRuleContext {
	public KW_WHERE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHERE, 0); }
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_wherePredicate; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterWherePredicate) {
			listener.enterWherePredicate(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitWherePredicate) {
			listener.exitWherePredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitWherePredicate) {
			return visitor.visitWherePredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_function_nameContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public unreserved_keyword(): Unreserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Unreserved_keywordContext);
	}
	public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Plsql_unreserved_keywordContext);
	}
	public type_func_name_keyword(): Type_func_name_keywordContext | undefined {
		return this.tryGetRuleContext(0, Type_func_name_keywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_type_function_name; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterType_function_name) {
			listener.enterType_function_name(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitType_function_name) {
			listener.exitType_function_name(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitType_function_name) {
			return visitor.visitType_function_name(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NonreservedwordContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public unreserved_keyword(): Unreserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Unreserved_keywordContext);
	}
	public col_name_keyword(): Col_name_keywordContext | undefined {
		return this.tryGetRuleContext(0, Col_name_keywordContext);
	}
	public type_func_name_keyword(): Type_func_name_keywordContext | undefined {
		return this.tryGetRuleContext(0, Type_func_name_keywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_nonreservedword; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterNonreservedword) {
			listener.enterNonreservedword(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitNonreservedword) {
			listener.exitNonreservedword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitNonreservedword) {
			return visitor.visitNonreservedword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CollabelContext extends ParserRuleContext {
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Plsql_unreserved_keywordContext);
	}
	public unreserved_keyword(): Unreserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Unreserved_keywordContext);
	}
	public col_name_keyword(): Col_name_keywordContext | undefined {
		return this.tryGetRuleContext(0, Col_name_keywordContext);
	}
	public type_func_name_keyword(): Type_func_name_keywordContext | undefined {
		return this.tryGetRuleContext(0, Type_func_name_keywordContext);
	}
	public reserved_keyword(): Reserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Reserved_keywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_collabel; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCollabel) {
			listener.enterCollabel(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCollabel) {
			listener.exitCollabel(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCollabel) {
			return visitor.visitCollabel(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IdentifierContext extends ParserRuleContext {
	public Identifier(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.Identifier, 0); }
	public opt_uescape(): Opt_uescapeContext | undefined {
		return this.tryGetRuleContext(0, Opt_uescapeContext);
	}
	public QuotedIdentifier(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.QuotedIdentifier, 0); }
	public UnicodeQuotedIdentifier(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.UnicodeQuotedIdentifier, 0); }
	public plsqlvariablename(): PlsqlvariablenameContext | undefined {
		return this.tryGetRuleContext(0, PlsqlvariablenameContext);
	}
	public plsqlidentifier(): PlsqlidentifierContext | undefined {
		return this.tryGetRuleContext(0, PlsqlidentifierContext);
	}
	public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Plsql_unreserved_keywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_identifier; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterIdentifier) {
			listener.enterIdentifier(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitIdentifier) {
			listener.exitIdentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitIdentifier) {
			return visitor.visitIdentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PlsqlidentifierContext extends ParserRuleContext {
	public PLSQLIDENTIFIER(): TerminalNode { return this.getToken(PostgreSQLParser.PLSQLIDENTIFIER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_plsqlidentifier; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPlsqlidentifier) {
			listener.enterPlsqlidentifier(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPlsqlidentifier) {
			listener.exitPlsqlidentifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPlsqlidentifier) {
			return visitor.visitPlsqlidentifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Unreserved_keywordContext extends ParserRuleContext {
	public KW_ABORT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ABORT, 0); }
	public KW_ABSOLUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ABSOLUTE, 0); }
	public KW_ACCESS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ACCESS, 0); }
	public KW_ACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ACTION, 0); }
	public KW_ADD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADD, 0); }
	public KW_ADMIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ADMIN, 0); }
	public KW_AFTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AFTER, 0); }
	public KW_AGGREGATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AGGREGATE, 0); }
	public KW_ALSO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALSO, 0); }
	public KW_ALTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALTER, 0); }
	public KW_ALWAYS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALWAYS, 0); }
	public KW_ASSERTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ASSERTION, 0); }
	public KW_ASSIGNMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ASSIGNMENT, 0); }
	public KW_AT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AT, 0); }
	public KW_ATTACH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ATTACH, 0); }
	public KW_ATTRIBUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ATTRIBUTE, 0); }
	public KW_BACKWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BACKWARD, 0); }
	public KW_BEFORE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BEFORE, 0); }
	public KW_BEGIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BEGIN, 0); }
	public KW_BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BY, 0); }
	public KW_CACHE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CACHE, 0); }
	public KW_CALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CALL, 0); }
	public KW_CALLED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CALLED, 0); }
	public KW_CASCADE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CASCADE, 0); }
	public KW_CASCADED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CASCADED, 0); }
	public KW_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CATALOG, 0); }
	public KW_CHAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CHAIN, 0); }
	public KW_CHARACTERISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CHARACTERISTICS, 0); }
	public KW_CHECKPOINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CHECKPOINT, 0); }
	public KW_CLASS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CLASS, 0); }
	public KW_CLOSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CLOSE, 0); }
	public KW_CLUSTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CLUSTER, 0); }
	public KW_COLUMNS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLUMNS, 0); }
	public KW_COMMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COMMENT, 0); }
	public KW_COMMENTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COMMENTS, 0); }
	public KW_COMMIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COMMIT, 0); }
	public KW_COMMITTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COMMITTED, 0); }
	public KW_CONFIGURATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONFIGURATION, 0); }
	public KW_CONFLICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONFLICT, 0); }
	public KW_CONNECTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONNECTION, 0); }
	public KW_CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINTS, 0); }
	public KW_CONTENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONTENT, 0); }
	public KW_CONTINUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONTINUE, 0); }
	public KW_CONVERSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONVERSION, 0); }
	public KW_COPY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COPY, 0); }
	public KW_COST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COST, 0); }
	public KW_CSV(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CSV, 0); }
	public KW_CUBE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CUBE, 0); }
	public KW_CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT, 0); }
	public KW_CURSOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURSOR, 0); }
	public KW_CYCLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CYCLE, 0); }
	public KW_DATA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATA, 0); }
	public KW_DATABASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DATABASE, 0); }
	public KW_DAY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DAY, 0); }
	public KW_DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEALLOCATE, 0); }
	public KW_DECLARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DECLARE, 0); }
	public KW_DEFAULTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULTS, 0); }
	public KW_DEFERRED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFERRED, 0); }
	public KW_DEFINER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFINER, 0); }
	public KW_DELETE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DELETE, 0); }
	public KW_DELIMITER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DELIMITER, 0); }
	public KW_DELIMITERS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DELIMITERS, 0); }
	public KW_DEPENDS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEPENDS, 0); }
	public KW_DETACH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DETACH, 0); }
	public KW_DICTIONARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DICTIONARY, 0); }
	public KW_DISABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DISABLE, 0); }
	public KW_DISCARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DISCARD, 0); }
	public KW_DOCUMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOCUMENT, 0); }
	public KW_DOMAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOMAIN, 0); }
	public KW_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DOUBLE, 0); }
	public KW_DROP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DROP, 0); }
	public KW_EACH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EACH, 0); }
	public KW_ENABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ENABLE, 0); }
	public KW_ENCODING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ENCODING, 0); }
	public KW_ENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ENCRYPTED, 0); }
	public KW_ENUM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ENUM, 0); }
	public KW_ESCAPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ESCAPE, 0); }
	public KW_EVENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EVENT, 0); }
	public KW_EXCLUDE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXCLUDE, 0); }
	public KW_EXCLUDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXCLUDING, 0); }
	public KW_EXCLUSIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXCLUSIVE, 0); }
	public KW_EXECUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXECUTE, 0); }
	public KW_EXPLAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXPLAIN, 0); }
	public KW_EXPRESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXPRESSION, 0); }
	public KW_EXTENSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXTENSION, 0); }
	public KW_EXTERNAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXTERNAL, 0); }
	public KW_FAMILY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FAMILY, 0); }
	public KW_FILTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FILTER, 0); }
	public KW_FIRST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FIRST, 0); }
	public KW_FOLLOWING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOLLOWING, 0); }
	public KW_FORCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FORCE, 0); }
	public KW_FORWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FORWARD, 0); }
	public KW_FUNCTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTION, 0); }
	public KW_FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FUNCTIONS, 0); }
	public KW_GENERATED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GENERATED, 0); }
	public KW_GLOBAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GLOBAL, 0); }
	public KW_GRANTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GRANTED, 0); }
	public KW_GROUPS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GROUPS, 0); }
	public KW_HANDLER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_HANDLER, 0); }
	public KW_HEADER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_HEADER, 0); }
	public KW_HOLD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_HOLD, 0); }
	public KW_HOUR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_HOUR, 0); }
	public KW_IDENTITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IDENTITY, 0); }
	public KW_IF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IF, 0); }
	public KW_IMMEDIATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IMMEDIATE, 0); }
	public KW_IMMUTABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IMMUTABLE, 0); }
	public KW_IMPLICIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IMPLICIT, 0); }
	public KW_IMPORT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IMPORT, 0); }
	public KW_INCLUDE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INCLUDE, 0); }
	public KW_INCLUDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INCLUDING, 0); }
	public KW_INCREMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INCREMENT, 0); }
	public KW_INDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INDEX, 0); }
	public KW_INDEXES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INDEXES, 0); }
	public KW_INHERIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INHERIT, 0); }
	public KW_INHERITS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INHERITS, 0); }
	public KW_INLINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INLINE, 0); }
	public KW_INPUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INPUT, 0); }
	public KW_INSENSITIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INSENSITIVE, 0); }
	public KW_INSERT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INSERT, 0); }
	public KW_INSTEAD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INSTEAD, 0); }
	public KW_INVOKER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INVOKER, 0); }
	public KW_ISOLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ISOLATION, 0); }
	public KW_KEY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_KEY, 0); }
	public KW_LABEL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LABEL, 0); }
	public KW_LANGUAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LANGUAGE, 0); }
	public KW_LARGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LARGE, 0); }
	public KW_LAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LAST, 0); }
	public KW_LEAKPROOF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEAKPROOF, 0); }
	public KW_LEVEL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEVEL, 0); }
	public KW_LISTEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LISTEN, 0); }
	public KW_LOAD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOAD, 0); }
	public KW_LOCAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCAL, 0); }
	public KW_LOCATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCATION, 0); }
	public KW_LOCK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCK, 0); }
	public KW_LOCKED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCKED, 0); }
	public KW_LOGGED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOGGED, 0); }
	public KW_MAPPING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MAPPING, 0); }
	public KW_MATCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MATCH, 0); }
	public KW_MATERIALIZED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MATERIALIZED, 0); }
	public KW_MAXVALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MAXVALUE, 0); }
	public KW_METHOD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_METHOD, 0); }
	public KW_MINUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MINUTE, 0); }
	public KW_MINVALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MINVALUE, 0); }
	public KW_MODE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MODE, 0); }
	public KW_MONTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MONTH, 0); }
	public KW_MOVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MOVE, 0); }
	public KW_NAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NAME, 0); }
	public KW_NAMES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NAMES, 0); }
	public KW_NEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NEW, 0); }
	public KW_NEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NEXT, 0); }
	public KW_NFC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NFC, 0); }
	public KW_NFD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NFD, 0); }
	public KW_NFKC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NFKC, 0); }
	public KW_NFKD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NFKD, 0); }
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_NORMALIZED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NORMALIZED, 0); }
	public KW_NOTHING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOTHING, 0); }
	public KW_NOTIFY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOTIFY, 0); }
	public KW_NOWAIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOWAIT, 0); }
	public KW_NULLS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULLS, 0); }
	public KW_OBJECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OBJECT, 0); }
	public KW_OF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OF, 0); }
	public KW_OFF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OFF, 0); }
	public KW_OIDS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OIDS, 0); }
	public KW_OLD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OLD, 0); }
	public KW_OPERATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPERATOR, 0); }
	public KW_OPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPTION, 0); }
	public KW_OPTIONS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPTIONS, 0); }
	public KW_ORDINALITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ORDINALITY, 0); }
	public KW_OTHERS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OTHERS, 0); }
	public KW_OVER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OVER, 0); }
	public KW_OVERRIDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OVERRIDING, 0); }
	public KW_OWNED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OWNED, 0); }
	public KW_OWNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OWNER, 0); }
	public KW_PARALLEL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARALLEL, 0); }
	public KW_PARSER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARSER, 0); }
	public KW_PARTIAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARTIAL, 0); }
	public KW_PARTITION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PARTITION, 0); }
	public KW_PASSING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PASSING, 0); }
	public KW_PASSWORD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PASSWORD, 0); }
	public KW_PLANS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PLANS, 0); }
	public KW_POLICY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_POLICY, 0); }
	public KW_PRECEDING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRECEDING, 0); }
	public KW_PREPARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PREPARE, 0); }
	public KW_PREPARED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PREPARED, 0); }
	public KW_PRESERVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRESERVE, 0); }
	public KW_PRIOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRIOR, 0); }
	public KW_PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRIVILEGES, 0); }
	public KW_PROCEDURAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURAL, 0); }
	public KW_PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURE, 0); }
	public KW_PROCEDURES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROCEDURES, 0); }
	public KW_PROGRAM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PROGRAM, 0); }
	public KW_PUBLICATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PUBLICATION, 0); }
	public KW_QUOTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_QUOTE, 0); }
	public KW_RANGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RANGE, 0); }
	public KW_READ(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_READ, 0); }
	public KW_REASSIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REASSIGN, 0); }
	public KW_RECHECK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RECHECK, 0); }
	public KW_RECURSIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RECURSIVE, 0); }
	public KW_REF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REF, 0); }
	public KW_REFERENCING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REFERENCING, 0); }
	public KW_REFRESH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REFRESH, 0); }
	public KW_REINDEX(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REINDEX, 0); }
	public KW_RELATIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RELATIVE, 0); }
	public KW_RELEASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RELEASE, 0); }
	public KW_RENAME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RENAME, 0); }
	public KW_REPEATABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REPEATABLE, 0); }
	public KW_REPLACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REPLACE, 0); }
	public KW_REPLICA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REPLICA, 0); }
	public KW_RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESET, 0); }
	public KW_RESTART(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESTART, 0); }
	public KW_RESTRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESTRICT, 0); }
	public KW_RETURNS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RETURNS, 0); }
	public KW_REVOKE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REVOKE, 0); }
	public KW_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLE, 0); }
	public KW_ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLLBACK, 0); }
	public KW_ROLLUP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLLUP, 0); }
	public KW_ROUTINE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINE, 0); }
	public KW_ROUTINES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROUTINES, 0); }
	public KW_ROWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROWS, 0); }
	public KW_RULE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RULE, 0); }
	public KW_SAVEPOINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SAVEPOINT, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public KW_SCHEMAS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMAS, 0); }
	public KW_SCROLL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCROLL, 0); }
	public KW_SEARCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEARCH, 0); }
	public KW_SECOND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SECOND, 0); }
	public KW_SECURITY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SECURITY, 0); }
	public KW_SEQUENCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEQUENCE, 0); }
	public KW_SEQUENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SEQUENCES, 0); }
	public KW_SERIALIZABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SERIALIZABLE, 0); }
	public KW_SERVER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SERVER, 0); }
	public KW_SESSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SESSION, 0); }
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public KW_SETS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SETS, 0); }
	public KW_SHARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SHARE, 0); }
	public KW_SHOW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SHOW, 0); }
	public KW_SIMPLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SIMPLE, 0); }
	public KW_SKIP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SKIP, 0); }
	public KW_SNAPSHOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SNAPSHOT, 0); }
	public KW_SQL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SQL, 0); }
	public KW_STABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STABLE, 0); }
	public KW_STANDALONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STANDALONE, 0); }
	public KW_START(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_START, 0); }
	public KW_STATEMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STATEMENT, 0); }
	public KW_STATISTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STATISTICS, 0); }
	public KW_STDIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STDIN, 0); }
	public KW_STDOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STDOUT, 0); }
	public KW_STORAGE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STORAGE, 0); }
	public KW_STORED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STORED, 0); }
	public KW_STRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STRICT, 0); }
	public KW_STRIP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STRIP, 0); }
	public KW_SUBSCRIPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SUBSCRIPTION, 0); }
	public KW_SUPPORT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SUPPORT, 0); }
	public KW_SYSID(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SYSID, 0); }
	public KW_SYSTEM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SYSTEM, 0); }
	public KW_TABLES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLES, 0); }
	public KW_TABLESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLESPACE, 0); }
	public KW_TEMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMP, 0); }
	public KW_TEMPLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMPLATE, 0); }
	public KW_TEMPORARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEMPORARY, 0); }
	public KW_TEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TEXT, 0); }
	public KW_TIES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TIES, 0); }
	public KW_TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRANSACTION, 0); }
	public KW_TRANSFORM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRANSFORM, 0); }
	public KW_TRIGGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRIGGER, 0); }
	public KW_TRUNCATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRUNCATE, 0); }
	public KW_TRUSTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRUSTED, 0); }
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public KW_TYPES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPES, 0); }
	public KW_UESCAPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UESCAPE, 0); }
	public KW_UNBOUNDED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNBOUNDED, 0); }
	public KW_UNCOMMITTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNCOMMITTED, 0); }
	public KW_UNENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNENCRYPTED, 0); }
	public KW_UNKNOWN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNKNOWN, 0); }
	public KW_UNLISTEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNLISTEN, 0); }
	public KW_UNLOGGED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNLOGGED, 0); }
	public KW_UNTIL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNTIL, 0); }
	public KW_UPDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UPDATE, 0); }
	public KW_VACUUM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VACUUM, 0); }
	public KW_VALID(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALID, 0); }
	public KW_VALIDATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALIDATE, 0); }
	public KW_VALIDATOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALIDATOR, 0); }
	public KW_VALUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALUE, 0); }
	public KW_VARYING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VARYING, 0); }
	public KW_VERSION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VERSION, 0); }
	public KW_VIEW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VIEW, 0); }
	public KW_VIEWS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VIEWS, 0); }
	public KW_VOLATILE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VOLATILE, 0); }
	public KW_WHITESPACE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WHITESPACE, 0); }
	public KW_WITHIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITHIN, 0); }
	public KW_WITHOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITHOUT, 0); }
	public KW_WORK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WORK, 0); }
	public KW_WRAPPER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WRAPPER, 0); }
	public KW_WRITE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WRITE, 0); }
	public KW_XML(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XML, 0); }
	public KW_YEAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_YEAR, 0); }
	public KW_YES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_YES, 0); }
	public KW_ZONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ZONE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_unreserved_keyword; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterUnreserved_keyword) {
			listener.enterUnreserved_keyword(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitUnreserved_keyword) {
			listener.exitUnreserved_keyword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitUnreserved_keyword) {
			return visitor.visitUnreserved_keyword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Col_name_keywordContext extends ParserRuleContext {
	public KW_BETWEEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BETWEEN, 0); }
	public KW_BIGINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BIGINT, 0); }
	public bit(): BitContext | undefined {
		return this.tryGetRuleContext(0, BitContext);
	}
	public KW_BOOLEAN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BOOLEAN, 0); }
	public KW_CHAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CHAR, 0); }
	public character(): CharacterContext | undefined {
		return this.tryGetRuleContext(0, CharacterContext);
	}
	public KW_COALESCE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COALESCE, 0); }
	public KW_DEC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEC, 0); }
	public KW_DECIMAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DECIMAL, 0); }
	public KW_EXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXISTS, 0); }
	public KW_EXTRACT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXTRACT, 0); }
	public KW_FLOAT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FLOAT, 0); }
	public KW_GREATEST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GREATEST, 0); }
	public KW_GROUPING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GROUPING, 0); }
	public KW_INOUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INOUT, 0); }
	public KW_INT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INT, 0); }
	public KW_INTEGER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INTEGER, 0); }
	public KW_INTERVAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INTERVAL, 0); }
	public KW_LEAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEAST, 0); }
	public KW_NATIONAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NATIONAL, 0); }
	public KW_NCHAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NCHAR, 0); }
	public KW_NONE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NONE, 0); }
	public KW_NORMALIZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NORMALIZE, 0); }
	public KW_NULLIF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULLIF, 0); }
	public numeric(): NumericContext | undefined {
		return this.tryGetRuleContext(0, NumericContext);
	}
	public KW_OUT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OUT, 0); }
	public KW_OVERLAY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OVERLAY, 0); }
	public KW_POSITION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_POSITION, 0); }
	public KW_PRECISION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRECISION, 0); }
	public KW_REAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REAL, 0); }
	public KW_ROW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROW, 0); }
	public KW_SETOF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SETOF, 0); }
	public KW_SMALLINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SMALLINT, 0); }
	public KW_SUBSTRING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SUBSTRING, 0); }
	public KW_TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TIME, 0); }
	public KW_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TIMESTAMP, 0); }
	public KW_TREAT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TREAT, 0); }
	public KW_TRIM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRIM, 0); }
	public KW_VALUES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VALUES, 0); }
	public KW_VARCHAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VARCHAR, 0); }
	public KW_XMLATTRIBUTES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLATTRIBUTES, 0); }
	public KW_XMLCONCAT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLCONCAT, 0); }
	public KW_XMLELEMENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLELEMENT, 0); }
	public KW_XMLEXISTS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLEXISTS, 0); }
	public KW_XMLFOREST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLFOREST, 0); }
	public KW_XMLNAMESPACES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLNAMESPACES, 0); }
	public KW_XMLPARSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLPARSE, 0); }
	public KW_XMLPI(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLPI, 0); }
	public KW_XMLROOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLROOT, 0); }
	public KW_XMLSERIALIZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLSERIALIZE, 0); }
	public KW_XMLTABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_XMLTABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_col_name_keyword; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCol_name_keyword) {
			listener.enterCol_name_keyword(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCol_name_keyword) {
			listener.exitCol_name_keyword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCol_name_keyword) {
			return visitor.visitCol_name_keyword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Type_func_name_keywordContext extends ParserRuleContext {
	public KW_AUTHORIZATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AUTHORIZATION, 0); }
	public KW_BINARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BINARY, 0); }
	public KW_COLLATION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATION, 0); }
	public KW_CONCURRENTLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONCURRENTLY, 0); }
	public KW_CROSS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CROSS, 0); }
	public KW_CURRENT_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_SCHEMA, 0); }
	public KW_FREEZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FREEZE, 0); }
	public KW_FULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FULL, 0); }
	public KW_ILIKE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ILIKE, 0); }
	public KW_INNER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INNER, 0); }
	public KW_IS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IS, 0); }
	public KW_ISNULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ISNULL, 0); }
	public KW_JOIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_JOIN, 0); }
	public KW_LEFT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEFT, 0); }
	public KW_LIKE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LIKE, 0); }
	public KW_NATURAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NATURAL, 0); }
	public KW_NOTNULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOTNULL, 0); }
	public KW_OUTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OUTER, 0); }
	public KW_OVERLAPS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OVERLAPS, 0); }
	public KW_RIGHT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RIGHT, 0); }
	public KW_SIMILAR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SIMILAR, 0); }
	public KW_TABLESAMPLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLESAMPLE, 0); }
	public KW_VERBOSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VERBOSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_type_func_name_keyword; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterType_func_name_keyword) {
			listener.enterType_func_name_keyword(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitType_func_name_keyword) {
			listener.exitType_func_name_keyword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitType_func_name_keyword) {
			return visitor.visitType_func_name_keyword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Reserved_keywordContext extends ParserRuleContext {
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_ANALYSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ANALYSE, 0); }
	public KW_ANALYZE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ANALYZE, 0); }
	public KW_AND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AND, 0); }
	public KW_ANY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ANY, 0); }
	public KW_ARRAY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ARRAY, 0); }
	public KW_AS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AS, 0); }
	public KW_ASC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ASC, 0); }
	public KW_ASYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ASYMMETRIC, 0); }
	public KW_BOTH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BOTH, 0); }
	public KW_CASE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CASE, 0); }
	public KW_CAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CAST, 0); }
	public KW_CHECK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CHECK, 0); }
	public KW_COLLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATE, 0); }
	public KW_COLUMN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLUMN, 0); }
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINT, 0); }
	public KW_CREATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CREATE, 0); }
	public KW_CURRENT_CATALOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_CATALOG, 0); }
	public KW_CURRENT_DATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_DATE, 0); }
	public KW_CURRENT_ROLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_ROLE, 0); }
	public KW_CURRENT_TIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_TIME, 0); }
	public KW_CURRENT_TIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_TIMESTAMP, 0); }
	public KW_CURRENT_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT_USER, 0); }
	public KW_DEFERRABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFERRABLE, 0); }
	public KW_DESC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DESC, 0); }
	public KW_DISTINCT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DISTINCT, 0); }
	public KW_DO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DO, 0); }
	public KW_ELSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ELSE, 0); }
	public KW_END(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_END, 0); }
	public KW_EXCEPT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXCEPT, 0); }
	public KW_FALSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FALSE, 0); }
	public KW_FETCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FETCH, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public KW_FOREIGN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOREIGN, 0); }
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_GRANT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GRANT, 0); }
	public KW_GROUP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GROUP, 0); }
	public KW_HAVING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_HAVING, 0); }
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IN, 0); }
	public KW_INITIALLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INITIALLY, 0); }
	public KW_INTERSECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INTERSECT, 0); }
	public KW_LATERAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LATERAL, 0); }
	public KW_LEADING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LEADING, 0); }
	public KW_LIMIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LIMIT, 0); }
	public KW_LOCALTIME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCALTIME, 0); }
	public KW_LOCALTIMESTAMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOCALTIMESTAMP, 0); }
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	public KW_OFFSET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OFFSET, 0); }
	public KW_ON(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ON, 0); }
	public KW_ONLY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ONLY, 0); }
	public KW_OR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OR, 0); }
	public KW_ORDER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ORDER, 0); }
	public KW_PLACING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PLACING, 0); }
	public KW_PRIMARY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRIMARY, 0); }
	public KW_REFERENCES(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REFERENCES, 0); }
	public KW_RETURNING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RETURNING, 0); }
	public KW_SELECT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SELECT, 0); }
	public KW_SESSION_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SESSION_USER, 0); }
	public KW_SOME(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SOME, 0); }
	public KW_SYMMETRIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SYMMETRIC, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public KW_THEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_THEN, 0); }
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	public KW_TRAILING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRAILING, 0); }
	public KW_TRUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TRUE, 0); }
	public KW_UNION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNION, 0); }
	public KW_UNIQUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_UNIQUE, 0); }
	public KW_USER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USER, 0); }
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public KW_VARIADIC(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VARIADIC, 0); }
	public KW_WHEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WHEN, 0); }
	public KW_WHERE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WHERE, 0); }
	public KW_WINDOW(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WINDOW, 0); }
	public KW_WITH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WITH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_reserved_keyword; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterReserved_keyword) {
			listener.enterReserved_keyword(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitReserved_keyword) {
			listener.exitReserved_keyword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitReserved_keyword) {
			return visitor.visitReserved_keyword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pl_functionContext extends ParserRuleContext {
	public comp_options(): Comp_optionsContext {
		return this.getRuleContext(0, Comp_optionsContext);
	}
	public pl_block(): Pl_blockContext {
		return this.getRuleContext(0, Pl_blockContext);
	}
	public opt_semi(): Opt_semiContext {
		return this.getRuleContext(0, Opt_semiContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_pl_function; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPl_function) {
			listener.enterPl_function(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPl_function) {
			listener.exitPl_function(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPl_function) {
			return visitor.visitPl_function(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Comp_optionsContext extends ParserRuleContext {
	public comp_option(): Comp_optionContext[];
	public comp_option(i: number): Comp_optionContext;
	public comp_option(i?: number): Comp_optionContext | Comp_optionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Comp_optionContext);
		} else {
			return this.getRuleContext(i, Comp_optionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_comp_options; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterComp_options) {
			listener.enterComp_options(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitComp_options) {
			listener.exitComp_options(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitComp_options) {
			return visitor.visitComp_options(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Comp_optionContext extends ParserRuleContext {
	public sharp(): SharpContext {
		return this.getRuleContext(0, SharpContext);
	}
	public KW_OPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPTION, 0); }
	public KW_DUMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DUMP, 0); }
	public KW_PRINT_STRICT_PARAMS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRINT_STRICT_PARAMS, 0); }
	public option_value(): Option_valueContext | undefined {
		return this.tryGetRuleContext(0, Option_valueContext);
	}
	public KW_VARIABLE_CONFLICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VARIABLE_CONFLICT, 0); }
	public KW_ERROR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ERROR, 0); }
	public KW_USE_VARIABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USE_VARIABLE, 0); }
	public KW_USE_COLUMN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USE_COLUMN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_comp_option; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterComp_option) {
			listener.enterComp_option(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitComp_option) {
			listener.exitComp_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitComp_option) {
			return visitor.visitComp_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SharpContext extends ParserRuleContext {
	public Operator(): TerminalNode { return this.getToken(PostgreSQLParser.Operator, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_sharp; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSharp) {
			listener.enterSharp(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSharp) {
			listener.exitSharp(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSharp) {
			return visitor.visitSharp(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Option_valueContext extends ParserRuleContext {
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public reserved_keyword(): Reserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Reserved_keywordContext);
	}
	public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Plsql_unreserved_keywordContext);
	}
	public unreserved_keyword(): Unreserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Unreserved_keywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_option_value; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOption_value) {
			listener.enterOption_value(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOption_value) {
			listener.exitOption_value(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOption_value) {
			return visitor.visitOption_value(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_semiContext extends ParserRuleContext {
	public SEMI(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_semi; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_semi) {
			listener.enterOpt_semi(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_semi) {
			listener.exitOpt_semi(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_semi) {
			return visitor.visitOpt_semi(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Pl_blockContext extends ParserRuleContext {
	public decl_sect(): Decl_sectContext {
		return this.getRuleContext(0, Decl_sectContext);
	}
	public KW_BEGIN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_BEGIN, 0); }
	public proc_sect(): Proc_sectContext {
		return this.getRuleContext(0, Proc_sectContext);
	}
	public exception_sect(): Exception_sectContext {
		return this.getRuleContext(0, Exception_sectContext);
	}
	public KW_END(): TerminalNode { return this.getToken(PostgreSQLParser.KW_END, 0); }
	public opt_label(): Opt_labelContext {
		return this.getRuleContext(0, Opt_labelContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_pl_block; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPl_block) {
			listener.enterPl_block(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPl_block) {
			listener.exitPl_block(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPl_block) {
			return visitor.visitPl_block(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_sectContext extends ParserRuleContext {
	public opt_block_label(): Opt_block_labelContext {
		return this.getRuleContext(0, Opt_block_labelContext);
	}
	public decl_start(): Decl_startContext | undefined {
		return this.tryGetRuleContext(0, Decl_startContext);
	}
	public decl_stmts(): Decl_stmtsContext | undefined {
		return this.tryGetRuleContext(0, Decl_stmtsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_sect; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_sect) {
			listener.enterDecl_sect(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_sect) {
			listener.exitDecl_sect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_sect) {
			return visitor.visitDecl_sect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_startContext extends ParserRuleContext {
	public KW_DECLARE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DECLARE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_start; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_start) {
			listener.enterDecl_start(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_start) {
			listener.exitDecl_start(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_start) {
			return visitor.visitDecl_start(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_stmtsContext extends ParserRuleContext {
	public decl_stmt(): Decl_stmtContext[];
	public decl_stmt(i: number): Decl_stmtContext;
	public decl_stmt(i?: number): Decl_stmtContext | Decl_stmtContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Decl_stmtContext);
		} else {
			return this.getRuleContext(i, Decl_stmtContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_stmts; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_stmts) {
			listener.enterDecl_stmts(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_stmts) {
			listener.exitDecl_stmts(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_stmts) {
			return visitor.visitDecl_stmts(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Label_declContext extends ParserRuleContext {
	public LESS_LESS(): TerminalNode { return this.getToken(PostgreSQLParser.LESS_LESS, 0); }
	public any_identifier(): Any_identifierContext {
		return this.getRuleContext(0, Any_identifierContext);
	}
	public GREATER_GREATER(): TerminalNode { return this.getToken(PostgreSQLParser.GREATER_GREATER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_label_decl; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterLabel_decl) {
			listener.enterLabel_decl(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitLabel_decl) {
			listener.exitLabel_decl(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitLabel_decl) {
			return visitor.visitLabel_decl(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_stmtContext extends ParserRuleContext {
	public decl_statement(): Decl_statementContext | undefined {
		return this.tryGetRuleContext(0, Decl_statementContext);
	}
	public KW_DECLARE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DECLARE, 0); }
	public label_decl(): Label_declContext | undefined {
		return this.tryGetRuleContext(0, Label_declContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_stmt) {
			listener.enterDecl_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_stmt) {
			listener.exitDecl_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_stmt) {
			return visitor.visitDecl_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_statementContext extends ParserRuleContext {
	public decl_varname(): Decl_varnameContext {
		return this.getRuleContext(0, Decl_varnameContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	public KW_ALIAS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALIAS, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public decl_aliasitem(): Decl_aliasitemContext | undefined {
		return this.tryGetRuleContext(0, Decl_aliasitemContext);
	}
	public decl_const(): Decl_constContext | undefined {
		return this.tryGetRuleContext(0, Decl_constContext);
	}
	public decl_datatype(): Decl_datatypeContext | undefined {
		return this.tryGetRuleContext(0, Decl_datatypeContext);
	}
	public decl_collate(): Decl_collateContext | undefined {
		return this.tryGetRuleContext(0, Decl_collateContext);
	}
	public decl_notnull(): Decl_notnullContext | undefined {
		return this.tryGetRuleContext(0, Decl_notnullContext);
	}
	public decl_defval(): Decl_defvalContext | undefined {
		return this.tryGetRuleContext(0, Decl_defvalContext);
	}
	public opt_scrollable(): Opt_scrollableContext | undefined {
		return this.tryGetRuleContext(0, Opt_scrollableContext);
	}
	public KW_CURSOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURSOR, 0); }
	public decl_cursor_args(): Decl_cursor_argsContext | undefined {
		return this.tryGetRuleContext(0, Decl_cursor_argsContext);
	}
	public decl_is_for(): Decl_is_forContext | undefined {
		return this.tryGetRuleContext(0, Decl_is_forContext);
	}
	public decl_cursor_query(): Decl_cursor_queryContext | undefined {
		return this.tryGetRuleContext(0, Decl_cursor_queryContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_statement; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_statement) {
			listener.enterDecl_statement(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_statement) {
			listener.exitDecl_statement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_statement) {
			return visitor.visitDecl_statement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_scrollableContext extends ParserRuleContext {
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_SCROLL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCROLL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_scrollable; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_scrollable) {
			listener.enterOpt_scrollable(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_scrollable) {
			listener.exitOpt_scrollable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_scrollable) {
			return visitor.visitOpt_scrollable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_cursor_queryContext extends ParserRuleContext {
	public selectstmt(): SelectstmtContext {
		return this.getRuleContext(0, SelectstmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_cursor_query; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_cursor_query) {
			listener.enterDecl_cursor_query(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_cursor_query) {
			listener.exitDecl_cursor_query(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_cursor_query) {
			return visitor.visitDecl_cursor_query(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_cursor_argsContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public decl_cursor_arglist(): Decl_cursor_arglistContext | undefined {
		return this.tryGetRuleContext(0, Decl_cursor_arglistContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_cursor_args; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_cursor_args) {
			listener.enterDecl_cursor_args(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_cursor_args) {
			listener.exitDecl_cursor_args(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_cursor_args) {
			return visitor.visitDecl_cursor_args(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_cursor_arglistContext extends ParserRuleContext {
	public decl_cursor_arg(): Decl_cursor_argContext[];
	public decl_cursor_arg(i: number): Decl_cursor_argContext;
	public decl_cursor_arg(i?: number): Decl_cursor_argContext | Decl_cursor_argContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Decl_cursor_argContext);
		} else {
			return this.getRuleContext(i, Decl_cursor_argContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_cursor_arglist; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_cursor_arglist) {
			listener.enterDecl_cursor_arglist(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_cursor_arglist) {
			listener.exitDecl_cursor_arglist(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_cursor_arglist) {
			return visitor.visitDecl_cursor_arglist(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_cursor_argContext extends ParserRuleContext {
	public decl_varname(): Decl_varnameContext {
		return this.getRuleContext(0, Decl_varnameContext);
	}
	public decl_datatype(): Decl_datatypeContext {
		return this.getRuleContext(0, Decl_datatypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_cursor_arg; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_cursor_arg) {
			listener.enterDecl_cursor_arg(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_cursor_arg) {
			listener.exitDecl_cursor_arg(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_cursor_arg) {
			return visitor.visitDecl_cursor_arg(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_is_forContext extends ParserRuleContext {
	public KW_IS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IS, 0); }
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_is_for; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_is_for) {
			listener.enterDecl_is_for(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_is_for) {
			listener.exitDecl_is_for(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_is_for) {
			return visitor.visitDecl_is_for(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_aliasitemContext extends ParserRuleContext {
	public PARAM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PARAM, 0); }
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_aliasitem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_aliasitem) {
			listener.enterDecl_aliasitem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_aliasitem) {
			listener.exitDecl_aliasitem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_aliasitem) {
			return visitor.visitDecl_aliasitem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_varnameContext extends ParserRuleContext {
	public any_identifier(): Any_identifierContext {
		return this.getRuleContext(0, Any_identifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_varname; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_varname) {
			listener.enterDecl_varname(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_varname) {
			listener.exitDecl_varname(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_varname) {
			return visitor.visitDecl_varname(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_constContext extends ParserRuleContext {
	public KW_CONSTANT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTANT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_const; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_const) {
			listener.enterDecl_const(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_const) {
			listener.exitDecl_const(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_const) {
			return visitor.visitDecl_const(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_datatypeContext extends ParserRuleContext {
	public typename(): TypenameContext {
		return this.getRuleContext(0, TypenameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_datatype; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_datatype) {
			listener.enterDecl_datatype(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_datatype) {
			listener.exitDecl_datatype(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_datatype) {
			return visitor.visitDecl_datatype(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_collateContext extends ParserRuleContext {
	public KW_COLLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATE, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_collate; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_collate) {
			listener.enterDecl_collate(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_collate) {
			listener.exitDecl_collate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_collate) {
			return visitor.visitDecl_collate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_notnullContext extends ParserRuleContext {
	public KW_NOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOT, 0); }
	public KW_NULL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_notnull; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_notnull) {
			listener.enterDecl_notnull(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_notnull) {
			listener.exitDecl_notnull(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_notnull) {
			return visitor.visitDecl_notnull(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_defvalContext extends ParserRuleContext {
	public decl_defkey(): Decl_defkeyContext | undefined {
		return this.tryGetRuleContext(0, Decl_defkeyContext);
	}
	public sql_expression(): Sql_expressionContext | undefined {
		return this.tryGetRuleContext(0, Sql_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_defval; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_defval) {
			listener.enterDecl_defval(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_defval) {
			listener.exitDecl_defval(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_defval) {
			return visitor.visitDecl_defval(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Decl_defkeyContext extends ParserRuleContext {
	public assign_operator(): Assign_operatorContext | undefined {
		return this.tryGetRuleContext(0, Assign_operatorContext);
	}
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_decl_defkey; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterDecl_defkey) {
			listener.enterDecl_defkey(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitDecl_defkey) {
			listener.exitDecl_defkey(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitDecl_defkey) {
			return visitor.visitDecl_defkey(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_operatorContext extends ParserRuleContext {
	public EQUAL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.EQUAL, 0); }
	public COLON_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COLON_EQUALS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_assign_operator; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAssign_operator) {
			listener.enterAssign_operator(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAssign_operator) {
			listener.exitAssign_operator(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAssign_operator) {
			return visitor.visitAssign_operator(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Proc_sectContext extends ParserRuleContext {
	public proc_stmt(): Proc_stmtContext[];
	public proc_stmt(i: number): Proc_stmtContext;
	public proc_stmt(i?: number): Proc_stmtContext | Proc_stmtContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Proc_stmtContext);
		} else {
			return this.getRuleContext(i, Proc_stmtContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_proc_sect; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterProc_sect) {
			listener.enterProc_sect(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitProc_sect) {
			listener.exitProc_sect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitProc_sect) {
			return visitor.visitProc_sect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Proc_stmtContext extends ParserRuleContext {
	public pl_block(): Pl_blockContext | undefined {
		return this.tryGetRuleContext(0, Pl_blockContext);
	}
	public SEMI(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.SEMI, 0); }
	public stmt_return(): Stmt_returnContext | undefined {
		return this.tryGetRuleContext(0, Stmt_returnContext);
	}
	public stmt_raise(): Stmt_raiseContext | undefined {
		return this.tryGetRuleContext(0, Stmt_raiseContext);
	}
	public stmt_assign(): Stmt_assignContext | undefined {
		return this.tryGetRuleContext(0, Stmt_assignContext);
	}
	public stmt_if(): Stmt_ifContext | undefined {
		return this.tryGetRuleContext(0, Stmt_ifContext);
	}
	public stmt_case(): Stmt_caseContext | undefined {
		return this.tryGetRuleContext(0, Stmt_caseContext);
	}
	public stmt_loop(): Stmt_loopContext | undefined {
		return this.tryGetRuleContext(0, Stmt_loopContext);
	}
	public stmt_while(): Stmt_whileContext | undefined {
		return this.tryGetRuleContext(0, Stmt_whileContext);
	}
	public stmt_for(): Stmt_forContext | undefined {
		return this.tryGetRuleContext(0, Stmt_forContext);
	}
	public stmt_foreach_a(): Stmt_foreach_aContext | undefined {
		return this.tryGetRuleContext(0, Stmt_foreach_aContext);
	}
	public stmt_exit(): Stmt_exitContext | undefined {
		return this.tryGetRuleContext(0, Stmt_exitContext);
	}
	public stmt_assert(): Stmt_assertContext | undefined {
		return this.tryGetRuleContext(0, Stmt_assertContext);
	}
	public stmt_execsql(): Stmt_execsqlContext | undefined {
		return this.tryGetRuleContext(0, Stmt_execsqlContext);
	}
	public stmt_dynexecute(): Stmt_dynexecuteContext | undefined {
		return this.tryGetRuleContext(0, Stmt_dynexecuteContext);
	}
	public stmt_perform(): Stmt_performContext | undefined {
		return this.tryGetRuleContext(0, Stmt_performContext);
	}
	public stmt_call(): Stmt_callContext | undefined {
		return this.tryGetRuleContext(0, Stmt_callContext);
	}
	public stmt_getdiag(): Stmt_getdiagContext | undefined {
		return this.tryGetRuleContext(0, Stmt_getdiagContext);
	}
	public stmt_open(): Stmt_openContext | undefined {
		return this.tryGetRuleContext(0, Stmt_openContext);
	}
	public stmt_fetch(): Stmt_fetchContext | undefined {
		return this.tryGetRuleContext(0, Stmt_fetchContext);
	}
	public stmt_move(): Stmt_moveContext | undefined {
		return this.tryGetRuleContext(0, Stmt_moveContext);
	}
	public stmt_close(): Stmt_closeContext | undefined {
		return this.tryGetRuleContext(0, Stmt_closeContext);
	}
	public stmt_null(): Stmt_nullContext | undefined {
		return this.tryGetRuleContext(0, Stmt_nullContext);
	}
	public stmt_commit(): Stmt_commitContext | undefined {
		return this.tryGetRuleContext(0, Stmt_commitContext);
	}
	public stmt_rollback(): Stmt_rollbackContext | undefined {
		return this.tryGetRuleContext(0, Stmt_rollbackContext);
	}
	public stmt_set(): Stmt_setContext | undefined {
		return this.tryGetRuleContext(0, Stmt_setContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_proc_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterProc_stmt) {
			listener.enterProc_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitProc_stmt) {
			listener.exitProc_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitProc_stmt) {
			return visitor.visitProc_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_performContext extends ParserRuleContext {
	public KW_PERFORM(): TerminalNode { return this.getToken(PostgreSQLParser.KW_PERFORM, 0); }
	public expr_until_semi(): Expr_until_semiContext {
		return this.getRuleContext(0, Expr_until_semiContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_perform; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_perform) {
			listener.enterStmt_perform(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_perform) {
			listener.exitStmt_perform(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_perform) {
			return visitor.visitStmt_perform(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_callContext extends ParserRuleContext {
	public KW_CALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CALL, 0); }
	public any_identifier(): Any_identifierContext {
		return this.getRuleContext(0, Any_identifierContext);
	}
	public OPEN_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public opt_expr_list(): Opt_expr_listContext {
		return this.getRuleContext(0, Opt_expr_listContext);
	}
	public CLOSE_PAREN(): TerminalNode { return this.getToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	public KW_DO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_call; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_call) {
			listener.enterStmt_call(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_call) {
			listener.exitStmt_call(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_call) {
			return visitor.visitStmt_call(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_expr_listContext extends ParserRuleContext {
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_expr_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_expr_list) {
			listener.enterOpt_expr_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_expr_list) {
			listener.exitOpt_expr_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_expr_list) {
			return visitor.visitOpt_expr_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_assignContext extends ParserRuleContext {
	public assign_var(): Assign_varContext {
		return this.getRuleContext(0, Assign_varContext);
	}
	public assign_operator(): Assign_operatorContext {
		return this.getRuleContext(0, Assign_operatorContext);
	}
	public sql_expression(): Sql_expressionContext {
		return this.getRuleContext(0, Sql_expressionContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_assign; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_assign) {
			listener.enterStmt_assign(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_assign) {
			listener.exitStmt_assign(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_assign) {
			return visitor.visitStmt_assign(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_getdiagContext extends ParserRuleContext {
	public KW_GET(): TerminalNode { return this.getToken(PostgreSQLParser.KW_GET, 0); }
	public getdiag_area_opt(): Getdiag_area_optContext {
		return this.getRuleContext(0, Getdiag_area_optContext);
	}
	public KW_DIAGNOSTICS(): TerminalNode { return this.getToken(PostgreSQLParser.KW_DIAGNOSTICS, 0); }
	public getdiag_list(): Getdiag_listContext {
		return this.getRuleContext(0, Getdiag_listContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_getdiag; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_getdiag) {
			listener.enterStmt_getdiag(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_getdiag) {
			listener.exitStmt_getdiag(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_getdiag) {
			return visitor.visitStmt_getdiag(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Getdiag_area_optContext extends ParserRuleContext {
	public KW_CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT, 0); }
	public KW_STACKED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STACKED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_getdiag_area_opt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGetdiag_area_opt) {
			listener.enterGetdiag_area_opt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGetdiag_area_opt) {
			listener.exitGetdiag_area_opt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGetdiag_area_opt) {
			return visitor.visitGetdiag_area_opt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Getdiag_listContext extends ParserRuleContext {
	public getdiag_list_item(): Getdiag_list_itemContext[];
	public getdiag_list_item(i: number): Getdiag_list_itemContext;
	public getdiag_list_item(i?: number): Getdiag_list_itemContext | Getdiag_list_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Getdiag_list_itemContext);
		} else {
			return this.getRuleContext(i, Getdiag_list_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_getdiag_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGetdiag_list) {
			listener.enterGetdiag_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGetdiag_list) {
			listener.exitGetdiag_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGetdiag_list) {
			return visitor.visitGetdiag_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Getdiag_list_itemContext extends ParserRuleContext {
	public getdiag_target(): Getdiag_targetContext {
		return this.getRuleContext(0, Getdiag_targetContext);
	}
	public assign_operator(): Assign_operatorContext {
		return this.getRuleContext(0, Assign_operatorContext);
	}
	public getdiag_item(): Getdiag_itemContext {
		return this.getRuleContext(0, Getdiag_itemContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_getdiag_list_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGetdiag_list_item) {
			listener.enterGetdiag_list_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGetdiag_list_item) {
			listener.exitGetdiag_list_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGetdiag_list_item) {
			return visitor.visitGetdiag_list_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Getdiag_itemContext extends ParserRuleContext {
	public colid(): ColidContext {
		return this.getRuleContext(0, ColidContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_getdiag_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGetdiag_item) {
			listener.enterGetdiag_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGetdiag_item) {
			listener.exitGetdiag_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGetdiag_item) {
			return visitor.visitGetdiag_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Getdiag_targetContext extends ParserRuleContext {
	public assign_var(): Assign_varContext {
		return this.getRuleContext(0, Assign_varContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_getdiag_target; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterGetdiag_target) {
			listener.enterGetdiag_target(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitGetdiag_target) {
			listener.exitGetdiag_target(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitGetdiag_target) {
			return visitor.visitGetdiag_target(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Assign_varContext extends ParserRuleContext {
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public PARAM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PARAM, 0); }
	public OPEN_BRACKET(): TerminalNode[];
	public OPEN_BRACKET(i: number): TerminalNode;
	public OPEN_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.OPEN_BRACKET);
		} else {
			return this.getToken(PostgreSQLParser.OPEN_BRACKET, i);
		}
	}
	public expr_until_rightbracket(): Expr_until_rightbracketContext[];
	public expr_until_rightbracket(i: number): Expr_until_rightbracketContext;
	public expr_until_rightbracket(i?: number): Expr_until_rightbracketContext | Expr_until_rightbracketContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Expr_until_rightbracketContext);
		} else {
			return this.getRuleContext(i, Expr_until_rightbracketContext);
		}
	}
	public CLOSE_BRACKET(): TerminalNode[];
	public CLOSE_BRACKET(i: number): TerminalNode;
	public CLOSE_BRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.CLOSE_BRACKET);
		} else {
			return this.getToken(PostgreSQLParser.CLOSE_BRACKET, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_assign_var; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAssign_var) {
			listener.enterAssign_var(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAssign_var) {
			listener.exitAssign_var(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAssign_var) {
			return visitor.visitAssign_var(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_ifContext extends ParserRuleContext {
	public KW_IF(): TerminalNode[];
	public KW_IF(i: number): TerminalNode;
	public KW_IF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_IF);
		} else {
			return this.getToken(PostgreSQLParser.KW_IF, i);
		}
	}
	public expr_until_then(): Expr_until_thenContext {
		return this.getRuleContext(0, Expr_until_thenContext);
	}
	public KW_THEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_THEN, 0); }
	public proc_sect(): Proc_sectContext {
		return this.getRuleContext(0, Proc_sectContext);
	}
	public stmt_elsifs(): Stmt_elsifsContext {
		return this.getRuleContext(0, Stmt_elsifsContext);
	}
	public stmt_else(): Stmt_elseContext {
		return this.getRuleContext(0, Stmt_elseContext);
	}
	public KW_END(): TerminalNode { return this.getToken(PostgreSQLParser.KW_END, 0); }
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_if; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_if) {
			listener.enterStmt_if(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_if) {
			listener.exitStmt_if(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_if) {
			return visitor.visitStmt_if(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_elsifsContext extends ParserRuleContext {
	public KW_ELSIF(): TerminalNode[];
	public KW_ELSIF(i: number): TerminalNode;
	public KW_ELSIF(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_ELSIF);
		} else {
			return this.getToken(PostgreSQLParser.KW_ELSIF, i);
		}
	}
	public a_expr(): A_exprContext[];
	public a_expr(i: number): A_exprContext;
	public a_expr(i?: number): A_exprContext | A_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_exprContext);
		} else {
			return this.getRuleContext(i, A_exprContext);
		}
	}
	public KW_THEN(): TerminalNode[];
	public KW_THEN(i: number): TerminalNode;
	public KW_THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_THEN);
		} else {
			return this.getToken(PostgreSQLParser.KW_THEN, i);
		}
	}
	public proc_sect(): Proc_sectContext[];
	public proc_sect(i: number): Proc_sectContext;
	public proc_sect(i?: number): Proc_sectContext | Proc_sectContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Proc_sectContext);
		} else {
			return this.getRuleContext(i, Proc_sectContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_elsifs; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_elsifs) {
			listener.enterStmt_elsifs(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_elsifs) {
			listener.exitStmt_elsifs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_elsifs) {
			return visitor.visitStmt_elsifs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_elseContext extends ParserRuleContext {
	public KW_ELSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ELSE, 0); }
	public proc_sect(): Proc_sectContext | undefined {
		return this.tryGetRuleContext(0, Proc_sectContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_else; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_else) {
			listener.enterStmt_else(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_else) {
			listener.exitStmt_else(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_else) {
			return visitor.visitStmt_else(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_caseContext extends ParserRuleContext {
	public KW_CASE(): TerminalNode[];
	public KW_CASE(i: number): TerminalNode;
	public KW_CASE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_CASE);
		} else {
			return this.getToken(PostgreSQLParser.KW_CASE, i);
		}
	}
	public opt_expr_until_when(): Opt_expr_until_whenContext {
		return this.getRuleContext(0, Opt_expr_until_whenContext);
	}
	public case_when_list(): Case_when_listContext {
		return this.getRuleContext(0, Case_when_listContext);
	}
	public opt_case_else(): Opt_case_elseContext {
		return this.getRuleContext(0, Opt_case_elseContext);
	}
	public KW_END(): TerminalNode { return this.getToken(PostgreSQLParser.KW_END, 0); }
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_case; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_case) {
			listener.enterStmt_case(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_case) {
			listener.exitStmt_case(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_case) {
			return visitor.visitStmt_case(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_expr_until_whenContext extends ParserRuleContext {
	public sql_expression(): Sql_expressionContext | undefined {
		return this.tryGetRuleContext(0, Sql_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_expr_until_when; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_expr_until_when) {
			listener.enterOpt_expr_until_when(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_expr_until_when) {
			listener.exitOpt_expr_until_when(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_expr_until_when) {
			return visitor.visitOpt_expr_until_when(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Case_when_listContext extends ParserRuleContext {
	public case_when(): Case_whenContext[];
	public case_when(i: number): Case_whenContext;
	public case_when(i?: number): Case_whenContext | Case_whenContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Case_whenContext);
		} else {
			return this.getRuleContext(i, Case_whenContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_case_when_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCase_when_list) {
			listener.enterCase_when_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCase_when_list) {
			listener.exitCase_when_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCase_when_list) {
			return visitor.visitCase_when_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Case_whenContext extends ParserRuleContext {
	public KW_WHEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHEN, 0); }
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	public KW_THEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_THEN, 0); }
	public proc_sect(): Proc_sectContext {
		return this.getRuleContext(0, Proc_sectContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_case_when; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCase_when) {
			listener.enterCase_when(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCase_when) {
			listener.exitCase_when(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCase_when) {
			return visitor.visitCase_when(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_case_elseContext extends ParserRuleContext {
	public KW_ELSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ELSE, 0); }
	public proc_sect(): Proc_sectContext | undefined {
		return this.tryGetRuleContext(0, Proc_sectContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_case_else; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_case_else) {
			listener.enterOpt_case_else(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_case_else) {
			listener.exitOpt_case_else(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_case_else) {
			return visitor.visitOpt_case_else(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_loopContext extends ParserRuleContext {
	public opt_loop_label(): Opt_loop_labelContext {
		return this.getRuleContext(0, Opt_loop_labelContext);
	}
	public loop_body(): Loop_bodyContext {
		return this.getRuleContext(0, Loop_bodyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_loop; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_loop) {
			listener.enterStmt_loop(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_loop) {
			listener.exitStmt_loop(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_loop) {
			return visitor.visitStmt_loop(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_whileContext extends ParserRuleContext {
	public opt_loop_label(): Opt_loop_labelContext {
		return this.getRuleContext(0, Opt_loop_labelContext);
	}
	public KW_WHILE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHILE, 0); }
	public expr_until_loop(): Expr_until_loopContext {
		return this.getRuleContext(0, Expr_until_loopContext);
	}
	public loop_body(): Loop_bodyContext {
		return this.getRuleContext(0, Loop_bodyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_while; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_while) {
			listener.enterStmt_while(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_while) {
			listener.exitStmt_while(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_while) {
			return visitor.visitStmt_while(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_forContext extends ParserRuleContext {
	public opt_loop_label(): Opt_loop_labelContext {
		return this.getRuleContext(0, Opt_loop_labelContext);
	}
	public KW_FOR(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOR, 0); }
	public for_control(): For_controlContext {
		return this.getRuleContext(0, For_controlContext);
	}
	public loop_body(): Loop_bodyContext {
		return this.getRuleContext(0, Loop_bodyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_for; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_for) {
			listener.enterStmt_for(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_for) {
			listener.exitStmt_for(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_for) {
			return visitor.visitStmt_for(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class For_controlContext extends ParserRuleContext {
	public for_variable(): For_variableContext {
		return this.getRuleContext(0, For_variableContext);
	}
	public KW_IN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_IN, 0); }
	public cursor_name(): Cursor_nameContext | undefined {
		return this.tryGetRuleContext(0, Cursor_nameContext);
	}
	public opt_cursor_parameters(): Opt_cursor_parametersContext | undefined {
		return this.tryGetRuleContext(0, Opt_cursor_parametersContext);
	}
	public selectstmt(): SelectstmtContext | undefined {
		return this.tryGetRuleContext(0, SelectstmtContext);
	}
	public explainstmt(): ExplainstmtContext | undefined {
		return this.tryGetRuleContext(0, ExplainstmtContext);
	}
	public KW_EXECUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXECUTE, 0); }
	public a_expr(): A_exprContext[];
	public a_expr(i: number): A_exprContext;
	public a_expr(i?: number): A_exprContext | A_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_exprContext);
		} else {
			return this.getRuleContext(i, A_exprContext);
		}
	}
	public opt_for_using_expression(): Opt_for_using_expressionContext | undefined {
		return this.tryGetRuleContext(0, Opt_for_using_expressionContext);
	}
	public opt_reverse(): Opt_reverseContext | undefined {
		return this.tryGetRuleContext(0, Opt_reverseContext);
	}
	public DOT_DOT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.DOT_DOT, 0); }
	public opt_by_expression(): Opt_by_expressionContext | undefined {
		return this.tryGetRuleContext(0, Opt_by_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_for_control; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFor_control) {
			listener.enterFor_control(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFor_control) {
			listener.exitFor_control(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFor_control) {
			return visitor.visitFor_control(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_for_using_expressionContext extends ParserRuleContext {
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_for_using_expression; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_for_using_expression) {
			listener.enterOpt_for_using_expression(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_for_using_expression) {
			listener.exitOpt_for_using_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_for_using_expression) {
			return visitor.visitOpt_for_using_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_cursor_parametersContext extends ParserRuleContext {
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public a_expr(): A_exprContext[];
	public a_expr(i: number): A_exprContext;
	public a_expr(i?: number): A_exprContext | A_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_exprContext);
		} else {
			return this.getRuleContext(i, A_exprContext);
		}
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_cursor_parameters; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_cursor_parameters) {
			listener.enterOpt_cursor_parameters(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_cursor_parameters) {
			listener.exitOpt_cursor_parameters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_cursor_parameters) {
			return visitor.visitOpt_cursor_parameters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_reverseContext extends ParserRuleContext {
	public KW_REVERSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REVERSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_reverse; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_reverse) {
			listener.enterOpt_reverse(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_reverse) {
			listener.exitOpt_reverse(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_reverse) {
			return visitor.visitOpt_reverse(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_by_expressionContext extends ParserRuleContext {
	public KW_BY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BY, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_by_expression; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_by_expression) {
			listener.enterOpt_by_expression(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_by_expression) {
			listener.exitOpt_by_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_by_expression) {
			return visitor.visitOpt_by_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class For_variableContext extends ParserRuleContext {
	public any_name_list(): Any_name_listContext {
		return this.getRuleContext(0, Any_name_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_for_variable; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterFor_variable) {
			listener.enterFor_variable(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitFor_variable) {
			listener.exitFor_variable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitFor_variable) {
			return visitor.visitFor_variable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_foreach_aContext extends ParserRuleContext {
	public opt_loop_label(): Opt_loop_labelContext {
		return this.getRuleContext(0, Opt_loop_labelContext);
	}
	public KW_FOREACH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FOREACH, 0); }
	public for_variable(): For_variableContext {
		return this.getRuleContext(0, For_variableContext);
	}
	public foreach_slice(): Foreach_sliceContext {
		return this.getRuleContext(0, Foreach_sliceContext);
	}
	public KW_IN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_IN, 0); }
	public KW_ARRAY(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ARRAY, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public loop_body(): Loop_bodyContext {
		return this.getRuleContext(0, Loop_bodyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_foreach_a; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_foreach_a) {
			listener.enterStmt_foreach_a(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_foreach_a) {
			listener.exitStmt_foreach_a(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_foreach_a) {
			return visitor.visitStmt_foreach_a(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Foreach_sliceContext extends ParserRuleContext {
	public KW_SLICE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SLICE, 0); }
	public iconst(): IconstContext | undefined {
		return this.tryGetRuleContext(0, IconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_foreach_slice; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterForeach_slice) {
			listener.enterForeach_slice(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitForeach_slice) {
			listener.exitForeach_slice(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitForeach_slice) {
			return visitor.visitForeach_slice(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_exitContext extends ParserRuleContext {
	public exit_type(): Exit_typeContext {
		return this.getRuleContext(0, Exit_typeContext);
	}
	public opt_label(): Opt_labelContext {
		return this.getRuleContext(0, Opt_labelContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	public opt_exitcond(): Opt_exitcondContext | undefined {
		return this.tryGetRuleContext(0, Opt_exitcondContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_exit; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_exit) {
			listener.enterStmt_exit(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_exit) {
			listener.exitStmt_exit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_exit) {
			return visitor.visitStmt_exit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exit_typeContext extends ParserRuleContext {
	public KW_EXIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXIT, 0); }
	public KW_CONTINUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONTINUE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_exit_type; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExit_type) {
			listener.enterExit_type(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExit_type) {
			listener.exitExit_type(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExit_type) {
			return visitor.visitExit_type(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_returnContext extends ParserRuleContext {
	public KW_RETURN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_RETURN, 0); }
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	public KW_NEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NEXT, 0); }
	public sql_expression(): Sql_expressionContext | undefined {
		return this.tryGetRuleContext(0, Sql_expressionContext);
	}
	public KW_QUERY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_QUERY, 0); }
	public opt_return_result(): Opt_return_resultContext | undefined {
		return this.tryGetRuleContext(0, Opt_return_resultContext);
	}
	public KW_EXECUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXECUTE, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public opt_for_using_expression(): Opt_for_using_expressionContext | undefined {
		return this.tryGetRuleContext(0, Opt_for_using_expressionContext);
	}
	public selectstmt(): SelectstmtContext | undefined {
		return this.tryGetRuleContext(0, SelectstmtContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_return; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_return) {
			listener.enterStmt_return(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_return) {
			listener.exitStmt_return(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_return) {
			return visitor.visitStmt_return(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_return_resultContext extends ParserRuleContext {
	public sql_expression(): Sql_expressionContext | undefined {
		return this.tryGetRuleContext(0, Sql_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_return_result; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_return_result) {
			listener.enterOpt_return_result(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_return_result) {
			listener.exitOpt_return_result(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_return_result) {
			return visitor.visitOpt_return_result(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_raiseContext extends ParserRuleContext {
	public KW_RAISE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_RAISE, 0); }
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	public opt_raise_list(): Opt_raise_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_raise_listContext);
	}
	public opt_raise_using(): Opt_raise_usingContext | undefined {
		return this.tryGetRuleContext(0, Opt_raise_usingContext);
	}
	public SEMI(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.SEMI, 0); }
	public opt_stmt_raise_level(): Opt_stmt_raise_levelContext | undefined {
		return this.tryGetRuleContext(0, Opt_stmt_raise_levelContext);
	}
	public identifier(): IdentifierContext | undefined {
		return this.tryGetRuleContext(0, IdentifierContext);
	}
	public KW_SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SQLSTATE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_raise; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_raise) {
			listener.enterStmt_raise(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_raise) {
			listener.exitStmt_raise(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_raise) {
			return visitor.visitStmt_raise(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_stmt_raise_levelContext extends ParserRuleContext {
	public KW_DEBUG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEBUG, 0); }
	public KW_LOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOG, 0); }
	public KW_INFO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INFO, 0); }
	public KW_NOTICE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOTICE, 0); }
	public KW_WARNING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WARNING, 0); }
	public KW_EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXCEPTION, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_stmt_raise_level; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_stmt_raise_level) {
			listener.enterOpt_stmt_raise_level(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_stmt_raise_level) {
			listener.exitOpt_stmt_raise_level(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_stmt_raise_level) {
			return visitor.visitOpt_stmt_raise_level(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_raise_listContext extends ParserRuleContext {
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	public a_expr(): A_exprContext[];
	public a_expr(i: number): A_exprContext;
	public a_expr(i?: number): A_exprContext | A_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_exprContext);
		} else {
			return this.getRuleContext(i, A_exprContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_raise_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_raise_list) {
			listener.enterOpt_raise_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_raise_list) {
			listener.exitOpt_raise_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_raise_list) {
			return visitor.visitOpt_raise_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_raise_usingContext extends ParserRuleContext {
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public opt_raise_using_elem_list(): Opt_raise_using_elem_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_raise_using_elem_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_raise_using; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_raise_using) {
			listener.enterOpt_raise_using(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_raise_using) {
			listener.exitOpt_raise_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_raise_using) {
			return visitor.visitOpt_raise_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_raise_using_elemContext extends ParserRuleContext {
	public identifier(): IdentifierContext {
		return this.getRuleContext(0, IdentifierContext);
	}
	public EQUAL(): TerminalNode { return this.getToken(PostgreSQLParser.EQUAL, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_raise_using_elem; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_raise_using_elem) {
			listener.enterOpt_raise_using_elem(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_raise_using_elem) {
			listener.exitOpt_raise_using_elem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_raise_using_elem) {
			return visitor.visitOpt_raise_using_elem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_raise_using_elem_listContext extends ParserRuleContext {
	public opt_raise_using_elem(): Opt_raise_using_elemContext[];
	public opt_raise_using_elem(i: number): Opt_raise_using_elemContext;
	public opt_raise_using_elem(i?: number): Opt_raise_using_elemContext | Opt_raise_using_elemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Opt_raise_using_elemContext);
		} else {
			return this.getRuleContext(i, Opt_raise_using_elemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_raise_using_elem_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_raise_using_elem_list) {
			listener.enterOpt_raise_using_elem_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_raise_using_elem_list) {
			listener.exitOpt_raise_using_elem_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_raise_using_elem_list) {
			return visitor.visitOpt_raise_using_elem_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_assertContext extends ParserRuleContext {
	public KW_ASSERT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ASSERT, 0); }
	public sql_expression(): Sql_expressionContext {
		return this.getRuleContext(0, Sql_expressionContext);
	}
	public opt_stmt_assert_message(): Opt_stmt_assert_messageContext {
		return this.getRuleContext(0, Opt_stmt_assert_messageContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_assert; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_assert) {
			listener.enterStmt_assert(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_assert) {
			listener.exitStmt_assert(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_assert) {
			return visitor.visitStmt_assert(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_stmt_assert_messageContext extends ParserRuleContext {
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COMMA, 0); }
	public sql_expression(): Sql_expressionContext | undefined {
		return this.tryGetRuleContext(0, Sql_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_stmt_assert_message; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_stmt_assert_message) {
			listener.enterOpt_stmt_assert_message(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_stmt_assert_message) {
			listener.exitOpt_stmt_assert_message(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_stmt_assert_message) {
			return visitor.visitOpt_stmt_assert_message(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Loop_bodyContext extends ParserRuleContext {
	public KW_LOOP(): TerminalNode[];
	public KW_LOOP(i: number): TerminalNode;
	public KW_LOOP(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_LOOP);
		} else {
			return this.getToken(PostgreSQLParser.KW_LOOP, i);
		}
	}
	public proc_sect(): Proc_sectContext {
		return this.getRuleContext(0, Proc_sectContext);
	}
	public KW_END(): TerminalNode { return this.getToken(PostgreSQLParser.KW_END, 0); }
	public opt_label(): Opt_labelContext {
		return this.getRuleContext(0, Opt_labelContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_loop_body; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterLoop_body) {
			listener.enterLoop_body(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitLoop_body) {
			listener.exitLoop_body(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitLoop_body) {
			return visitor.visitLoop_body(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_execsqlContext extends ParserRuleContext {
	public make_execsql_stmt(): Make_execsql_stmtContext {
		return this.getRuleContext(0, Make_execsql_stmtContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_execsql; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_execsql) {
			listener.enterStmt_execsql(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_execsql) {
			listener.exitStmt_execsql(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_execsql) {
			return visitor.visitStmt_execsql(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_dynexecuteContext extends ParserRuleContext {
	public KW_EXECUTE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_EXECUTE, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	public opt_execute_into(): Opt_execute_intoContext | undefined {
		return this.tryGetRuleContext(0, Opt_execute_intoContext);
	}
	public opt_execute_using(): Opt_execute_usingContext | undefined {
		return this.tryGetRuleContext(0, Opt_execute_usingContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_dynexecute; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_dynexecute) {
			listener.enterStmt_dynexecute(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_dynexecute) {
			listener.exitStmt_dynexecute(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_dynexecute) {
			return visitor.visitStmt_dynexecute(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_execute_usingContext extends ParserRuleContext {
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public opt_execute_using_list(): Opt_execute_using_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_execute_using_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_execute_using; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_execute_using) {
			listener.enterOpt_execute_using(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_execute_using) {
			listener.exitOpt_execute_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_execute_using) {
			return visitor.visitOpt_execute_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_execute_using_listContext extends ParserRuleContext {
	public a_expr(): A_exprContext[];
	public a_expr(i: number): A_exprContext;
	public a_expr(i?: number): A_exprContext | A_exprContext[] {
		if (i === undefined) {
			return this.getRuleContexts(A_exprContext);
		} else {
			return this.getRuleContext(i, A_exprContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_execute_using_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_execute_using_list) {
			listener.enterOpt_execute_using_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_execute_using_list) {
			listener.exitOpt_execute_using_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_execute_using_list) {
			return visitor.visitOpt_execute_using_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_execute_intoContext extends ParserRuleContext {
	public KW_INTO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INTO, 0); }
	public into_target(): Into_targetContext | undefined {
		return this.tryGetRuleContext(0, Into_targetContext);
	}
	public KW_STRICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STRICT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_execute_into; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_execute_into) {
			listener.enterOpt_execute_into(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_execute_into) {
			listener.exitOpt_execute_into(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_execute_into) {
			return visitor.visitOpt_execute_into(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_openContext extends ParserRuleContext {
	public KW_OPEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_OPEN, 0); }
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	public cursor_variable(): Cursor_variableContext | undefined {
		return this.tryGetRuleContext(0, Cursor_variableContext);
	}
	public opt_scroll_option(): Opt_scroll_optionContext | undefined {
		return this.tryGetRuleContext(0, Opt_scroll_optionContext);
	}
	public KW_FOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FOR, 0); }
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public selectstmt(): SelectstmtContext | undefined {
		return this.tryGetRuleContext(0, SelectstmtContext);
	}
	public KW_EXECUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXECUTE, 0); }
	public sql_expression(): Sql_expressionContext | undefined {
		return this.tryGetRuleContext(0, Sql_expressionContext);
	}
	public opt_open_using(): Opt_open_usingContext | undefined {
		return this.tryGetRuleContext(0, Opt_open_usingContext);
	}
	public OPEN_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.OPEN_PAREN, 0); }
	public opt_open_bound_list(): Opt_open_bound_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_open_bound_listContext);
	}
	public CLOSE_PAREN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.CLOSE_PAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_open; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_open) {
			listener.enterStmt_open(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_open) {
			listener.exitStmt_open(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_open) {
			return visitor.visitStmt_open(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_open_bound_list_itemContext extends ParserRuleContext {
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public COLON_EQUALS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.COLON_EQUALS, 0); }
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_open_bound_list_item; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_open_bound_list_item) {
			listener.enterOpt_open_bound_list_item(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_open_bound_list_item) {
			listener.exitOpt_open_bound_list_item(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_open_bound_list_item) {
			return visitor.visitOpt_open_bound_list_item(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_open_bound_listContext extends ParserRuleContext {
	public opt_open_bound_list_item(): Opt_open_bound_list_itemContext[];
	public opt_open_bound_list_item(i: number): Opt_open_bound_list_itemContext;
	public opt_open_bound_list_item(i?: number): Opt_open_bound_list_itemContext | Opt_open_bound_list_itemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Opt_open_bound_list_itemContext);
		} else {
			return this.getRuleContext(i, Opt_open_bound_list_itemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.COMMA);
		} else {
			return this.getToken(PostgreSQLParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_open_bound_list; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_open_bound_list) {
			listener.enterOpt_open_bound_list(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_open_bound_list) {
			listener.exitOpt_open_bound_list(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_open_bound_list) {
			return visitor.visitOpt_open_bound_list(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_open_usingContext extends ParserRuleContext {
	public KW_USING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USING, 0); }
	public expr_list(): Expr_listContext | undefined {
		return this.tryGetRuleContext(0, Expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_open_using; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_open_using) {
			listener.enterOpt_open_using(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_open_using) {
			listener.exitOpt_open_using(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_open_using) {
			return visitor.visitOpt_open_using(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_scroll_optionContext extends ParserRuleContext {
	public opt_scroll_option_no(): Opt_scroll_option_noContext | undefined {
		return this.tryGetRuleContext(0, Opt_scroll_option_noContext);
	}
	public KW_SCROLL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCROLL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_scroll_option; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_scroll_option) {
			listener.enterOpt_scroll_option(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_scroll_option) {
			listener.exitOpt_scroll_option(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_scroll_option) {
			return visitor.visitOpt_scroll_option(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_scroll_option_noContext extends ParserRuleContext {
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_scroll_option_no; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_scroll_option_no) {
			listener.enterOpt_scroll_option_no(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_scroll_option_no) {
			listener.exitOpt_scroll_option_no(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_scroll_option_no) {
			return visitor.visitOpt_scroll_option_no(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_fetchContext extends ParserRuleContext {
	public _direction!: Opt_fetch_directionContext;
	public KW_FETCH(): TerminalNode { return this.getToken(PostgreSQLParser.KW_FETCH, 0); }
	public opt_cursor_from(): Opt_cursor_fromContext {
		return this.getRuleContext(0, Opt_cursor_fromContext);
	}
	public cursor_variable(): Cursor_variableContext {
		return this.getRuleContext(0, Cursor_variableContext);
	}
	public KW_INTO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INTO, 0); }
	public into_target(): Into_targetContext {
		return this.getRuleContext(0, Into_targetContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	public opt_fetch_direction(): Opt_fetch_directionContext | undefined {
		return this.tryGetRuleContext(0, Opt_fetch_directionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_fetch; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_fetch) {
			listener.enterStmt_fetch(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_fetch) {
			listener.exitStmt_fetch(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_fetch) {
			return visitor.visitStmt_fetch(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Into_targetContext extends ParserRuleContext {
	public expr_list(): Expr_listContext {
		return this.getRuleContext(0, Expr_listContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_into_target; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterInto_target) {
			listener.enterInto_target(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitInto_target) {
			listener.exitInto_target(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitInto_target) {
			return visitor.visitInto_target(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_cursor_fromContext extends ParserRuleContext {
	public KW_FROM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FROM, 0); }
	public KW_IN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_cursor_from; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_cursor_from) {
			listener.enterOpt_cursor_from(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_cursor_from) {
			listener.exitOpt_cursor_from(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_cursor_from) {
			return visitor.visitOpt_cursor_from(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_fetch_directionContext extends ParserRuleContext {
	public KW_NEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NEXT, 0); }
	public KW_PRIOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRIOR, 0); }
	public KW_FIRST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FIRST, 0); }
	public KW_LAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LAST, 0); }
	public KW_ABSOLUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ABSOLUTE, 0); }
	public a_expr(): A_exprContext | undefined {
		return this.tryGetRuleContext(0, A_exprContext);
	}
	public KW_RELATIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RELATIVE, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	public KW_FORWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FORWARD, 0); }
	public KW_BACKWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BACKWARD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_fetch_direction; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_fetch_direction) {
			listener.enterOpt_fetch_direction(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_fetch_direction) {
			listener.exitOpt_fetch_direction(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_fetch_direction) {
			return visitor.visitOpt_fetch_direction(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_moveContext extends ParserRuleContext {
	public KW_MOVE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_MOVE, 0); }
	public cursor_variable(): Cursor_variableContext {
		return this.getRuleContext(0, Cursor_variableContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	public opt_fetch_direction(): Opt_fetch_directionContext | undefined {
		return this.tryGetRuleContext(0, Opt_fetch_directionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_move; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_move) {
			listener.enterStmt_move(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_move) {
			listener.exitStmt_move(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_move) {
			return visitor.visitStmt_move(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_closeContext extends ParserRuleContext {
	public KW_CLOSE(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CLOSE, 0); }
	public cursor_variable(): Cursor_variableContext {
		return this.getRuleContext(0, Cursor_variableContext);
	}
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_close; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_close) {
			listener.enterStmt_close(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_close) {
			listener.exitStmt_close(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_close) {
			return visitor.visitStmt_close(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_nullContext extends ParserRuleContext {
	public KW_NULL(): TerminalNode { return this.getToken(PostgreSQLParser.KW_NULL, 0); }
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_null; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_null) {
			listener.enterStmt_null(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_null) {
			listener.exitStmt_null(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_null) {
			return visitor.visitStmt_null(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_commitContext extends ParserRuleContext {
	public KW_COMMIT(): TerminalNode { return this.getToken(PostgreSQLParser.KW_COMMIT, 0); }
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	public plsql_opt_transaction_chain(): Plsql_opt_transaction_chainContext | undefined {
		return this.tryGetRuleContext(0, Plsql_opt_transaction_chainContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_commit; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_commit) {
			listener.enterStmt_commit(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_commit) {
			listener.exitStmt_commit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_commit) {
			return visitor.visitStmt_commit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_rollbackContext extends ParserRuleContext {
	public KW_ROLLBACK(): TerminalNode { return this.getToken(PostgreSQLParser.KW_ROLLBACK, 0); }
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	public plsql_opt_transaction_chain(): Plsql_opt_transaction_chainContext | undefined {
		return this.tryGetRuleContext(0, Plsql_opt_transaction_chainContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_rollback; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_rollback) {
			listener.enterStmt_rollback(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_rollback) {
			listener.exitStmt_rollback(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_rollback) {
			return visitor.visitStmt_rollback(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Plsql_opt_transaction_chainContext extends ParserRuleContext {
	public KW_AND(): TerminalNode { return this.getToken(PostgreSQLParser.KW_AND, 0); }
	public KW_CHAIN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_CHAIN, 0); }
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_plsql_opt_transaction_chain; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPlsql_opt_transaction_chain) {
			listener.enterPlsql_opt_transaction_chain(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPlsql_opt_transaction_chain) {
			listener.exitPlsql_opt_transaction_chain(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPlsql_opt_transaction_chain) {
			return visitor.visitPlsql_opt_transaction_chain(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Stmt_setContext extends ParserRuleContext {
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public any_name(): Any_nameContext | undefined {
		return this.tryGetRuleContext(0, Any_nameContext);
	}
	public KW_TO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TO, 0); }
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	public SEMI(): TerminalNode { return this.getToken(PostgreSQLParser.SEMI, 0); }
	public KW_RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESET, 0); }
	public KW_ALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_stmt_set; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterStmt_set) {
			listener.enterStmt_set(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitStmt_set) {
			listener.exitStmt_set(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitStmt_set) {
			return visitor.visitStmt_set(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Cursor_variableContext extends ParserRuleContext {
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public PARAM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.PARAM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_cursor_variable; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterCursor_variable) {
			listener.enterCursor_variable(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitCursor_variable) {
			listener.exitCursor_variable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitCursor_variable) {
			return visitor.visitCursor_variable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Exception_sectContext extends ParserRuleContext {
	public KW_EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXCEPTION, 0); }
	public proc_exceptions(): Proc_exceptionsContext | undefined {
		return this.tryGetRuleContext(0, Proc_exceptionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_exception_sect; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterException_sect) {
			listener.enterException_sect(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitException_sect) {
			listener.exitException_sect(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitException_sect) {
			return visitor.visitException_sect(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Proc_exceptionsContext extends ParserRuleContext {
	public proc_exception(): Proc_exceptionContext[];
	public proc_exception(i: number): Proc_exceptionContext;
	public proc_exception(i?: number): Proc_exceptionContext | Proc_exceptionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Proc_exceptionContext);
		} else {
			return this.getRuleContext(i, Proc_exceptionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_proc_exceptions; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterProc_exceptions) {
			listener.enterProc_exceptions(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitProc_exceptions) {
			listener.exitProc_exceptions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitProc_exceptions) {
			return visitor.visitProc_exceptions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Proc_exceptionContext extends ParserRuleContext {
	public KW_WHEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHEN, 0); }
	public proc_conditions(): Proc_conditionsContext {
		return this.getRuleContext(0, Proc_conditionsContext);
	}
	public KW_THEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_THEN, 0); }
	public proc_sect(): Proc_sectContext {
		return this.getRuleContext(0, Proc_sectContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_proc_exception; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterProc_exception) {
			listener.enterProc_exception(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitProc_exception) {
			listener.exitProc_exception(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitProc_exception) {
			return visitor.visitProc_exception(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Proc_conditionsContext extends ParserRuleContext {
	public proc_condition(): Proc_conditionContext[];
	public proc_condition(i: number): Proc_conditionContext;
	public proc_condition(i?: number): Proc_conditionContext | Proc_conditionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(Proc_conditionContext);
		} else {
			return this.getRuleContext(i, Proc_conditionContext);
		}
	}
	public KW_OR(): TerminalNode[];
	public KW_OR(i: number): TerminalNode;
	public KW_OR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(PostgreSQLParser.KW_OR);
		} else {
			return this.getToken(PostgreSQLParser.KW_OR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_proc_conditions; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterProc_conditions) {
			listener.enterProc_conditions(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitProc_conditions) {
			listener.exitProc_conditions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitProc_conditions) {
			return visitor.visitProc_conditions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Proc_conditionContext extends ParserRuleContext {
	public any_identifier(): Any_identifierContext | undefined {
		return this.tryGetRuleContext(0, Any_identifierContext);
	}
	public KW_SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SQLSTATE, 0); }
	public sconst(): SconstContext | undefined {
		return this.tryGetRuleContext(0, SconstContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_proc_condition; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterProc_condition) {
			listener.enterProc_condition(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitProc_condition) {
			listener.exitProc_condition(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitProc_condition) {
			return visitor.visitProc_condition(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_block_labelContext extends ParserRuleContext {
	public label_decl(): Label_declContext | undefined {
		return this.tryGetRuleContext(0, Label_declContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_block_label; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_block_label) {
			listener.enterOpt_block_label(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_block_label) {
			listener.exitOpt_block_label(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_block_label) {
			return visitor.visitOpt_block_label(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_loop_labelContext extends ParserRuleContext {
	public label_decl(): Label_declContext | undefined {
		return this.tryGetRuleContext(0, Label_declContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_loop_label; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_loop_label) {
			listener.enterOpt_loop_label(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_loop_label) {
			listener.exitOpt_loop_label(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_loop_label) {
			return visitor.visitOpt_loop_label(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_labelContext extends ParserRuleContext {
	public any_identifier(): Any_identifierContext | undefined {
		return this.tryGetRuleContext(0, Any_identifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_label; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_label) {
			listener.enterOpt_label(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_label) {
			listener.exitOpt_label(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_label) {
			return visitor.visitOpt_label(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_exitcondContext extends ParserRuleContext {
	public KW_WHEN(): TerminalNode { return this.getToken(PostgreSQLParser.KW_WHEN, 0); }
	public expr_until_semi(): Expr_until_semiContext {
		return this.getRuleContext(0, Expr_until_semiContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_exitcond; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_exitcond) {
			listener.enterOpt_exitcond(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_exitcond) {
			listener.exitOpt_exitcond(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_exitcond) {
			return visitor.visitOpt_exitcond(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Any_identifierContext extends ParserRuleContext {
	public colid(): ColidContext | undefined {
		return this.tryGetRuleContext(0, ColidContext);
	}
	public plsql_unreserved_keyword(): Plsql_unreserved_keywordContext | undefined {
		return this.tryGetRuleContext(0, Plsql_unreserved_keywordContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_any_identifier; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterAny_identifier) {
			listener.enterAny_identifier(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitAny_identifier) {
			listener.exitAny_identifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitAny_identifier) {
			return visitor.visitAny_identifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Plsql_unreserved_keywordContext extends ParserRuleContext {
	public KW_ABSOLUTE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ABSOLUTE, 0); }
	public KW_ALIAS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ALIAS, 0); }
	public KW_AND(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_AND, 0); }
	public KW_ARRAY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ARRAY, 0); }
	public KW_ASSERT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ASSERT, 0); }
	public KW_BACKWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_BACKWARD, 0); }
	public KW_CALL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CALL, 0); }
	public KW_CHAIN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CHAIN, 0); }
	public KW_CLOSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CLOSE, 0); }
	public KW_COLLATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLLATE, 0); }
	public KW_COLUMN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COLUMN, 0); }
	public KW_COMMIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_COMMIT, 0); }
	public KW_CONSTANT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTANT, 0); }
	public KW_CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONSTRAINT, 0); }
	public KW_CONTINUE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CONTINUE, 0); }
	public KW_CURRENT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURRENT, 0); }
	public KW_CURSOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_CURSOR, 0); }
	public KW_DEBUG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEBUG, 0); }
	public KW_DEFAULT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DEFAULT, 0); }
	public KW_DIAGNOSTICS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DIAGNOSTICS, 0); }
	public KW_DO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DO, 0); }
	public KW_DUMP(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_DUMP, 0); }
	public KW_ELSIF(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ELSIF, 0); }
	public KW_ERROR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ERROR, 0); }
	public KW_EXCEPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXCEPTION, 0); }
	public KW_EXIT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_EXIT, 0); }
	public KW_FETCH(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FETCH, 0); }
	public KW_FIRST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FIRST, 0); }
	public KW_FORWARD(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_FORWARD, 0); }
	public KW_GET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_GET, 0); }
	public KW_INFO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INFO, 0); }
	public KW_INSERT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_INSERT, 0); }
	public KW_IS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_IS, 0); }
	public KW_LAST(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LAST, 0); }
	public KW_LOG(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_LOG, 0); }
	public KW_MOVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_MOVE, 0); }
	public KW_NEXT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NEXT, 0); }
	public KW_NO(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NO, 0); }
	public KW_NOTICE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_NOTICE, 0); }
	public KW_OPEN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPEN, 0); }
	public KW_OPTION(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OPTION, 0); }
	public KW_PERFORM(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PERFORM, 0); }
	public KW_PRINT_STRICT_PARAMS(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRINT_STRICT_PARAMS, 0); }
	public KW_PRIOR(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_PRIOR, 0); }
	public KW_QUERY(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_QUERY, 0); }
	public KW_RAISE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RAISE, 0); }
	public KW_RELATIVE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RELATIVE, 0); }
	public KW_RESET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RESET, 0); }
	public KW_RETURN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_RETURN, 0); }
	public KW_REVERSE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_REVERSE, 0); }
	public KW_ROLLBACK(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROLLBACK, 0); }
	public KW_ROWTYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_ROWTYPE, 0); }
	public KW_SCHEMA(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCHEMA, 0); }
	public KW_SCROLL(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SCROLL, 0); }
	public KW_SET(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SET, 0); }
	public KW_SLICE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SLICE, 0); }
	public KW_SQLSTATE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_SQLSTATE, 0); }
	public KW_STACKED(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_STACKED, 0); }
	public KW_TABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TABLE, 0); }
	public KW_TYPE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_TYPE, 0); }
	public KW_USE_COLUMN(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USE_COLUMN, 0); }
	public KW_USE_VARIABLE(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_USE_VARIABLE, 0); }
	public KW_VARIABLE_CONFLICT(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_VARIABLE_CONFLICT, 0); }
	public KW_WARNING(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_WARNING, 0); }
	public KW_OUTER(): TerminalNode | undefined { return this.tryGetToken(PostgreSQLParser.KW_OUTER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_plsql_unreserved_keyword; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterPlsql_unreserved_keyword) {
			listener.enterPlsql_unreserved_keyword(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitPlsql_unreserved_keyword) {
			listener.exitPlsql_unreserved_keyword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitPlsql_unreserved_keyword) {
			return visitor.visitPlsql_unreserved_keyword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Sql_expressionContext extends ParserRuleContext {
	public opt_target_list(): Opt_target_listContext | undefined {
		return this.tryGetRuleContext(0, Opt_target_listContext);
	}
	public into_clause(): Into_clauseContext | undefined {
		return this.tryGetRuleContext(0, Into_clauseContext);
	}
	public from_clause(): From_clauseContext | undefined {
		return this.tryGetRuleContext(0, From_clauseContext);
	}
	public where_clause(): Where_clauseContext | undefined {
		return this.tryGetRuleContext(0, Where_clauseContext);
	}
	public group_clause(): Group_clauseContext | undefined {
		return this.tryGetRuleContext(0, Group_clauseContext);
	}
	public having_clause(): Having_clauseContext | undefined {
		return this.tryGetRuleContext(0, Having_clauseContext);
	}
	public window_clause(): Window_clauseContext | undefined {
		return this.tryGetRuleContext(0, Window_clauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_sql_expression; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterSql_expression) {
			listener.enterSql_expression(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitSql_expression) {
			listener.exitSql_expression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitSql_expression) {
			return visitor.visitSql_expression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_until_thenContext extends ParserRuleContext {
	public sql_expression(): Sql_expressionContext {
		return this.getRuleContext(0, Sql_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_expr_until_then; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExpr_until_then) {
			listener.enterExpr_until_then(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExpr_until_then) {
			listener.exitExpr_until_then(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExpr_until_then) {
			return visitor.visitExpr_until_then(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_until_semiContext extends ParserRuleContext {
	public sql_expression(): Sql_expressionContext {
		return this.getRuleContext(0, Sql_expressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_expr_until_semi; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExpr_until_semi) {
			listener.enterExpr_until_semi(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExpr_until_semi) {
			listener.exitExpr_until_semi(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExpr_until_semi) {
			return visitor.visitExpr_until_semi(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_until_rightbracketContext extends ParserRuleContext {
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_expr_until_rightbracket; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExpr_until_rightbracket) {
			listener.enterExpr_until_rightbracket(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExpr_until_rightbracket) {
			listener.exitExpr_until_rightbracket(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExpr_until_rightbracket) {
			return visitor.visitExpr_until_rightbracket(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expr_until_loopContext extends ParserRuleContext {
	public a_expr(): A_exprContext {
		return this.getRuleContext(0, A_exprContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_expr_until_loop; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterExpr_until_loop) {
			listener.enterExpr_until_loop(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitExpr_until_loop) {
			listener.exitExpr_until_loop(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitExpr_until_loop) {
			return visitor.visitExpr_until_loop(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Make_execsql_stmtContext extends ParserRuleContext {
	public stmt(): StmtContext {
		return this.getRuleContext(0, StmtContext);
	}
	public opt_returning_clause_into(): Opt_returning_clause_intoContext | undefined {
		return this.tryGetRuleContext(0, Opt_returning_clause_intoContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_make_execsql_stmt; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterMake_execsql_stmt) {
			listener.enterMake_execsql_stmt(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitMake_execsql_stmt) {
			listener.exitMake_execsql_stmt(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitMake_execsql_stmt) {
			return visitor.visitMake_execsql_stmt(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Opt_returning_clause_intoContext extends ParserRuleContext {
	public KW_INTO(): TerminalNode { return this.getToken(PostgreSQLParser.KW_INTO, 0); }
	public opt_strict(): Opt_strictContext {
		return this.getRuleContext(0, Opt_strictContext);
	}
	public into_target(): Into_targetContext {
		return this.getRuleContext(0, Into_targetContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return PostgreSQLParser.RULE_opt_returning_clause_into; }
	// @Override
	public enterRule(listener: PostgreSQLParserListener): void {
		if (listener.enterOpt_returning_clause_into) {
			listener.enterOpt_returning_clause_into(this);
		}
	}
	// @Override
	public exitRule(listener: PostgreSQLParserListener): void {
		if (listener.exitOpt_returning_clause_into) {
			listener.exitOpt_returning_clause_into(this);
		}
	}
	// @Override
	public accept<Result>(visitor: PostgreSQLParserVisitor<Result>): Result {
		if (visitor.visitOpt_returning_clause_into) {
			return visitor.visitOpt_returning_clause_into(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


